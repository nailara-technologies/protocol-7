
 .:[ nailara 'core' [ local routing ] agent ]:.

[load_config_file:'shared-params']
system.verbosity.agent_buffer = 1

# change priority
[base.renice:-13]

# loading core agent authentication setup
[load_config_file:'agents/core/core-auth.users']
[load_config_file:'agents/core/core-auth.agents']

# load command access permission setup
[load_config_file:'agents/core/access.agents']
[load_config_file:'agents/core/access.users']

system.agent.type               =    core
modules.load                    =    auth digest net io.ip io.unix \
                                     core.cmd crypt.random crypt.C25519
plugins.load                    =    plugin.auth
auth.supported_methods          =    agent enc pwd unix
# get.route                     =    file node_name.file :target:
get.command                     =    file.get
setup.aliases.source_agent_sid  =    history.append nroot.report-temp-path
setup.aliases.source_agent      =    notify.message layout.get_coordinates \
                                     layout.get_geometry nroot.teardown \
                                     layout.assign_window system.pid_autokill

net.auth.timeout = 13   # nailara protocol

# loading additional (.json) configuration files from /etc/nailara/import/
# modules.pre_load = core.settings settings.json
# [load_modules:<modules.pre_load>]
# [init_modules:<modules.pre_load>]
# [settings.json.import_file:'core.auth_setup_usr.json']
# [settings.json.import_file:'core.access_cmd.json']

# load and initialize modules
[load_modules:<modules.load>]
[init_modules] # LLL: fix redundant initializations: modules.pre_load

# loading [authentication] plugins
[load_plugins:<plugins.load>]

# calulated network addr/port
core.local = <nailara.net.int>

# open local unix domain socket
[file.make_path:'/tmp/.n/s',0777]
unix.path = [digest.elf.b32:"<core.local.addr>:<core.local.port>"]
unix.sock = [base.open:'unix','in',"/tmp/.n/s/<unix.path>"]

# open ip.tcp socket
tcp_ip.sock = [base.open:'ip.tcp','in',<core.local.addr>,<core.local.port>]

# drop root priviledges
[set_privs:'nailara']

# bind nailara protocol to socket
[base.proto.bind:<unix.sock>,'nailara']
[base.proto.bind:<tcp_ip.sock>,'nailara']

# run agent
[event.loop]
