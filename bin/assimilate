#!/usr/bin/perl

use Digest::MD5 qw(md5_hex);
use Digest::SHA1 qw(sha1_hex);

$file_dir = "/data/files";

assimilate();

sub assimilate {

    foreach my $file (@ARGV) {

        if ( not -d $file and open( FILE, '<', $file ) ) {

            my ($dev,   $ino,     $mode, $nlink, $uid,
                $gid,   $rdev,    $size, $atime, $mtime,
                $ctime, $blksize, $blocks
            ) = stat($file);

            $format = `/usr/bin/file \'$file\'`;
            $format =~ s/^.+\: |\n//g;

            $filename = $file;
            $file =~ s/.*\///g;

            if ( $maxsize < length($file) ) { $maxsize = length($file) + 2 }

            print pack( "A" . $maxsize, $file ) . "$size bytes\n";

            $DATA{'file'}{$file}{'file.format'}   = $format;
            $DATA{'file'}{$file}{'file.name'}     = $file;
            $DATA{'file'}{$file}{'file.included'} = time();
            $DATA{'file'}{$file}{'file.size'}     = $size;

            #            $DATA{'file'}{$file}{'file.mode'}  = $mode;
            $DATA{'file'}{$file}{'file.mtime'} = $mtime;

            my $ctx = Digest::MD5->new;
            $ctx->addfile(*FILE);
            $DATA{'file'}{$file}{'file.hash.md5'} = $ctx->hexdigest;

            if ( $size < ( 1024 * 1024 ) ) {
                seek( FILE, 0, 0 );
                my $ctx = Digest::SHA1->new;
                $ctx->addfile(*FILE);
                $DATA{'file'}{$file}{'file.hash.sha1'} = $ctx->hexdigest;
            }

            my $header        = file_header($file);
            my $damn_filename = $DATA{'file'}{$file}{'file.hash.md5'} . '-'
                . sha1_hex($header);
            open( NEWFILE, '>', "$file_dir/$damn_filename" )
                or die "$filename: $!\n";
            print NEWFILE $header;
            seek( FILE, 0, 0 );

            $buffersize = 1024 * 1024 * 2;

            binmode(FILE);
            binmode(NEWFILE);

            while ( sysread( FILE, $buffer, $buffersize ) ) {
                syswrite( NEWFILE, $buffer );
            }

            close(FILE);
            close(NEWFILE);
        }
    }
}

sub file_header {
    my $file = $_[0];
    if ( %{ $DATA{'file'}{$file} } ) {
        my $header = ">:]\n\n:\n";
        foreach $_key ( sort( keys( %{ $DATA{'file'}{$file} } ) ) ) {
            $header .= "$_key\t=\t" . $DATA{'file'}{$file}{$_key} . "\n";
        }
        $header .= ":\n\n";
        return $header;
    } else {
        print "$file: no data present. skipping..\n";
        return undef;
    }
}
