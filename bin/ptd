#!/usr/bin/perl
use v5.24;
use strict;
use English;
use warnings;
use Time::HiRes;
use Term::ReadKey;    ## <-- replace with AMOS7::TERM ##
use Cwd qw| abs_path |;
use List::MoreUtils qw| minmax uniq |;
use File::Which qw| which |;
use Time::HiRes qw| sleep |;

##[ global constants ]##
use constant TRUE  => 5;    ##  TRUE.  ##
use constant FALSE => 0;    ##  false  ##

my $no_utf8 = FALSE;        ##  false  ##

$no_utf8 = TRUE
    if @ARGV > 1
    and defined $ARGV[0]
    and $ARGV[0] eq qw| :noutf8: |
    and shift @ARGV;

$OUTPUT_AUTOFLUSH = TRUE;    ## true ##

my @ptd_args = qw|-q -pbp -utf8 -l=78 -bar -sot -ce -nst -b -bext='/backup'|;

@ptd_args = grep { $ARG ne qw| -utf8 | } @ptd_args if $no_utf8;

my $reset             = "\e[0m";
my $nailara_bg        = "\e[48;2;9;5;42m";
my $blacklight        = "\e[38;2;68;39;172m";
my $nailara_fg        = "\e[38;2;38;46;153m";
my $TRUE_color        = "\e[38;2;6;71;195m";
my $NEON_orange       = "\e[38;2;197;141;7m";
my $NEON_green_yellow = "\e[38;2;71;195;6m";

$SIG{'INT'} = \&sig_int;

my $ptd_bin = which qw| perltidy |;
die ":\n:: < ptd > : 'perltidy' executable not found in current path .,\n\n"
    if not length($ptd_bin)
    or not -x $ptd_bin;

## filter filenames for protocol-7 \ perl code ##
my @files = grep { is_perl_code($ARG) }
    uniq sort { length $a <=> length $b } reverse sort @ARGV;

die ":\n:: < ${NEON_green_yellow}ptd$reset > $reset:$NEON_orange "
    . "expected ${NEON_green_yellow}[${NEON_orange}perl"
    . "${NEON_green_yellow}]${NEON_orange} file name${NEON_green_yellow}"
    . "[${NEON_orange}s${NEON_green_yellow}]${NEON_orange}.,$reset\n:\n"
    if not @files;

map {
    die ":\n:: < ${NEON_green_yellow}ptd$reset > $reset:$NEON_orange "
        . "not found $reset : '$NEON_green_yellow$ARG$reset' $reset\n:\n"
        if not -f $ARG
} @files;

my $file_count = scalar @files;

( undef, my $file_maxlen ) = minmax map {length} @files;

say $blacklight, qw| : |;

while ( my $file_path = shift @files ) {
    show_progress( $file_path, $file_count - scalar @files, $file_count );

    ## todo : use capurex , replace ReadKey .. [ using AMOS7::TERM ] ##

    ReadMode TRUE;
    no warnings;
    my $return_code = eval { system( $ptd_bin, @ptd_args, $file_path ) };
    use warnings;
    ReadMode 0;

    sleep 0.13;

    if ( not defined $return_code or $return_code != 0 ) {
        my $err_msg = lcfirst( $OS_ERROR // $EVAL_ERROR );
        $err_msg = 'syntax error in perl code' if $return_code == 512;
        my $colored_msg = color_msg( $err_msg, $file_path );
        if ( $return_code == 512 ) {
            warn $colored_msg;
            Time::HiRes::sleep 2.1;
        } else {
            die $colored_msg;
        }
    }
}

say "\n$blacklight:$reset";
exit(0);

sub color_msg {
    my $err_msg   = shift;
    my $file_path = shift;
    my $color     = shift // $NEON_orange;
    my $colored_msg
        = "\n$blacklight:\n::[$color $err_msg $blacklight] "
        . ".: $color$file_path$blacklight ::\n:$reset\n";
}

sub sort_files {
    return () if not @ARG;
    return sort { length $a <=> length $b } reverse sort @ARG;
}

sub is_perl_code {
    my $file = shift;
    return FALSE if not -f $file or -z $file;
    my $is_code = 0;    ##  false  ##
    open( my $fh, qw| < |, $file ) or die ":\n:: \l$OS_ERROR :: $file\n:\n";
    my $first_line = '';
    while (
        $first_line ne '## [:< ##'    ## <- protocol-7 source code header ##
        and $first_line =~ m{^\s*($|(use|my|our)\s.+;|#(*nla:!))}
    ) {
        $first_line = readline($fh);
        if ( not defined $first_line ) {
            last;    ##  false  ##  [ possibly comments only ]
        } else {
            chomp($first_line);
        }
    }

    if ( defined $first_line ) {
        $is_code = TRUE    ## true ##
            if $first_line eq '## [:< ##'
            or $first_line =~ m|^#!.*perl|
            or $first_line =~ m|^package .+;(\s*#.*)?$|
            or $file       =~ m|\.pm$|;                   ## perl module ##
    }

    print color_msg( 'skipping config.,', $file, $blacklight )
        and return FALSE                                  ##  false  ##
        if $is_code
        and index( abs_path($file), qw| /configuration/ |, 0 ) != -1;

    close($fh) or die ":\n:: \l$OS_ERROR :: $file\n:\n";
    return $is_code;
}

sub sig_int {
    print "\b\b::\b\b\r$blacklight\:::\n:\n:: [ ${NEON_orange}SIG"
        . "INT$blacklight ] $NEON_green_yellow perltidy run "
        . "aborted$blacklight ..,\n:$reset\n";
    exit('000113');
}

sub show_progress {
    my $filename    = shift;
    my $file_num    = shift;
    my $files_total = shift;
    my $chars_max   = 13;
    my $character   = qw| : |;
    my $char_count  = int( $chars_max * $file_num / $files_total );
    my $perc_chars  = $character x $char_count;

    printf( "\r${blacklight}:::[$nailara_bg$TRUE_color%-${chars_max}s"
            . "$reset$blacklight]:"
            . "::[$nailara_bg$TRUE_color %-${file_maxlen}s"
            . " $reset$blacklight]:.$reset\r",
        $perc_chars, $filename );
}

#,,,,,,,,,..,,,,,,...,...,,,,,,,.,,.,,,,,,,,.,..,,...,...,..,,...,.,.,..,,,,,,
#OVFX6RMXM4H6DRUU344D4D4TAU5JPV7M5ZIHVMHK3SY55XCDQX2YLTBBJZ5L7TKBMC4FWNKGN4KNG
#\\\|FULQQXIPCLH5X25UVQV2XXBNZHL6S4KEEG2ZQEMTL442SRDM75D \ / AMOS7 \ YOURUM ::
#\[7]YHFDBZKDWOY6J5SDP5I3LRRVV3US27XALE62WOZ4X4NTI5JZGSBY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
