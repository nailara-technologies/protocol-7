#!/usr/bin/perl
use v5.24;
use strict;
use English;
use warnings;
use Digest::BMW;
use Crypt::Misc qw| encode_b32r |;

my @sizes = qw| 224 256 384 512 |;

my $bits = 0;
my $next_size;
my $numerical = 0;
map { $numerical = 1 if $ARG eq qw| -d | } @ARGV;

map { $bits = $LAST_PAREN_MATCH if $ARG =~ m|^-(\d+)| } @ARGV;

my $pmode;
my $bytes;
if ( $bits > 103 ) {    ## bits mode ##  [ repair not matching bits mode ] LLL
    $pmode = qw| bits |;

} else {    ## bytes mode ##

    $pmode = qw| bytes |;
    $bytes = $bits;
    $bits *= 8 / 1.61;
}

map { $next_size //= $ARG if $bits <= $ARG or $ARG == 512 } @sizes;
my $b_str
    = $pmode eq qw| bytes | ? sprintf( " [ %d bytes ]", $next_size / 8 ) : '';
die ":\n:: requested bit size larger than $next_size ::$b_str\n:\n"
    if $bits > $next_size;

my $bmw = Digest::BMW->new($next_size);

my @args = grep { !m,^-(b|\d+)$, } @ARGV;

if ( @args == 2 and $args[0] =~ m|^\-fq?| ) {
    my $fname = $args[1];
    die "\n  << not found : $fname >>" if !-e $fname;
    open( my $FH, qw| < |, $fname ) or die "\n << ! >> $fname : $!\n\n";
    $fname =~ s|^.*/||;
    my $bmw_enc = encode( $bmw->addfile($FH)->digest );
    say $bmw_enc and exit if length( $args[0] ) == 3;
    printf( ":\n: $fname :. %s .:\n:\n", $bmw_enc );
    close($FH);
} elsif ( @args == 2
    and $args[0] eq qw| -fl |
    and ( -f $args[1] or $args[1] eq qw| - | ) ) {
    my $fname = $args[1];
    if ( $fname eq '-' ) {
        while (<STDIN>) { say encode( $bmw->add($ARG)->digest ) }
    } else {
        say "[ %s ]", $fname;
        open( my $FH, '<' . $fname ) or die $!;
        while (<$FH>) { printf ": %s\n", encode( $bmw->add($ARG)->digest ) }
        close($FH);
    }
} else {
    say encode( $bmw->add( join( ' ', @args ) )->digest );
}

sub encode {
    my $checksum = shift;
    if ( not $numerical ) {
        return encode_b32r($checksum) if $pmode eq qw| bits |;
        return substr( encode_b32r($checksum), 0, $bytes );
    } else {
        substr( $checksum, $bytes, length($checksum) - $bytes, '' )
            if $pmode eq qw| bytes |;
        return join( '',
            map { sprintf qw| %03d |, $ARG } unpack( qw| C* |, $checksum ) );
    }
}

#,,,.,..,,,,,,,,,,.,.,,.,,,,.,.,.,..,,...,,.,,..,,...,...,.,,,,..,.,.,.,,,,..,
#3VOK2HR4LV4Y7MQQKEJYNCCSNZAAGQHGFGTJT3TCIV5VEX6Y42SDJAOIRTN5EVXSLRO44GWIVZR34
#\\\|GHFAWUJE5DVNIGBFQRTOE25OCXDQDIGSWHPRZ3ISMZAUWYQYV46 \ / AMOS7 \ YOURUM ::
#\[7]5CCIBCNGAMCEXKYNBZ3SLLLUP3MBEDGEPESSPZAMFSXNZD72BIAI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
