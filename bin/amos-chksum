#!/usr/bin/perl

use v5.24;
use strict;
use English;
use warnings;
use Getopt::Std;

####           ####
##  amos-chksum  ##
###            ####

##[ LOCAL PM LIB PATH ]#######################################################

BEGIN {
    use English;
    use File::Spec;
    use Cwd qw| abs_path |;
    use FindBin qw| $RealBin |;
    my $up_dir         = File::Spec->updir;
    my $data_pm_path   = qw| data/lib-path/pm |;
    my $root_path      = abs_path( r2_abs( c_dir( $RealBin, $up_dir ) ) );
    my $local_lib_path = abs_path( c_dir( $root_path, $data_pm_path ) );
    $local_lib_path //= $data_pm_path;
    die "\n:\n:: not found : $local_lib_path\n:\n" if !-d $local_lib_path;
    unshift( @INC, $local_lib_path )               if -d $local_lib_path;
    sub c_dir  { File::Spec->catdir(@ARG) }
    sub r2_abs { File::Spec->rel2abs(@ARG) }
}

##[ AMOS MODULE ]#############################################################

use AMOS7;
use AMOS7::CHKSUM;
use AMOS7::TEMPLATE;
use AMOS7::CHKSUM::ELF;
use AMOS7::Assert::Truth;

## version chksum calculation ##
use AMOS7::INLINE::src::AMOS_13_ELF;  ## implement other versions too ## [LLL]

my $chksum_elf_mode = $AMOS7::CHKSUM::algorithm_set_up{'chksum_elf_mode'}; ##7
my $elf_shift_bits = $AMOS7::CHKSUM::algorithm_set_up{'elf_shift_bits'}; ## 13

my @modes = $AMOS7::CHKSUM::algorithm_set_up{'elf_truth_modes'}->@*;     ## 7

our $truth_templates = [];

##[ RUNTIME OPTIONS ]#########################################################

my $option_list = << 'EOL';

    .: amos-chksum command line options :.

    -q  .......  quiet output \ value only \

    -s  .......  STDIN data input mode [ single ]
    -S  .......  STDIN data input mode [ combined ]
    -n  .......  return checksum as numerical value
    -v  .......  visualize additional checksum data

    -options ..  amos-chksum command line option list

    -L  .......  substring parameters [<pos>,]<length>
    -t  .......  template validation timeout [ seconds ]
    -T  .......  sprintf template[s] for truth verification

    -VCS  .....  show AMOS checksum algorithm version and exit
    -VL7  .....  calculate inline elf output checksum and exit
    -VS   .....  calculate inline elf sourcecode version and exit

    -elf-mode[s]=<elf-mode[s]>  .....  comma seperated elf modes list


EOL

##[ INITIALIZATION \ OPTIONS ]################################################

my $data_str;

##   AMOS7.pm error handler   ##
$SIG{'__WARN__'} = \&error_exit;
use warnings FATAL => qw| all |;

getopts( qw| vt:e:Snsqo:L:V:T: |, \my %option );

if ( defined $option{'o'} and $option{'o'} eq qw| ptions | ) {
    list_options();
    exit(5);
} elsif ( defined $option{'e'} ) {
    my @elf_modes_override;
    error_exit( "elf modes syntax$C{0}: $C{b}$C{o}-elf-modes$C{R}"
            . "$C{0}\[=$C{T}$C{b}<n>$C{R}$C{0}\[,$C{T}$C{b}<n>$C{R}$C{0}..,]]"
        )
        if $option{'e'}  !~ m|^lf-mode=\d{1,2}$|
        and $option{'e'} !~ m|^lf-modes(=\d{1,2}(,\d{1,2})*)?$|;
    @elf_modes_override = split( ',', $+{m0} // $+{M} )
        if $option{'e'}
        =~ m{^lf-mode(=(?<m0>\d{1,2})|s=(?<M>\d{1,2}(,\d{1,2})*))$};

    if ( !@elf_modes_override ) {
        say sprintf(
            "$C{0}:\n::$C{T}  elf modes  $C{0}\:. %s$C{0}\ .:\n$C{0}:$C{R}",
            join( '', map {" $C{b}$C{T}$C{B}$ARG$C{R}$C{0} "} sort @modes ) )
            and exit;
    } else {
        @modes = @elf_modes_override;
    }
}

## truth template parameter ##
##
if ( defined $option{'T'} ) {

    ( my $template_valid, my $template_errstr )
        = AMOS7::TEMPLATE::is_valid_template( $option{'T'} );
    error_exit( sprintf( '%s <{NC}>', $template_errstr ) )
        if not $template_valid;

    $truth_templates = AMOS7::TEMPLATE::split_truth_templates( $option{'T'} );

    if (   $truth_templates->@* == 0
        or $option{'T'} !~ m|%s| and not defined $data_str
        and not $option{'S'}
        and not $option{'s'}
        and not @ARGV ) {
        error_exit("expected template string after -T option <{NC}>");
    }

    if ( defined $option{'t'} and $option{'t'} =~ m|^(\d+(\.\d{1,2})?)| ) {
        no warnings qw| once |;
        $AMOS7::CHKSUM::templ_valid_timeout = ${^CAPTURE}[0];
    }
}

##  substring initialization values [ -L ]  ##
##
my $sstr_start = 0;
my $str_length = 7;

##  substr parameters  ##
##
if ( defined $option{'L'} ) {
    my $substr_param = $option{'L'};

    error_exit( "substring param syntax not valid [ '%s' ] <{NC}>",
        $substr_param )
        if $substr_param !~ m|^(\d+,)?\d+$|;

    if ( index( $substr_param, ',', 1 ) == 1 ) {
        ( $sstr_start, $str_length ) = split( ',', $substr_param );
    } else {
        $str_length = $substr_param;
    }

    error_exit('substring template out of range [ 1..7 ] <{NC}>')
        if $str_length < 1
        or $str_length + $sstr_start > 7;

    if ( $str_length < 7 ) {    ##  setting substring template params  ##
        $AMOS7::CHKSUM::sstr_start = $sstr_start;
        $AMOS7::CHKSUM::str_length = $str_length;
    }
}

### move version calculation to AMOS7::CHKSUM module ### [LLL]

## display source versions ## [ calculated ]
if ( defined $option{'V'} ) {

    my $version_template = qw| .%s:AMOS-13-CHKSUM-VERSION:%s. |;
    my $data_str         = sprintf( $version_template, chr(255), chr(0) );

    if ( $option{'V'} eq qw| CS | ) {    ##  AMOS-CHKSUM OUTPUT VERSION  ##
        my $version_string = gen_version( qw| AMOS-CHKSUM-V-%s |, $data_str );
        say $version_string if not $option{'v'};
    } elsif ( $option{'V'} =~ m,^(L7|S)$, )
    {                                    ## elf_sum() source code version ##
        my $elf_sum
            = elf_chksum( $data_str, 0, $chksum_elf_mode, $elf_shift_bits );

        my $elf_out_ver = gen_version( qw| AMOS-13-ELF-7-%s |, $elf_sum );

        if ( $option{'V'} eq qw| L7 | ) { ## elf_sum() output test checksun ##

            say $elf_out_ver if not $option{'v'};

        } else {    ## version of elf_sum() source code ## [ -VS ] ##

            $data_str = "  /* .: $elf_out_ver :. */\n\n"
                . AMOS7::INLINE::src::AMOS_13_ELF::inline_elf();
            my $elf_inline_ver
                = gen_version( qw| AMOS-13-ELF-7-SRC-VER-%s |, $data_str );
            say $elf_inline_ver if not $option{'v'};
        }
    } else {
        die ":\n: version option not recognized : [ CS | L7 | S ]\n:\n";
    }
    exit if not $option{'v'};
}

sub gen_version {
    my $template = shift;
    my $data_str = shift;
    my $version_chksum;
    my $version_string = '';
    while ( not defined $version_chksum or not is_true($version_string) ) {
        $version_chksum = amos_chksum( $version_chksum // $data_str );
        $version_string = sprintf( $template, $version_chksum );
    }
    return $version_string;
}

##[ DATA INPUT MODES ]########################################################

error_exit('expected input string for AMOS-checksum [ -options ] <{NC}>')
    if not defined $data_str
    and not $option{'S'}
    and not $option{'s'}
    and not @ARGV;

$AMOS7::CHKSUM::algorithm_set_up{'return_modbits'} = 1 if $option{'v'};

if ( not defined $data_str and not $option{'s'} and not $option{'S'} ) {
    $data_str = join( ' ', @ARGV );    ## COMMAND LINE INPUT ##

} elsif ( not defined $data_str and not $option{'s'} or $option{'S'} ) {
    $data_str = join( '', <STDIN> ); ## STDIN COMBINED ## [  amos-chksum -S  ]
} else {
    while ( my $line = <STDIN> ) {
        next if not defined $line or not length $line;
        chomp($line);
        my $checksum = AMOS7::CHKSUM::amos_chksum( \$line, @modes );

        $checksum = sprintf( qw| %010d |, $AMOS7::CHKSUM::num_amos_csum )
            if $option{'n'};

        if ( $option{'q'} ) {
            say $checksum;
        } else {
            say "$C{0}:\n:$C{b} $C{T}$checksum$C{0} $C{R}\n$C{0}:$C{R}";
        }
    }
    exit(00000);
}

##[ CHECKSUM CALCULATION ]####################################################

my $checksum_encoded;

if ( defined $option{'T'} ) {    ## using template for truth verification ##
    my $template = $option{'T'};

    $checksum_encoded
        = AMOS7::CHKSUM::amos_template_chksum( $template, \$data_str,
        @modes );

} else {
    $checksum_encoded = AMOS7::CHKSUM::amos_chksum( \$data_str, @modes );
}

error_exit('cannot calculate checksum') if not defined $checksum_encoded;

##[ VERBOSE RESULT VALUES ]###################################################

if ( $option{'v'} ) {

    my $left_column_with = 15;

    ##[  bmw-mod-bits  ]##
    ##
    my @mod_bits     = @AMOS7::CHKSUM::mod_bits;
    my @mod_bits_str = @mod_bits
        ? (
        '',
        sprintf(
            '%s %s%*s %s :  %s',
            $C{T},          $C{0}, $left_column_with,
            'BMW mod-bits', $C{T}, shift @mod_bits
        ),
        (   map {
                sprintf '%s %*s  :  %s', $C{T}, $left_column_with, '', $ARG
            } @mod_bits
        ),
        '',

        ##[  AMOS7 bits  ]##
        ##
        sprintf(
            '%s %*s  : %s%s %032b %s%s',
            $C{T}, $left_column_with, 'AMOS7 bits', $C{b}, $C{T},
            $AMOS7::CHKSUM::num_amos_csum, $C{0}, $C{R}
        ),
        )
        : ();

    my $len_delta = 11 - length($AMOS7::CHKSUM::num_amos_csum);

    my $num_amos_csum_str = sprintf( ":$C{T} %d $C{0}%s",
        $AMOS7::CHKSUM::num_amos_csum, ':' x $len_delta );

    my %COLOR = (
        'input' => is_true( $data_str, 1, 1, @modes ) ? $C{T} : $C{g},
        'bits'  => is_true( $AMOS7::CHKSUM::checksum_bits, 0, 1, @modes )
        ? $C{T}
        : $C{g}
    );

    ##[  input-string  ]##
    ##
    my $header_string
        = ( $data_str =~ m|\n| )
        ? sprintf(
        "$C{b}$C{T}\::$C{R}\n\n%s\n$C{b}$C{T}\::$C{R} %s",
        join( '',
            map {"   $C{b}$COLOR{'input'}$ARG$C{R}\n"} split "\n",
            $data_str ),
        TRUE_FALSE($data_str)
        )
        : sprintf( "%s %*s  : %s",
        $C{T},
        $left_column_with,
        qw| input-string |,
        TRUE_FALSE($data_str)
            . " $C{b}$COLOR{'input'} $data_str $C{R}$C{0} $C{R}" );

    map {say} (
        '',
        $header_string,
        '',

        sprintf( '%s %*s  :  %s',
            $C{T},         $left_column_with,
            'reverse elf', true_bits($AMOS7::CHKSUM::elf_bits) ),

        sprintf(
            '%s %s%*s %s :  %s',
            $C{T},     $C{0}, $left_column_with,
            '[BMW] R', $C{T}, true_bits($AMOS7::CHKSUM::bmw_b_R)
        ),
        sprintf(
            '%s %s%*s %s :  %s',
            $C{T},     $C{0}, $left_column_with,
            '[BMW] L', $C{T}, true_bits($AMOS7::CHKSUM::bmw_b_L)
        ),
        sprintf(
            '%s %s%*s %s :  %s',
            $C{T},     $C{0}, $left_column_with,
            '[BMW] C', $C{T}, true_bits($AMOS7::CHKSUM::bmw_b_C)
        ),
        '',
        sprintf( '%s %*s  :  %s',
            $C{T},          $left_column_with,
            'input chksum', true_bits($AMOS7::CHKSUM::checksum_bits) ),

        ##[  bmw-mod-bits  ]##
        ##
        @mod_bits_str,
        '',

        ##[ elf truth mode ]##
        ##
        sprintf(
            '%s %*s  :  %s%s%s %s%s',
            $C{T},
            $left_column_with,
            qw| elf-truth-mode |,
            $C{T},
            @modes == 1 ? '' : qw| elf-modes |,
            $C{0},
            join( ' ', map {"$C{b}$C{T}$ARG$C{R}$C{0} "} sort @modes ),
            $C{R}
        ),

        ##[  elf truth templates  ]##
        ##
        scalar $truth_templates->@* == 0 ? () : (
            '',
            (   map {

                    sprintf(
                        '%s %*s  :  %s%s%s%s',
                        $C{T},
                        $left_column_with,
                        'truth template',
                        $C{b},
                        $C{T},
                        length ref $ARG
                        ? sprintf( 'regexp : %s',
                            AMOS7::TEMPLATE::regex_src_string($ARG) )
                        : sprintf( $ARG, $checksum_encoded ),
                        $C{R}
                        ),

                } $truth_templates->@*
            ),
            ''
        ),

        ##[ elf overflow ]##
        ##
        sprintf(
            '%s %s%*s%s  :  %s%s %s%s %s %s%s %s',
            $C{T},           $C{0}, $left_column_with,
            'elf overflow',  $C{T}, qw| bit-shift |,
            $C{0},           $C{b}, $C{T},
            $elf_shift_bits, $C{R}, $C{0},
            $C{R}
        ),
        '',

        ##  harmonization  ##
        ##
        sprintf(
            '%s %*s  :  %s%s%s %s%s%s%s%s %s',
            $C{T},                        $left_column_with,
            qw| harmonization |,          $C{T},
            'iteration count',            $C{0},
            $C{b},                        $C{T},
            $AMOS7::CHKSUM::bmw_mod_step, $C{R},
            $C{0},                        $C{R},
        ),
        '',

        ##[  VAX-encoded  ]##
        ##
        sprintf(
            '%s %*s  : %s %s%s%s%s%s%s %s %s',
            $C{T},              $left_column_with,
            qw| VAX-encoded |,  TRUE_FALSE($checksum_encoded),
            $C{b},              $C{T},
            $C{B},              $checksum_encoded,
            $C{R},              $C{T},
            $num_amos_csum_str, $C{R}
        ),
        '',
        $C{R}
    );

} elsif ( $option{'n'} ) {

    ##  numerical AMOS7-chksum value  ##
    ##
    say $AMOS7::CHKSUM::num_amos_csum and exit if $option{'q'};
    say "$C{0}:\n:$C{b} $C{T}${AMOS7::CHKSUM::num_amos_csum}$C{0}"
        . " $C{R}\n$C{0}:$C{R}";

##  encoded AMOS7 chksum  ##
##
} elsif ( defined $checksum_encoded ) {
    say $checksum_encoded and exit if $option{'q'};
    say "$C{0}:\n:$C{b} $C{T}$checksum_encoded$C{0} $C{R}\n$C{0}:$C{R}";
} else {
    exit(qw| 0110 |);    ##  checksum calculation errors  ##
}

##[ LIST OPTIONS ]############################################################

sub list_options {
    chomp( my $options_table_str = $option_list );
    my @lines = split "\n", $options_table_str;
    map { $ARG =~ s|(\s?\W+\s?)|$C{B01}$C{0}$1$C{B02}$C{T}|g } @lines;
    map { $ARG = sprintf "$C{B00}$C{0}$ARG$C{R}\n" } @lines;
    say join '', @lines;
}

##[ VISUALIZE TRUTH ASSERTION ]###############################################

sub TRUE_FALSE {
    my $check_data = shift;
    return '' if not defined $check_data;
    is_true( $check_data, 1, 1, @modes )
        ? "$C{0}\:: $C{T}TRUE$C{0} ::$C{R}"
        : "$C{0}\:: $C{g}FALSE$C{0} ::$C{R}";
}

sub true_bits {    ## not numerical ##
    my $visualize_data = shift;
    return '' if not defined $visualize_data;
    is_true( $visualize_data, 0, 1, @modes )
        ? "$C{T}$visualize_data$C{R}"
        : "$C{0}$visualize_data$C{R}";
}

#,,,.,.,.,.,,,..,,..,,,,,,.,.,,..,,.,,,,,,,,.,..,,...,...,,,.,..,,.,.,.,.,.,.,
#HULTM3EAP7NEKA4F5NGCT4A7R6C466AIY55GWJFG3E2O6W275LCECTKKKMZS3ZUROMO6HAUIFBXUG
#\\\|CW3RLXEJ34EKHB4EB4KFXLW2OMCROBXXJ3WTBGVLXZA6JHMAJRW \ / AMOS7 \ YOURUM ::
#\[7]RPNXZU7IPR4BKJRBDEFOQKJJV3ZWALFDURCPVCQBF2OB35OG26DI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
