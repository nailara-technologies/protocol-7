#!/usr/bin/perl
use v5.24;
use strict;
use English;
use warnings;
use Getopt::Std;
use Digest::BMW;

##[ LOCAL PM LIB PATH ]#######################################################

BEGIN {
    use English;
    use Cwd 'abs_path';
    my $script_path = abs_path($PROGRAM_NAME);
    ( my $local_lib_path = $script_path )
        =~ s|/[^/]+/[^/]+$|/data/lib-path/pm|;
    unshift( @INC, $local_lib_path ) if -d $local_lib_path;
}

##[ AMOS MODULE ]#############################################################

use AMOS::CHKSUM;
use AMOS::Assert::Truth;

##[ RUNTIME OPTIONS ]#########################################################

## -q ## quiet output \ value only \
## -h ## follow harmony [ string | numeric ]
## -n ## return checksum as numerical value
## -v ## visualize additional checksum data

##[ PREPARING ]###############################################################

$SIG{'__WARN__'} = \&error_exit;
use warnings FATAL => 'all';

getopts( 'vhnq', \my %option );
warn "expected input string for AMOS-checksum calculation\n" if not @ARGV;

$AMOS::CHKSUM::follow_truth = 1 if $option{'h'};
$AMOS::CHKSUM::ret_modbits  = 1 if $option{'v'};

my $data_str = join( ' ', @ARGV );

##[ CHECKSUM CALCULATION ]####################################################

my $checksum_encoded = AMOS::CHKSUM::amos_chksum( \$data_str );

##[ VERBOSE RESULT VALUES ]###################################################

my $rst = "\e[0m";
my $bl  = "\e[1m";
my $bg  = "\e[48;2;9;5;42m";
my $fg  = "\e[38;2;68;39;172m";
my $ng  = "\e[38;2;71;195;6m";
my $no  = "\e[38;2;197;141;7m";

if ( $option{'v'} ) {
    my $offset_str
        = $AMOS::CHKSUM::bmw_mod_step
        ? ' [ bmw-mod-step : ' . $AMOS::CHKSUM::bmw_mod_step . ' ]'
        : '';

    my @mod_bits = @AMOS::CHKSUM::mod_bits;
    my @mod_bits_str
        = @mod_bits
        ? (
        '',
        '  bmw-mod-bits  :  ' . shift @mod_bits,
        ( map { scalar( ' ' x 14 ) . '  :  ' . $ARG } @mod_bits ),
        '',
        sprintf( "    C-SUM-bits  : $bg $ng$bl%032b$fg $rst",
            $AMOS::CHKSUM::checksum_num ),
        )
        : ();

    map {say} (
        $fg,
        '  input-string  : '
            . true_false($data_str)
            . " $bg $ng$data_str $rst$fg ",
        $fg,
        '   reverse-elf  :  ' . $AMOS::CHKSUM::elf_bits,
        '    bmw-R-bits  :  ' . $AMOS::CHKSUM::bmw_b_R,
        '    bmw-L-bits  :  ' . $AMOS::CHKSUM::bmw_b_L,
        '',
        '     AMOS-bits  : '
            . "$bg $ng"
            . $AMOS::CHKSUM::checksum_bits
            . "$fg $rst$fg",
        @mod_bits_str,
        '',
        join( ' ', "$fg   VAX-encoded  : " . true_false($checksum_encoded) )
            . " $bg$ng$checksum_encoded$fg $rst$fg"
            . sprintf( "[ %010d ]", $AMOS::CHKSUM::checksum_num ),
        '',
        $rst
    );
} elsif ( $option{'n'} ) {

    my $num_str = sprintf( "%010d", $AMOS::CHKSUM::checksum_num );
    say $num_str and exit if $option{'q'};
    say "$fg:\n:$bg $ng$num_str$fg $rst\n$fg:$rst";

} else {

    say $checksum_encoded and exit if $option{'q'};
    say "$fg:\n:$bg $ng$checksum_encoded$fg $rst\n$fg:$rst";
}

##[ ERROR HANDLER ]###########################################################

sub error_exit {
    my $rst = "\e[0m";
    my $fg  = "\e[38;2;68;39;172m";
    my $ec  = "\e[38;2;197;141;7m";
    chomp( my $e = shift );
    $e =~ s|^[A-Z](*nla:[A-Z])|\l$MATCH|;
    $e =~ s|(*plb:\w): (\S+)|$fg : $ec$LAST_PAREN_MATCH|;
    say "$fg:\n: $ec$e$fg\n:$rst";
    exit(110);
}

##[ VISUALIZE TRUTH ]#########################################################

sub true_false {
    my $C = shift;
    return '' if not length $C or $C =~ m|^\e|;
    AMOS::Assert::Truth::is_true($C) ? ':: TRUE ::' : ':: FALSE ::';
}

#.............................................................................
#S2GFQKPPAVYN3HRCUO3IQRY6S5P2KGCGUEDHWGECNKB62UTHXPR75J6CF7IXECFWI6J3PQY6OBUXC
#::: V7UJYS5NFI5AXSQYYP3PF6MTMDB3MV6ER7NEHJIL5DW4KPX2EGE :::: NAILARA AMOS :::
# :: 7FCAGFZA3OCNTEXVYMKOXDCZY6HD5T5RZMTOLPPEPU3VK3TI7CCA :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
