#!/usr/bin/perl

use strict;
use warnings;

my $pager_cmd              = $ENV{'PAGER'} // 'less -XE';
my $CPAN_server            = 'www.cpan.org';
my $CPAN_http_port         = 80;
my $CPAN_file_list         = '/modules/02packages.details.txt.gz';
my $CPAN_module_dir        = '/authors/id/';
my $CPAN_http_timeout      = 10;
my $CPAN_tmp_dir           = $ENV{'HOME'} // '/tmp';
my $CPAN_local_modlist_tgz = $CPAN_tmp_dir . '/all_modules.tgz';
my $CPAN_local_modlist     = $CPAN_tmp_dir . '/all_modules.txt';
$CPAN_tmp_dir .= '/.n.cpan';

print "\n :\n";

if    ( !@ARGV )                {&show_help}
elsif ( $ARGV[0] eq 'update' )  {&update}
elsif ( $ARGV[0] eq 'search' )  { &search( $ARGV[1] ) }
elsif ( $ARGV[0] eq 'readme' )  { &show_readme( $ARGV[1] ) }
elsif ( $ARGV[0] eq 'install' ) { &install( $ARGV[1] ) }
elsif ( $ARGV[0] eq 'force-install' ) { &install( $ARGV[1], 1 ) }

print " :: done\n :\n" if @ARGV and $ARGV[0] =~ /^(force-)?install$/;
print "\n";

exit;

sub update {
    if ( !-d $CPAN_tmp_dir ) {
        print " :: creating dir '$CPAN_tmp_dir'\n";
        mkdir($CPAN_tmp_dir)
            or die " :: [error] can not create tmp dir '$CPAN_tmp_dir'\n";
    }

    if ( !-d $CPAN_tmp_dir . '/modules' ) {
        print " :: creating dir '$CPAN_tmp_dir/modules'\n";
        mkdir( $CPAN_tmp_dir . '/modules' )
            or die
            " :: [error] can not create tmp dir '$CPAN_tmp_dir/modules'\n";
    }
    my $buffer = '';
    my ( $file_handle, $file_size ) = open_cpan_file($CPAN_file_list);
    print " :: creating tmp file '$CPAN_local_modlist_tgz'\n";
    open( TGZ_file, '>', $CPAN_local_modlist_tgz )
        or die " :: [error] can not create module list file "
        . "'$CPAN_local_modlist_tgz' [$!]\n";
    print " :: downloading module list ($file_size bytes)...\n";

    my $bytes_read = 0;
    while ( $bytes_read < $file_size
        and $bytes_read += sysread( $file_handle, $buffer, 16384 ) ) {
        syswrite( TGZ_file, $buffer );
    }
    close($file_handle);
    close(TGZ_file);

    print " :: creating module list '$CPAN_local_modlist'\n";

    open( TMP_file, '>', $CPAN_local_modlist )
        or die " :: [error] can not create module list file "
        . "'$CPAN_local_modlist' [$!]\n";
    print " :: extracting module data ...\n";
    open( ZCAT, "zcat $CPAN_local_modlist_tgz |" )
        or die " :: [error] can not extract files from module list [$!]\n";

    while ( sysread( ZCAT, $buffer, 23542 ) ) {
        print TMP_file $buffer;
    }
    close($file_handle);
    close(ZCAT);
    print " :: deleting file '$CPAN_local_modlist_tgz'\n";
    unlink($CPAN_local_modlist_tgz);
}

sub search {
    my $keyword         = $_[0];
    my $mod_name_len    = 33;
    my $mod_version_len = 3;
    print " ::[ search results for '$keyword' ]:.\n :\n";
    open( MOD_list, $CPAN_local_modlist )
        or die " :: [error] can not open module list file "
        . "'$CPAN_local_modlist' [$!]\n";
    foreach my $mod_line (<MOD_list>) {
        if ( $mod_line =~ /^([^\s]+)\s+([^\s]+)\s+([^\s]+)$/ ) {
            my ( $mod_name, $mod_version, $mod_url ) = ( $1, $2, $3 );
            if ( $mod_name =~ /$keyword/i ) {
                $mod_url = "http://$CPAN_server/authors/id/$mod_url";

                $mod_version_len = 5 if $mod_version_len > 5;
                if ( length($mod_version) > $mod_version_len ) {
                    $mod_version_len = length($mod_version) - 1;
                }
                $mod_name_len = 70 - $mod_version_len
                    if $mod_name_len + $mod_version_len >= 70;
                if ( length($mod_name) > $mod_name_len ) {
                    $mod_name_len = length($mod_name);
                }

                if ( $mod_version ne 'undef' ) {
                    print " : "
                        . pack( "A$mod_name_len",    $mod_name ) . " ( v"
                        . pack( "A$mod_version_len", $mod_version ) . " )\n";
                } else {
                    print " : $mod_name\n";
                }

       #                if ( length($mod_name) > $mod_name_len ) {
       #                    $mod_name_len = length($mod_name);
       #                }
       #                if ( length($mod_version) > $mod_version_len ) {
       #                    $mod_version_len = length($mod_version);
       #                }
       #                print ' :  '
       #                  . pack( " A $mod_name_len",    $mod_name ) . ' .: v.'
       #                  . pack( " A $mod_version_len", $mod_version ) . ' :: '
       #                  . $mod_url . " \n ";
            }
        }
    }
    print " :\n";
    close(MOD_list);
}

sub install {
    my $install_mod_name = $_[0];
    my $force_install    = $_[1] || 0;
    my $mod_name_len     = 33;
    my $mod_version_len  = 5;
    print " :: installation results for module '$install_mod_name':\n :\n";
    open( MOD_list, $CPAN_local_modlist )
        or die " :: [error] can not open module list file "
        . "'$CPAN_local_modlist' [$!]\n";

    my $found = 0;

    print " : parsing module list ..\n";

    foreach my $mod_line (<MOD_list>) {
        if ( $mod_line =~ /^([^\s]+)\s+([^\s]+)\s+([^\s]+)$/ ) {
            my ( $mod_name, $mod_version, $mod_url ) = ( $1, $2, $3 );
            if ( $mod_name =~ /^$install_mod_name$/i ) {
                my $mod_file_name = $mod_url;
                $mod_file_name =~ s/^.+\/([^\/]+)$/$1/g;
                $found = 1;
                my $mod_uri = "/authors/id/$mod_url";
                $mod_version_len = 5 if $mod_version_len > 5;
                if ( length($mod_version) > $mod_version_len ) {
                    $mod_version_len = length($mod_version) - 1;
                }
                $mod_name_len = 70 - $mod_version_len
                    if $mod_name_len + $mod_version_len >= 70;
                if ( length($mod_name) > $mod_name_len ) {
                    $mod_name_len = length($mod_name);
                }
                my ( $txt_handle, $buffer );
                my ( $MOD_handle, $MOD_size ) = open_cpan_file($mod_uri);
                if ($MOD_size) {
                    my $tgz_file    = "$CPAN_tmp_dir/modules/$mod_file_name";
                    my $ext_mod_dir = $tgz_file;
                    $ext_mod_dir =~ s/\.tar\.gz$//;

                    print " : downloading module '$mod_name' [version "
                        . "$mod_version] ($MOD_size bytes) ...\n";
                    open( my $file_handle, ">$tgz_file" )
                        or die " :: [error] can not open file "
                        . "'$CPAN_tmp_dir/modules/$mod_file_name' [$!]\n";

                    my $bytes_read = 0;
                    while ( $bytes_read < $MOD_size
                        and $bytes_read += sysread $MOD_handle, $buffer,
                        $MOD_size - $bytes_read ) {
                        syswrite( $file_handle, $buffer );
                    }

                    close($file_handle);
                    close($MOD_handle);

                    print " : extracting files ..\n";
                    chdir( $CPAN_tmp_dir . '/modules/' );

                    my $list_file = $CPAN_tmp_dir . '/current_extracted.list';
                    if (!system(
                            'tar',     'zxvf',
                            $tgz_file, "--index-file=$list_file"
                        )
                    ) {
                        if ( open( my $list_fh, $list_file ) ) {
                            ( my $stripped_mod_dir = $ext_mod_dir )
                                =~ s/^(.+\/)//g;
                            my $mod_dir_parent = $1 || '';
                            ( my $first_entry = <$list_fh> ) =~ s/\/\n$//;
                            if (    length($first_entry)
                                and $first_entry ne $ext_mod_dir
                                and -d "./$first_entry" ) {
                                $ext_mod_dir = $mod_dir_parent . $first_entry;
                            }
                            close($list_fh);
                        }
                        unlink($list_file) if -f $list_file;
                        if ( -d $ext_mod_dir ) {
                            unlink($tgz_file);
                            foreach my $dep_mod (
                                return_dependencies($ext_mod_dir) ) {
                                if ( eval("require $dep_mod") ) {
                                    print " :: ok :. '$dep_mod'\n";
                                } else {
                                    print " :: not found :. '$dep_mod'\n :\n";
                                    &install($dep_mod);
                                }
                            }

                            my $makefile_pl = "$ext_mod_dir/Makefile.PL";
                            my $makefile    = "$ext_mod_dir/Makefile";

                            print " : writing makefile ..\n.:\n\n";
                            chdir($ext_mod_dir) or die $!;
                            if ( !system( 'perl', $makefile_pl ) ) {
                                print "..\n";
                                if ( -f $makefile ) {
                                    die " :\n :: [error] 'make' not found!\n\n"
                                        if qx(make -h) !~ /Usage/;
                                    print " : running 'make' ...\n.:\n\n";
                                    if ( !system('make') ) {
                                        print "..\n : running 'make test' ..\n"
                                            . ".:\n\n"
                                            if !$force_install;
                                        if ( $force_install
                                            or !system( 'make', 'test' ) ) {
                                            if ( $force_install or $> == 0 ) {
                                                print "..\n : running 'make "
                                                    . "install' ..\n.:\n\n";
                                                if ( !system('make install') ) {
                                                    print "..\n";
                                                }
                                            } else {
                                                print "..\n : need root "
                                                    . "priviledges to "
                                                    . "'make install'\n";
                                                print " : running 'su root"
                                                    . " -c make install'"
                                                    . " ..\n.:\n\n";
                                                if (!system(
                                                        'su', 'root',
                                                        '-c', 'make install'
                                                    )
                                                ) {
                                                    print "..\n";
                                                } else {
                                                    die "..\n :: [error] no "
                                                        . "clean exit from 'su "
                                                        . "root -c make install"
                                                        . "'\n :\n\n";
                                                }
                                            }
                                        } else {
                                            die "..\n :: [error] 'make test' "
                                                . "failed !\n :\n\n";
                                        }
                                    } else {
                                        die "..\n :: [error] no clean exit "
                                            . "from 'make'\n :\n\n";
                                    }
                                }

                            } else {
                                die " :: [error] can not execute "
                                    . "'$makefile_pl'. [$!]\n :\n\n";
                            }

                        } else {
                            die " :: [error] expected new module "
                                . "directory '$ext_mod_dir' not found.\n :\n\n";
                        }
                    } else {
                        die " :\n :: [error] can not extract files "
                            . "from '$tgz_file' [$!]\n :\n\n";
                    }
                }
            }
        }
    }
    if ( not $found ) {
        print " :: module not found! (try 'search <keyword>')\n";
    }
    print " :\n";
    close(MOD_list);

}

sub show_readme {
    my $readme_mod_name = $_[0];
    print " ::[ \"$readme_mod_name\" ]:.\n :\n";
    open( MOD_list, $CPAN_local_modlist )
        or die
        " :: [ERR] can not open module list file '$CPAN_local_modlist' [$!]\n";
    my $found = 0;
    print " : parsing module list ..\n";
    foreach my $mod_line (<MOD_list>) {
        my ( $mod_name_len, $mod_version_len ) = ( 33, 5 );
        if ( $mod_line =~ /^([^\s]+)\s+([^\s]+)\s+([^\s]+)$/ ) {
            my ( $mod_name, $mod_version, $mod_url ) = ( $1, $2, $3 );
            if ( $mod_name =~ /^$readme_mod_name$/i ) {
                my $readme_file_name = $mod_url;
                $readme_file_name =~ s/^(.+)\.tar\.gz$/$1.readme/g;
                $found = 1;
                my $mod_uri = "/authors/id/$readme_file_name";
                $mod_version_len = 5 if $mod_version_len > 5;
                if ( length($mod_version) > $mod_version_len ) {
                    $mod_version_len = length($mod_version) - 1;
                }
                $mod_name_len = 70 - $mod_version_len
                    if $mod_name_len + $mod_version_len >= 70;
                if ( length($mod_name) > $mod_name_len ) {
                    $mod_name_len = length($mod_name);
                }
                my $buffer;
                my ( $txt_handle, $size ) = open_cpan_file($mod_uri);

                if ( fileno($txt_handle) ) {
                    print ".: : found '$mod_name' "
                        . "(v.$mod_version) ..:. readme .:.. [$size bytes]\n";
                    my $pager_ok = open( PAGER, "| $pager_cmd" ) ? 1 : 0;
                    my $chnk_str = qr/\015\012/;
                    print "\n" if !$pager_ok;
                    while ( $size and my $buffer = <$txt_handle> ) {
                        next if not defined $buffer;
                        $size -= length($buffer);
                        $buffer =~ s/\d+$chnk_str([^\015]+)$chnk_str/$1/g;
                        if ($pager_ok) {
                            print PAGER $buffer;
                        } else {
                            print $buffer;
                        }
                    }
                    close(PAGER) if $pager_ok;
                }
                close($txt_handle) if defined $txt_handle;
                last;
            }
        }
    }
    if ( not $found ) {
        print " :: module not found. try 'search <keyword>'"
            . " to determine the correct module name.\n";
    }
    close(MOD_list);

}

sub return_dependencies {
    my $mod_dir   = $_[0];
    my $make_file = "$mod_dir/Makefile.PL";
    my @dependencies;
    print " : checking dependencies ..\n";
    open( my $make_file_handle, " < $make_file " )
        or die " :: [error] can not open makefile '$make_file'. [$!]\n :\n\n";
    my $found_section_prereq   = 0;
    my $found_section_requires = 0;
    while (<$make_file_handle>) {
        s/\#.+$//g;
        next if /^\s*$/;
        if (s/^\s+\'?PREREQ_PM\'?\s+=>\s+\{//) { $found_section_prereq   = 1 }
        if (/^requires\s/)                     { $found_section_requires = 1 }
        if ($found_section_prereq) {
            s/\s+//g;
            s/\,?\n$//g;
            if (/^\}$/) { $found_section_prereq = 0; last }
            else {
                if (/^\'?([^\']+)\'?=>\'?([\d|\.]+)\'?\,?$/) {
                    push( @dependencies, $1 );
                }
            }
        }
        if ($found_section_requires) {
            s/\s+//g;
            s/\;?\n$//g;
            unless (/^requires/) { $found_section_requires = 0; last }
            else {
                s/^requires//g;
                if (/^\'?([^\']+)\'?=>/) {
                    push( @dependencies, $1 );
                }
            }
        }
    }
    return @dependencies;
}

sub clean {
    print " :: deleting module list\n";
    unlink($CPAN_local_modlist)
        or die " :: [error] can not module list '$CPAN_local_modlist' [$!]\n";
    print " :: deleting tmp dir\n";
    rmdir($CPAN_tmp_dir)
        or die " :: [error] can not delete tmp dir '$CPAN_tmp_dir' [$!]\n";

    print " :: done.\n :\n\n";
}

# sub download_cpan_file
# {}

sub open_cpan_file {
    use IO::Socket::IP;
    my $file = $_[0];
    if (my $sock = IO::Socket::IP->new(
            PeerAddr => $CPAN_server,
            PeerPort => $CPAN_http_port,
            Proto    => 'tcp',
            Blocking => 1
        )
    ) {
        my $url = "http://$CPAN_server$file";
        my ( $buffer, $ok ) = ( '', 0 );
        $SIG{'ALRM'} = sub {
            die " :: [error] HTTP timeout( file: '$url' )\n";
        };
        alarm($CPAN_http_timeout);
        print $sock "GET $file HTTP/1.1\r\n";
        print $sock "Host: $CPAN_server\r\n\r\n";
        my $done        = 0;
        my $size        = undef;
        my $header_read = 0;
        while ( !$done ) {
            my $buffer = '';
            while ( $buffer !~ /^[^\n|^\r]*\r?\n$/ ) {
                sysread( $sock, $buffer, 1, length($buffer) );
            }
            $header_read = 1 if $buffer eq "\r\n";
            $buffer =~ s/\r?\n$//;
            if ( !$ok and $buffer eq 'HTTP/1.1 200 OK' ) {
                $ok     = 1;
                $buffer = '';
            } elsif ( $ok and $buffer eq '' and $header_read ) {
                alarm(0);
                binmode($sock);
                my $old_fh = select($sock);
                $| = 1;
                select($old_fh);
                return ( $sock, $size );
            } elsif ( $ok and $buffer ne '' ) {
                if ( $buffer =~ /^Content-Length: (\d+)$/ ) { $size = $1 }
                $buffer = undef;
            } else {
                die " :: [ERR] failed to GET: 'http://$CPAN_server$file'\n\n";
                return undef;
            }
        }
    } else {
        die " :: cannot connect to CPAN server "
            . "at '$CPAN_server:$CPAN_http_port' [$!]\n";
    }

}

sub show_help {
    print " :: [ available commands ] \n :\n"
        . " : update                 :. download fresh module list\n"
        . " : search <keyword>       :. search for a specific module\n"
        . " : readme <module>        :. show readme file for <module> "
        . "[ if available.. ]\n"
        . " : install <module>       :. download and install <module> "
        . "[ + dependencies ]\n"
        . " : force-install <module> :. download and install "
        . "<module> [ no 'make test' ]\n" . " :\n";
}

# ______________________________________________________________________________
#\\WM4MUOLRIZ6SWEDJYG7VJZ7Z7KQKMO7EPVL7H67B3DQHACA3ECOYYK44EWBNC5E2RU7VNGKULAZA6
# \\ BEC7RJHBFWMPKIKJJ4DQHCSWEUPHDD2QKUBPGC72K2ZUWJBBHRRD \\// C25519-BASE-32 //
#  \\// OLQEEPUHX2XVJ652CTT2NTAJRJPB3JGMB7CHHTOY6J6VL56HICQ \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
