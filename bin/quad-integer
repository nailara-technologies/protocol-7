#!/usr/bin/perl
use v5.24;
use strict;
use English;
use warnings;
use Getopt::Std;
use Crypt::Misc qw| encode_b32r decode_b32r |;

my $pack_template = qw| Q |;    ## 64-bit [QUAD] interger encoding ##

my $rst = "\e[0m";
my $bl  = "\e[1m";
my $bg  = "\e[48;2;9;5;42m";
my $fg  = "\e[38;2;68;39;172m";
my $no  = "\e[38;2;197;141;7m";
my $ng  = "\e[38;2;71;195;6m";
my $ec  = "\e[38;2;197;141;7m";

$SIG{'__WARN__'} = \&error_exit;
use warnings FATAL => qw| all |;

getopts( qw| dq |, \my %option );
warn "expected numerical or encoded input string [ QUAD integer ]\n"
    if not @ARGV;

my $input_string = shift @ARGV;

##[ BASE32 + quad DECODING ]###################################################

if ( $option{'d'}
    or defined $input_string and $input_string !~ m|^\-?\d+$| ) {
    my $B32_in        = $input_string // '';
    my $B32_input_len = length $B32_in;
    warn "expected BASE32 string to decode\n" if $B32_input_len == 0;
    warn "given parameter is not in BASE32\n" if $B32_in !~ qr|^[A-Z2-7]+$|;
    warn "input string longer than expected [ 64-bit quad int ]\n"
        if $B32_input_len > 13;

    ##  [re-]add padding  ##
    if ( $B32_input_len < 13 ) {
        $B32_in .= qw| A | x ( 13 - $B32_input_len );
    }

    my $B32_decoded = decode_b32r($B32_in);    ## BASE32 ##

    warn "BASE32 decoding error\n" if not defined $B32_decoded;

    warn "decoded value exceeds 64-bit [ 8 bytes ]\n" and exit(3)
        if length($B32_decoded) > 8;

    my $decoded_integer = unpack( $pack_template, $B32_decoded ); # quad-INT #

    warn "not a QUAD encoded integer\n" and exit(4)
        if not defined $decoded_integer;

    say $decoded_integer and exit if $option{'q'};

    say sprintf "$fg:\n: $bg $ng%s$fg $rst$fg\n:$rst\n", $decoded_integer;

} else { ##[ ENCODING | 64 BIT QUAD INTEGER ]#################################

    my $num_str = $input_string // '';

    warn "expected integer number to encode\n"      if not length $num_str;
    warn "cannot encode negative numbers\n"         if $num_str =~ m|^\-\d+$|;
    warn "can only encode integer values\n"         if $num_str !~ m|^\d+$|;
    warn "value exceeds 64-bit [ QUAD encoding ]\n" if length($num_str) > 20;

    my $quad_int_encoded = encode_b32r( pack $pack_template, $num_str );

    ##[  checking for oveflow  ]##
    warn "value exceeds 64-bit [ QUAD encoding ]\n"
        if $quad_int_encoded eq qw| 7777777777776 |
        and index( $num_str, qw| 18446744073709551615 |, 0 ) == -1;

    $quad_int_encoded =~ s|A+$||;    ## renoving zero padding ##
    $quad_int_encoded = qw| A | if not length $quad_int_encoded;

    say $quad_int_encoded and exit if $option{'q'};

    say sprintf "$fg:\n: $bg $ng%s$fg $rst$fg\n:$rst", $quad_int_encoded;
}

##[ ERROR HANDLER ]###########################################################

sub error_exit {
    chomp( my $e = shift );
    $e =~ s|^[A-Z](*nla:[A-Z])|\l$MATCH|;
    $e =~ s|(*plb:\w): (\S+)|$fg : $ec$LAST_PAREN_MATCH|;
    say "$fg:\n: $ec$e$fg\n:$rst";
    exit('0110');
}

#,,,,,,..,,..,,.,,,,,,,.,,.,.,,,.,..,,,..,,..,..,,...,...,..,,,,.,,..,,,,,,.,,
#7FSL4WDHZGEF7FJ2GGRJZYWTUOHRIPKCEXM353SPRBO4TQB3DUXKOM6PAJDNJ3OBB3HNCN4SBN5OY
#\\\|HICNBSRMLVNYRJYPWVX6JFHKRAY7AEDKGIMYMIFAMUUPDAGJDMA \ / AMOS7 \ YOURUM ::
#\[7]MUX3ZFI6X2XEIADGSX4D2MWEIYH3OHGDJC5KVMDZLKCY4PWL4UAA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
