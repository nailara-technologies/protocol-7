#!/usr/bin/perl
use v5.24;
use strict;
use English;
use warnings;
use Term::ReadLine;
use SigAction::SetCallBack;
use Time::HiRes qw| sleep |;

my $term = new Term::ReadLine('protocol-7.shell');
$term->ornaments('mh,md');    # ,me;
$term->enableUTF8();
$term->MinLine(undef);

no warnings 'once';
$readline::rl_completion_function = "main::rl_filename_list_lcl";
use warnings 'once';

$| = 1;

my $y_pos = 2;

my $reset      = "\e[0m";
my $clear_all  = "\e[2J";
my $clear_upw  = "\e[1J";
my $clear_down = "\e[0J";
my $nailara_bg = "\e[48;2;9;5;41m";
my $blacklight = "\e[38;2;68;39;172m";

map { $SIG{$ARG} = \&exit } qw| INT TERM HUP |;

my $message;

my $min_len   = 13;
my $last_line = '';

clear();

while ( !length($message) ) {
    my $bl_line = blacklight_line();
    my $prompt  = join( '', $bl_line, ' :. ' );

    override_signals();
    my $line = $term->readline($prompt);

    $term->add_history($line) if $line ne $last_line;
    if ( length($line) < $min_len ) {
        clear();
        say '';
    } else {
        my $return_code = system( qw| harmony -q |, $line );
        $return_code = $return_code >> 8 if $return_code > 0;
        die "$reset:\n:: harmony incovation error ::"
            . " $return_code :: \l$OS_ERROR ::\n\n"
            if $return_code != 0 and $return_code != 202;
        $message = $line if $return_code == 0;
    }
    $last_line = $line;
}
print $reset and clear();

exec( qw| git cim |, $message );

exit(4);

sub term_size {

    my $handle = shift // *STDIN;    ## use *STDOUT for pipe detection ##

    return undef if not -t $handle;
    state $size       = "\0" x 8;
    state $TIOCGWINSZ = 21523;

    ioctl( $handle, $TIOCGWINSZ, $size ) or return undef;
    my $size_aref
        = [ unpack 'S!S!S!S!', $size ];    ## <-- [<y>,<x>,<y-px>,<x-px>]
    return ( $size_aref->[1], $size_aref->[0] );

}

sub blacklight_line {
    ( my $x, my $y ) = term_size();

    if ( $y <= 1 ) {
        $y_pos = 1;
        my $s = $x <= 27 ? '' : ' ' x int( ( $x - 27 ) / 2 );
        print
            "\r$nailara_bg$clear_all$blacklight$s<<[ increase term-width ]>>\r"
            and sleep 1.2
            if $x < 47;
        return join( '', $blacklight, $nailara_bg, $clear_all );
    } else {
        $y_pos = 2;
        return join( '',
            "\e[${y_pos}H", $nailara_bg, $reset,   $clear_upw,
            $clear_down,    $nailara_bg, ' ' x $x, "\e[${y_pos}H",
            $nailara_bg,    $blacklight );
    }
}

sub clear { print "\e[37m\e[H$clear_all" }

sub exit_term {
    print blacklight_line() . " :: commit aborted :: $reset\n\n";
    CORE::exit(4);
}

sub override_signals {
    map { SigAction::SetCallBack->sig_registry( $ARG, \&readline_signals ) }
        qw| INT TERM HUP |;
}

sub restore_signals {
    map { $SIG{$ARG} = \&parent_exit } qw| INT TERM HUP |;
}

sub readline_signals {
    my $sig_name = shift;
    $term->free_line_state;
    $term->cleanup_after_signal;
    exit_term();
}

#.............................................................................
#3H65RL2TEPK6RB4B2GE4IV3BQKVKLOZE33E5EST2K46U4GX7ALPGEXUFJYENJV2ELXQRMV3DFLX7A
#::: D2VU5TIB3RSEUTEGMAZRGPHVY6ZKYBFSTTQSNLWAYILRXJ7JW2X :::: NAILARA AMOS :::
# :: TD65ZPFARGH25ISFW37YZVUGBLMNACQK5YXG64MR6PC6CVYZQWCY :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
