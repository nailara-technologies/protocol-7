#!/usr/bin/perl
use v5.24;
use strict;
use English;
use warnings;
use File::Spec;
use Term::ReadLine;
use Cwd qw| abs_path |;
use vars qw| $root_path |;
use FindBin qw| $RealBin |;
use Time::HiRes qw| sleep |;
use SigAction::SetCallBack;
use Crypt::Misc qw| decode_b32r |;

our $up_dir = File::Spec->updir;
our $Bin    = $RealBin;

###           ###
##  vc_commit  ##
###           ###

##[ LOCAL PM LIB PATH ]#######################################################
BEGIN {
    use English;
    use File::Spec;
    use Cwd qw| abs_path |;
    use FindBin qw| $RealBin |;
    our $up_dir = File::Spec->updir;
    our $Bin    = $RealBin;
    my $data_pm_path = qw| data/lib-path/pm |;
    our $root_path = abs_path( r2_abs( c_dir( $Bin, ($up_dir) x 2 ) ) );
    my $local_lib_path = abs_path( c_dir( $root_path, $data_pm_path ) );
    $local_lib_path //= $data_pm_path;
    unshift( @INC, $local_lib_path ) if -d $local_lib_path;
    sub c_dir  { File::Spec->catdir(@ARG) }
    sub c_file { File::Spec->catfile(@ARG) }
    sub r2_abs { File::Spec->rel2abs(@ARG) }
}
##[ AMOS MODULE ]#############################################################

use AMOS7;
use AMOS7::Assert::Truth qw| is_true |;

##############################################################################

my $term = new Term::ReadLine('[ version control commit terminal ]');
$term->ornaments('mh,md');    # ,me;
$term->enableUTF8();
$term->MinLine(undef);

no warnings 'once';
$readline::rl_completion_function = "main::rl_filename_list_lcl";
use warnings 'once';

my $txt_line = '';

if (@ARGV > 0 ) {
    $txt_line = join ' ', @ARGV;
} else {
    my $selection_text = qx| xsel -o |;
    $txt_line = $selection_text if length length $selection_text;
}

$txt_line =~ s|\n||sg;

$term->add_history($txt_line) if length $txt_line;

$OUTPUT_AUTOFLUSH = 1;

( my $x, my $y ) = term_size();
my $y_pos = $y > 2 ? 2 : 1;

my $reset      = "\e[0m";
my $clear_all  = "\e[2J";
my $clear_upw  = "\e[1J";
my $clear_down = "\e[0J";

map { $SIG{$ARG} = \&exit } qw| INT TERM HUP |;

my $msg_text = '';

my $min_len   = 13;
my $max_len   = 76;
my $last_line = $txt_line // '';
my $msg_delay = 0.7;

my $prompt = ' :. ';

clear();

while ( not length($msg_text) ) {

    override_signals();
    printf "%s\e[%dH", blacklight_line('g'), $y_pos;
    my $line = $term->readline( $prompt, $last_line );

    $term->add_history($line) if $line ne $last_line;
    my $line_length = length($line);
    if ( $line_length < $min_len or $line_length > $max_len ) {
        clear();
        if ($line_length) {
            print blacklight_line('o')
                . "\r :.   .:[ len :. $line_length .:"
                . " $min_len .:. $max_len ]:."
                . "\r :. ";
            sleep $msg_delay;
            clear();
        }
    } else {
        if ( not is_true($line) ) {
            clear();
            print blacklight_line()
                . "\r :.   .:[ message not in harmony ]:."
                . "\r :. ";
            sleep $msg_delay;
            clear();
        } else {
            $msg_text = $line;
        }
    }
    $last_line = $line;
}
print $reset and clear();

exec( qw| /usr/bin/git commit -m |, $msg_text );

exit(4);

sub term_size {

    my $handle = shift // *STDIN;    ## use *STDOUT for pipe detection ##

    return undef if not -t $handle;
    state $size       = "\0" x 8;
    state $TIOCGWINSZ = qw| 21523 |;

    ioctl( $handle, $TIOCGWINSZ, $size ) or return undef;
    my $size_aref = [ unpack 'S!S!S!S!', $size ];   ## [<y>,<x>,<y-px>,<x-px>]
    return ( $size_aref->[1], $size_aref->[0] );

}

sub blacklight_line {

    my $color = shift // qw| 0 |;

    ( $x, $y ) = term_size();

    if ( $y <= 1 ) {
        $y_pos = 1;
        my $s = $x <= 27 ? '' : ' ' x int( ( $x - 27 ) / 2 );
        print "\r$C{'B02'}$clear_all"
            . "$C{'0'}$s<<[ increase term-width ]>>\r"
            and sleep 1.2
            if $x < 47;
        return join( '', $C{'0'}, $C{'B02'}, $clear_all );
    } else {
        $y_pos = 2;
        return join( '',
            "\e[${y_pos}H", $reset,    $clear_upw,
            $clear_down,    $C{'B02'}, ' ' x $x,
            "\e[${y_pos}H", $C{'B02'}, $C{$color} );
    }
}

sub clear { print "\e[37m\e[H$clear_all" }

sub exit_term {
    print blacklight_line('o') . " :: commit aborted :: $reset\n\n";
    CORE::exit(4);
}

sub override_signals {
    map { SigAction::SetCallBack->sig_registry( $ARG, \&readline_signals ) }
        qw| INT TERM HUP |;
}

sub restore_signals {
    map { $SIG{$ARG} = \&parent_exit } qw| INT TERM HUP |;
}

sub readline_signals {
    my $sig_name = shift;
    $term->free_line_state;
    $term->cleanup_after_signal;
    exit_term();
}

#,,,.,,..,.,,,...,,.,,.,.,..,,,..,,,.,,,,,,..,..,,...,...,...,...,.,.,.,.,,,.,
#XHYA2FWPQE247ZZDYZURSCRENXGS7RSPVT7D5XR2XWMEFRGPYYVKE3IOPVC2FDOL3OSWFQ4PBHYUS
#\\\|KAF4MFG4RFHLKHQ3ETG2LBHKHYW5VI636TFUTS6SYH6NQLG5MCD \ / AMOS7 \ YOURUM ::
#\[7]ZBAGKMICLL6IVZESBO6ZY3UOZPXB6OJADDQOXB3TSCMQVDCMPECQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
