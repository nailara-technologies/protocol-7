#!/usr/bin/perl

use utf8;
use strict;
use warnings;
use IO::Socket;
use IO::Socket::INET;
use Term::ReadLine;
use Term::ReadPassword;

binmode STDOUT, ":utf8";

my $core_addr = $ARGV[0] || '127.0.0.1';
my $core_port = $ARGV[1] || 242;

my $color  = "\e[37m\e[40m";
my $prompt = $color . ':. ';

$| = 0;

# clear();

my $shell_sock
    = shell_auth( shell_connect( $core_addr, $core_port ), login_prompt() );

if ( -S $shell_sock ) {
    clear();
    shell_loop( $shell_sock, $prompt );

}
else { die "failed\n" }

sub login_prompt {
    my ($user, $pass);
    print "\n :: user :. ";
    chop( $user = <STDIN> );
    $pass = read_password(" :: pass :. ");
    print "\n";
    return ( $user, $pass );
}

sub shell_connect {
    my $sock = new IO::Socket::INET(
        PeerAddr => "$_[0]",
        PeerPort => "$_[1]",
        Proto    => 'tcp'
    ) or  die " [!] failed to connect [$!]\n";
    die " [!] connection failed [protocol error]\n" if <$sock> !~ />:\]/;
    return $sock;
}

sub shell_auth {
    syswrite( $_[0], "auth $_[1] $_[2]\n" );
    sysread( $_[0], my $answer, 8 );
    if ( $answer =~ /YEAH/ ) {
        print " :: authentication successful ::\n";
        return $_[0];
    }
    else { die " :: authentication failed ::\n\n"; return 0 }
}

sub clear { print "\e[37m\e[40m\e[H\e[2J" }

sub shell_loop {
    my $sock   = $_[0];
    my $prompt = $_[1];

    if ( !fork() ) { stdout_fork(); exit }

    my $term = new Term::ReadLine 'damn.shell';

    while ( defined( my $line = $term->readline($prompt) ) and -S $sock ) {

        print $color;

        if ( $line ne '' ) {
            if ( $line =~ /^\.cd ([^\s]+)/ ) {
                if ( !chdir($1) ) { print "cd: " . $! . "\n" }
            }
            elsif ( $line !~ /^\.\./ and $line =~ /^\.(.+)$/ ) {
                if ( my $err = system($1) ) {
                    print "error code: " . $err . "\n";
                }
            }
            else {

                if ( !syswrite( $sock, "$line\n" ) ) {
                    select( undef, undef, undef, 0.1 );
                    exit;
                }
                select( undef, undef, undef, 0.2 );
                if ( $line eq '[bye]' ) {exit}
            }
        }
    }
}

sub stdout_fork {
    close(STDIN);
    while ( my $out = <$shell_sock> ) {
        $out =~ s/\n$//;
        print "$out\n";
    }
    print ":\n:..[ connection terminated ]\n\n";
    exit; # XXX: implement reconntects!
}
