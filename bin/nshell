#!/usr/bin/perl -C31

use strict;
use warnings;
use utf8;
use English;
use IO::AIO;
use File::Spec;
use IO::Socket;
use Math::BigFloat;
use IO::Socket::IP;
use IO::Socket::UNIX;
use Cwd qw| abs_path |;
use Term::ReadPassword;
use Time::HiRes 'sleep';
use Digest::Elf qw| elf |;
use SigAction::SetCallBack;
use Crypt::Misc qw| encode_b32r |;
use POSIX qw| sys_wait_h WNOHANG |;

my $lnk_path = File::Spec->rel2abs( File::Spec->canonpath($PROGRAM_NAME) );
my $bin_path = $lnk_path;

while ( my $readlink_path = readlink($bin_path) // $bin_path ne $bin_path ) {
    $bin_path = $readlink_path;
    last if $bin_path =~ m|/nshell$|;  # skip resolving last stage., [ improve ]
}
( my $root_path = abs_path($bin_path) ) =~ s,/[^/]+/[^/]+$,,;

my $path_digest = elf($root_path);
my $path_offset = $path_digest ^ elf('/usr/local/protocol-7');  # <-- or current
my $protocol_7_port = calc_port($path_offset);

( my $hostname = qx| hostname | ) =~ s,(\..+|\n)$,,g;

$PROGRAM_NAME = 'nshell';

$SIG{'PIPE'} = 'IGNORE';

map { $SIG{$ARG} = \&parent_exit } qw| INT TERM HUP |; # see override_signals ##

my $stdout_pid;
my $parent_pid = $$;

$SIG{'CHLD'} = sub {
    $PROGRAM_NAME .= "[disconnected]"
        if waitpid( -1, WNOHANG() ) == $stdout_pid;
};

my @args;
my $core_user;
my $remember  = 0;
my $arg_index = 0;
foreach my $param (@ARGV) {
    if ( $param =~ m|^-u$| and defined $ARGV[ $arg_index + 1 ] ) {
        $core_user = $ARGV[ $arg_index + 1 ];
        delete $ARGV[$arg_index];
        delete $ARGV[ $arg_index + 1 ];
    } elsif ( $param =~ m,^(-r|--remember)$, ) {
        $remember = 1;
    } else {
        push( @args, $param );
    }
    $arg_index++;
}

my $core_pass;
my $stored_cmd;
my $term_loop = 0;
my $lines_up  = 3;
my $link_type = defined $core_user ? 'unix' : 'ip.tcp';
my $sckargcnt = scalar @args;
my $core_addr = shift(@args) || '127.0.0.1';
my $core_port = shift(@args) || $protocol_7_port;
my $usock_dir = '/var/run/.7/UNIX';

my $prompt = "\\ $hostname \\:[?]:, ";

my $connect = 1;
my $WARNED  = 0;

$OUTPUT_AUTOFLUSH = 0;

# clear();

my $term = new Term::ReadLine('protocol-7.shell');
$term->ornaments('mh,me,md,me');
$term->enableUTF8();
$term->MinLine(undef);

no warnings 'once';
$readline::rl_completion_function = "main::rl_filename_list_lcl";
use warnings 'once';

my $shell_sock;
while ($connect) {
    $shell_sock = shell_connect( $core_addr, $core_port );
    if ( $link_type eq 'unix' and $lnk_path =~ m|\.([^/\.]+)$| ) {
        my $core_user = $1;
        $shell_sock = unix_auth( $shell_sock, $core_user );
    } elsif ( $link_type eq 'unix' and defined $core_user ) {
        $shell_sock = unix_auth( $shell_sock, $core_user );
    } else {
        $shell_sock = shell_auth( $shell_sock, login_prompt() );
    }
    if ( -S $shell_sock ) {
        $PROGRAM_NAME = "nshell ( $core_addr : $core_port )";
        if ( not defined $stored_cmd ) {
            clear();
            print "\e[1m\e[5m\e[34m\e-\e[0m\n";
        } else {
            if ( !s_write( $shell_sock, "$stored_cmd\n" ) ) {
                sleep(0.1);
                close($shell_sock);

                exit(2);    # aborting connection, failed to send!
            } else {
                printf "\033[${lines_up}A\r\e[5m\e[34m.\e[0m"
                    . "  \e[34m< \e[32m%-79s\n\n",
                    "reconnected \e[34m>\e[0m";
                my $l_cmd = length($stored_cmd);
                $l_cmd = 33 if $l_cmd < 33;
                printf "\r\e[2m$prompt\e[1m\e[32m%-"
                    . $l_cmd
                    . "s\e[37m\n\033[1A\n\e[0m",
                    $stored_cmd;
            }
        }
        $lines_up = 3;
        shell_loop( $shell_sock, $prompt );
    }
}

## calculated values :      /usr/local/protocol-7 : ext-port = 47, int-port = 57
##                   : /data/projects/protocol-7 : ext-port = 87, int-port = 737

sub calc_port {
    my $path_offset = shift;
    my $port_start  = 57;    # <- [ details : 'net.init_code', 'net.calc_port' ]
    my $port_end    = 1021;
    my $port_delta  = $port_end - $port_start;

    my $n_port = $port_start + $path_offset % $port_delta * 5;

    return $n_port;
}

sub login_prompt {
    if (    $remember
        and defined $core_user
        and defined $core_pass ) {
        return ( $core_user, $core_pass );
    }
    my ( $user, $pass );
    print "\n :: user :. ";
    chop( $user = <STDIN> );
    $pass = read_password(" :: pass :. ");
    print "\n";
    ( $core_user, $core_pass ) = ( $user, $pass ) if $remember;
    return ( $user, $pass );
}

sub calc_unix_path {
    my $ip_addr = shift;
    my $ip_port = shift;

    return harmony_digest("TCP[$ip_addr:$ip_port]");
}

sub harmony_digest {
    my $input_string = join( '', @_ );
    my $harmony      = join( '', map {ord} qw| T = 5 | );    ## <-- [ / 13 ]

    my $accuracy = 13;
    Math::BigFloat->round_mode('trunc');
    Math::BigFloat->accuracy($accuracy);

    my $elf_checksum;
    my $encoded_string;
    my $B32_elf_checksum;

    $elf_checksum   = elf($input_string);
    $encoded_string = encode_b32r( pack 'V', $elf_checksum );

    my $template = '::%s::%s::%s::';

    my $calc_input = sprintf( $template,
        $encoded_string, $input_string, sprintf( "%09d", $elf_checksum ) );

    my $max_rounds = 42;

RECALC:

    $elf_checksum     = elf($calc_input);
    $encoded_string   = encode_b32r( pack 'V', $elf_checksum );
    $B32_elf_checksum = elf($encoded_string);

    my $calc_0000_str = Math::BigFloat->new($elf_checksum)
        ->bdiv( 13, $accuracy + length($B32_elf_checksum) );

    my $calc_0110_str = Math::BigFloat->new($B32_elf_checksum)
        ->bdiv( 13, $accuracy + length($B32_elf_checksum) );

    if (
        (      $calc_0000_str !~ m{\.(.*$harmony.*|0+)$}
            or $calc_0110_str !~ m{\.(.*$harmony.*|0+)$}
        )
        and $max_rounds--
    ) {
        ## ..230769.., == disharmony ..,

        ## change input with entropy from previous result ##
        $elf_checksum = $elf_checksum ^ elf($encoded_string);
        $calc_input   = sprintf( $template,
            $encoded_string, $input_string, sprintf( "%09d", $elf_checksum ) );

        goto RECALC;
    }

    return $encoded_string;
}

sub shell_connect {
    my $sock;
    if ( !$sckargcnt ) {
        my $sock_path
            = "$usock_dir/" . calc_unix_path( $core_addr, $core_port );
        if ( -e $sock_path ) {
            $sock = IO::Socket::UNIX->new(
                Type => SOCK_STREAM(),
                Peer => $sock_path,
                )
                or warn
                "\n << connection error : unix:$sock_path [$OS_ERROR] >>\n";
        }
    }
    if ( not defined $sock ) {
        $sock = new IO::Socket::IP(
            PeerAddr => $core_addr,
            PeerPort => $core_port,
            Proto    => 'tcp'
            )
            or die
            "\n << connection error : $core_addr:$core_port [$OS_ERROR] >>\n\n";
    } else {
        $link_type = 'unix';
    }

    binmode( $sock, ':encoding(UTF-8)' );

    die " << connection not successful [ protocol mismatch ] >>\n"
        if <$sock> !~ m|>:\]|;
    return $sock;

}

sub shell_auth {
    my ( $fh, $user, $pwd ) = @_;
    s_write( $fh, "auth $user $pwd\n" );
    my $answer = <$fh>;
    die "\n  << connection was prematurely terminated >>\n\n"
        if not defined $answer;
    if ( $answer =~ m|YEAH| ) {
        print " :: authentication successful ::\n";
        return $fh;
    } elsif ( $answer =~ m,NOPE >:|, ) {
        die "\n  :: authentication not successful ::\n\n";
    } elsif ( $answer =~ m,>:|, ) {
        print " :: authentication timeout ::\n";
        return 0;
    } else {
        die "\n  :: protocol mismatch >:[\n\n";
    }
}

sub unix_auth {
    my ( $fh, $user ) = @_;
    s_write( $fh, "select unix\n" );
    my $answer = <$fh>;
    die "\n  << connection was prematurely terminated >>\n\n"
        if not defined $answer;
    if ( $answer !~ m|^ACK continue| ) {
        die "\n  :: unix auth not available ::\n\n";
    }
    s_write( $fh, "auth $user\n" );
    $answer = <$fh>;
    print "\n";
    if ( $answer =~ m|YEAH| ) {
        print " :: authentication successful ::\n";
        return $fh;
    } elsif ( $answer =~ m,NOPE >:|, ) {
        die "\n  :: authentication not successful ::\n\n";
    } elsif ( $answer =~ m,>:|, ) {
        print " :: authentication timeout ::\n";
        return 0;
    } else {
        die "\n  :: protocol mismatch >:[\n\n";
    }
}

sub s_write {
    my $b_written;
    my $write_fh  = shift;
    my $write_str = shift;
    utf8::encode($write_str);
    IO::AIO::aio_write( $write_fh, undef, length($write_str),
        $write_str, 0, sub { $b_written = $_[0] } );
    IO::AIO::flush();
    undef $b_written if $b_written < 0;    # <- emulates syswrite() behaviour .,
    return $b_written;
}

sub clear { print "\e[37m\e[H\e[2J" }

sub shell_loop {
    my $sock   = $_[0];
    my $prompt = $_[1];

    if ( not $stdout_pid = fork() ) {
        $SIG{'TERM'} = $SIG{'INT'} = $SIG{'HUP'} = 'IGNORE';
        $SIG{'PIPE'} = sub { kill( 9, $parent_pid ); exit(2) };
        stdout_fork();
        exit;
    }
    if ( defined $stored_cmd ) {
        sleep(0.2);
        undef $stored_cmd;
    }

    map {
        $SIG{$ARG} = sub { parent_exit( shift, $stdout_pid ) }
    } qw| TERM INT HUP |;

    $term->add_history('');

    $connect = 0;
    my $last_line = '';
    while ( -S $sock
        and override_signals()
        and defined( my $line = $term->readline($prompt) ) ) {
        $WARNED  = 0;
        $connect = 1;
        print "\e[37m";
        if ( $line ne '' ) {

            $term->add_history($line) if $line ne $last_line;
            $last_line = $line;

            if ( $line =~ m|^\. cd (.+)| ) {
                if ( !chdir($1) ) { print "cd: " . $OS_ERROR . "\n" }
            } elsif ( $line =~ m|^\. (.+)$| ) {
                $lines_up = 1;
                no warnings;
                if ( my $err = system($1) ) {
                    my $error   = '';
                    my $err_msg = "exit code: $err";
                    if ( $err == -1 ) {
                        $err_msg = $OS_ERROR;
                        $error   = ' << error >>';
                    }
                    print "\n - ! -$error [ " . $err_msg . " ]\n\n";
                }
                use warnings;
            } else {
                if ( $line ne '[quit]' and !s_write( $sock, "$line\n" ) ) {
                    sleep(0.1);
                    $stored_cmd = $line;
                }
                sleep(0.2);
                if (   $line eq '[quit]'
                    or defined $stored_cmd and $stored_cmd eq 'exit'
                    or $line =~ "ACK session closed\n" ) {
                    print {$sock} "exit user quit shell session\n"
                        if $line eq '[quit]';
                    close($sock);
                    exit;
                } elsif ( defined $stored_cmd
                    or !-S $sock
                    or !$sock->connected ) {
                    my $r_msg = ' :: reconnecting..,';
                    if ( not defined $stored_cmd ) {
                        print "\e[2H\e[2J$r_msg\n";
                    } else {
                        my $l_cmd = length($stored_cmd);
                        printf "\033[1A\r%-" . $l_cmd . "s\n\033[2A\r", $r_msg;
                    }
                    last;
                }

            }
        } elsif ( !-S $sock or !s_write( $sock, "\n" ) or !$sock->connected ) {
            print "\e[2H\e[2J :: reconnecting...\n";
            last;
        }
    }
    if ( !$connect ) {
        if ( -S $shell_sock ) {
            s_write( $shell_sock, "\nexit ==\\ lost terminal \\==\n" );
            close($shell_sock);
        }
        kill( 9, $parent_pid );
        exit(1);
    }
}

sub stdout_fork {
    close(STDIN);
    $PROGRAM_NAME = "nshell [ stdout ]";
    while ( my $out = <$shell_sock> ) {
        $out =~ s|\n$||;
        print "$out\n";
    }
    close($shell_sock);
    print "\e[34m.\n      \e[5m.      .     .     "
        . "\e[0m\e[34m.:\e[34m[\e[\e[0m connection"
        . " terminated\e[0m \e[34m]\e[34m:.\e[5m  "
        . "   .     .      .\e[0m\n\e[34m.\e[0m\n";
}

sub rl_filename_list_lcl { #<- currently not working since Term::ReadLine switch
    my ( $text, $line, $pos ) = @_;

    if ( !$pos or $line !~ m|^\. | ) {
        no warnings 'once';
        $readline::rl_completer_terminator_character = '';
        use warnings 'once';
        if ( !$WARNED and $line !~ m|^\. | ) {
            print "\n<!> prefix '. ' can be used for local shell commands"
                . ", type 'commands' for netw. <!>\n";
            $WARNED = 1;
        }
        return '';
    }

    my @files = (<$text*>);
    foreach (@files) {
        if ( -d $ARG ) {
            next if $pos == 0 and !-x $ARG;
            $ARG .= '/';
        }
    }
    no warnings 'once';
    $readline::rl_completer_terminator_character = '';
    use warnings 'once';
    return @files;
}

sub override_signals {
    map { SigAction::SetCallBack->sig_registry( $ARG, \&readline_signals ) }
        qw| INT TERM HUP |;

    return $term_loop = 1;
}

sub restore_signals {
    map { $SIG{$ARG} = \&parent_exit } qw| INT TERM HUP |;
}

sub readline_signals {
    my $sig_name = shift;
    $term->free_line_state;
    $term->cleanup_after_signal;
    parent_exit();
}

sub parent_exit {    #   [ globals : $term_loop, $shell_sock, $stdout_pid ]
    print $term_loop ? "\n\e[34m\e[5m.\n.\n.\n\e[0m\n" : "\n ::\n :\n\n";
    if ( -S $shell_sock ) {
        $shell_sock->shutdown(2);
        $shell_sock->close();
        sleep(0.13);
    }
    kill( 9, $stdout_pid ) if defined $stdout_pid;
    exit;
}

# ______________________________________________________________________________
#\\2JOUUQOVLAYIXEGCBT46CKJO4WT3UW4J24GYXRMR35UIVV3SJCGIU6J3Z6CC2MUCOKFAOMIHXIGY2
# \\ XPFT7HZTSL4FKOFIC4XOOKHAGQ7BEYL7MOH4LKQL6U7BL57PIERF \\// C25519-BASE-32 //
#  \\// LD3UM6LESTK45MG4WTEXWYOD63ZMTHDGEEDLLVIMRHYGUQVSABI \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
