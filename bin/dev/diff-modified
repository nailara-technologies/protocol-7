#!/usr/bin/env perl

## modified 'diff-so-fancy' from github ##

my $VERSION = "1.3.1-AMOS";

################################################################################
## https://github.com/so-fancy/diff-so-fancy  #  <--  unchanged version       ##
################################################################################

use 5.010;                 # require perl 5.10 for 'state' variables
use strict;
use warnings FATAL => 'all';
use English;
use File::Spec;            # for catdir
use File::Basename;        # for dirname
use Encode;                # for handling UTF8 stuff
use Cwd qw| abs_path |;    # for realpath()
use lib dirname( abs_path( File::Spec->catdir($0) ) )
    . "/lib";              # add the local lib/ to @INC
use DiffHighlight;
use Term::ANSIColor;

my $nailara_bg   = color('on_r09g05b41');
my $nailara_fg   = color('r38g46b153');
my $error_color  = color('r195g71b6');
my $blacklight   = color('r68g39b172');
my $remote_color = color('r71g195b6');

my $colors_add = $nailara_fg;
my $colors_del = $blacklight;

say $nailara_bg. $blacklight . '.' . color('reset');

my $remove_file_add_header    = 1;
my $remove_file_delete_header = 1;
my $clean_permission_changes  = 1;
my $manually_color_lines
    = 0;    # usually git\hg colorize the lines, but for raw patches we use this
my $change_hunk_indicators
    = git_config_boolean( "diff-so-fancy.changeHunkIndicators", "true" );
my $strip_leading_indicators
    = git_config_boolean( "diff-so-fancy.stripLeadingSymbols", "true" );
my $mark_empty_lines
    = git_config_boolean( "diff-so-fancy.markEmptyLines", "false" );
my $use_unicode_dash_for_ruler
    = git_config_boolean( "diff-so-fancy.useUnicodeRuler", "true" );
my $ruler_width      = git_config( "diff-so-fancy.rulerWidth", undef );
my $git_strip_prefix = git_config_boolean( "diff.noprefix", "false" );
my $has_stdin        = has_stdin();

my $ansi_color_regex = qr'(\e\[([0-9]{1,3}(;[0-9]{1,3}){0,10})[mK])?';    # <--
my $reset_color      = term_color("reset");
my $bold             = term_color("bold");
my $meta_color       = term_color("");                                    # "";

my ( $file_1, $file_2 );
my $args              = argv();    # hashref of all the ARGV stuff
my $last_file_seen    = "";
my $last_file_mode    = "";
my $i                 = 0;
my $in_hunk           = 0;
my $columns_to_remove = 0;
my $is_mercurial      = 0;
my $color_forced      = 0;         # has the color been forced on/off

# we try and be smart about whether we need to do line coloring, but
# this is an option to force it on/off
if ( $args->{color_on} ) {
    $manually_color_lines = 1;
    $color_forced         = 1;
} elsif ( $args->{color_off} ) {
    $manually_color_lines = 0;
    $color_forced         = 1;
}

# we only process ARGV if we do not have STDIN
if ( !$has_stdin ) {
    if ( $args->{v} || $args->{version} ) {
        die( version() );
    } elsif ( $args->{'set-defaults'} ) {
        my $ok = set_defaults();
    } elsif ( !%$args || $args->{help} || $args->{h} ) {
        say usage();
        exit(4);
    } else {
        die("Missing input on STDIN\n");
    }
} else {

    my @lines;
    local $DiffHighlight::line_cb = sub {
        push( @lines, @_ );

        my $last_line = $lines[-1];

        # buffer <n> lines before we try and output anything
        # Also make sure we are sending enough data to d-s-f to do it is magic.
        # Certain things require a look-ahead line or two to function so
        # we make sure we do not break on those sections prematurely
        if (@lines > 24
            && ($last_line
                !~ m{^${ansi_color_regex}(---|index|old mode|similarity
                                                       index|rename (from|to))}x
            )
        ) {
            do_dsf_stuff( \@lines );
            @lines = ();
        }
    };

    my $line_count = 0;
    while ( my $line = <STDIN> ) {

  # if the very first line of the diff does not start with ANSI color, assuming
  # it is a raw patch file, and we have to color the added\removed lines ourself
        if ( !$color_forced && $line_count == 0 && starts_with_ansi($line) ) {
            $manually_color_lines = 1;
        }

        my $current_year = 1900 + [localtime]->[5];

        while (
            $line =~ s|(mcommit .+?)(\e.+?m)|
#                          my $l=$1; my $c=$2; ( my $c_s = $c ) =~ s{\e}{\\e}g;
#                          say "'$remote_color $c_s'";
#                          if ( $c =~ m{31m} ) {
#                            say " < match > $c_s";
#                            # $c = $remote_color;
#                            $c =~ s{31m}{32m}g;
#                          } else { $c = '' }
#                         "$l$c";
                          $1;
                         |ge
        ) {
        };    #############
        $line =~ s|(*plb:mcommit)([^\[]+)\(([^\)]+)\)|
                   my $l="$1\[$remote_color $2 $blacklight\]";
                   $l=~s{\->}{<--};
                   $l=~s{,}{ $blacklight\|$remote_color}g;
                   $l=~s{/}{ }g;
                   $l =~ s{tag: }{T${blacklight}::$remote_color}g;
                   $l
                  |e;
        $line =~ s|(\e\[38;5;27mcommit) ([0-9a-f]+)|
                            $blacklight.uc(": $1 :: $2")|e;

        $line =~ s{Author\s*:\s*([^\n]+)}
                  { my $author = $1; $author =~ s|<([^>]+)>|<[$1]>|;
                    sprintf( "${blacklight}: AUTHOR :: %-70s",$author)}gxe;

        $line =~ s{(Date\s*):\s*([^\n]+?)(\d\d:\d\d:\d\d)
                  \ ($current_year)?(\d{4})?\s[+-]\d{4}}
                  { my $older=$5//''; $older = "$older ::" if length($older);
                  sprintf( "$blacklight%6s :: %69s$reset_color",
                       uc( ": C:$1" ), ":: $2:: $3 :: $older" ) }gxe;
        ################################################################

        my $ok = DiffHighlight::handle_line($line);
        $line_count++;
    }

    DiffHighlight::flush();
    do_dsf_stuff( \@lines );
}

say $nailara_bg. $blacklight . ' ..,' . color('reset');

################################################################################

sub do_dsf_stuff {
    my $input = shift();

    #print STDERR "START -------------------------------------------------\n";
    #print STDERR join("",@$input);
    #print STDERR "END ---------------------------------------------------\n";

    while ( my $line = shift(@$input) ) {
        ######################################################
        # pre-process the line before we do any other markup #
        ######################################################

        # if the first line of the input is a blank line, skip that
        if ( $i == 0 && $line =~ m|^\s*$| ) {
            next;
        }

        ######################
        # end pre-processing #
        ######################

        #######################################################################

        ######################################################################
        # look for git index and replace it horizontal line [ header later ] #
        ######################################################################
        if ( $line =~ m|^${ansi_color_regex}index | ) {

            # print the line color and then the actual line
            $meta_color = $1 || get_config_color("meta");

            # get the next line without incrementing counter while loop
            my $next = $input->[0] || "";
            my ( $file_1, $file_2 );

       # the line immediately after the "index" line should be the --- file line
       # if it is not it is an empty file add/delete
            if ( $next !~ m,^$ansi_color_regex(---|Binary files), ) {

                # we fake out the file names since it is a raw add/delete
                if ( $last_file_mode eq "add" ) {
                    $file_1 = "/dev/null";
                    $file_2 = $last_file_seen;
                } elsif ( $last_file_mode eq "delete" ) {
                    $file_1 = $last_file_seen;
                    $file_2 = "/dev/null";
                }
            }

            if ( $file_1 && $file_2 ) {
                print horizontal_rule($meta_color);
                print $meta_color
                    . file_change_string( $file_1, $file_2 ) . "\n";
                print horizontal_rule($meta_color);
            }
            #########################
            # Look for the filename #
            #########################
            #                                            $4              $5
        } elsif ( $line
            =~ m,^${ansi_color_regex}diff (-r|--git|--cc) (.*?)(\e| b\/|$), ) {

            # mercurial looks like: diff -r 82e55d328c8c hello.c
            if ( $4 eq "-r" ) {
                $is_mercurial = 1;
                $meta_color ||= get_config_color("meta");

                # git looks like: diff --git a/diff-so-fancy b/diff-so-fancy
            } else {
                $last_file_seen = $5;
            }

            $last_file_seen
                =~ s|^\w/||;    # removing a/ [ and handle diff.mnemonicPrefix ]
            $in_hunk = 0;
            ########################################
            # find the first file: --- a/README.md #
            ########################################
        } elsif ( !$in_hunk
            && $line =~ m'^$ansi_color_regex--- (\w\/)?(.+?)(\e|\t|$)' ) {
            $meta_color ||= get_config_color("meta");

            if ($git_strip_prefix) {
                my $file_dir = $4 || "";
                $file_1 = $file_dir . $5;
            } else {
                $file_1 = $5;
            }

            # find the second file on the next line: +++ b/README.md
            my $next = shift(@$input);
            $next =~ m,^$ansi_color_regex\+\+\+ (\w/)?(.+?)(\e|\t|$),;
            if ($1) {
                print $1;    # print out whatever color we are using
            }
            if ($git_strip_prefix) {
                my $file_dir = $4 || "";
                $file_2 = $file_dir . $5;
            } else {
                $file_2 = $5;
            }

            if ( $file_2 ne "/dev/null" ) {
                $last_file_seen = $file_2;
            }

            # print out the top horizontal line of the header
            print $reset_color;
            print "\n" . horizontal_rule($meta_color);

            # mercurial coloring is slightly different,
            # so we need to hard reset colors
            if ($is_mercurial) {
                print $reset_color;
            }

            print $meta_color;
            print file_change_string( $file_1, $file_2 ) . "\n";

            # print out the bottom horizontal line of the header
            print horizontal_rule($meta_color);
            ########################################
            # check for "@@ -3,41 +3,63 @@" syntax #
            ########################################
        } elsif ( !$change_hunk_indicators
            && $line =~ m|^${ansi_color_regex}(@@@* .+? @@@*)(.*)| ) {
            $in_hunk = 1;

            print $line;
        } elsif ( $change_hunk_indicators
            && $line =~ m|^${ansi_color_regex}(@@@* .+? @@@*)(.*)| ) {
            $in_hunk = 1;

            my $hunk_header = $4;
            my $remain      = bleach_text($5);

#                              number of colums to remove [ 1 or 2 ] is based on
#                                         how many commas are in the hunk header
            $columns_to_remove = ( char_count( ",", $hunk_header ) ) - 1;

          # on single line removes there is NO comma in the hunk so we force one
            if ( $columns_to_remove <= 0 ) {
                $columns_to_remove = 1;
            }

            if ($1) {
                print $1;    #       print out the color we are using
            }

            my ( $orig_offset, $orig_count, $new_offset, $new_count )
                = parse_hunk_header($hunk_header);

            # $last_file_seen = basename($last_file_seen);

            # Figure out the start line
            my $start_line = start_line_calc( $new_offset, $new_count );

            # last function has it is own color
            my $last_function_color = "";
            if ($remain) {
                $last_function_color = get_config_color("last_function");
            }

            # check to see if we have the color for the fragment from git
            if ( $5 =~ m|\e\[\d| ) {

                # print "has ANSI color for fragment\n";
            } else {

                # we do not have the ANSI sequence so we shell out to get it
                #print "No ANSI color for fragment\n";
                my $frag_color = get_config_color("fragment");
                print $frag_color;
            }

            print "\n${last_function_color}─────   ─ "
                . "   ─${reset_color}\n@ $last_file_seen:$start_line"
                . " \@${bold}${last_function_color}${remain}${reset_color}\n"
                . "${last_function_color}─────   ─    ─${reset_color}\n\n";
            #####################################
            # removing any new file permissions #
            #####################################
        } elsif ( $remove_file_add_header
            && $line =~ m|^${ansi_color_regex}.*new file mode| ) {

            # do not print the line (i.e. remove it from the output);
            $last_file_mode = "add";
            ########################################
            # removing any delete file permissions #
            ########################################
        } elsif ( $remove_file_delete_header
            && $line =~ m|^${ansi_color_regex}deleted file mode| ) {

            # do not print the line [ i.e. remove it from the output ];
            $last_file_mode = "delete";
            ################################
            # Look for binary file changes #
            ################################
        } elsif (
            $line =~ /^Binary files (\w\/)?(.+?) and (\w\/)?(.+?) differ/ ) {
            my $change = file_change_string( $2, $4 );
            print horizontal_rule($meta_color);
            print "$meta_color$change (binary)\n";
            print horizontal_rule($meta_color);
            #####################################################
            # check if we are changing the permissions of a file #
            #####################################################
        } elsif ( $clean_permission_changes
            && $line =~ /^${ansi_color_regex}old mode (\d+)/ ) {
            my ($old_mode) = $4;
            my $next = shift(@$input);

            if ($1) {
                print $1;    # print out whatever color we are using
            }

            my ($new_mode) = $next =~ m/new mode (\d+)/;
            print "$last_file_seen changed file "
                . "mode from $old_mode to $new_mode\n";

            ###############
            # File rename #
            ###############
        } elsif ( $line =~ m|^${ansi_color_regex}similarity index (\d+)%| ) {
            my $simil = $4;

            # if it is a move with content change, we
            # ignore this one and the next two lines
            if ( $simil != 100 ) {
                shift(@$input);
                shift(@$input);
                next;
            }

            my $next = shift(@$input);
            my ($file1) = $next =~ /rename from (.+)/;

            $next = shift(@$input);
            my ($file2) = $next =~ /rename to (.+)/;

            if ( $file1 && $file2 ) {

         # we may not have extracted this yet, so we pull from the config if not
                $meta_color ||= get_config_color("meta");

                my $change = file_change_string( $file1, $file2 );

                print horizontal_rule($meta_color);
                print $meta_color . $change . "\n";
                print horizontal_rule($meta_color);
            }

            $i += 3;    # we've consumed three lines
            next;
            #####################################
            # just a regular line, print it out #
            #####################################
        } else {

            # mark empty line with a red/green box indicating addition\removal
            if ($mark_empty_lines) {
                $line = mark_empty_line($line);
            }

            # remove the correct number of leading " " or "+" or "-"
            if ($strip_leading_indicators) {
                $line = strip_leading_indicators( $line, $columns_to_remove );
            }

            #############################################################
            print $nailara_bg. $blacklight . ':' . color('reset') . ' ' . $line;
            #############################################################
        }

        $i++;
    }
}

################################################################################
# end regular code, begin functions
################################################################################

#courtesy of github.com/git/git/blob/ab5d01a/git-add--interactive.perl#L798-L805
sub parse_hunk_header {
    my ($line) = @_;
    my ( $o_ofs, $o_cnt, $n_ofs, $n_cnt )
        = $line =~ m|^\@\@+(?: -(\d+)(?:,(\d+))?)+ \+(\d+)(?:,(\d+))? \@\@+|;
    $o_cnt = 1 unless defined $o_cnt;
    $n_cnt = 1 unless defined $n_cnt;
    return ( $o_ofs, $o_cnt, $n_ofs, $n_cnt );
}

# Mark the first char of an empty line
sub mark_empty_line {
    my $line = shift();

    my $reset_color  = "\e\\[0?m";
    my $reset_escape = "\e\[m";
    my $invert_color = "\e\[7m";
    my $add_color    = $colors_add;
    my $del_color    = $colors_del;

    # this captures lines that do not have any ANSI in them (raw vanilla diff)
    if ( $line eq "+\n" ) {
        $line = $invert_color . $add_color . " " . term_color('reset') . "\n";

      # this captures lines that do not have any ANSI in them (raw vanilla diff)
    } elsif ( $line eq "-\n" ) {
        $line = $invert_color . $del_color . " " . term_color('reset') . "\n";

        # this handles everything else
    } else {
        $line =~ s{^($ansi_color_regex)[+-]$reset_color\s*$}
                {$invert_color$1 $reset_escape\n};
    }

    return $line;
}

# string to boolean
sub boolean {
    my $str = shift();
    $str = trim($str);

    if ( $str eq "" || $str =~ /^(no|false|0)$/i ) {
        return 0;
    } else {
        return 1;
    }
}

# Memoize getting the git config
{
    my $static_config;

    sub git_config_raw {
        if ($static_config) {

            # if we already have the config return that
            return $static_config;
        }

        my $cmd = "git config --list";
        my @out = `$cmd`;

        $static_config = \@out;

        return \@out;
    }
}

# fetch a textual item from the git config
sub git_config {
    my $search_key    = lc( $_[0] || "" );
    my $default_value = lc( $_[1] || "" );

    # say "< config-search > '$search_key'";

    my $out = git_config_raw();

    # if we are in a unit test, use the default [ do not read the users config ]
    if ( in_unit_test() ) {
        return $default_value;
    }

    my $raw = {};
    foreach my $line (@$out) {
        if ( $line =~ /=/ ) {
            my ( $key, $value ) = split( "=", $line, 2 );
            $value =~ s/\s+$//;
            $raw->{$key} = $value;
        }
    }

    # if we are given a search key return that, else return the hash
    if ($search_key) {
        return $raw->{$search_key} || $default_value;
    } else {
        return $raw;
    }
}

# fetch a boolean item from the git config
sub git_config_boolean {
    my $search_key    = lc( $_[0] || "" );
    my $default_value = lc( $_[1] || 0 );    # default to false

    # say "< config-search > '$search_key'";

    # if we are in a unit test, use the default [ do not read the users config ]
    if ( in_unit_test() ) {
        return boolean($default_value);
    }

    my $result = git_config( $search_key, $default_value );
    my $ret    = boolean($result);

    return $ret;
}

# check if we are inside of BATS
sub in_unit_test {
    if ( $ENV{BATS_CWD} ) {
        return 1;
    } else {
        return 0;
    }
}

sub get_less_charset {
    my @less_char_vars
        = ( "LESSCHARSET", "LESSCHARDEF", "LC_ALL", "LC_CTYPE", "LANG" );
    foreach (@less_char_vars) {
        return $ENV{$_} if defined $ENV{$_};
    }

    return "";
}

sub should_print_unicode {
    if ( -t STDOUT ) {

        # always print unicode chars if we are not piping stuff, e.g. to 'less'
        return 1;
    }

    # otherwise, assume we are piping to 'less'
    my $less_charset = get_less_charset();
    if ( $less_charset =~ /utf-?8/i ) {
        return 1;
    }

    return 0;
}

# trying to intellugently guess which line the diff hunk starts on
sub start_line_calc {
    my ( $line_num, $diff_context ) = @_;
    my $ret;

    if ( $line_num == 0 && $diff_context == 0 ) {
        return 1;
    }

    # git defaults to three lines of context
    my $default_context_lines = 3;

    # three lines on either side, and the line itself = 7
    my $expected_context = ( $default_context_lines * 2 + 1 );

    # the first three lines
    if ( $line_num == 1 && $diff_context < $expected_context ) {
        $ret = $diff_context - $default_context_lines;
    } else {
        $ret = $line_num + $default_context_lines;
    }

    if ( $ret < 1 ) {
        $ret = 1;
    }

    return $ret;
}

# remove + or - at the beginning of the lines
sub strip_leading_indicators {
    my $line              = shift();    # Array passed in by reference
    my $columns_to_remove = shift();    # do not remove any lines by default

    if ( $columns_to_remove == 0 ) {
        return $line;                   # Nothing to do
    }

    $line =~ s|^(${ansi_color_regex})([ +-]){${columns_to_remove}}|$1|;

    if ($manually_color_lines) {
        if ( defined($5) && $5 eq "+" ) {
            my $add_line_color = get_config_color("add_line");
            $line = $add_line_color . $line . $reset_color;
        } elsif ( defined($5) && $5 eq "-" ) {
            my $remove_line_color = get_config_color("remove_line");
            $line = $remove_line_color . $line . $reset_color;
        }
    }

    return $line;
}

# count the number of a given char in a string
sub char_count {
    my ( $needle, $str ) = @_;
    my $len = length($str);
    my $ret = 0;

    for ( my $i = 0; $i < $len; $i++ ) {
        my $found = substr( $str, $i, 1 );

        if ( $needle eq $found ) { $ret++; }
    }

    return $ret;
}

# removing all ANSI codes from a string
sub bleach_text {
    my $str = shift();
    $str =~ s|\e\[\d*(;\d+)*m||mg;

    return $str;
}

# removing all trailing and leading spaces
sub trim {
    my $s = shift();
    if ( !$s ) { return ""; }
    $s =~ s{^\s*|\s*$}{}g;

    return $s;
}

# print a line of em-dash or line-drawing chars the full width of the screen
sub horizontal_rule {
    my $color = $_[0] || '';
    my $width = get_terminal_width();

    # em-dash http://www.fileformat.info/info/unicode/char/2014/index.htm
    #my $dash = "\x{2014}";
    # BOX DRAWINGS LIGHT HORIZONTAL :
    # http://www.fileformat.info/info/unicode/char/2500/index.htm
    my $dash;
    if ( $use_unicode_dash_for_ruler && should_print_unicode() ) {
        $dash = Encode::encode( 'UTF-8', "\x{2500}" );
    } else {
        $dash = "-";
    }

    # Draw the line
    my $ret = $color . ( $dash x $width ) . "$reset_color\n";

    return $ret;
}

sub file_change_string {
    my $file_1 = shift();
    my $file_2 = shift();

    # if they're the same it is a modify
    if ( $file_1 eq $file_2 ) {
        return "modified: $file_1";

        # if the first is /dev/null it is a new file
    } elsif ( $file_1 eq "/dev/null" ) {
        my $add_color = $colors_add;
        return "added: $add_color$file_2$reset_color";

        # if the second is /dev/null it is a deletion
    } elsif ( $file_2 eq "/dev/null" ) {
        my $del_color = $colors_del // '';
        return "deleted: $del_color$file_1$reset_color";

        # if the files aren't the same it is a rename
    } elsif ( $file_1 ne $file_2 ) {
        my ( $old, $new )
            = DiffHighlight::highlight_pair( $file_1, $file_2,
            { only_diff => 1 } );
        $old = trim($old);
        $new = trim($new);

        # highlight_pair resets the colors, but we want it to be the meta color
        $old =~ s|(\e0?\[m)|$1$meta_color|g;
        $new =~ s|(\e0?\[m)|$1$meta_color|g;

        return "renamed: $old to $new";

        # Something we haven't thought of yet
    } else {
        return "$file_1 --> $file_2";
    }
}

# check to see if STDIN is connected to an interactive terminal
sub has_stdin {
    my $i   = -t STDIN;
    my $ret = int( !$i );

    return $ret;
}

# we use this instead of Getopt::Long because it is
# faster and we are not parsing any crazy arguments
# Borrowed from: https://www.perturb.org/display/ ..,
#                               1153_Perl_Quick_extract_variables_from_ARGV.html
sub argv {
    my $ret = {};

    for ( my $i = 0; $i < scalar(@ARGV); $i++ ) {

        # if the item starts with "-" it is a key
        if (   ( my ($key) = $ARGV[$i] =~ /^--?([a-zA-Z_-]*\w)$/ )
            && ( $ARGV[$i] !~ /^-\w\w/ ) ) {

       # if the next item does not start with "--" it is the value for this item
            if ( defined( $ARGV[ $i + 1 ] ) && ( $ARGV[ $i + 1 ] !~ /^--?\D/ ) )
            {
                $ret->{$key} = $ARGV[ $i + 1 ];

                # Bareword like --verbose with no options
            } else {
                $ret->{$key}++;
            }
        }
    }

    # we are looking for a certain item
    if ( $_[0] ) { return $ret->{ $_[0] }; }

    return $ret;
}

# output the command line usage for d-s-f
sub usage {
    my $out = $remote_color . version() . $blacklight . "\n";

    $out .= " .: usage :.

git diff --color | diff-so-fancy         # Use d-s-f on one diff

cat diff.txt | diff-so-fancy             # Use d-s-f on a diff/patch file

diff -u one.txt two.txt | diff-so-fancy  # Use d-s-f on unified diff output

diff-so-fancy --colors                   # view the commands to set
                                         #   the recommended colors
diff-so-fancy --set-defaults             # configure git-diff to use
                                         # diff-so-fancy and suggested colors

           ## configure git to use d-s-f for *all* diff operations

git config --global core.pager \"diff-so-fancy | less --tabs=4 -RFX\"\n\n"
        . term_color('reset');

    return $out;
}

# output the current version string
sub version {
    ( my $name = $0 ) =~ s|^.*/||;
    my $ret
        = "\n :: $name :: VERSION :: $VERSION :."
        . "\n ::\n :: modified from :: "
        . "https://github.com/so-fancy/diff-so-fancy\n";

    return $ret;
}

sub is_windows {
    if (   $^O eq 'MSWin32'
        or $^O eq 'dos'
        or $^O eq 'os2'
        or $^O eq 'cygwin'
        or $^O eq 'msys' ) {
        return 1;
    } else {
        return 0;
    }
}

sub set_defaults {
    my $git_config
        = 'git config --global core.pager "diff-so-fancy | less --tabs=4 -RFX"';
    my $first_cmd = 'git config --global diff-so-fancy.first-run false';

    my @cmds;
    push( @cmds, $git_config );
    push( @cmds, $first_cmd );

    # removing all comments from the commands
    foreach my $x (@cmds) {
        $x =~ s|#.*||g;
    }

    # removing any empty commands
    @cmds = grep( $_, @cmds );

    foreach my $cmd (@cmds) {
        system($cmd);
        my $exit = ( $? >> 8 );

        if ( $exit != 0 ) {
            die("Error running: '$cmd' (error #18941)\n");
        }
    }

    return 1;
}

# borrowed from : https://www.perturb.org/display/1167_Perl_ANSI_colors.html
# string format: '115', '165_bold', '10_on_140', 'reset',
#                        'on_173', 'red', 'white_on_blue'
sub term_color {
    my $str = shift();

    # No string sent in, so we just reset
    if ( !length($str) || $str eq 'reset' ) { return "\e[0m"; }

    # Some predefined colors
    my %color_map = qw| red 160 blue 21 green 34 yellow 226
        orange 214 purple 93 white 15 black 0 |;
    $str =~ s|([A-Za-z]+)|$color_map{$1} // $1|eg;

    # get foreground \ background + any commands
    my ( $fc, $cmd ) = $str =~ m|(\d+)?_?(\w+)?|g;
    my ($bc) = $str =~ m|on_?(\d+)|g;

    # Some predefined commands
    my %cmd_map = qw(bold 1 italic 3 underline 4 blink 5 inverse 7);
    my $cmd_num = $cmd_map{ $cmd // 0 };

    my $ret = '';
    if ($cmd_num)       { $ret .= "\e[${cmd_num}m"; }
    if ( defined($fc) ) { $ret .= "\e[38;5;${fc}m"; }
    if ( defined($bc) ) { $ret .= "\e[48;5;${bc}m"; }

    return $ret;
}

# get colors used for various output sections [ memoized ]
{
    my $static_config;

    sub get_config_color {
        my $str = shift();

        my $ret = "";
        if ( $static_config->{$str} ) {
            return $static_config->{$str};
        }

#print term_color(15) ."Shelling out for color: '$str'\n" . term_color('reset');

        # [color "diff-highlight"]
        #         newNormal = cyan
        #         oldNormal = 19
        #         newHighlight = blue bold
        #         oldHighlight = 21 bold
        #
        # [color "diff"]
        #         old = 20
        #         new = cyan black
        #         meta = 39 black
        #         frag = blue
        #         commit = 27
        #         whitespace = blue reverse

        if ( $str eq "meta" ) {
            $ret = DiffHighlight::color_config('color.diff.meta')

                # , term_color(11) );
        } elsif ( $str eq "reset" ) {
            $ret = term_color("reset");
        } elsif ( $str eq "add_line" ) {

            # default ANSI green
            $ret = DiffHighlight::color_config('color.diff.new')

                # , term_color('bold') . term_color(2) );

        } elsif ( $str eq "remove_line" ) {
            $ret = DiffHighlight::color_config('color.diff.old')

                # , term_color('bold') . term_color(1) );

        } elsif ( $str eq "fragment" ) {
            $ret = DiffHighlight::color_config('color.diff.frag')

                # , term_color('13_bold') );

        } elsif ( $str eq "last_function" ) {
            $ret = DiffHighlight::color_config('color.diff.func')

                # , term_color(4) );
        }

        # cache [ memoize ] the entry for later
        $static_config->{$str} = $ret;

        return $ret;
    }
}

sub starts_with_ansi {
    my $str = shift();

    if ( $str =~ m|^$ansi_color_regex| ) {
        return 1;
    } else {
        return 0;
    }
}

sub get_terminal_width {

    # making width static so we only calculate it once
    state $width;

    if ($width) {
        return $width;
    }

    # if there is a ruler width in the config we use that
    if ($ruler_width) {
        $width = $ruler_width;

        # otherwise we check the terminal width using tput
    } else {
        my $tput = qx| tput cols |;

        if ($tput) {
            $width = int($tput);

            if ( is_windows() ) {
                $width--;
            }
        } else {
            print term_color('orange')
                . "warning : `tput cols` did not return numeric input"
                . term_color('reset') . "\n";
            $width = 80;
        }
    }

    return $width;
}

# vim: tabstop=4 shiftwidth=4 noexpandtab autoindent softtabstop=4

# ______________________________________________________________________________
#\\PYM4OLN5LFNRRZVFQD4JZOJCJQCKMOEXWJSQIZ3K4JSFI6OJBOOMMAAQH7BGLYLF3K5QMD3IZEA6E
# \\ NNMCBVNWLTM3GQHYRKBX4SVGT3RTV5UUTMGNBJ6TVPM4JXQQWXUM \\// C25519-BASE-32 //
#  \\// SNLZU42DU74KF7DN6QAVQVDUCV4E3DJJ6MNRJNK4I44BH5WZQBA \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
