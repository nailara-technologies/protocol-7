## >:] ##

# name  = pt-repl.pc
# descr = Devel::REPL rc [perl] init script

use v5.32.0;

use English;

use Math::BigInt;
use Math::BigFloat;
use Module::Refresh;
use Crypt::PRNG::Fortuna;
use Digest::Elf qw| elf |;
use Digest::BMW qw| bmw_256 |;
use Data::Dumper qw| Dumper |;
use Encode qw| encode decode |;
use Time::HiRes qw| time sleep |;
use Crypt::Misc qw| encode_b32r decode_b32r |;
use Module::Load qw| load autoload load_remote autoload_remote |;

our $hist_file = $ENV{PERLREPL_HISTFILE}
    || File::Spec->catfile( File::HomeDir->my_home, qw| .perlreplhist | );

sub h_file_path { return $hist_file }

sub edith { system qw| /usr/bin/joe -syntax perl |, $hist_file }

sub eraseh {
    truncate( $hist_file, 0 ) if $hist_file =~ m|\.perlreplhist$|;
    return sprintf 'zulum history [ %s ]', $hist_file;
}

our $mod_refresh = Module::Refresh->new();
$mod_refresh->update_cache();

sub reload_config {
    eval { $main::repl->load_rcfile($main::rc_file); };
    return 'configuration reloaded' if not length $EVAL_ERROR;
    $EVAL_ERROR =~ s| at .+||;
    $EVAL_ERROR;
}

sub module_reload {
    my @param = @ARG;
    foreach my $module_name (@param) {
        $module_name =~ s|::|/|g;
        $module_name .= qw| .pm | if rindex( $module_name, qw| .pm | ) == -1;
    }
    $mod_refresh->refresh_module(@param);
}

load_plugin(qw| ReadLineHistory Colors |);

say "\n:\n: speak perl ? >:]\n:\n";

#,,,,,...,,.,,,,,,,.,,.,.,,,.,...,.,,,,.,,.,.,.,.,...,...,...,..,,.,,,.,.,..,,
#VGO6XHBE2EADDZZH5JRMSVMQTOUTLXHBGIAXPWKWC4DF3ORX7JWGRX23ZAC32ZAD4I3IAC3QEF6TM
#\\\|CZJNAE4WY5CX2R6FR6YLQ2QANOKVFBUEMTH74ZOXBNH3XACF2EC \ / AMOS7 \ YOURUM ::
#\[7]MH7SLKTR7PHTQHDBXUDISXFXB7HZXLAJBQF2QHJNK7FA7HLLPMBY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
