#!/usr/bin/perl

use v5.24;
use strict;
use English;
use warnings;
use File::Spec;
use Term::ReadLine;
use Cwd qw| abs_path |;
use vars qw| $root_path |;
use IPC::Open2 qw| open2 |;
use FindBin qw| $RealBin |;
use Time::HiRes qw| sleep |;
use SigAction::SetCallBack;
use List::MoreUtils qw| minmax |;
use Crypt::Misc qw| decode_b32r |;

###                 ###
##   true-readline   ##
###                 ###

##[ LOCAL PM LIB PATH ]#######################################################
BEGIN {
    use English;
    use File::Spec;
    use Cwd qw| abs_path |;
    use FindBin qw| $RealBin |;
    our $up_dir = File::Spec->updir;
    our $Bin    = $RealBin;
    my $data_pm_path = qw| data/lib-path/pm |;
    our $root_path = abs_path( r2_abs( c_dir( $Bin, ($up_dir) x 2 ) ) );
    my $local_lib_path = abs_path( c_dir( $root_path, $data_pm_path ) );
    $local_lib_path //= $data_pm_path;
    unshift( @INC, $local_lib_path ) if -d $local_lib_path;
    sub c_dir  { File::Spec->catdir(@ARG) }
    sub c_file { File::Spec->catfile(@ARG) }
    sub r2_abs { File::Spec->rel2abs(@ARG) }
}
##[ AMOS MODULE ]#############################################################

use AMOS7;
use AMOS7::Assert::Truth    ##  validation code  ##
    qw| is_true is_true_with_template is_template_syntax_valid |;

##############################################################################

my $term = new Term::ReadLine('[ text truth assertion terminal ]');
$term->ornaments('mh,md');    # ,me;
$term->enableUTF8();
$term->MinLine(undef);

no warnings qw| once |;
$readline::rl_completion_function = "main::rl_filename_list_lcl";
use warnings qw| once |;

my $template;

##[ truth template parameter ]
##
if ( @ARGV > 1 and $ARGV[0] eq qw| -tem | and shift @ARGV ) {
    $template = shift @ARGV;
    if ( not is_template_syntax_valid( $template, 5 ) ) {
        error_exit( 'template syntax is not valid [ %s ] <{NC}>', $template );
    }
}

my $force_use_readline = 0;

if ( @ARGV and $ARGV[$#ARGV] eq qw|-r| and pop @ARGV ) {
    $force_use_readline = 5;    ## true ##
}

my $txt_line = '';

if (@ARGV) {
    $txt_line = join ' ', @ARGV;
} else {
    my $selection_text = qx| xsel -o |;
    $txt_line = $selection_text if length length $selection_text;
}

$txt_line =~ s|\n||sg;

$term->add_history($txt_line) if length $txt_line;

$OUTPUT_AUTOFLUSH = 1;

( my $x, my $y ) = term_size();
my $y_pos = $y > 2 ? 2 : 1;

my $reset      = "\e[0m";
my $clear_all  = "\e[2J";
my $clear_upw  = "\e[1J";
my $clear_down = "\e[0J";

map { $SIG{$ARG} = \&exit } qw| INT TERM HUP |;

my $is_true_string = 0;    ##  false  ##

my $min_len = 1;
my $max_len = 80;

my $str_length = str_len( $txt_line, $template );

if ( $min_len <= $str_length <= $max_len ) {
    if ( defined $template ) {
        $is_true_string = is_true_with_template( $template, \$txt_line )
            if length $txt_line;
    } else {
        $is_true_string = is_true( \$txt_line );
    }
    goto IS_TRUE if $is_true_string and not $force_use_readline;
}

my $last_line;
my $msg_delay = 0.7;

my $prompt = ' :. ';

clear();

while ( $force_use_readline or not $is_true_string ) {
    $force_use_readline = 0;    ##  done  ##
    override_signals();
    printf "%s\e[%dH", blacklight_line(), $y_pos;
    my $line = $term->readline( $prompt, $last_line // $txt_line );

    $term->add_history($line)
        if not defined $last_line or $line ne $last_line;

    my $line_length = str_len( $line, $template );

    if ( $line_length < $min_len or $line_length > $max_len ) {
        clear();
        if ($line_length) {
            print blacklight_line()
                . "\r :.   .:[ len :. $line_length .:"
                . " $min_len .:. $max_len ]:."
                . "\r :. ";
            sleep $msg_delay;
            clear();
        }
    } else {
        $is_true_string = 0;    ##  false  ##

        if ( defined $template ) {

            $is_true_string = is_true_with_template( $template, \$line )
                if length $line;

        } else {

            $is_true_string = is_true( \$line );
        }

        if ( length $line and not $is_true_string ) {
            clear();
            print blacklight_line()
                . "\r :.   .:[  message not true  ]:."
                . "\r :. ";
            sleep $msg_delay;
            clear();
        } else {
            $txt_line = $line;
        }
    }
    $last_line = $line;
}
print $reset and clear();

IS_TRUE:

my @full_strings;

@full_strings
    = map { sprintf $ARG, $txt_line }
    AMOS7::TEMPLATE::split_truth_templates($template)->@*
    if defined $template;

## store true text version in selection and clipboard ##
##
foreach my $mode (qw| selection clipboard |) {
    my @xsel_args = $mode eq qw| clipboard | ? qw| -b -i | : qw| -i |;
    my $pid       = open2( my $out_fh, my $xsel_in, qw| xsel |, @xsel_args );

    my $selection_str = @full_strings == 1 ? $full_strings[0] : $txt_line;

    print {$xsel_in} $selection_str;
    close($xsel_in);
    my $err_str = readline($out_fh);
    close($out_fh);
    waitpid( $pid, 0 );
    warn_err( "xsel : %s", format_error( $err_str, -1 ) ) if defined $err_str;
}
##

##  display result on terminal  ##
##
if ( @full_strings == 0 ) {
    say sprintf "$C{0}:$C{R}\n$C{0}: $C{b}$C{T} %s $C{R}\n$C{0}:$C{R}",
        $txt_line;
} else {
    say sprintf "$C{0}:$C{R}";
    say sprintf "$C{0}:$C{R}";
    foreach my $true_str (@full_strings) {
        say sprintf "$C{0}: $C{b}$C{T} %s $C{R}", $true_str;
        say sprintf "$C{0}:$C{R}";
    }
    say sprintf "$C{0}:$C{R}";
}
##

exit(0);

sub str_len {
    my $check_str = shift;
    my $template  = shift;

    return length $check_str if not defined $template;

    return [ minmax map { length sprintf $ARG, $check_str }
            AMOS7::TEMPLATE::split_truth_templates($template)->@* ]->[1];

}

sub term_size {

    my $handle = shift // *STDIN;    ## use *STDOUT for pipe detection ##

    return undef if not -t $handle;
    state $size       = "\0" x 8;
    state $TIOCGWINSZ = qw| 21523 |;

    ioctl( $handle, $TIOCGWINSZ, $size ) or return undef;
    my $size_aref = [ unpack 'S!S!S!S!', $size ];   ## [<y>,<x>,<y-px>,<x-px>]
    return ( $size_aref->[1], $size_aref->[0] );

}

sub blacklight_line {

    ( $x, $y ) = term_size();

    if ( $y <= 1 ) {
        $y_pos = 1;
        my $s = $x <= 27 ? '' : ' ' x int( ( $x - 27 ) / 2 );
        print "\r$C{'B02'}$clear_all"
            . "$C{'T'}$s<<[ increase term-width ]>>\r"
            and sleep 1.2
            if $x < 47;
        return join( '', $C{'T'}, $C{'B02'}, $clear_all );
    } else {
        $y_pos = 2;
        return join( '',
            "\e[${y_pos}H", $reset,    $clear_upw,
            $clear_down,    $C{'B02'}, ' ' x $x,
            "\e[${y_pos}H", $C{'B02'}, $C{'T'} );
    }
}

sub clear { print "\e[37m\e[H$clear_all" }

sub exit_term {
    print blacklight_line() . " :: truth assertion aborted :: $reset\n\n";
    CORE::exit(4);
}

sub override_signals {
    map { SigAction::SetCallBack->sig_registry( $ARG, \&readline_signals ) }
        qw| INT TERM HUP |;
}

sub restore_signals {
    map { $SIG{$ARG} = \&parent_exit } qw| INT TERM HUP |;
}

sub readline_signals {
    my $sig_name = shift;
    $term->free_line_state;
    $term->cleanup_after_signal;
    exit_term();
}

#,,,,,...,..,,.,.,,,,,,..,.,.,.,.,,..,.,.,.,,,..,,...,...,..,,.,.,,..,.,,,,,,,
#V27ISI7AI3QSP6OYMSLB7JX7LYGOVBRVJG235FY3MTDZPQHUY5ASRDJYUAQHDVIUIEABTHQJAR75O
#\\\|IYFFF7UU4HNQ3ZYIBRZSWWTGREHRTEXYXKWTBEEIJUVIR5ANEUC \ / AMOS7 \ YOURUM ::
#\[7]WNVYFMQNOANQOQK7TFSTVSTWD2YNJDUNHYB6H6FM4HBA6OHVKWBQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
