#!/usr/bin/perl

use strict;
use warnings;
use File::Spec;
use Git::Wrapper;
use Cwd 'abs_path';
use FindBin '$RealBin';

our $amend = 0;
my $reset = 0;
my $down  = 0;

if (@ARGV) {
    map { $amend = 1 if $_ eq 'amend' } @ARGV;
    map { $down  = 1 if $_ eq 'down'; } @ARGV;
    map {
        if ( $_ eq 'reset' ) { $down = 0; $reset = 1 }
    } @ARGV;
}

my $u = File::Spec->updir;
my $root_path
    = abs_path( File::Spec->rel2abs( File::Spec->catdir( $RealBin, $u, $u ) ) );
my $cfg_path = File::Spec->catdir( $root_path, 'cfg' );
our $version_file = File::Spec->catfile( $cfg_path, 'nailara.source_version' );
our $r_vers_file  = File::Spec->catfile( $cfg_path, 'nailara.release_version' );
my $readme_md    = File::Spec->catfile( $root_path, 'README.md' );
my $old_version  = get_old_version();
my $git          = Git::Wrapper->new($root_path);
my $commit_count = $git->log - 1;

$commit_count-- if $amend;

my $version_base = gen_ver_string( $commit_count + 1 - $reset );
my $minor        = $down ? -1 : 1;
my $new_minor    = 0;

if ( $old_version =~ m|^(.+)\.(\d+)$| ) {
    my $old_base  = $1;
    my $old_minor = $2;

    $minor = 0 if $minor < 0 and !$old_minor;
    map { $_ =~ s/^[^-]+-// } ( $old_base, $version_base );
    $new_minor = $old_minor + $minor if $amend;
}

$new_minor = 0 if $reset;
$new_minor = 1 if $amend and !$new_minor;

my $version_string = gen_ver_string( $commit_count + 1 - $reset, $new_minor );

## no a longer release version (modified)
$git->add($r_vers_file)
    if !$amend
    and $version_string ne $old_version
    and -f $r_vers_file
    and $git->ls_files('cfg/nailara.release_version');

## ./cfg/nailara.source_version ##
open( my $ver_fh, '>' . $version_file ) or die " -> $version_file : $!\n";
print {$ver_fh} "$version_string\n";
close($ver_fh);
$git->add($version_file);

## ./README.md ##
{
    local $/ = undef;
    open( my $md_fh, '<' . $readme_md ) or die "$readme_md : $!\n";
    my $md_copy = my $md_str = <$md_fh>;
    close($md_fh);
    if ( $md_str !~ s|\Q$old_version\E|$version_string|g ) {
        $md_str =~ s|: \d\d\.\d\d\d\d\-\d\d\d\d\.\d+ |: $version_string |g
    }
    if ( $md_str ne $md_copy ) {
        open( $md_fh, '>' . $readme_md ) or die " -> $readme_md : $!\n";
        print {$md_fh} $md_str;
        close($md_fh);
        $git->add($readme_md);
    }
}

print ":\n: updated version : $version_string\n:\n";

### SUBROUTINES ################################################################

sub gen_ver_string {
    my $count_str = shift;
    my $new_minor = shift // '';
    $count_str .= '.' . $new_minor if length($new_minor);
    return join( '-', year_float(), $count_str );
}

sub get_old_version {
    local $/ = undef;
    return '' if !-f $version_file;
    open( my $fh, $version_file ) or die "$version_file : $!\n";
    ( my $old_version = <$fh> ) =~ s|\n+.+$||sg;
    close($fh);
    return $old_version;
}

sub year_float {
    my $time  = shift // time;
    my $float = shift // 4;
    my @time  = gmtime;
    my $year  = 1900 + $time[5];
    my $days = is_leap_year($year) ? 365 : 364;
    my $yday = $time[7]
        + 1 / 24 * ( $time[2] + 1 / 60 * $time[1] + 1 / 3600 * $time[0] );
    return
        sprintf( "%.0${float}f", $year % 100 + ( 1 / $days ) * ( 1 + $yday ) );
}

sub is_leap_year {
    my $year = shift // 1900 + [gmtime]->[5];
    return 0 if $year % 4;
    return 1 if $year % 100;
    return 0 if $year % 400;
    return 1;
}
