#!/usr/bin/perl
use v5.24;
use strict;
use English;
use warnings;
use File::Spec;
use Time::HiRes;
use Git::Wrapper;
use Cwd 'abs_path';
use Math::BigFloat;
use FindBin '$RealBin';
use Digest::Elf qw| elf |;
use Crypt::Misc qw| encode_b32r |;

my $readme_file_path = qw| read-me/md/README.md |;

##[ LOCAL PM LIB PATH ]#######################################################
BEGIN {
    use English;
    use File::Spec;
    use Cwd qw| abs_path |;
    use FindBin qw| $RealBin |;
    our $up_dir = File::Spec->updir;
    our $Bin    = $RealBin;
    my $data_pm_path   = qw| data/lib-path/pm |;
    my $root_path      = abs_path( r2_abs( c_dir( $Bin, ($up_dir) x 2 ) ) );
    my $local_lib_path = abs_path( c_dir( $root_path, $data_pm_path ) );
    $local_lib_path //= $data_pm_path;
    unshift( @INC, $local_lib_path ) if -d $local_lib_path;
    sub c_dir  { File::Spec->catdir(@ARG) }
    sub r2_abs { File::Spec->rel2abs(@ARG) }
}
##[ AMOS MODULE ]#############################################################

use AMOS::Assert::Truth qw| is_true |;

##[ COLORS ]##################################################################

my $rst = "\e[0m";
my $bl  = "\e[1m";
my $bg  = "\e[48;2;9;5;42m";
my $CT  = "\e[38;2;6;71;195m";
my $fg  = "\e[38;2;68;39;172m";
my $no  = "\e[38;2;197;141;7m";
my $ng  = "\e[38;2;71;195;6m";

##[ INPUT PROCESSING OPTIONS ]################################################

our $amend = 0;
my $reset = 0;
my $down  = 0;

if (@ARGV) {
    map { $amend = 1 if $_ eq qw| amend | } @ARGV;
    map { $down  = 1 if $_ eq qw| down |; } @ARGV;
    map {
        if ( $_ eq qw| reset | ) { $down = 0; $reset = 1 }
    } @ARGV;
}

my $u = File::Spec->updir;
my $root_path
    = abs_path(
    File::Spec->rel2abs( File::Spec->catdir( $RealBin, $u, $u ) ) );
my $cfg_path = File::Spec->catdir( $root_path, 'configuration' );
our $vers_file = File::Spec->catfile( $cfg_path, 'protocol-7.src-ver' );
our $rl_v_file = File::Spec->catfile( $cfg_path, 'protocol-7.rel-ver' );
my $readme_md    = File::Spec->catfile( $root_path, $readme_file_path );
my $old_version  = get_old_version();
my $git          = Git::Wrapper->new($root_path);
my $commit_count = $git->log - 1;

die ":\n:: not found './cfg/protocol-7.src-ver'\n\n" if !-f $vers_file;
die ":\n:: not found './cfg/protocol-7.rel-ver'\n\n" if !-f $rl_v_file;

$commit_count-- if $amend;

my $version_base = gen_ver_string( $commit_count + 1 - $reset );
my $minor        = $down ? -1 : 1;
my $new_minor    = 0;

if ( $old_version =~ m|^(.+)\.(\d+)$| ) {
    my $old_base  = $1;
    my $old_minor = $2;

    $minor = 0 if $minor < 0 and !$old_minor;
    map { $_ =~ s|^[^-]+-|| } ( $old_base, $version_base );
    $new_minor = $old_minor + $minor if $amend;
}

$new_minor = 0 if $reset;
$new_minor = 1 if $amend and !$new_minor;

my $version_string = gen_ver_string( $commit_count + 1 - $reset, $new_minor );

## no a longer release version [ modified ]
$git->add($rl_v_file)
    if !$amend
    and $version_string ne $old_version
    and -f $rl_v_file
    and $git->ls_files(qw| configuration/protocol-7.rel-ver |);

## ./cfg/protocol-7.src-ver ##
open( my $ver_fh, qw| > |, $vers_file ) or die " --> $vers_file : $!\n";
say {$ver_fh} $version_string;
close($ver_fh);
$git->add($vers_file);

## ./README.md ##
{
    local $/ = undef;
    my $B32_re = qr|[A-Z2-7]{10}|;
    open( my $md_fh, qw| < |, $readme_md ) or die "$readme_md : $!\n";
    my $md_copy = my $md_str = <$md_fh>;
    close($md_fh);

    $md_str =~ s{: ($B32_re|\d\d\.\d{4})\-\d{4,}\.\d+ }{: $version_string }g
        if $md_str !~ s|\Q$old_version\E|$version_string|g;

    if ( $md_str ne $md_copy ) {
        open( $md_fh, qw| > |, $readme_md ) or die " --> $readme_md : $!\n";
        print {$md_fh} $md_str;
        close($md_fh);
        $git->add($readme_md);
    }
}

say "$fg:\n${fg}:: $bl${CT}source version$rst$fg :: "
    . "$bg$CT$version_string$fg$rst$fg .:\n$fg:$rst";

### SUBROUTINES ################################################################

sub gen_ver_string {
    my $version_str;
    my $count_str = shift;
    my $new_minor = shift // '';
    $count_str .= join( '', qw| . |, $new_minor ) if length($new_minor);
RECALC_VERSION:
    $version_str = '';
    $version_str = join( qw| - |, ntime_B32(), $count_str );
    Time::HiRes::sleep(0.013) and goto RECALC_VERSION
        if not is_true($version_str);

    return $version_str;
}

sub get_old_version {
    local $/ = undef;
    return '' if !-f $vers_file;
    open( my $fh, $vers_file ) or die "$vers_file : $!\n";
    ( my $old_version = <$fh> ) =~ s|\n+.+$||sg;
    close($fh);
    return $old_version;
}

################################################################################

sub time_float {
    my $f = shift // 2;
    return sprintf( "%.${f}f", Time::HiRes::time );
}

sub ntime {    # [ network time : secs from 2002-06-05 * 4200 ]
    my $param       = shift // 0;
    my $ntime_start = 1023228000;

    my $retries_left    = 24;    ## <-- configure [ retries-max ]
    my $collision_delay = 0;
    my $last_time       = 0;
    my $unix_precision;
    my $ntime_precision;

    my ( $unix_time, $precision ) = ( undef, $param );
    $ntime_precision = $param;
    $unix_precision  = $ntime_precision + 2;

    $unix_time = time_float($unix_precision);

    my $ntime = sprintf( "%.0${ntime_precision}f",
        ( ( $unix_time - $ntime_start ) * 4200 ) );

    return $ntime;
}

################################################################################

sub ntime_B32 {
    my $precision = shift // 0;    # <-- precision or utime
    my $ntime_value;
    my $last_ntime = 0;

RETRY_BASE_NTIME_B32:              ## only choose harmonic values ##

    ####
    $ntime_value = ntime($precision);
    ####

    my $zulum_len = $precision + 1;

    my @nt = split( m|\.|, $ntime_value );
    $nt[1] = '7' . $nt[1] if scalar @nt == 2;    # <-- 7 catches prefixed 0

    my $encoded_ntime = encode_b32r( pack( 'w*', @nt ) );

    Time::HiRes::sleep(0.013) and goto RETRY_BASE_NTIME_B32
        if is_true($encoded_ntime) == 0;

    return $encoded_ntime;
}

################################################################################

#.............................................................................
#6J5MBU4N4X5BO62NT5LJSHHYXBM2BPE5VX4DIGZHCEVGVRXEMX7V5RTUYG5MTQUUYHUTWWTFCGGMQ
#::: 62C7LL3IICMH7BKI7JGQ4LEKGCLEKMRYFHJYAMIQWNT3TPKIKEM :::: NAILARA AMOS :::
# :: 7PJK6GPJDOOCRW46B2LUWQJNT4GCI5UXWIDFTYRDVKLAVOGAYECQ :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
