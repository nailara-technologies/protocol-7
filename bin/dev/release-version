#!/usr/bin/perl

use strict;
use warnings;
use File::Spec;
use Cwd 'abs_path';
use FindBin qw($RealBin);

my $release_version;
my $version_seed = 42513;

my $mode = ( @ARGV and $ARGV[0] eq '-m' ) ? 'msg_str' : 'rel_ver';
if ( @ARGV and $ARGV[0] eq '-s' ) { $mode = 'set_tag'; shift @ARGV }

if ( $mode eq 'set_tag' and @ARGV and $ARGV[0] =~ m|^v?(\d+\.\d+\.\d+)$| ) {
    $release_version = $1 and shift @ARGV;    ## <-- setting custom version ##
}

my $u = File::Spec->updir;
my $root_path
    = abs_path( File::Spec->rel2abs( File::Spec->catdir( $RealBin, $u, $u ) ) );
my $version_file = File::Spec->catfile( File::Spec->catdir( $root_path, 'cfg' ),
    'protocol-7.source-version' );
{
    local $| = 1;
    local $/ = undef;
    if ( open( my $v_fh, '<' . $version_file ) ) {
        ( my $raw_str = <$v_fh> ) =~ s|\s.+$||sg;
        ( my $year_float, my $commit ) = split( /-/, $raw_str, 2 );
        if ( not defined $release_version ) {
            (   $release_version = sprintf(
                    "%.3f", ( $commit * $year_float ) / $version_seed
                )
            ) =~ s|(\d)$|\.$1|;
        }
        my $tag_msg
            = sprintf(
            "<< release \\\\// nailara-v%s || source code \\\\// %s >>",
            $release_version, $raw_str );
        if ( $mode eq 'rel_ver' ) {
            print STDOUT ":\n: calculated nailara release : ";
            print STDERR "v$release_version\n";
            print STDOUT ":\n";
        } elsif ( $mode eq 'msg_str' ) {
            print "'$tag_msg'\n";
        } elsif ( $mode eq 'set_tag' ) {
            print ":\n: setting release tag [ 'v$release_version' ]\n:\n::";
            system( 'git', 'tag', "v$release_version", '-m', $tag_msg, @ARGV )
                && die "::<<!>>:\n\n";
            print ":\n\n";
        }
    } else {
        die "$version_file: $!\n";
    }
}
