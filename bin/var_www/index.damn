#!/usr/bin/perl

#       // [ frontend / main ] //

$version = "0.03";

if($ARGV[0] eq "-v"){$CONF{verbose}="yes"}

$CONF{verbose}="yes";

$backend_socket=connect_tcp("127.0.0.1","2380") or die "[E] the backend-server is offline.\n";

auth("web","w3bb3r");
send_data();
request_config();
test_http_header();
quit_session();



# :::[ subroutines ]:::


sub log_ok {
    my $msg     = $_[0];
    my $log_msg =
      &timestamp() . " $CONF{NETWORK_NAME} $DATA{DAEMON_NAME}: $msg\n";
    if ( $CONF{verbose} eq "yes" ) { print $log_msg}
}

sub log_failed {
    my $msg     = $_[0];
    my $log_msg = &timestamp();
    $log_msg .=
      " $CONF{NETWORK_NAME} $DATA{DAEMON_NAME}: $ANSI{bold}$msg$ANSI{normal}\n";
    if ( $CONF{verbose} eq "yes" ) { print $log_msg}
}

sub timestamp { localtime( time() ); }

sub net_out {
    if ( fileno $_[0] ) { syswrite( $_[0], $_[1] ); }
    else { log_failed(" socket $cid is not ready. "); }
}



sub auth
{
    $smiley=<$backend_socket>;
    if($smiley=~/>:\]\n/){ log_ok("[也 smiley ok :)") }
    else{ log_failed("[也 some strange backendserver found!"); exit(1) }
    syswrite( $backend_socket, "AUTH $_[0] $_[1]\n");
    $answer=<$backend_socket>;
    if ($answer=~/YEAH/){ log_ok("[也 successfully authentified :)") }
    elsif($answer=~/GRRR/){ log_failed("[也 access denied :("); die("access denied\n"); }
    else{ log_failed("[也 protocol error :(")}
}

sub request_config
{
    my $bytes=0;
    log_ok("[<] requesting config...");
    syswrite( $backend_socket, "[config:me]\n"); 
    my $answer=<$backend_socket>;
    if($answer=~/RAW (\d+)/){$bytes=$1}else{$bytes=0}
    my $received=read($backend_socket,$config,$bytes);
    foreach my $conf_line (split(/\n/,$config))
    {	(my $_key,my $_value)=split(/=/,$conf_line); $DATA{$_key}=$_value }
}


sub connect_tcp
{
    use IO::Socket;
    if($rsock = new IO::Socket::INET (PeerAddr=>"$_[0]",PeerPort=>"$_[1]",Proto=>'tcp'))
    {log_ok("connection [$_[0]:$_[1]] established.");}
    else{log_failed("tcp connect failure: can not connect to $_[0] at port $_[1] ($!)");}
    return $rsock;	
}

sub send_data
{
    my @config=@_; my $cid=shift(@config);
    log_ok("[>] transfering request data...");
    syswrite( $backend_socket, "[config:request]\n");
#    foreach $_key (keys(%ENV)){$data="$_key=".$ENV{$_key}; print $data."\n"}
    my $answer=<$backend_socket>;
    if($answer=~/RAW (\d+)/){$bytes=$1}else{$bytes=0}
    
    if($bytes>0)
    {
	read($backend_socket,$config,$bytes);
	$config=~s/\s+/ /g; $config=~s/\s$//;
	(my @_keys)=split(/ /,$config); $transfer="";
	foreach $_key (@_keys){$transfer.="{$_key,hex:".unpack("h*",$ENV{$_key})."}\n"}
	syswrite( $backend_socket, "[request:".length($transfer)."]\n");
	syswrite($backend_socket,$transfer);
    }
    else{ log_failed("no config received") }
}


sub quit_session
{
    print $backend_socket "[bye]\n";
    shutdown($backend_socket,2);
    close($backend_socket);
#    print "exiting..";
    exit(0);
}

sub test_http_header
{
    my $server=$ENV{SERVER_SOFTWARE}; $server=~s/\s+.*//g;

    $html="";
    
    parse_skin();
 
    my $l=length($html);

    if($DATA{'content-type'} eq ''){$DATA{'content-type'}='text/html'}
    
    syswrite(STDOUT,"HTTP/1.1 200 OK\nServer: $server (mod_perl) + damn.web $version\nConnection: close\nContent-Length: $l\nContent-Type: $DATA{'content-type'}\n\n");

    syswrite(STDOUT,$html);
    
#        dump_config();

}

sub parse_skin
{
    $DATA{'site'}=~s/\/|\.//g; $DATA{'skin'}=~s/\/|\.//g;
    if($DATA{'skin'} eq '')
    {
	$DATA{'content-type'}='text/plain';
	$html=fetch_data('file') # todo... this can block and eat mem :/
    }
    else
    {
        $DATA{'content-type'}='text/html';
	$html=get_file($DATA{'site'}."/".$DATA{'skin'}.".skin");
#	while($html=~/<\.:\[([^\]]+)\]:\.>/){my $replace=fetch_data($1); $html=~s/<\.:\[$1\]:\.>/$replace/gm} # what a bloat ;)
	$html =~ s/<\.:\[([^\]]+)\]:\.>/&fetch_data($1)/sge;

    }
}

sub fetch_data
{
    print $backend_socket "[content:$_[0]]\n";
    my $answer=<$backend_socket>;
    if($answer=~/RAW (\d+)/){read($backend_socket,$content,$1);return $content}
    else{ log_failed("no content received ($_[0])") }
}


sub get_file
{
    my $file='',$FILE='';
    if(!open($FILE,"<$_[0]")){log_failed("can not open file \'$_[0]\'");return -1}
    return join('',<$FILE>);
}


sub dump_config
{
    foreach my $_key (keys(%DATA))
    {$_value=$DATA{$_key};print "\$DATA{$_key}='$_value'\n"}
}

#:::[EOF]:::.
