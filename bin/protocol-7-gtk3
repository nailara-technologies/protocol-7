#!/usr/bin/env perl

use strict;
use warnings;

use English;
use Module::Load;
use Cwd 'abs_path';
use File::Spec;
use File::Spec::Functions;
use FindBin qw| $RealBin $RealScript |;
eval { load 'File::Which', 'which' };
my $which_loaded = $EVAL_ERROR ? 0 : 1;

### wrapper code to load Gtk3 module at compile time ###

BEGIN {
    ( my $local_lib_path = $PROGRAM_NAME ) =~ s|/[^/]+/[^/]+$|/lib/pm|;
    unshift( @INC, $local_lib_path ) if -d $local_lib_path;
}

my $agentname;
my @call_args = @ARGV;

## [script path] ##
my $exec_path = abs_path( catfile( $RealBin, $RealScript ) );
my $bin_path  = abs_path($RealBin);
## [perl path] ##

my $perl_path;
eval {
    use Config;
    $perl_path = $Config{'perlpath'};
    if ( $^O ne 'VMS' ) {
        $perl_path .= $Config{'_exe'}
            unless $perl_path =~ m|\Q$Config{_exe}\E$|i;
    }
};
$perl_path //= $EXECUTABLE_NAME;

my $protocol_7_path = catfile( $bin_path, 'protocol-7' );
die "<< '$protocol_7_path' : path not found >>" if !-f $protocol_7_path;

## agent name [ link derived ] ###
if ( -l File::Spec->rel2abs($PROGRAM_NAME) ) {
    $agentname = lc($PROGRAM_NAME);
    $agentname =~ s{^.*protocol-7\.|[\. ]$}{};
    @call_args = ( $agentname, @ARGV );
}
$agentname //= 'protocol-7';
exec( $perl_path, '-C31', '-MGtk3', $protocol_7_path, @call_args )
    or die "failed to start $agentname agent [ \l$OS_ERROR ]";

# ______________________________________________________________________________
#\\BRQUM37AVEIPMRDQ3SUAQFZN7UE2WJQGHAER7RNGRSD6OAZRIGVS7XAVCZQJQHGMWFSRPSOYTD742
# \\ DX7ESYUC3DACI6NZ3NRFUAEL3HNCYWWU73PF2ZTEPJWUZAOZUOFH \\// C25519-BASE-32 //
#  \\// BF7PDWDPJCWBUXHGAEWFHYGYVMYMYPBXDSKOPMZUVKOQW3CHYAY \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
