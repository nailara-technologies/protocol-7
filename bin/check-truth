#!/usr/bin/perl
use v5.24;
use strict;
use English;
use warnings;

####           ####
##  check-truth  ##
###            ####

my @modes;    ##  AMOS::Assert::Truth elf truth modes  ##

my $FXI = 202;    ## program return code for asserted FALSE ##

##[ RUNTIME OPTIONS ]#########################################################

my $silent          = 0;
my $plain           = 0;
my $force_numerical = 0;
my $no_num_chk      = 0;
my $only_FALSE      = 0;
my $only_TRUE       = 0;

## special parameters [ used by harmony-osd ] ##
if ( @ARGV > 1 and $ARGV[0] =~ m{-ext(-num)?} and shift(@ARGV) ) {
    $silent = 1;
    if ( defined ${^CAPTURE}[0] and ${^CAPTURE}[0] eq qw| -n | ) {
        $force_numerical = 1;
    }
    goto SKIP_PARAMS;
}
## regular invocation ##
$silent = 1 if @ARGV > 1 and $ARGV[0] eq qw| -silent |       and shift(@ARGV);
$plain  = 1 if @ARGV > 0 and $ARGV[0] eq qw| -plain |        and shift(@ARGV);
$force_numerical = 1 if @ARGV > 1 and $ARGV[0] eq qw| -num | and shift(@ARGV);
$no_num_chk = 1 if @ARGV > 1 and $ARGV[0] eq qw| -nonum |    and shift(@ARGV);
$only_FALSE = 1 if @ARGV > 0 and $ARGV[0] eq qw| -F |        and shift(@ARGV);
$only_TRUE  = 1 if @ARGV > 0 and $ARGV[0] eq qw| -T |        and shift(@ARGV);

if ( @ARGV > 1 and $ARGV[0] =~ m|(-elf)?-modes?| ) {
    die ":\n: mode parameter not valid [ <n>[,<n>..,] ]\n:\n"
        if $ARGV[1] !~ m|^\d{1,2}(,\d{1,2})*$|;
    shift(@ARGV) and @modes = split( ',', shift(@ARGV) );
}

SKIP_PARAMS:

##[ LOCAL PM LIB PATH ]#######################################################

BEGIN {
    use English;
    use File::Spec;
    use Cwd qw| abs_path |;
    use FindBin qw| $RealBin |;
    our $up_dir = File::Spec->updir;
    our $Bin    = $RealBin;
    my $data_pm_path   = qw| data/lib-path/pm |;
    my $root_path      = abs_path( r2_abs( c_dir( $Bin, $up_dir ) ) );
    my $local_lib_path = abs_path( c_dir( $root_path, $data_pm_path ) );
    $local_lib_path //= $data_pm_path;
    die "\n:\n:: not found : $local_lib_path\n:\n" if !-d $local_lib_path;
    unshift( @INC, $local_lib_path )               if -d $local_lib_path;
    sub c_dir  { File::Spec->catdir(@ARG) }
    sub r2_abs { File::Spec->rel2abs(@ARG) }
}

##[ AMOS MODULE ]#############################################################

use AMOS;    ## colors ##
use AMOS::Assert::Truth;

##[ INPUT PROCESSING OPTIONS ]################################################

my $check_elf = $force_numerical ? 0 : 1;
my $numerical = $no_num_chk ? 0 : $check_elf ? 2 : 1;

##[ DATA INPUT MODES ]########################################################

my $stdin_mode = 0;
my $single_line_input;

if (@ARGV) {
    $single_line_input = join( ' ', @ARGV );
} else {
    $stdin_mode = 1;
}

## COMMAND LINE INPUT ##
exit( check_input($single_line_input) ) if not $stdin_mode;

## STDIN \ PIPE MODE ##
my $success_code = 0;

while (<STDIN>) {
    chomp($ARG);
    $success_code = $FXI if not check_input($ARG);
}

exit($success_code);

##############################################################################

sub check_input {
    my $check_str = shift // '';
    my ( $true, @r_modes )
        = is_true( $check_str, $numerical, $check_elf, @modes );
    my $mode_str = @r_modes ? sprintf( ' : %s', join( ' ', @r_modes ) ) : '';

    if ( $true and not $only_FALSE ) {
        if ( $plain and not $silent ) {
            say $check_str;
        } elsif ( not $silent ) {
            say "$C{0}:\n$C{0}:: $C{B}$C{T}TRUE$C{R}$C{0}$mode_str :: "
                . "$C{b}$C{T}$check_str$C{R}$C{0} .:\n$C{0}:$C{R}";
        }
        return 0;
    } elsif ( not $true and not $only_TRUE ) {
        if ( $plain and not $silent ) {
            say $check_str;
        } elsif ( not $silent ) {
            say "$C{0}:\n$C{0}:: $C{B}$C{g}FALSE$C{R}$C{0}$mode_str : "
                . "$C{b}'$C{g}$check_str$C{0}'$C{R}$C{0} :.\n$C{0}:$C{R}";
        }
        return $FXI;
    }
}

#.............................................................................
#77QAXM4VHN2SRYYSBPW6H3OZNG2YT4MSXX6BHLD6P2XGWA4GKD46OS7YSQYUDVAJHM6PJBU6OJJEO
#::: P5CEDX2SXYCJECKQYBEIQJWM5EAT27YQVDGEO3DMRPMYM6KXIEU :::: NAILARA AMOS :::
# :: KK6D6H6W42RMC2N232ARLT5XG4WQPIDBBUMSCY57QS3C43PCL4DI :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
