#!/usr/bin/perl

use v5.24;
use strict;
use English;
use warnings;

use FindBin;
use Sys::Hostname;
use Term::ReadPassword;
use Crypt::Digest::SHA1 qw( sha1_hex );    ## <-- to be replaced.., [ LLL ]

my %DATA;
my $user;
my $pass;
my $re_pass;
my $node;
my $zenka = shift // qw| cube |;
if ( $zenka =~ s|^([^\.]+)\.|| ) {
    $node = $LAST_PAREN_MATCH;
} else {
    $node = hostname;
}

$DATA{'conf'}{'root'} = $FindBin::Bin;
$DATA{'conf'}{'root'} =~ s|/bin$||;
$DATA{'conf'}{'file'}
    = $DATA{'conf'}{'root'} . "/configuration/zenki/$zenka/auth.users";

printf "\n ::[ %s.%s user generator ]\n ::\n", $node, $zenka;

print " :: enter username :. ";
chomp( $user = <STDIN> );
$user =~ s,\t|\s,,g;
while (not length( $pass // '' )
    or not length( $re_pass // '' )
    or $pass ne $re_pass ) {
    $pass    = uc sha1_hex( read_password(" :: enter password :. ") );
    $re_pass = uc sha1_hex( read_password(" :: once again..,  :. ") );
    if ( $pass ne $re_pass ) {
        print " ::\n :::[ passwords do not match ]\n\n";
    }
}

if ( $pass eq qw| DA39A3EE5E6B4B0D3255BFEF95601890AFD80709 | ) {
    die " ::\n ::. .., aborted. [ empty password ]\n\n";
}

my $new_file = 0;

if ( !-f $DATA{'conf'}{'file'} ) {
    $new_file = 5;    ## true ##
    open( NEW, ">$DATA{'conf'}{'file'}" )
        or die " ::\n :::[ cannot create user config file ]\n\n";
    print NEW "\n  .: nailara user config :.\n\n";
    close(NEW);
}

my @user_config;
my $user_exists = 0;
open( CONF, $DATA{'conf'}{'file'} )
    or die " ::\n :::[ cannot open user config file ]\n\n";
foreach my $line (<CONF>) {
    if ( $line =~ m|^auth.setup.usr.(\S+)[ \t]*=[ \t]*(\S+)$| ) {

        my $found_user = ${^CAPTURE}[0];
        $user =~ s,\s+|\t+,,g;
        my $found_pwd = ${^CAPTURE}[1];
        $found_pwd =~ s,\s+|\t+,,g;

        if (    not $user_exists
            and defined $found_user
            and $found_user eq $user ) {
            $user_exists = 5;    ## true ##
            push( @user_config,
                sprintf( "auth.setup.usr.%s  =  %s\n", $user, $pass ) );
        } else {
            push( @user_config, $line );   ##  keep unchanged [ not ours ]  ##
        }
    } else {
        push( @user_config, $line );       ##  keep unchanged [ not ours ]  ##
    }
}
close(CONF);

my @WRITE;
my $found_signature = 0;    ## avoiding apend after signature footer ##

if ( not $user_exists ) {
    my $next_line;
    while ( $next_line = shift @user_config ) {
        if ( $next_line =~ m|^#[\.\,]{77}$| ) { $found_signature = 5; last }
        push @WRITE, $next_line;
    }
    ##  appending new entry  ##
    push @WRITE, sprintf( "auth.setup.usr.%s  =  %s\n", $user, $pass );
    push @WRITE, "\n", $next_line, @user_config;
} else {
    @WRITE = @user_config;  ##  user entry is already present [ replaced ]  ##
}

open( CONF, qw| > |, $DATA{'conf'}{'file'} )
    or die " ::\n :::[ cannot write user config file ]\n\n";
print CONF @WRITE;
close(CONF);

print " ::\n :\n\n";

#,,..,.,.,,..,.,.,,..,,..,.,,,...,.,.,.,,,.,,,..,,...,...,.,.,...,.,.,,,,,...,
#FPJYC72OMA7XRIPUOTKB6BDKJSHOEAYDTLOA7RR55277BRYVXFEHFQC3M2EV7I36YJTD2GGO3X66Q
#\\\|MWFRKXNMO4D2FROMOP6BLY27APT5MJOAUXG3A5GVT32ISWKJXXG \ / AMOS7 \ YOURUM ::
#\[7]W5MVB6CNF4AC63CKWMZSUAEMOKO2M33WYAF6MEF4SW7FBQJ35OAY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
