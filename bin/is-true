#!/usr/bin/perl
use v5.24;
use strict;
use English;
use warnings;

###         ###
##  is-true  ##
###         ###

my @modes;    ##  AMOS7::Assert::Truth elf truth modes  ##

my $FXI = 202;    ## program return code for asserted FALSE ##

##[ RUNTIME OPTIONS ]#########################################################

my $plain           = 0;
my $silent          = 0;
my $stdin_mode      = 0;
my $single_stdin    = 0;
my $force_numerical = 0;
my $no_num_chk      = 0;
my $only_FALSE      = 0;
my $only_TRUE       = 0;
my $template;

## special parameters [ used by harmony-osd ] ##
if ( @ARGV > 1 and $ARGV[0] =~ m{-ext(-num)?} and shift @ARGV ) {
    $silent = 1;
    if ( defined ${^CAPTURE}[0] and ${^CAPTURE}[0] eq qw| -n | ) {
        $force_numerical = 1;
    }
    goto SKIP_PARAMS;
}

## template parameter
##
$template = shift @ARGV
    if @ARGV > 1
    and $ARGV[0] eq qw| -tem |
    and shift @ARGV;

## regular invocation ##
##
$silent = 5 if @ARGV > 1 and $ARGV[0] eq qw| -silent |       and shift @ARGV;
$plain  = 5 if @ARGV > 0 and $ARGV[0] eq qw| -plain |        and shift @ARGV;
$force_numerical = 5 if @ARGV > 0 and $ARGV[0] eq qw| -num | and shift @ARGV;
$no_num_chk = 5 if @ARGV > 1 and $ARGV[0] eq qw| -nonum |    and shift @ARGV;
$only_FALSE = 5 if @ARGV > 0 and $ARGV[0] eq qw| -F |        and shift @ARGV;
$only_TRUE  = 5 if @ARGV > 0 and $ARGV[0] eq qw| -T |        and shift @ARGV;

if ( @ARGV and $ARGV[0] eq qw| -single-stdin | and shift @ARGV ) {
    $stdin_mode = $single_stdin = 5;
}

if ( @ARGV > 1 and $ARGV[0] =~ m|(-elf)?-modes?| ) {
    die ":\n: mode parameter not valid [ <n>[,<n>..,] ]\n:\n"
        if $ARGV[1] !~ m|^\d{1,2}(,\d{1,2})*$|;
    shift @ARGV and @modes = split( ',', shift @ARGV );
}

SKIP_PARAMS:

##[ LOCAL PM LIB PATH ]#######################################################

BEGIN {
    use English;
    use File::Spec;
    use Cwd qw| abs_path |;
    use FindBin qw| $RealBin |;
    our $up_dir = File::Spec->updir;
    our $Bin    = $RealBin;
    my $data_pm_path   = qw| data/lib-path/pm |;
    my $root_path      = abs_path( r2_abs( c_dir( $Bin, $up_dir ) ) );
    my $local_lib_path = abs_path( c_dir( $root_path, $data_pm_path ) );
    $local_lib_path //= $data_pm_path;
    die "\n:\n:: not found : $local_lib_path\n:\n" if !-d $local_lib_path;
    unshift( @INC, $local_lib_path )               if -d $local_lib_path;
    sub c_dir  { File::Spec->catdir(@ARG) }
    sub r2_abs { File::Spec->rel2abs(@ARG) }
}

##[ AMOS MODULE ]#############################################################

use AMOS7;    ## colors ##

use AMOS7::Assert::Truth    ##  validation code  ##
    qw| is_true is_true_with_template is_template_syntax_valid |;

##[ INPUT PROCESSING OPTIONS ]################################################

my $check_elf = $force_numerical ? 0 : 1;
my $numerical = $no_num_chk ? 0 : $check_elf ? 2 : 1;

##[ DATA INPUT MODES ]########################################################

my $single_line_input;

if (@ARGV) {
    $single_line_input = join( ' ', @ARGV );
} else {
    $stdin_mode = 1;
}

## COMMAND LINE INPUT ##
exit( check_input($single_line_input) ) if not $stdin_mode;

## STDIN \ PIPE MODE ##
my $success_code = 0;

if ($single_stdin) {
    $success_code = $FXI if not check_input( join( '', <STDIN> ) );
} else {
    while (<STDIN>) {
        chomp($ARG);
        $success_code = $FXI if not check_input($ARG);
    }
}

exit($success_code);

##############################################################################

sub check_input {

    my $check_str = shift // '';

    my ( $true, @r_modes );

    if ( not defined $template ) {

        ( $true, @r_modes )
            = is_true( \$check_str, $numerical, $check_elf, @modes );

    } elsif ( not is_template_syntax_valid( $template, 5 ) ) {
        error_exit( 'template syntax is not valid [ %s ] <{NC}>', $template );
    } else {

        ( $true, @r_modes )
            = is_true_with_template( $template, \$check_str, $numerical,
            $check_elf, @modes );

    }

    my $mode_str = @r_modes ? sprintf( ' : %s', join( ' ', @r_modes ) ) : '';

    if ( $true and not $only_FALSE ) {
        if ( $plain and not $silent ) {
            say $check_str;
        } elsif ( not $silent ) {
            my $linefeed       = '';
            my $trailing_space = ' ';
            if ( index( $check_str, "\n", 0 ) != -1 ) {
                $check_str =~ s|^([^\n]+)$|$C{T}$C{b}$1$C{R}|mg;
                $linefeed       = $C{'R'} . "\n\n";
                $trailing_space = "\n";
            }
            say "$C{0}:\n$C{0}:: $C{B}$C{T}TRUE$C{R}$C{0}$mode_str :: "
                . $linefeed
                . "$C{0}'$C{b}$C{T}$check_str$C{R}$C{0}'"
                . $trailing_space
                . "$C{T}.:$C{R}\n$C{0}:$C{R}";
        }
        return 0;
    } elsif ( not $true and not $only_TRUE ) {
        if ( $plain and not $silent ) {
            say $check_str;
        } elsif ( not $silent ) {
            my $linefeed       = '';
            my $trailing_space = ' ';
            if ( index( $check_str, "\n", 0 ) != -1 ) {
                $check_str =~ s|^([^\n]+)$|$C{0}$C{b}$1$C{R}|mg;
                $linefeed       = $C{'R'} . "\n\n";
                $trailing_space = "\n";
            }
            say "$C{0}:\n$C{0}:: $C{B}$C{g}FALSE$C{R}$C{0}$mode_str : "
                . $linefeed
                . "$C{0}'$C{b}$C{g}$check_str$C{0}$C{R}'$C{0}"
                . $trailing_space
                . "$C{0}:.$C{R}\n$C{0}:$C{R}";
        }
        return $FXI;
    }
}

#,,,,,.,,,.,.,,.,,,.,,..,,.,,,..,,...,,.,,.,.,..,,...,...,.,.,,,,,,,.,,..,,,.,
#6PJIJXTGCSFA36PAK3RUXO3UHK7GASGARNWBGL5XEF6DC5LKXUY7ZA5NJKIJL3L2LG7RK7YEGOA74
#\\\|NJLT4SPBRUFEB3PN463TPEPSGVPYLYP63P5ICOYIJMFYZWNKWHL \ / AMOS7 \ YOURUM ::
#\[7]K4MVNXONL4YSWUHYXQ5JLQKPPHAM4ZQ4ZDILGSNSETFYHNZLEEAQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
