#!/usr/bin/perl

use v5.24;
use strict;
use warnings;


## ###### ############ ##
##  NOTES  LTE7YOURUKY ##
## ###### ############ ##


BEGIN {
    use English;
    use Cwd qw| abs_path |;
    my $script_path = abs_path($PROGRAM_NAME);
    ( my $local_lib_path = $script_path )
        =~ s|/[^/]+/[^/]+$|/data/lib-path/pm|;
    unshift( @INC, $local_lib_path ) if -d $local_lib_path;
}

my $FXI = 202;    ## program return code for asserted FALSE ##

use AMOS::CHKSUM::ELF qw| elf_chksum |;
use AMOS::Assert::Truth;    ## <-- expand \ use ..,

my @elf_modes = @AMOS::Assert::Truth::assertion_modes;

use Getopt::Std;
use Math::BigFloat;

binmode( STDOUT, ':encoding(UTF-8)' );

getopts( 'VNDC:canhqvBl:d:A:T:Zz', \my %option );

no warnings 'experimental';

## [ PREMISE ]
##
my $false = '769230'; #  <-- L\ == FALSE ## [ 23 / 13 = [0.]230769..,] PYRAMID
##                                                          ^^^^^^     =======
my $true = '461538';  # <-- =5T == TRUE  ## [  6 / 13 = [0.]461538..,]  CUBE
##                                                          ^^^^^^      ====

#                                            ## [ 230769 / 13 = [17751.]461538.]
#                                                 ^^^^^^                ^^^^^^
#              < NOTE : result rolls over with divided number >
#
#                                               [   10^7 / 13 = 769230.769230.,]
#                                                               ^^^^^^
#                                               [   10^7 / 26 = 384615.384615.,]
#                                                               ^^^^^^

## MAYA [0]910 Ύ [4] [0]511 ǿ [0]932 Τ [0]461 Ǎ [0]538 Ț  ##  0 :  ǍȚ  <--  TRUE
## MAYA [0]910 Ύ [4] [0]511 ǿ [0]932 Τ [0]076 L [0]923 Λ  ##  1 :  ΛL  <-- FALSE

### ˃(˫
#
##        ZULUM : 0000 :    dark    :  female .: [0]707 :: ˃ #      love
##       AZURUM : 0010 :   light    :   male  :. [0]040 :: ( #      pain
##  7 : Septium : 0110 : blacklight : dancing :: [0]747 :: ˫ # trance-mutation

our $assertion = { 'false' => $false, 'true' => $true };

$option{'A'} //= "-r4.2 -e -d$option{z} -S"
    if $option{'Z'}
    and defined $option{'T'}
    and $option{'T'} eq 'R';
$option{'z'}
    //= 8;    ## <-- digit read size override for 'asc-enc' fullscreen mode
$option{'A'} //= "-r4.2 -d$option{z} -S"
    if $option{'Z'};    ## -Z is 'full-screen' mode
$option{'T'} //= rand(2) % 2 ? '851' : '857' if $option{'Z'}; # <-- fullscreen
$option{'T'} //= qw| 857 |;    ## <-- 'asc-enc' table [ when in use ]
$option{'l'} //= 384;          ## <-- blue midnight wish entropy size
$option{'d'}
    //= 0;    ## <-- divisor [ -d <n> ] : check result instead of input ##
$option{'B'} = !$option{'B'};    ## BMW mode enabled by default

my @asc_enc = qw| asc-enc -q |;

die ":\n:: divisor not valid [ expected numerical ]\n\n"
    if $option{'d'} =~ m|^\-d(\d+(\.\d+)?)$|;

$option{'C'} //= 0;              ## asc-enc -d<n> [ number width ]
$option{'h'} = 1 if !$option{'S'};
$option{'q'} = 1 if $option{'v'} or $option{'V'};

my $nailara_bg  = "\e[48;2;9;5;42m";
my $blacklight  = "\e[38;2;68;39;172m";
my $nailara_fg  = "\e[38;2;38;46;153m";
my $neon_orange = "\e[38;2;197;141;7m";
my $neon_green  = "\e[38;2;71;195;6m";
my $true_color  = "\e[38;2;6;71;195m";
my $blink       = "\e[6m";
my $bold        = "\e[1m";
my $reset       = "\e[0m";

$SIG{'INT'} = sub { print "\b\b"; int_exit() };

my %col = (
    'str' => $nailara_bg . $nailara_fg,
    'bg'  => $nailara_bg,
    'fg'  => $nailara_fg,
    'fT'  => $true_color,
    'r'   => $reset,
    'm_y' => $nailara_bg . $true_color,
    'm_n' => $nailara_bg . $neon_green,
    'y'   => $blink . $blacklight,
    'n'   => $neon_green,
    'b'   => $blacklight,
);

# [8:LEAVE_SRC]
my $check_string = Encode::decode_utf8( join( ' ', @ARGV ), 8 );

say ":\n:: expected numerical check value [ -n option ]\n"
    and exit(13)
    if $option{'n'}
    and $check_string !~ m|^\-?\d+(\.\d+)?$|;

my @elf_checksums = (
      $option{'n'}
    ? $check_string
    : map { elf_chksum( $check_string, 0, $ARG ) } @elf_modes
);

my $status;
my @results;
my $num_val;
my $bmw_checksum;
eval { chomp( $bmw_checksum = qx| bmw -d -$option{l} $check_string | ); }
    if $option{'B'} and defined $option{'l'};

#################
my $accuracy = 13;
#################

Math::BigFloat->round_mode('trunc');
Math::BigFloat->accuracy($accuracy);

my $return_code = 0;    ## code for TRUE ##

state $shown_truth_state = 0;

foreach my $elf_checksum ( reverse sort @elf_checksums ) {

    if ( $option{'d'} != 0 ) {
        $elf_checksum
            = Math::BigFloat->new($elf_checksum)
            ->bdiv( $option{'d'}, $accuracy );
        $check_string = $elf_checksum;
    }

    Math::BigFloat->accuracy( $accuracy + length $elf_checksum );

    my $calc     = Math::BigFloat->new($elf_checksum);
    my $calc_str = $calc->bdiv( 13, $accuracy + length $elf_checksum );

    $calc_str = sprintf( qw| %0.*f |, $accuracy, $calc_str )
        if $calc_str !~ m|\.(\d+)|
        or length($1) < $accuracy;

    push( @results, $calc_str );

    my $line_str = sprintf '[ %s ]', $calc_str;
    my $dot_pos  = index( $line_str, '.' ) - 1;
    $dot_pos = length($calc_str) if $dot_pos < -1;

    my $sp_0_len = 37 - length($check_string);
    $sp_0_len = 5 if $sp_0_len < 5;

    my $space_0 = ' ' x $sp_0_len;

    $line_str =~ s{(*plb:\.)(\d*?)($true|0000+ )}
              {$1$col{'m_y'}$2$col{'r'}$col{'b'}}
        or $line_str =~ s{(*plb:\.)(\d*?)($false)}
                     {$1$col{'m_n'}$2$col{'r'}$col{'b'}};

    $calc_str =~ s|^\d+\.||;
    my $result = '< ? >';

    if ( $calc_str =~ m|($true(*nla:\d+\.))| or $calc_str =~ m|0000+$| ) {
        $result
            = "$col{fT}>:] $col{b} [ $col{fT}TRUE $col{b}>:]$col{r}$col{b} ]";
    } elsif ( $calc_str =~ m|$false| ) {
        $result      = "$col{fg}>:| $col{b} [ $col{'n'}FALSE$col{b} ]";
        $return_code = $FXI;    ## code for FALSE ##
    }

    $col{'str'} = $true_color if $return_code == 0;

    my $q = $option{'n'} ? '' : "$col{'b'}'$col{'r'}";

    if ( not $option{'q'} and not $option{'N'} ) {

        say "\n$space_0$q$col{'str'}$check_string"
            . "$col{'r'}$q $col{fg} === $col{r}"
            . " $result\n"
            if not $shown_truth_state++;

        say sprintf '   %97s', $line_str;
    }
}

print "$col{r}\n  " if not $option{'q'} and not $option{'N'};

$status = $return_code == 0 ? qw| true | : qw| false |;

if ( not $option{'q'} ) {
    foreach my $result (@results) {

        ( $num_val = $result ) =~ s{\.(\d+)?$|\D+}{}g;

        if ( $option{'v'} ) {    ## entire division by 13 result ##
            say $result;
        } elsif ( $option{'V'} ) {    ## first result part ##
            say $num_val;
        }

        display_result( $status, $result, $option{'T'}, $num_val );

    }
}

## done. ##
say sprintf "\n%s;.,%s\n", $col{'b'}, $col{'r'}
    if not $option{'q'} and not $option{'N'};
###
exit($return_code);
##

##[ SUBROUTINES ]#########################################################

sub display_result {

    my $status = shift;    ## [ true | false ]

    ( my $result = shift ) =~ s{\.(\d+)?$|\D+}{}g;
    my $sub_zulum = $LAST_PAREN_MATCH;

    my $table_name = shift // qw| 857 |;

    my $display = shift;
    if ( defined $display ) {
        $display =~ s{\.(\d+)?$|\D+}{}g;
        $result = $display if length($display);
    }

    my $offset
        = $sub_zulum =~ m|0{6,}$|
        ? 0
        : index( $sub_zulum, $assertion->{$status} );

    my $shift_mode = qw| right |;    ## [ left | right ] ##

    my $result_1_0;
    my $result_1_1;

    my $s_len         = 1 + length($result) % 3;
    my $change_offset = scalar( length($result) % 3 ? 1 : 0 );

    if ( $shift_mode eq qw| left | ) {
        $result_1_0 = substr( $result, $offset, length($result) - $s_len );
        $result_1_1 = substr( $result, 0,       $offset );
    } elsif ( $shift_mode eq qw| right | ) {
        $result_1_0 = substr( $result, -$offset, $offset );
        $result_1_1 = substr( $result, 0,        length($result) - $offset );
    }    # else [ 'none' ]

    $result = join( '', $result_1_0, $result_1_1 );

    @asc_enc = ( qw| asc-enc -qQM -r0 -C |, $table_name );

    push( @asc_enc, qw| -s0 | ) if $status ne qw| true |;

    push( @asc_enc, qw| -d |, $option{'C'} );

    my @run_args;

    $check_string =~ s'(\.\d+$|\D+)''g if $option{'c'};

    ( my $code = $option{'c'} ? $check_string : $result );
    die ":\n:: check-string not numerical ['$code']\n\n" if $code !~ m|^\d+$|;
    ##
    if ( defined $option{'A'} )
    {    ## -A'<param>' : asc-enc pass through parameter
        my $passthrough_params = join( ' ', split( ' +', $option{'A'} ) );
        $passthrough_params = "-$passthrough_params"
            if $passthrough_params !~ m|^-|;
        ####
        @run_args = ( @asc_enc, split( ' +', $passthrough_params ), $code );
    } else {
        ####
        push( @asc_enc, qw| -s0 | ) if $return_code == $FXI; # false. no delay
        @run_args = ( @asc_enc, $code );
    }

    say "< asc-enc exec-args > " . join( ' ', @run_args ) if $option{'D'};

    ##########################################
    int_exit() if system(@run_args) >> 8 == 4;
    ##########################################

    return if $status eq qw| false |;

    my $assertion_result = system( $PROGRAM_NAME, qw| -q |, $num_val ) >> 8;
    if ( $assertion_result == 0 ) {    ##  deeper truth .,
        my @run_args = ( $PROGRAM_NAME, '-C' . $option{'C'} );
        push( @run_args, '-A' . $option{'A'} ) if $option{'A'};
        push( @run_args, '-T' . $option{'T'} ) if $option{'T'};
        say "< exec-args > " . join( ' ', @run_args, '-N <n>' )
            if $option{'D'};
        int_exit() if system( @run_args, qw| -N |, $num_val ) >> 8 == 4;

    } elsif ( $assertion_result == 4 ) {
        int_exit();
    }
}

sub int_exit { print $reset; exit(4) }

#.............................................................................
#MEKOHTE6CPJ5CBSXCOQQRZ7PGRCC2TZEFNEH4OMRZJUPXVEUILRX2UA46LSF43N7HCZDGHSJ7I6AA
#::: 4H6UO7GJPPCWPSLNLA4ZZXXTADDELADTB762USJC3XX3CVLKWGK :::: NAILARA AMOS :::
# :: QIOEHPGPN3XEDAI3BM3PEBM74JM4IGQS2VFUOG6IZ3LIQGI2H6BA :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
