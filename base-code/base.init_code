# >:]

# name  = base.init_code
# descr = initializing base module

use Safe;
use Module::Load;
use Time::Seconds;

map { <base.perlmod.loaded>->{$ARG} = 1 }
    qw| Safe Module::Load Time::Seconds |;

<[base.perlmod.autoload]>->('Event');
<[base.perlmod.autoload]>->('IO::AIO');

<[base.perlmod.autoload]>->( 'Fcntl', qw| :mode | ); #S_IWUSR,S_IWGRP,S_ISFIFO
<[base.perlmod.load]>->( 'Time::Local',   qw| timegm_nocheck | );
<[base.perlmod.load]>->( 'BSD::Resource', qw | getrlimit setrlimit | );

<[base.perlmod.load]>->(
    'POSIX', qw| strftime uname getcwd setsid sys_wait_h |
);

##[ AMOS MODULE ]#############################################################

<[base.perlmod.load]>->( 'AMOS::Assert::Truth', qw | is_true | );

##############################################################################

##  phase out for List::MoreUtils  ##  [LLL]

use List::Util qw <
    reductions pairvalues pairfirst pairkeys pairgrep unpairs
    uniqstr uniqnum uniqint shuffle product pairmap reduce notall
    minstr maxstr pairs first sum0 none sum min max any all
>;
<base.perlmod.loaded>->{'List::Util'} = 1;

## installing cryptographically safe fork version ##
##
no warnings qw| once redefine |;
map { eval "no warnings $ARG" } qw| once redefine |;
*CORE::GLOBAL::fork = sub { return $code{'base.fork'}->(@_) };
use warnings qw| once redefine |;
##

## init some variables ##

<zenka.shutdown> //= 0;

$data{'debug'} //= {};
## reducing debug [ verbosity >= 2 ] log output ###
##
<debug.sig_int_dump> = 0;    ## dump %data state on SIGINT in log level 2 ##

## skipping p7-log.append commands in log level 2 debug output ##
<debug.skip_log_msg> = 1;

## skipping p7-zenka heartbeat [zenka-status] requests and responses ##
<debug.skip_p7_heartbeat> = 1;
##
$data{'system'}{'process_start'} = {
    'time'  => <[base.time]>->(5),
    'pname' => $PROGRAM_NAME,
    'euid'  => $EUID,
    'egid'  => $EGID,
    'pid'   => $PID,
    'uid'   => $UID,
    'gid'   => $GID,
    }
    if not exists $data{'system'}{'process_start'};

# maximizing open files limit
my ( $of_cur, $of_max ) = getrlimit( BSD::Resource::RLIMIT_NOFILE() );
if ( $of_cur != $of_max ) {
    <[base.log]>->( 2, ": open files limit increased [$of_cur->$of_max]" );
    setrlimit( BSD::Resource::RLIMIT_NOFILE(), $of_max, $of_max )
        or warn "setrlimit <$of_max> failed [ \l$OS_ERROR ]";
}
$data{'system'}{'limits'}{'ofile'}
    = [ getrlimit( BSD::Resource::RLIMIT_NOFILE() ) ]->[1];

$data{'system'}{'host'} = {
    'os'       => { 'name' => $^O },
    'hostname' => hostname,
    'timezone' => <[base.timezone]>
};

# LLL: + uname -r, uname -m [?]

# flush / init regex cache
$data{'regex'} = { 'base' => <[base.regex]> };

# init / reset lists
$data{'list'} //= {};

<list.users> = {
    'var'     => qw| data |,
    'key'     => qw| user |,
    'sub_key' => qw| session |,
    'mask'    => '<key>:user connected_since session:sessions',
    'align'   => { 'session' => 'center' },
    'filters' => {
        'session'         => 'base.parser.element_count',
        'connected_since' => 'base.parser.timestamp'
    },
    'descr' => 'connected users'
};
<list.sessions> = {
    'var'      => qw| data |,
    'key'      => qw| session |,
    'sort_key' => 'num:start_time',
    'mask'     => '<key>:usid protocol link:type mode '
        . 'user:uname start_time:since',
    'align' => {
        'user'       => 'center-2',
        'protocol'   => 'center-1',
        'link'       => 'center-2',
        'mode'       => 'center-2',
        'start_time' => 'right'
    },
    'filters' => { 'start_time' => 'base.parser.duration' },
    'descr'   => 'registered / connected sessions'
};
<list.buffers> = {
    'var'   => qw| data |,
    'key'   => qw| buffer |,
    'mask'  => '<key>:name data:lines size:bytes max_size:of_bytes',
    'align' => {
        'data'     => 'right-5',
        'size'     => 'center-2',
        'max_size' => 'right-5'
    },
    'filters' => {
        'data'     => 'base.parser.element_count',
        'max_size' => 'base.parser.size_str'
    },
    'descr' => 'available log / data buffers'
};

# 'verify-instance' command not required in local 'cube' zenka
if (    defined <system.zenka.type>
    and <system.zenka.type> eq qw| cube |
    and <system.zenka.name> eq qw| cube | ) {
    <[base.disable_command]>->('verify-instance');
    <zenki.virtual> //= {};
    my $key_ref = \$data{'zenki'}{'virtual'};
    $data{'base'}{'element'}{$key_ref}{'max_count'}
        //= 4097;    # LLL: --> config.,
    <list.virtual> = {
        'var'   => qw| data |,
        'key'   => qw| zenki.virtual |,
        'mask'  => '<key>:id name type status session',
        'align' => {
            'name'    => 'left',
            'type'    => 'center-2',
            'status'  => 'center-2',
            'session' => 'center-1'
        },
        'filters' => {
            'status'  => 'base.parser.ondemand_status',
            'session' => 'base.parser.ondemand_session'
        },
        'descr' => 'virtual zenka list'
    };

    <base.commands.cmd.src-age.descr> =~ s|installed ||;

} else {    # remove some commands for non-cube type zenki
    map { <[base.disable_command]>->($ARG) } (
        qw|
            exit
            clear
            ntime
            last-sid
            localtime
            ondemand-zenka
            session-key
            term-all
            time
            |
    );

    <base.commands.cmd.src-age.param> = "['date'] "; #<-- disable second param

    if ( <system.zenka.name> ne qw| universal| ) {

        <[base.hide_list]>->(qw| sessions |);
        <[base.disable_command]>->(qw| whoami |);

        # LLL: needs 'has_clients' flag
        <[base.disable_command]>->(qw| present |)
            if <system.zenka.name> ne qw| weather |;
    }

    <[base.hide_list]>->(qw| users |);
}

map {
    <base.watcher.signal>->{$ARG}->cancel
        if defined <base.watcher.signal>->{$ARG};
    my $uc_sig = uc($ARG);
    delete $SIG{$uc_sig} if defined $SIG{$uc_sig};

    ## initializing signal handlers ##     [ << potential SIGCHLD problems >> ]
    <base.watcher.signal>->{$ARG} = <[event.add_signal]>
        ->( { 'signal' => $uc_sig, 'handler' => 'base.sig_' . $ARG } );
} qw|  int  term  hup  chld  abrt  usr1  usr2  trap  |;

## initializing session list ###

if ( ref( $data{'session'} ) ne 'HASH' ) { $data{'session'} = {} }

<[base.list.init]>->(
    {   qw| name |     => qw| sessions |,
        'key_ref'      => \$data{'session'},
        'max_elements' => <limits.client_sessions>
    }
);

<[base.parser.access_conf]>;

## command aliases with source zenka name prefixes ###
if ( defined <setup.aliases> ) {
    if ( defined <setup.aliases.source_zenka> ) {
        foreach
            my $alias_cmd ( split( m|\s+|, <setup.aliases.source_zenka> ) ) {
            $data{'alias'}{$alias_cmd} = "$alias_cmd SOURCE_AGENT";
        }
    }
    map { $data{'alias'}{$ARG} = "$ARG SOURCE_AGENT SOURCE_SID" }
        split( m|\s+|, <setup.aliases.source_zenka_sid> )
        if defined <setup.aliases.source_zenka_sid>;
}

## called after receiving cube session id ##
<base.callback_hooks.async_online> //= [];

## setting up command [argument] filter hooks ##
<base.filter_hooks.command.heart.send> = qw| base.handler.heart |;
<base.filter_hooks.command.heart.recv> = qw| base.handler.heart_ack_reply |;
## \ implement permission filter hooks [ LLL ]

return 0;

#.............................................................................
#O5ZCWBBVNHG3FSERP6VRWZ4T6633JBXUHBDYVWBLKLY6PLSWPUYLQIFDOYSKSEVVUYJU64VIOQQT4
#::: ENASW5Q7HHXND52MJ4WJHWVVN75KBIEAYTTHWII7GLRUOMY6PIB :::: NAILARA AMOS :::
# :: QYJX7P64B5RRLB3ZPXRNE3SXPK46WNJFINANWH5ZS4E5ANT3CADQ :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
