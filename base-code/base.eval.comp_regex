## >:] ##

# name  = base.eval.comp_regex

my $regex_str = shift;
warn 'regex string parameter undefined' if not defined $regex_str;

## regex compilation result details to stdout ##
my $print_debug_to_console = 0;

## setting up safe namespace ##
my $parse = new Safe;
$parse->permit_only(qw| :base_core :base_orig |);

#### create function to by iteration exclude all uneeded opcodes [man Opcode]
## required from base_core  ## const qr lineseq stringify ##

## evaluate regular expression with 'qr' ##
#
my $perlcode_qr_str = sprintf 'qr\'%s\'', $regex_str;

my $result = $parse->reval( $perlcode_qr_str, 1 );
#
##

if ($print_debug_to_console) {

    say "\n" . '< perl code str > ', $perlcode_qr_str;
    say '   < eval result > ', $result // qw| UNDEF |, "\n";

    <[base.logs]>->(
        0,
        '< eval error > %s',
        scalar <[base.format_error]>->( $EVAL_ERROR, -1 )
    ) if length $EVAL_ERROR;
}

return undef if length $EVAL_ERROR;
return $result;    ## undef on eval errors ##

#,,..,..,,,.,,..,,.,.,,,,,..,,,,.,...,,.,,,,.,..,,...,...,,,,,,.,,...,..,,..,,
#G26E63KQC66ZXCZX5XQE3QUUI6BZXFC72YZOG7CZM4WD75IKJFVXO6AJ5APEVDXWEFVSEO7JRN672
#\\\|PB4JDWC76PYJBEIXMDBAML22G2FBMLZZV4KV6ZU5INTLB3IZ3O2 \ / AMOS7 \ YOURUM ::
#\[7]WQ5TDRKFGVGKU3US4ZG4MNTNNEV27WA7EPZF7WVTL2IDH2KOXGCY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
