## >:] ##

# name  = sourcecode.console.update-signatures
# descr = regenerate source code signature sections

my $command_params = shift;

my $source_version  = <protocol-7.src-ver>;
my $release_version = <protocol-7.rel-ver>;

my $paths     = <sourcecode.path>;    # <-- prepared in 'sourcecode.init_code'
my $work_tree = $paths->{'work_tree'};

my @source_paths;

if ( defined $command_params ) {

    if ( not @source_paths = <[sourcecode.collect_files]>->($command_params) )
    {
        <[base.logs]>->( 0, ": no files found for '%s'", $command_params );
        <[base.exit]>;
    } else {
        my $file_count = scalar @source_paths;
        <[base.logs]>->(
            ": %d file%s match%s '%s'",
            $file_count,
            <[base.cnt_s]>->($file_count),
            <[base.cnt_s]>->( $file_count, '', 'es' ),
            <[base.parser.ellipse_center]>->( $command_params, 19 )
        );
    }
} else {
    @source_paths = <[sourcecode.source_path_set_up]>;
}

if (   @source_paths == 0
    or @source_paths == 1 and not defined $source_paths[0] ) {
    <[base.log]>->(
        0, 'no matching source files, cannot update signatures..,'
    );
    <[base.exit]>->('0110');
}

<[base.log]>->( 1, '.:[ UPDATING SOURCE SIGNATURES ]:.' );

map {
    <[base.logs]>->( 0, 'file ./%s is not writable', $ARG )
        if not -w catfile( $work_tree, $ARG )
} @source_paths;

my $file_count = scalar @source_paths;

<[base.logs]>->( '* updating %s source file signatures..,', $file_count );
foreach my $path_rel (@source_paths) {

    my $path_abs = catfile( $work_tree, $path_rel );
    <[base.log]>->( 2, ':' );

    my $code_data_ref;
    eval {
        use warnings FATAL => qw| all |;    ##  catches all warnings  ##
        $code_data_ref
            = <[source.cmd.get-code-signed]>
            ->( { 'args' => $path_rel, 'skip-valid' => 1 } );
    };

    <[base.s_warn]>->(
        '%s <{NC}>', scalar <[base.format_error]>->($EVAL_ERROR)
    ) if length $EVAL_ERROR;

    <[base.log]>->( 0, $code_data_ref->{'data'} )
        if defined $code_data_ref
        and ref $code_data_ref eq qw| HASH |
        and $code_data_ref->{'mode'} eq qw| false |;

    <[base.exit]>->(
        qw| 0110 |, 'aborting signature update due to error[s]', 0
        )
        if not defined $code_data_ref
        or ref $code_data_ref ne qw| HASH |
        or $code_data_ref->{'mode'} eq qw| false |;

    ## allow for SIGINT ##
    <[event.once]>;

    next
        if $code_data_ref->{'mode'} eq qw| true |
        and $code_data_ref->{'data'} eq 'still valid. =)';

    if ( $code_data_ref->{'mode'} ne qw| size |
        or not length $code_data_ref->{'data'} ) {
        <[base.logs]>->(
            0, ": not able to create signature [ %s ]", $path_rel
        );
        next;
    }

    <[base.log]>->( 1, ':.' );
    <[base.log]>->( 1, ":::[ $path_rel ]:.<+>.::" );
    <[base.log]>->( 1, ':' );

    $file_count--;
    <[file.put]>->( $path_abs, $code_data_ref->{'data'} );
}

<[base.log]>->( 1, ': : success =)' ) if !$file_count;

#,,,.,,..,.,.,,.,,,.,,,,.,,..,...,...,...,,,.,..,,...,...,...,,..,.,.,.,,,.,.,
#4VMFDAODZGG5F2ZF6VXO4DHCO2KDAFO4UOMGSTHXPUFJS7TQUI3YMP73ZG4MOKDM6LMCY2W35CIZY
#\\\|CYXSNHM3Q7RV3WH3RNRYN555M6P2Y4BMY6FRKSJ65YEEMKOBHUA \ / AMOS7 \ YOURUM ::
#\[7]YRXQFGMO7DGAOS6BMW7D27JQGVNHFRKEXEXRDJEN3PJCFYLUQUCA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
