# >:]

# name  = protocol.amos-chksum.command-handler

my $id = $ARG[0]->w->data;
return 2 if not defined $data{'session'}{$id};

##[ INITIALIZATION \ VARIABLE SET-UP ]########################################

my $session = $data{'session'}{$id};
my $user    = $session->{'user'};

##  initializing  ##
$session->{'space-prefixes'} //= 2;

$session->{'amos-chksum'}->{'modes'}    ##  set from AMOS::CHKSUM  ##
    //= $AMOS::CHKSUM::algorithm_set_up{'elf_truth_modes'};

my $input  = \$session->{'buffer'}->{'input'};
my $output = \$session->{'buffer'}->{'output'};

##  read-mode bytewise  ##
my $amos_ref = defined $session->{'amos'} ? $session->{'amos'} : undef;

##[ bytes MODE DATA INPUT ]##################################################

##  read-mode bytewise  ##
if ( defined $amos_ref ) {

    if ( $amos_ref->{'bytes-to-read'} > 0 ) {    ##  more imput data  ##

        return 1 if not length($$input);         ##  <-- not expected  ##

        my $buffer_len = length($$input);

        my $read_size
            = $amos_ref->{'bytes-to-read'} < $buffer_len
            ? $amos_ref->{'bytes-to-read'}
            : $buffer_len;

        my $buffer_str = substr( $$input, 0, $read_size, '' );

        $amos_ref->{'bytes-to-read'} -= $read_size;

        ##  add elf checksum state  ##  input data at elf mode 7  ##
        $amos_ref->{'elf_checksum'} = <[chk-sum.elf.inline]>->(
            \$buffer_str, $amos_ref->{'elf_checksum'}, 7
        );
        ##  add to bmw checksum state  ##
        $amos_ref->{'bmw-context'}->add($buffer_str);

        ## needs idle watcher mode ##

        return 1 if $amos_ref->{'bytes-to-read'} > 0;    ## more expected ##
    }

} else {    ##  line-mode  ##

    ##  calculate and store average command line length  ##
    <[base.session.calc_cmd_stats]>->( $id, $input );
}

##[ BYTES INPUT COMPLETE ]####################################################

if ( defined $amos_ref and $amos_ref->{'bytes-to-read'} <= 0 ) {

    ## calc amos-chksum ##
    $$output .= sprintf(
        "%s\n",
        AMOS::CHKSUM::amos_chksum(
            {   'elf_checksum' => $amos_ref->{'elf_checksum'},
                'BMW_checksum' => $amos_ref->{'bmw-context'}->digest

            },
            @{ $session->{'amos-chksum'}->{'modes'} }
        )
    );

    undef $amos_ref;
    delete $session->{'amos'};
    $session->{'read-mode'} = qw| linewise |;

    return 0;    ##  request complete  ##
}

##[ PARSING COMMANDS ]########################################################

my $peer_fh = $session->{'handle'};

$session->{'amos-chksum'}
    //= { 'modes' => $AMOS::CHKSUM::algorithm_set_up::elf_truth_modes };

return 1 if $$input =~ s|^\s*\r?\n+||s or $$input !~ s|^([^\n]+)\r?\n+||s;

## : <mode> [<mode[s]>] : ## <-- modes syntax example
if ( $LAST_PAREN_MATCH =~ m|^:\s*((\D*\d+\D*)+)\s*:$| ) {  ## no cmd output ##

    my @modes_str = split( m|\D+|, ${^CAPTURE}[0] );
    $session->{'amos-chksum'}->{'modes'} = \@modes_str;

} elsif ( $LAST_PAREN_MATCH =~ m|^\ {$session->{'space-prefixes'}}(.+)$| ) {

    ##  indented chksum request  ##
    my $modes_ref = $session->{'amos-chksum'}->{'modes'};

    my $chksum_str
        = eval { <[chk-sum.amos]>->( \$LAST_PAREN_MATCH, @{$modes_ref} ) };

    if ( $EVAL_ERROR or not length( $chksum_str // '' ) ) {
        if ($EVAL_ERROR) {
            warn join( ' ',
                '[chk-sum.amos]',
                scalar <[base.format_error]>->( $EVAL_ERROR, -1 ) );
        } else {
            warn '[chk-sum.amos] no result returned';
        }
        return 2;   ## disconnect [ without tainted or missing result string ]
    }

    $$output .= sprintf( "%s\n", $chksum_str );
    return 1;       ## needs idle watcher mode ##

} elsif ( $LAST_PAREN_MATCH =~ m|^(\S+)( +(.+))?$| ) {  ## protocol command ##
    my $command     = ${^CAPTURE}[0];
    my $params      = ${^CAPTURE}[2];
    my $cmd_handler = "protocol.amos-chksum.ext-cmd.$command";
    if ( not defined $code{$cmd_handler} ) {
        $$output .= "no such command\n";
        return 0;
    } else {
        my $return_href = eval { $code{$cmd_handler}->( $id, $params ) };
        if ( $EVAL_ERROR or ref( $return_href // '' ) ne 'HASH' ) {
            if ($EVAL_ERROR) {
                warn join( ' ',
                    "[amos-ext-cmd:$command]",
                    scalar <[base.format_error]>->( $EVAL_ERROR, -1 ) );
            } else {
                warn '[amos-ext-cmd:$command] expected hash reference';
            }
            $$output .= "[ error in command handler ]\n";
            return 0;
        }

        my ( $mode, $return_data )
            = ( $return_href->{'mode'}, $return_href->{'data'} );
        my $return_code = $mode eq qw| term | ? 2 : 0;

        if ( $command eq qw| bytes | and $mode eq qw| data | ) {

            $session->{'amos'} = {
                'bytes-to-read' => $return_data,
                'elf_checksum'  => 0,
                'bmw-context'   => Digest::BMW->new(512)
            };

            ##  notify read handler  ##
            $session->{'read-mode'}     = qw| bytewise |;
            $session->{'bytes-to-read'} = $return_data;

        } elsif ( $mode eq qw| data | ) {
            $$output .= $return_data;
        } else {
            $$output .= sprintf( "%s\n", $return_data );
        }
        return $return_code;
    }
} else {
    $$output .= sprintf( "protocol hint : %s\n",
        'content to checksum requires 2 space indentation' );

    return 0;
}

##############################################################################

### NEXT COMMANDS ## [LLL]
##
## seperator ## set data seperator [ i.e. \n or \t ,.. ]
##
## [ bytes bits : data width selection [ i.e. 7 bit multiples ] ?

return 0;

#.............................................................................
#LCGXKBB5VPMXGUQYU77BVGB2DPDYRXLSCVJIJUEOMXHP6VNZJSHYUVZLS57VQUY25EDPAOYSCTK26
#::: X3BQCFFHWT6DOZURQVD6PO3QLLNGX2QSHUYBRPNSVOHMWHRDZ4C :::: NAILARA AMOS :::
# :: YTOIRTGVSUEU4HS5F62WS4ISOQAVMQOLANSFIL3BOCYGUQAWA2DQ :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
