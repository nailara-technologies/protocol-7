# >:]

# name  = chk-sum.amos
# descr = AMOS-checksum calculation
# param = input string or scalar reference [ + <follow_truth> ]

my $input;
my @modes = @{ $AMOS::CHKSUM::algorithm_set_up{'elf_truth_modes'} };

return warn 'expected input string for AMOS-checksum calculation <{C1}>'
    if not @ARG;

if ( ref( $ARG[0] ) eq 'SCALAR' ) {
    $input = shift(@ARG);    ## scalar ref ##
    @modes = uniqint( grep {m|^\d{1,2}$|} @ARG ) if grep {m|^\d{1,2}$|} @ARG;

} else {
    $input = join( ' ', @ARG );
    $input = \$input if ref($input) ne 'SCALAR';
}

return warn '< chk-sum.amos > undefined input <{C1}>' if not defined $$input;

##[ CHECKSUM CALCULATION ]####################################################

return AMOS::CHKSUM::amos_chksum( $input, @modes ); ## passing by reference ##

#.............................................................................
#STSBMK42VBX4JSNXKJQBK25JWIUNK624QSVYOIUILTVC6SWQIVRWLNJGV2X6MPXASXUCSJRVO6LD4
#::: HK646LX2OH44TJXAXOLBGBZVOA6QE3ZJP32W2ZVVXIDYIZ6ARPJ :::: NAILARA AMOS :::
# :: EAM3JRRIR7UGYMUYOYUWPBZ4I3AGNTUAHXE3ACRFEYDFELBEREDY :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
