## >:] ##

# name  = chk-sum.amos
# descr = AMOS-checksum calculation
# param = input string, scalar reference or hash reference to parameters

my $input;
my @modes = @{ $AMOS7::CHKSUM::algorithm_set_up{'elf_truth_modes'} };

return warn 'expected input string for AMOS-checksum calculation <{C1}>'
    if not @ARG;

if ( not length ref( $ARG[0] ) ) {
    $input = \join( ' ', @ARG );    ## CREATING REFERENCE TO DATA ##
} elsif ( ref($input) eq qw| SCALAR | ) {

    $input = shift(@ARG);           ## BY SCALAR REFERENCE ##
    warn '< chk-sum.amos > undefined input <{C1}>' and return undef
        if not defined $$input;

    @modes = grep {m|^\d{1,2}$|} @ARG if grep {m|^\d{1,2}$|} @ARG;

} elsif ( ref $ARG[0] eq qw| HASH | ) { ## read AMOS7::CHKSUM for parameters ##

    return AMOS7::CHKSUM::amos_chksum( $ARG[0] );

} else {
    <[base.s_warn]>->(
        "< chk-sum.amos > unsupported reference type '%s' <{C1}>",
        ref( $ARG[0] )
    );
    return undef;
}

##[ CHECKSUM CALCULATION ]####################################################

return AMOS7::CHKSUM::amos_chksum( $input, @modes ); ## passing by reference ##

#,,..,,,.,,.,,.,.,,.,,.,,,...,,.,,,,,,.,,,,,,,..,,...,...,,..,.,.,,,.,,.,,.,.,
#7WEY4E6Y52RNCUDQ2IQFAHRX5JNYMH4KTEZH7NMURSJWNNINJTMRDMHKQJGNWHUNXYMMP2EGOCI4U
#\\\|7SSH7WCYUUYPCQUGLDACYLYZXWVFBSG4HJGQKGC7F2KTHCL5CSN \ / AMOS7 \ YOURUM ::
#\[7]ZVTB73LUHFLNRA42DZVUI2S5ESN7WQCNA6WNI2B6KNGMIFOPJKAI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
