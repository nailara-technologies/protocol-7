## >:] ##

# name  = base.log
# descr = generate a log entry
# args  = log_level log_msg [log_buffer] [time-stamp]
# note  = used routines here need to be registered in protocol-7 [purge_code]

my ( $log_level, $log_msg, $log_buffer, $time_stamp )
    = ( $ARG[0] || 0, $ARG[1] // '', $ARG[2] // '', $ARG[3] );

$log_level = 0 if $log_level !~ m|^\d+$|;

<system.verbosity.console>       //= 0;
<system.verbosity.zenka_buffer>  //= 1;
<system.verbosity.zenka_logfile> //= 0;

return 1
    if $log_level > <system.verbosity.console>
    and $log_level > <system.verbosity.zenka_buffer>
    and $log_level > <system.verbosity.zenka_logfile>;

$log_buffer = qw| zenka | if not length $log_buffer;

my $log_str;
$log_msg = 'UNDEFINED LOG MESSAGE' if not length $log_msg;

my $h_override = <base.ntime-harmony> // 1;  ## reducing calculation load., ##
my $want_harmony = $log_level < 3 ? $h_override : 0;

$log_msg =~ s|\r|\\r|g;
$log_msg =~ s|\n|\\n|g;
$log_msg =~ s|\0|\\0|g;
$log_msg =~ s|\e|\\e|g;

## prevent deep recursions in error log system ###
my $fatal_exit
    = ( $log_msg =~ m|deep recursion |i and $log_msg =~ m,log|buffer, )
    ? 1
    : 0;

$log_msg = sprintf( "%scall to unknown subroutine while executing '%s'",
    $ANSI{'p7_fg_0002'}, ${^CAPTURE}[0] )
    if $log_msg
    =~ m|\$code\{'([^\']*)'\}.+ use string \(""\) as a subroutine|;

my $zenka_prefix = <[log.format_name]>;

## log colors ##
##
my $c_l = 2;
$c_l = 3 if $log_level == 0;
$c_l = 4 if $log_level == 1;
$c_l = 1 if $log_level == 2;
$c_l = 0 if $log_level > 2;
my $c_fg  = $ANSI{ sprintf qw| p7_fg_000%s |, $c_l };
my $col_b = $log_level == 0 ? $ANSI{'B02'} : $ANSI{'B01'};
##
if ( $log_level > 0 ) {
    $log_str = sprintf '%s %s%s%s%s',
        $zenka_prefix, $col_b, $c_fg, $log_msg, $ANSI{'reset'};
} else {
    $log_str = sprintf '%s %s%s%s%s%s', $zenka_prefix, $ANSI{'bold'}, $col_b,
        $c_fg, $log_msg, $ANSI{'reset'};
}

if ($fatal_exit) {    ## improve detection ## [LLL]
    say STDERR sprintf( "%s%s%s\n<< EMERGENCY SHUTDOWN >> %s",
        $log_str, $zenka_prefix, $ANSI{'p7_fg_0002'},
        '[ anticipated deep recursion in log system ]' );
    exit 2;
}

##  zenka log buffer  ##
##
if ( defined $code{'base.buffer.add_line'} ) {
    $time_stamp //= <[base.anum_log_time]>->( 5, $want_harmony );
    <[base.buffer.add_line]>->(
        $log_buffer, join( ' ', $time_stamp, $log_level, $log_msg ),
        $log_level
        )
        if $log_level <= <system.verbosity.zenka_buffer>
        or $log_level <= <system.verbosity.zenka_logfile>;
} elsif ( not defined defined $code{'base.buffer.add_line'} ) {
    $time_stamp //= <[base.anum_log_time]>->( 5, $want_harmony );
    push(
        <system.start.zenka-buffer>->@*,
        join( ' ', $time_stamp, $log_level, $log_msg )
    ) if $log_level <= <system.verbosity.zenka-buffer>;
}

## console output ##
##
if ( fileno(STDOUT) and $log_level <= <system.verbosity.console> ) {
    if ( defined $code{'base.utf8.clean_not_valid'} ) {
        <[base.utf8.clean_not_valid]>->( \$log_str, 2, 2 ); ## warn level 2 ##
    }
    say $log_str;    ## clean UTF-8 passed through ##
}
##

return 1;

#,,,,,,,.,.,,,,.,,,.,,,..,,.,,..,,..,,,,,,,,,,..,,...,...,,,.,.,.,...,.,,,,..,
#3NLHFRLUIXVBI4XGCS7RANTCCJETEFS37PXGPQGM5A6XOFONEVT56JQWLCIEFXI5E5W5VYO5BYXSK
#\\\|UEO4IPTBGXTQ2G3J5T3XA4RA2S6QI7KVTPEWB74LNHJXZQRKDQ5 \ / AMOS7 \ YOURUM ::
#\[7]VMQQJGPKVSA7GJXK62T7TCSYGVL6DYZ2J7VZKFMNFHHSR5MGCWAA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
