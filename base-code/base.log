# >:]

# name  = base.log
# descr = generate a log entry
# args  = log_level log_msg [log_buffer] [time-stamp]

my ( $log_level, $log_msg, $log_buffer, $time_stamp )
    = ( $ARG[0] || 0, $ARG[1] // '', $ARG[2] // '', $ARG[3] );

$log_level = 0 if $log_level !~ m|^\d+$|;

<system.verbosity.console>       //= 0;
<system.verbosity.zenka_buffer>  //= 1;
<system.verbosity.zenka_logfile> //= 0;

return 1
    if $log_level > <system.verbosity.console>
    and $log_level > <system.verbosity.zenka_buffer>
    and $log_level > <system.verbosity.zenka_logfile>;

$log_buffer = qw| zenka | if !length($log_buffer);

$log_msg = 'UNDEFINED LOG MESSAGE' if !length($log_msg);

my $h_override = <base.ntime-harmony> // 1;  ## reducing calculation load., ##
my $want_harmony = $log_level < 3 ? $h_override : 0;

$log_msg =~ s|\r|\\r|g;
$log_msg =~ s|\n|\\n|g;
$log_msg =~ s|\0|\\0|g;
$log_msg =~ s|\e|\\e|g;

## prevent deep recursions in error log system ###
my $fatal_exit
    = ( $log_msg =~ m|deep recursion |i and $log_msg =~ m,log|buffer, )
    ? 1
    : 0;

$log_msg = sprintf( "%scall to unknown subroutine while executing '%s'",
    $ANSI{'p7_fg_0002'}, ${^CAPTURE}[0] )
    if $log_msg
    =~ m|\$code\{'([^\']*)'\}.+ use string \(""\) as a subroutine|;

my $bg   = $ANSI{'p7_bg'};
my $rst  = $ANSI{'reset'};
my $bl_c = $ANSI{'p7_fg_0000'};
my $an_c = $ANSI{'p7_fg_0001'};

my $zenka_prefix = <[log.format_name]>;

my $log_str;

# say '< caller 0 > '.[caller(1)]->[1].':'
#  .[caller(1)]->[2] if $log_level == 0;
# say '< caller 4 > '.[caller(1)]->[1].':'
#  .[caller(1)]->[2] and sleep 0.24 if $log_level == 2;

## log colors ##
my $c_l = 2;
$c_l = 3 if $log_level == 0;
$c_l = 4 if $log_level == 1;
$c_l = 1 if $log_level == 2;
$c_l = 0 if $log_level > 2;
my $fg_c = $ANSI{"p7_fg_000$c_l"};
##
if ( $log_level > 0 ) {
    $log_str = "$zenka_prefix ${fg_c}$log_msg$ANSI{'reset'}";
} else {
    $log_str = "$zenka_prefix $ANSI{'bold'}${fg_c}$log_msg$ANSI{'reset'}";
}

if ($fatal_exit) {    ## improve detection ## [LLL]
    say STDERR $log_str,
        "$zenka_prefix$ANSI{'p7_fg_0002'} << EMERGENCY SHUTDOWN >> ",
        " [ anticipated deep recursion in log system ]";
    exit 2;
}

## write imto 'zenka' log buffer ##
if ( defined $code{'base.buffer.add_line'} ) {
    $time_stamp //= <[base.anum_log_time]>->( 5, $want_harmony );

    <[base.buffer.add_line]>->(
        $log_buffer, join( ' ', $time_stamp, $log_level, $log_msg ),
        $log_level
        )
        if $log_level <= <system.verbosity.zenka_buffer>
        or $log_level <= <system.verbosity.zenka_logfile>;
}

## console output ##

if ( fileno(STDOUT) and $log_level <= <system.verbosity.console> ) {

    if ( defined $code{'base.utf8.clean_not_valid'} ) {
        <[base.utf8.clean_not_valid]>->( \$log_str, 2, 2 ); ## warn level 2 ##
    }
    say $log_str;    ## clean UTF-8 passed through ##
}

return 1;

#.............................................................................
#UUSN4YNKGSODU7GTCLHZ7HGTGOGORO2MUIY6G64YAQYGK27ZNWGMXO6PRVWZOL336MLPFRTDOBHWG
#::: 4R4BYXXEM6QE2CF5G5CRG7GX3A7EGB4IIV6CFBPPXRFWBIZESTA :::: NAILARA AMOS :::
# :: 7L5FEA3P6YMXS6HHYU4NE5HZFFHFL6XT4XCCLV3QHRX2UZNOW4DY :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
