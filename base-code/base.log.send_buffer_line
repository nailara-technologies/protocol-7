# >:]

# name  = base.log.send_buffer_line
# descr = send log buffer content to configured zenka [ i.e. p7-log ]

my $name         = shift;
my $buffer_index = shift;

##  connected to cube ?  ##      ##  use notify-online  ##  [LLL]
return if not <[base.cfg_boolean]>->(<base.log.allow_buffer_send>);
return warn 'expected log buffer name parameter <{C1}>' if not defined $name;

<log.file>->{$name} //= {
    qw| complete        | => 1,
    qw| next_index      | => 0,
    qw| start_index     | => $buffer_index,    ##  <-- can be undef  ##
    qw| resend_delay    | => 0.1,
    qw| resend_slowdown | => 1.8,
};

my $log_data   = <log.file>->{$name};
my $next_index = $log_data->{'next_index'};

##  no such buffer  ##
return warn sprintf "send_buffer_line : no such buffer ['%s'] <{C1}>", $name
    if not defined $data{'buffer'}{$name};

my $buffer_data_ref = $data{'buffer'}->{$name}->{'data'};

##  no such buffer content line [sent]  ##
return if not defined $buffer_data_ref->[$next_index];
my @send_line;    ##  protocol line messages  ##

## path to target zenka.., ##
my $route_prefix = qw| cube. |;

##[ cube has sid 0 ]##
if ( <system.zenka.type> eq qw| cube | ) {
    push @send_line, join( '.', <system.node.name>, <system.zenka.name> ), 0;
    $route_prefix = '';
}

##  log buffer name  ##
push( @send_line, $name );

##[ t-stmp, lvl, msg ]##
push( @send_line, $buffer_data_ref->[$next_index] );
$log_data->{'complete'} = 0;

<[base.protocol-7.command.send.local]>->(
    {   qw| command | =>
            join( '', $route_prefix, $data{'buffer'}{$name}{'log_cmd'} ),
        qw| call_args | =>
            { qw| args | => join( ' ', map { $ARG // '' } @send_line ) },
        qw| reply | => {
            qw| handler | => qw| base.log.handler.log_reply |,
            qw| params |  => { qw| name | => $name }
        }
    }
    )
    ## no warnings during 'reload' ##
    or <base.silence.sprint_t> = 1 and <[base.log.handler.log_reply]>->(
    {   qw| cmd |       => qw| FALSE |,    ## command does not exist ##
        qw| call_args | => {
            qw| args | => <[base.sprint_t]>->(qw| YDZBI2Q |)
                // 'command does not exist'    ## fallback in 'reload' case ##
        },
        qw| params | => { qw| name | => $name }
    }
    );

#.............................................................................
#O46F5SLEFBQOLZ5SHHDSGP4LZRD5O7SLJGBCQC6YOSYUR3UA4K5BH25VSFFHOHHTE2Y6NRZIU5AUM
#::: ALFZFJ57SO4566MVI2PAFFXMFJGPXJ3X4QDRGGA6GKT3D52PPKD :::: NAILARA AMOS :::
# :: VMAFOYBV5OG3L44VMMKTGAVMAET36ZIYFKOKQV6PD7G3I4ISNQBQ :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
