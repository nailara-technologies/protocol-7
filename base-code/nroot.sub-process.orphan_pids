# >:]

# name  = nroot.sub-process.orphan_pids
# descr = returns PIDs of orphaned children of deceased zenki
# todo  = sort pids by process start time

my $proc_table = <nroot.process.pt>
    //= new Proc::ProcessTable( 'enable_ttys' => 0 );

my %own_children;
foreach my $i_id ( keys %{<nroot.zenka.instance>} ) {
    next if not defined <nroot.zenka.instance>->{$i_id}->{'process'}->{'id'};
    my $pid = <nroot.zenka.instance>->{$i_id}->{'process'}->{'id'};
    $own_children{$pid} //= <nroot.zenka.instance>->{$i_id}->{'zenka_name'};
}

my %orphans;
map {
    $orphans{ $ARG->pid } = $ARG->exec // $ARG->cmndline // ''
        if $ARG->pid > 2
    }
    grep {
    $ARG->ppid == 1               # parent is 'init'
        and $ARG->pgrp == $GID    # process group was 'nroot' zenka
        and $ARG->pid != $PID     # and is not this process ['nroot']
        and not exists $own_children{ $ARG->pid }
        and ( not defined $ARG->exec
        or $ARG->exec ne
        '/usr/bin/dbus-launch' )    # <-- whitelist :. config [LLL]
    } @{ $proc_table->table };

map {
    my $name_str = '';
    if ( length( $orphans{$ARG} ) ) {
        $orphans{$ARG} =~ s|^.+/||;
        $name_str = " '$orphans{$ARG}'";
    }
    <[base.log]>->( 1, ": found orphan process [$ARG]" . $name_str )
    }
    sort keys %orphans;

return sort keys %orphans;

#.............................................................................
#YJ2CVGIIA5ZVFG7VMDIJAER3UZB3QZEWR3PZJSYVRFOF7FUIYWVGWDN4JR5PR3CMIYHD2TZ7CO6KA
#::: CAVFNJVARFLQAOHM3FQ6ZT3UGHRPZM3CVJ44NUC5BLNY2BZU5SL :::: NAILARA AMOS :::
# :: 2ZWIICPE476G4EHODNCW3NSSQA3X7CXGCC6X6CXPZ3Y5OAZLXMBI :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
