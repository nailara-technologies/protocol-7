## >:] ##

# name  = auth.zenka.cmd.session-key
# param = <zenka> <key_str>
# descr = set up session key for zenka auth.
# todo  = parameter validation ..,

my $id = $$call{'session_id'};
my ( $sn_zenka, $key ) = split( m| +|, $$call{'args'}, 2 );

my $zenka = $sn_zenka; # <-- $sn_zenka also contains subname if zenka has one.
my $subname = $zenka =~ s|\[(.+)\]$|| ? $LAST_PAREN_MATCH : '';

<[base.logs]>->( 0, '[%d] <session-key> not enought arguments', $id )
    and return { 'mode' => qw| false |, 'data' => 'not enough arguments' }
    if not length( $zenka // '' )
    or not length( $key   // '' );

my $type_authorized = 0;
if ( <[base.is_defined_recursive]>->( sprintf( 'auth.setup.usr.%s', $zenka ) )
    == 5 )    ## <-- defined ##
{
    map { $type_authorized = 5 if $ARG eq qw| :zenka: | }    ##  5 == true  ##
        split( m|[, ]+|, <auth.setup.usr>->{$zenka} );
}

if ($type_authorized) {    ##  has :zenka:  ##

    $KEYS{'auth'}{'zenka'}->{$sn_zenka} = blake2b_384_b64($key);

    <[base.logs]>->( "[%d] received session key for '%s'", $id, $zenka );
    return { 'mode' => qw| true |, 'data' => 'key added' };

} else {
    <[base.logs]>->(
        0,
        "[%d] add_session_key: user '%s' not accepted for auth type :zenka:",
        $id,
        $zenka
    );
    return {
        'mode' => qw| false |,
        'data' =>
            sprintf( "user '%s' not accepted for auth type :zenka:", $zenka )
    };
}

#,,,.,,,,,..,,.,,,.,.,,,.,,.,,..,,,,,,.,.,,.,,..,,...,...,..,,,,.,,..,,,,,..,,
#QKU6D3V77GJKK4GJROJ3XFBOINXSO32NQZTZBIJYQAUQBWKCEEQM2WPFZCSZY3FGUYFLF2VWGYVDI
#\\\|D2MN4CI2IAORS7YTL3E7NQNZJK5M4KGH22TMIZJKLK5QMT6BOYR \ / AMOS7 \ YOURUM ::
#\[7]LE3TBG2Z5NXXF7Z2KBDKCOHAHNIA7J6VFGQ7HCR7EFFT7NPT5OAY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
