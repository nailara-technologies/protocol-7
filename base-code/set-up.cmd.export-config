## >:] ##

# name  = set-up.cmd.export-config
# param = <zenka> [type]
# descr = export zenka config to disk (.json file)

return { 'mode' => 'false', 'data' => 'expected zenka name parameter' }
    if not defined <set-up.json.export_allowed>
    or !<set-up.json.export_allowed>;

my ( $zenka_name, $config_type ) = split( / +/, $$call{'args'}, 2 );
return { 'mode' => 'false', 'data' => 'expected zenka name parameter' }
    if not defined $zenka_name;
$config_type //= 'set-up';    # default

return { 'mode' => 'false', 'data' => 'invalid zenka name syntax' }
    if $zenka_name !~ <regex.base.usr>;

<[set-up.chk_profile_dir]>;

my $type_args = {};
$type_args = { 'args' => $config_type } if defined $config_type;

return { 'mode' => 'false', 'data' => 'invalid config type syntax!' }
    if $config_type !~ /^\w+$/;

my $cmd_path = "cube.$zenka_name.get-config";
$cmd_path = "cube.get-config" if $zenka_name eq qw| cube |;

<[base.protocol-7.command.send.local]>->(
    {   'command'   => $cmd_path,
        'call_args' => $type_args,
        'reply'     => {
            'handler' => 'set-up.handler.export_reply',
            'params'  => {
                'zenka_name'  => $zenka_name,
                'config_type' => $config_type,
                'reply_id'    => $$call{'reply_id'}
            }
        }
    }
);

return { 'mode' => 'deferred' };

#,,..,,,,,...,.,,,.,,,,,,,,.,,.,,,,,.,.,.,.,,,..,,...,...,.,.,.,.,,..,.,,,.,,,
#GX6LERPIRI6QMY7VN57EN47UWMFS5GKCQVPSTA7B2QXDO3W6FX2ECPDIPQGFQNMEZSAI3SFJU5IJ4
#\\\|DB6NLQNL54UCCC242GWGVGCRZMNA342XR3X7LCR7LWIGYFWVKY3 \ / AMOS7 \ YOURUM ::
#\[7]G2F3ISQ73LTQTCARVWS6WKG7WOY3IQZGQEJIRRQRWYU4LXD2KSCI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
