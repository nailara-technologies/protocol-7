# >:]

# name   = base.parser.access_conf
# descr  = compile and store command regex masks
# return = 0 : no errors, <n> : syntax error count

<[base.log]>->( 2, ': compiling command permission masks..,' );

my $errors = 0;

my $user_re = <regex.base.usr_str>;
my $cmdp_re = <regex.base.cmdrp>;

foreach my $user ( sort keys( %{<access.cmd.usr>} ) ) {
    my $access_cfg_mask = <access.cmd.usr>->{$user};
    my $regex_mask      = '';
    my $pos             = 0;

    if ( $user =~ m,<(admin-user|unix-admin)>,
        and defined <system.admin-user> ) {

        $user
            = $LAST_PAREN_MATCH eq 'admin-user'
            ? <system.admin-user>
            : 'unix-' . <system.admin-user>;

    } elsif ( not defined <system.admin-user> ) {
        $errors++;
        <[base.log]>->(
            0,
            '\<system.admin-user> not defined,'
                . ' <admin-user> access mask dropped.'
        );
        next;
    }

    if ( $user !~ m,^$user_re*$|^\*$, ) {
        <[base.log]>->(
            0,
            'invalid character in user name \' '
                . $user
                . ' \' ., access mask dropped.'
        );
        $errors++;
    } else {
        foreach my $cmd ( split( m|[ \t]+|, $access_cfg_mask ) ) {

            # compile command regex mask
            if ( $cmd =~ m|$cmdp_re^\*]| ) {
                <[base.log]>->(
                    0,
                    'invalid character in command regex mask [ user \''
                        . $user
                        . '\' pos '
                        . $pos . ' ]'
                );
                $errors = 1;
            } else {
                $cmd =~ s|([\[\]])|\\$1|g;
                $cmd =~ s,\.,\\\.,g;
                $cmd =~ s,\^,\\^,g;
                $cmd =~ s,^\.\*\*,[^\.\\^].%,;
                $cmd =~ s,\*\*,.+,g;
                $cmd =~ s,^\.\*,[^\\\.\\^][^\\.]%,;
                $cmd =~ s,\*,[^\\.]+,g;
                $cmd =~ s,\%,*,g;
                $cmd = '^' . $cmd . '$';

                no warnings;
                if ( eval("qr{$cmd}") ) { $regex_mask .= $cmd . '|' }
                else {
                    <[base.log]>->(
                        0,
                        'syntax error in command regex mask [ user \''
                            . $user
                            . '\' pos '
                            . $pos . ' ]'
                    );
                    $errors++;
                }
                use warnings;
                $pos++;
            }
        }

        chop $regex_mask;

        ## say "\nREGEX[$user]: $regex_mask\n"; ## <-- add to logging .., [LLL]

        no warnings;
        if ( not <access.cmd.regex.usr>->{$user} = eval("qr{$regex_mask}") ) {
            <[base.log]>->(
                0,
                'error in command regex mask [ user \' '
                    . $user
                    . ' \' ] ., access mask dropped.'
            );
            $errors++;
        }
        use warnings;
    }
}

return $errors;

#.............................................................................
#6EA7GLM5FMGHJXY4UL62REHON3GGQM7GHUVXB2QUOCGLF4INAXUCG2Q6YAYP4VBZJBL2NPWSOTZTW
#::: G7TZM3QLMRXEPBOBJNQS26T2OBVMS4VEWL3YX7RM5CZJJJP4Y65 :::: NAILARA AMOS :::
# :: YU4FARQ3TLZHQHPNOGUHUZDNQJGFBV77FB36MOK7G24TXJL7AODY :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
