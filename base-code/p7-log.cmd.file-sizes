# >:]

# name  = p7-log.cmd.file-sizes
# descr = protocol-7 log file size summary table

my $hostname  = <system.host.hostname>;
my $reply_str = sprintf( "..%11s\n", '..' );
return { 'mode' => 'nak', 'data' => 'nailara log directory not found' }
    if !-d <log.protocol_7.path>;
my %file_size_str;
my %file_size_raw;
my %file_size_uval;
my %unit_value = (
    'T' => 1024**4,
    'G' => 1024**3,
    'M' => 1024**2,
    'K' => 1024
);
my $total = 0;
map {

    ( my $file_name = $ARG ) =~ s|^.+\/||;
    $total += $file_size_raw{$file_name} = File::stat::stat($ARG)->size;
    $file_size_str{$file_name}
        = <[base.parser.human.fsize_fixed]>->( $file_size_raw{$file_name} );
    $file_size_uval{$file_name}
        = $file_size_str{$file_name} =~ /^(.+)(\D)$/
        ? $1 * $unit_value{$2}
        : $file_size_str{$file_name};

} grep {/\/$hostname\.[^\/]+\.log(\.\d+\.gz)?$/}
    @{ <[file.all_files]>->(<log.protocol_7.path>) };

foreach my $file_name (
    sort {
        sprintf( "%.1f", $file_size_uval{$a} ) <=>
            sprintf( "%.1f", $file_size_uval{$b} )
    }
    sort { "$a" cmp "$b" } keys %file_size_str
) {
    $reply_str
        .= sprintf( ":  %-7s  :  $file_name\n", $file_size_str{$file_name} );
}

my $l = abs( length(<system.host.hostname>) - 4 );
my $x = '-' x $l;
$reply_str .= sprintf( "=\\ %-6s /=  <----$x\n\n",
    <[base.parser.human.fsize_fixed]>->($total) );

return { 'mode' => 'data', 'data' => $reply_str }

#.............................................................................
#Q3J5VPIKN3VYLVR2F2IJCP75ARGNHF5E7IAAN3MELERISYT22V6NSONTXIEWVGKZYBPYNAC4YZ2KW
#::: YYBT5COEWTQBW5ODMBCGOXONWTAQDZ3EJ7UUFYQGOTAUCXPZFM7 :::: NAILARA AMOS :::
# :: TVMNX5SXDUZQOA3MYHDSGH4624AUYWLG6K5CNJW52EMKRECP4ODY :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
