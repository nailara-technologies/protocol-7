# >:]

# name  = base.utf8.clean_not_valid

my $s_ref = shift;
my $l_lvl = shift // 2;    ## log level for errors ##
my $c_lvl = shift // 0;    ## caller level for reporting ##
$s_ref = \$s_ref if ref($s_ref) ne 'SCALAR';

return 0 if not utf8::is_utf8($$s_ref);    ## nothing to do here ##

if ( not defined <base.utf8.test_fh> ) {
    open( <base.utf8.test_fh>, '>', File::Spec->devnull() )
        or warn "<devnull> : \l$OS_ERROR";
    binmode( <base.utf8.test_fh>, ':encoding(UTF-8)' );
}

eval {
    use warnings FATAL => 'utf8';
    say {<base.utf8.test_fh>} $$s_ref;
};

if ($EVAL_ERROR) {
    ( my $err_str = lc($EVAL_ERROR) ) =~ s|(, may not.+)? at .+$||g;
    <[base.log]>->(
        $l_lvl,
        join( ' ', ':: not valid UTF-8 ::', <[base.caller]>->($c_lvl) )
    );
    <[base.log]>->( ++$l_lvl, ':.' . $err_str );

    return <[base.clean_unicode]>->($s_ref);   ## <-- num. characters replaced

} else {
    return 0;                                  ## no changes ##
}

#.............................................................................
#2D4IV66KWAYBUQZANX3KK7OXUILE6HIK47TJ53R4A6YKL7BC3PRLVBW24J6JYEW7OXOMT2A5AOO7O
#::: ENBYJVSYPFSY3NI2KXWSBHQZORKL3AYMTIYPYQDC2ZGJ5EBGBFH :::: NAILARA AMOS :::
# :: NUSXO7563IXK3ULFPITS57BM2C2AEK3456WH7XXRSN3QDQEGDGBA :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
