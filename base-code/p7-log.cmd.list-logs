# >:]

# name  = p7-log.cmd.list-logs
# param = [pattern]
# descr = list log available \ matching log names

my $name_pattern = $$call{'args'};

my @logfile_names;
my $system_name  = <system.host.hostname>;
my $log_dir_path = <log.protocol_7.path>;

<[file.match_files]>->(
    \@logfile_names, $log_dir_path, "$system_name.**.log"
);

$name_pattern = qr{.*/$system_name\..*\Q$name_pattern\E.*\.log$}
    if defined $name_pattern;

my @result_names
    = defined $name_pattern
    ? grep {m|$name_pattern|} @logfile_names
    : @logfile_names;

my $max_len
    = max(
    map { m,^.*/$system_name\.(.+)\.log$,; length($LAST_PAREN_MATCH) // 0 }
        ( '', @result_names ) )
    - 9;
$max_len = 10 if $max_len < 10;

map {    ## improve [ simplify ] regex ##                              [ LLL ]
    $ARG =~ s,^.*/$system_name\.|\.log$,,g;
    $ARG =~ s|\.| <|;
    $ARG .= '>';
    $ARG =~ s{^(.*) \<(\S+)\>$}{ sprintf ":%${max_len}s    :    %s",$2, $1 }e;
} @result_names;

my $header = sprintf "\n.:%${max_len}s  .:.  %s   :.\n\n",
    qw| log-name zenka |;

my $reply_str = join( '',
    $header, map { sprintf "%s\n", $ARG } <[base.sort]>->(@result_names) );

$reply_str .= "\n" if scalar @result_names;

return { 'mode' => 'data', 'data' => $reply_str }

#.............................................................................
#XASG3XVFGHFIAYCOIZMS6GMXIXSQ6236SM46CHLDX5WIK32A5BLM3RXCMBPM6QQ5RV6ZBWW7TOTQ4
#::: MOHDOSL5Z7LOPWE3LR2FPXQLNXR72YPLJOTGEVJIWHODXDBIHGE :::: NAILARA AMOS :::
# :: D2BDZFA7ACK6HSOA67AZRITPIY3BPJ7GIYN3F5VQ75ZPZTCBTIBI :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
