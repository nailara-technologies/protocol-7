## >:] ##

# name = events.set_up_timers

my $mode = shift // '';    # [recalc]

if ( length $mode and $mode ne qw| recalc | ) {
    <[base.s_warn]>->( "mode parameter '%s' not valid", $mode );
    return undef;
}

<events.timers>         //= {};
<events.unix.timetable> //= {};

map {
    if ( defined <event.timers>->{$ARG} ) {

        # LLL: trigger 'end' handler ..,
        <event.timers>->{$ARG}->cancel if <event.timers>->{$ARG}->is_active;
        delete <event.timers>->{$ARG};
        <[base.logs]>->(
            0, "cancelled timer for event %s [ no longer defined ]", $ARG
        );
    }
} keys <events.unix.timetable>->%*;

my $current_time = <[base.time]>->(2);

foreach my $ev_id ( keys <events.unix.timetable>->%* ) {
    my $u_event = <events.unix.timetable>->{$ev_id};

    # print STDERR "[U] = " . Dumper($u_event);

    my $t_event = <events.timetable>->{$ev_id};
    my $e_start
        = defined $u_event->{'at'} ? $u_event->{'at'} : $u_event->{'start'};
    if ( not defined $e_start ) {
        <[base.s_warn]>->(
            '[%s] no start time defined, skipping event.,',
            $t_event->{name}
        );
        next;
    }
    my $event_in = sprintf( "%.1f", $e_start - $current_time );

    my @timer_types = defined $u_event->{'at'} ? ('at') : ( 'start', 'end' );

    <[base.logs]>->(
        2, "[timer setup] event %s [..in %s seconds..] [ %s ]",
        $ev_id, $event_in, $e_start
    );
    <events.timers>->{$ev_id} = {};
    my $all_in_past = 1;
    map { $all_in_past = 0 if $u_event->{$ARG} >= $current_time }
        @timer_types;
    map {
        my $action_type = <events.setup>->{$ev_id}->{'action'}->{'type'};
        <events.timers>->{$ev_id}->{$ARG} = <[event.add_timer]>->(
            {   'at'      => $u_event->{$ARG},
                'handler' => qw| events.handler.event_triggered |,
                'data'    => {
                    'type' => $ARG,
                    'id'   => $ev_id,
                    'name' => $t_event->{'name'}
                }
            }
            )
            if ( $mode ne qw| recalc |
            or $action_type !~ m,^(tile\-groups|playlist)\-, )
            or (
            !$all_in_past
            and (  $ARG ne qw| start |
                or $mode ne qw| recalc |
                or $u_event->{$ARG} >= $current_time )
            );

        ##  if $ARG ne qw| start |
        ##    and $u_event->{$ARG} >= $current_time
        ##    or $mode ne qw| recalc |
        ##    and $action_type !~ m.^(tile-groups|playlist)_,;

        if ( index( $action_type, qw| playlist- | ) == 0 ) {
            my $b32id = <events.setup>->{$ev_id}->{'action'}->{'b32id'}
                //= '';
            if ( not length $b32id ) {
                warn "playlist entry 'b32id' not defined in event '$ev_id'";
            } else {
                <events.stack.playlist>->{$b32id}->{'visibility'} //= 0;
            }
        }
    } @timer_types;
}

#,,.,,,,,,...,..,,,.,,,,.,.,,,,..,,.,,,..,...,..,,...,..,,,,.,,,.,,..,.,,,...,
#F6RMHJ24ZE22FJS2C6MQSDPCLS6MH63QIWMPHARTDVLU7JU5O5GYAVSHVM5DY3JFV45GTBX4RJO5E
#\\\|A3TRVZL2OSBUHKVBJUIZ55NYKF43ABMFHQT6TRSSXHSBCGJRG3J \ / AMOS7 \ YOURUM ::
#\[7]F64RKGVBAXNAD2AJ2LJJRZO6SKGPUOOO5F73LIZHRT5UA5575YBQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
