## >:] ##

# name  = base.protocol.bind
# args  = filehandle, protocol [, mode]
# descr = bind a specific protocol to a socket / filehandle

return warn 'expected protocol name parameter' if not defined $_[1];
if ( not defined $_[0] or not defined $data{'protocol'}{ $_[1] } ) {
    my $protocol_name = $_[1];
    my $reason
        = defined $data{'protocol'}{$protocol_name}
        ? 'unknown protocol'
        : 'undefined filehandle';
    <[base.log]>->( 0, "cannot bind protocol '$protocol_name' [ $reason ]" );
    <[base.session.check_remaining]>;
    return undef;
}
$data{'handle'}{ $_[0] }{'protocol'} = $_[1];
my $mode = $_[2] // qw| server |;

my $fd = eval { fileno( $_[0] ) };

if ( $EVAL_ERROR or not defined $fd ) {
    my $ref_str = ref( $_[0] );
    my $err_msg = "<< cannot bind protocol '$_[1]' to '$ref_str'-fd";
    $err_msg .= ' ' . <[base.format_error]>->($EVAL_ERROR) if $EVAL_ERROR;
    $err_msg .= ' >>';
    <[base.log]>->( 0, $err_msg );
    <[base.session.check_remaining]>;
} else {
    warn "file handle '$fd' has no file descriptor" if $fd == -1;
    my $id = <[base.session.init]>->( $_[0], $_[1], $mode );
    if ( defined $id ) {
        <[base.log]>->(
            2, "bound protocol '$_[1]' to handle '$_[0]' [ $mode mode ]"
        );
    } else {
        <[base.log]>->(
            0,
            "session.init error : protocol '$_[1]'"
                . " [ handle '$_[0]' [ $mode mode ]"
        );
        eval { shutdown( $_[0], 2 ) };
        eval { close( $_[0] ) };
    }
}

#,,..,,..,..,,,,,,.,.,..,,,.,,.,.,..,,..,,..,,..,,...,..,,.,.,.,.,,,,,,..,...,
#PBV2TEHPEHB2WQTXVDZEQKBE4NLTTEDAPUCH6G5NGVHBELBX7PW2NPHNK2I5ATUPQQHRVBP7MMQ2M
#\\\|2RJBJAALUAUDAFJBJQRQXQGYJSSWR3RHJTAZ7BQQX7S7S34OUDC \ / AMOS7 \ YOURUM ::
#\[7]URW52M7BAWAVMHJBNMGHXEJ5QP26H3G766MFUMAVWSCDO24P3GBA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
