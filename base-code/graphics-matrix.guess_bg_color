## >:] ##

# name = graphics-matrix.guess_bg_color

my $image = shift;
die "expected image object" if not defined $image;

$image->Set( 'colorspace', 'RGB' );
my $img_depth = $image->Get('depth');

my ( $img_w, $img_h ) = $image->get( 'width', 'height' );

my %border_colors;

my $frame_width
    = 3;    # scan 3 pixel wide strip and return highest occurred color

for my $y ( 0 .. $img_h - 1 ) {
    for my $x ( 0 .. $img_w - 1 ) {
        next
            if $x > 0 + $frame_width
            and $x < ( $img_w - 1 - $frame_width )
            and $y > 0 + $frame_width
            and $y < ( $img_h - 1 - $frame_width );

        my @RGBA    # [0..255]
            = map { $ARG /= 257 }
            split( ',', $image->Get("pixelcolor[$x,$y]") );

        my @hex_cols
            = $img_depth > 8
            ? map { sprintf( '%x', sprintf( '%.0f', $ARG * 257 ) ) } @RGBA
            : map { unpack( "H*", chr( sprintf( '%.0f', $ARG ) ) ) } @RGBA;

        $border_colors{ join( '', @hex_cols[ 0 .. 2 ] ) }++;
    }
}

my %col_stats = reverse %border_colors;

my ($top_count) = ( reverse sort keys %col_stats );
my $top_color = $col_stats{$top_count};

return '#' . uc($top_color);

#,,.,,,..,,,.,,..,.,,,.,.,.,.,,.,,.,.,.,,,,..,..,,...,...,.,.,,,,,...,,.,,,,,,
#ALLVEADVPUZU6H5Z34MCMSHL5HP5OXLYDEK3CAQ6V3OARFHFHSV3KVNMQOWAXD22PSNIDJ2RC2QMO
#\\\|DEZ3MC46WEWU6WHV4FDJQZ25JE5E2SR26CUGB4FYDVZZULSVE2G \ / AMOS7 \ YOURUM ::
#\[7]NHYMQW2JI5IBCVDPPSX5KCC7ULFOWXFNMNOP5IMOGUQ7MHZ6RWDA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
