## >:] ##

# name  = v7.callback.connect_to_cube
# descr = create v7 zenka client session to local cube

my $instance_id = shift;

my $cube_addr = <protocol-7.network.internal.addr>;
my $cube_port = <protocol-7.network.internal.port>;
my $init_data = <v7.zenka.instance>->{$instance_id}->{'init_data'};
my $cube_key  = $init_data->{'cube'}->{'key'};

my $authname
    = <system.zenka.name> eq qw| <stdin> | ? qw| v7 | : <system.zenka.name>;
$authname = <system.zenka.auth_name> if defined <system.zenka.auth_name>;

my $c_fh;    ## cube filehandle ##
if ( not <[base.cfg_bool]>->( <v7.local_cube.connect-unix> //= 1 ) ) {
    <[base.logs]>->(
        'connecting to local cube [%s:%d] ..,',
        $cube_addr, $cube_port
    );       ## tcp \ ip link type ##

    $c_fh = <[base.open]>->( qw|  ip.tcp  output  |, $cube_addr, $cube_port );

} else {    ## prefering unix by default ##
    my $unix_chksum = <[base.calc_unix_path]>->( $cube_addr, $cube_port );
    <[base.log]>->( 0, '<< unix socket name calculation not successful >>' )
        and next
        if not defined $unix_chksum;
    <unix.path> = join( '', qw| /var/run/.7/UNIX/ |, $unix_chksum );
    <[base.logs]>->( 2, ": connecting to socket path '%s'.,", <unix.path> );

    $c_fh = <[base.open]>->( qw| unix output |, <unix.path> );
}

$c_fh = <[auth.zenka.authenticate]>->( $c_fh, $authname, $cube_key );

if ( exists $init_data->{'cube'}->{'key'} ) {    ## secure key erasure ##
    my $rand_len = length( $init_data->{'cube'}->{'key'} );
    substr( $init_data->{'cube'}->{'key'},
        0, $rand_len, <[base.prng.characters]>->($rand_len) );
    $init_data->{'cube'}->{'key'}
        .= <[base.prng.characters]>->( 8 + int( rand(9) ) );
    delete $init_data->{'cube'}->{'key'};
    delete $init_data->{'cube'} if !keys %{ $init_data->{'cube'} };
}

#[ error \ <false> ]
return 0 if not defined $c_fh;

<base.log.allow_buffer_send> = 1;    ## enable sending to 'p7-log' ##

my $session_id
    = <[base.session.init]>->( $c_fh, qw|  protocol-7  client  cube  | );

<[base.logs]>->( 'auth. to cube successful [ session %d ]', $session_id );
<v7.zenka.instance>->{$instance_id}->{'root_sid'} = $session_id;
<v7.zenka.instance>->{$instance_id}->{'is-cube'}  = 1;

<callback.session.closing_last> = {
    'name'   => qw| zenka.change_status |,
    'params' => [ $instance_id, qw| error | ]
};

my $root_sid = <v7.zenka.instance>->{$instance_id}->{'root_sid'};

<[base.protocol-7.command.send.local]>->(
    {   'command' => sprintf( qw| %d.set-initialized |, $root_sid ),
        'reply'   => { 'handler' => qw| v7.handler.set_initialized_reply | },
        'call_args' => { 'args' => 0 }    # [ 0 == v7-zenka session [self] ]
    }
);

#[success]
return 5;

#,,.,,,,.,.,,,,.,,,.,,,..,.,.,,..,.,.,.,.,,,,,..,,...,...,.,,,.,,,,.,,...,,..,
#4MAQMOQHF4RCOCPOHXMVHJ6LSRKMDBWKZUGIUQD45ZOAMDN6GYRWYBTYLL3MJ2BT62YV32VIWYEDU
#\\\|VLUGH7BBK5FVI3KKTSU7U2SS3DYNJ47YCTY6EG5CB4APGS76RJZ \ / AMOS7 \ YOURUM ::
#\[7]TUYKJUV7G2DLUEMG6YPGKOOADF4KI2XN5KRMTBSX7TOZ3DHF5QBI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
