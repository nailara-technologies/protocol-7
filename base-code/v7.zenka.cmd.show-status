# >:]

# name  = v7.zenka.cmd.show-status
# param = <zenka|instance>
# descr = return agtent status with duration unchanged

<v7.zenka.notify_online> //= {};

my $zenka_subname;
my $query_param = $$call{'args'};
my $reply_id    = $$call{'reply_id'};

return {
    'mode' => qw| false |,
    'data' => 'expected zenka name or instance parameter'
    }
    if not defined $query_param or !length($query_param);

my @instances = <[v7.instance_ids]>;

if ( $query_param =~ m|^job:(\d+)$| and my $job_id = $LAST_PAREN_MATCH ) {
    my $instance_id;
    map {
        $instance_id = $ARG
            if <v7.zenka.instance>->{$ARG}->{'job_id'} == $job_id
    } @instances;
    if ( defined $instance_id ) {
        $query_param = $instance_id;
    } else {
        return {
            'mode' => qw| false |,
            'data' => "unknown job id '$job_id'"
        };
    }
}

my $query_copy = $query_param;
$zenka_subname = $LAST_PAREN_MATCH
    if $query_param !~ <regex.base.iid> and $query_param =~ s|\[([^\]]+)\]$||;

if (    not defined <[zenka.get_id]>->($query_param)
    and not defined <v7.zenka.instance>->{$query_param} ) {
    my $rep_msg
        = $query_param =~ <regex.base.iid>
        ? "no such zenka instance [$query_param]"
        : "no such zenka in set-up [$query_param]";
    return {
        'mode' => qw| false |,
        'data' => $rep_msg
    };
}

if ( $query_param =~ <regex.base.iid> and my $id = $query_param ) {  # inst.id
    my $cube_sid = <v7.zenka.instance>->{$id}->{'cube_sid'};
    my $prog_pid = <v7.zenka.instance>->{$id}->{'process'}->{'id'};
    if ( defined <v7.zenka.instance>->{$id} ) {
        my $zenka_status = <v7.zenka.instance>->{$id}->{'status'};

        my $duration = <[base.parser.duration]>->(
            <[base.n2u_time]>->(
                <v7.zenka.instance>->{$id}->{'status-since'}
            )
        );

        return {
            'mode' => qw| true |,
            'data' => "[ $zenka_status ] external program"
                . " '$query_copy' [PID=$prog_pid] < since $duration >"
            }
            if <v7.zenka.instance>->{$id}->{'status'} eq qw| extbin |;

        my $status_msg
            = ( $zenka_status eq qw| online | and defined $cube_sid )
            ? " [ $zenka_status ] < since $duration > [ cube-sid $cube_sid ]"
            : " [ $zenka_status ] < since $duration >";

        return { 'mode' => qw| true |, 'data' => $status_msg };
    }
}

foreach my $id (@instances) {    # zenka name [+subname]
    my $cube_sid = <v7.zenka.instance>->{$id}->{'cube_sid'};
    my $prog_pid = <v7.zenka.instance>->{$id}->{'process'}->{'id'};
    if (<v7.zenka.instance>->{$id}->{'zenka_name'} eq $query_param
        and (  not defined $zenka_subname
            or not defined <v7.zenka.instance>->{$id}->{'subname'}
            or <v7.zenka.instance>->{$id}->{'subname'} eq $zenka_subname )
    ) {
        my $zenka_status = <v7.zenka.instance>->{$id}->{'status'};

        my $duration = <[base.parser.duration]>->(
            <[base.n2u_time]>->(
                <v7.zenka.instance>->{$id}->{'status-since'}
            )
        );

        return {
            'mode' => qw| true |,
            'data' => "[ $zenka_status ] external program "
                . " '$query_copy' [PID=$prog_pid] < since $duration >"
            }
            if <v7.zenka.instance>->{$id}->{'status'} eq qw| extbin |;

        my $status_msg
            = ( $zenka_status eq qw| online | and defined $cube_sid )
            ? "[ $zenka_status ] < since $duration > [ cube-sid $cube_sid ]"
            : "[ $zenka_status ] < $duration >";

        return { 'mode' => qw| true |, 'data' => $status_msg };
    }
}

return { 'mode' => qw| false |, 'data' => 'not present' }

#.............................................................................
#CIOJ6UQN37X5XHPZU72COFINZARB7ZEKF3QWDUD2LSSGM6KNIZZ3BROSNPZ3OPNHMLEIPKE3P4JLO
#::: U5JV74F426ARPUE34ZWPAVZSJYP7PNVM6KGUWNMNXBMLBPS26FT :::: NAILARA AMOS :::
# :: VHSGQRXJ4KVZZVGSOPZFQ37WXJBNY5F7BO4CDQTHER2VHWBOAGAI :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
