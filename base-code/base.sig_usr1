# >:]

# name  = base.sig_usr1

my $start_lpw = <system.start.log_prefix_width>;
my $cur_lpw   = <system.zenka.log_prefix_width>;
my $max_lpw   = 27;                                ## <-- auto-calc

if ( $cur_lpw < $max_lpw ) {
    <[base.log]>->( 2, '[ SIGUSR1 ] increasing log prefix width ..,' );
    $cur_lpw += 1;
} else {
    <[base.log]>->( 2, '[ SIGUSR1 ] maximum prefix width reached .,' );
    return;
}

<system.zenka.log_prefix_width> = $cur_lpw;

my $d         = '';
my $next_dots = <log.dots> = '.' x ( $cur_lpw - $start_lpw + 1 );

my $intended_prefix_width = length(
    sprintf( ':.%s%s%s.:,',
        <system.node.name>, <log.dots>, <system.zenka.name> )
) - 1;

my $next_c_line = ':.';

my $width_delta = 0;
if ( defined <log.logged_prefix_width> ) {
    my $logged_width = <log.logged_prefix_width>;
    $width_delta = $intended_prefix_width - $logged_width;
    if ( $width_delta > 0 ) {
        substr( $next_dots, 0, $width_delta, '' );
        $next_c_line .= ':' x ( $intended_prefix_width - $width_delta - 4 );
    }
}

$next_c_line .= '.:';

return if $width_delta <= 0;

$next_c_line .= '.' x ( $intended_prefix_width - length($next_c_line) - 1 );
$next_c_line .= ',';

<log.next_console_line> = join( '',
    $ANSI{'p7_bg'}, $ANSI{'p7_fg_0000'}, $next_c_line, $ANSI{'reset'} );

#.............................................................................
#MV4BJKCQNCPMRIW6BVQCIP6V7Y7MWBZHKLMQCMSZNOIPCESOSHXTNBHOI4LYMZEK4BLEZDQ372D24
#::: UTTM5XQEKSX3JGWYWUU4DQNMA6ZDVB7TPVCEJL5XEXLKOSBACWB :::: NAILARA AMOS :::
# :: IFUAOA2OPRBSEVB5EAV67KA3AMLH77WUN2RGFDYJPSPDFCAMF6BQ :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
