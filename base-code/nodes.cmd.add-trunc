## >:] ##

# name  = nodes.cmd.add-trunc
# descr = add a nailara node with name and key [B32]
# param = <name> <addr> <pkey>

<nodes.setup> //= {};
my @params = split( m| +|, $$call{'args'} // '' );

return {
    'mode' => 'false',
    'data' => 'expected <name> <addr> and <pkey> parameters'
    }
    if @params != 3;

my $err_msg;
my $name = shift @params;
my $addr = shift @params;
my $pkey = shift @params;

$err_msg = 'not a valid node name' if $name !~ <regex.base.usr>;

foreach my $id ( keys %{<nodes.trunc>} ) {
    last if defined $err_msg;
    $err_msg = "link '$name' already exists"
        if <nodes.trunc>->{$id}->{'name'} eq $name;
}

$err_msg = 'specified IP address is not valid'
    if not defined $err_msg
    and ( $addr !~ /[\.:]/ or !ip_validate($addr) );

$err_msg = 'expect base32 encoded [C25519] public key'
    if length($pkey) !~ 52 or $pkey !~ m|^[A-Z0-9]+$|;

return { 'mode' => 'false', 'data' => $err_msg } if defined $err_msg;

$addr = ip_transform($addr);    # ..expanding..,

## establish encrypted connection .., ## [ LLL ] ##

my $node_id = <[base.list.element.add]>->(
    {   'key_ref' => \$data{'nodes'}{'trunc'},
        'val_ref' => \{
            'name' => $name,
            'addr' => $addr,
            'pkey' => $pkey
        }
    }
);

return {
    'mode' => 'false',
    'data' => "failed to add node [ details in log ]"
    }
    if not defined $node_id;

return {
    'mode' => 'true',
    'data' => "node '$name' added"
};

#,,,.,..,,,,.,,.,,.,.,,..,..,,,,,,...,,.,,.,.,..,,...,..,,,,,,,,.,,,,,,.,,,,,,
#TVNP5V5VCBE4MJTNYZ6TA27GL65QSURV4H7C3VVXPQPSACQK4OVSOYICZK4RHKAGF4PQRD4Z5AHLO
#\\\|365WFGJOLLOHUBAWATIXEXZJMKELROGBJJSDQ3N5IYF3YY3TROL \ / AMOS7 \ YOURUM ::
#\[7]N2HK6K7YDU2MWAMV7MRGZR2KYT7SCDEXRFM7I7DAA55UVXB42GBY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
