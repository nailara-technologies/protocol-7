# >:]

# name  = v7.sub-process.orphan_pids
# descr = returns PIDs of orphaned children of deceased zenki
# todo  = sort pids by process start time

<v7.process.pt> //= new Proc::ProcessTable( qw| enable_ttys | => 0 );

my %own_children;
foreach my $i_id (<[v7.instance_ids]>) {
    next if not defined <v7.zenka.instance>->{$i_id}->{'process'}->{'id'};
    my $pid = <v7.zenka.instance>->{$i_id}->{'process'}->{'id'};
    $own_children{$pid} //= <v7.zenka.instance>->{$i_id}->{'zenka_name'};
}

my %orphans;
map {
    $orphans{ $ARG->pid } = $ARG->exec // $ARG->cmndline // ''
        if $ARG->pid > 2
    }
    grep {
    $ARG->ppid == 1               # parent is 'init'
        and $ARG->pgrp == $GID    # process group was 'v7' zenka
        and $ARG->pid != $PID     # and is not this process ['v7']
        and not exists $own_children{ $ARG->pid }
        and ( not defined $ARG->exec
        or $ARG->exec ne
        qw| /usr/bin/dbus-launch | )    ##  <--  whitelist \ config   [LLL]
    } @{ <v7.process.pt>->table };

my @orphaned_pids = sort keys %orphans;
map {
    my $name_str = '';
    if ( length $orphans{$ARG} ) {
        $orphans{$ARG} =~ s|^.+/||;
        $name_str = sprintf " '%s'", $orphans{$ARG};
    }
    <[base.logs]>->( ": found orphan process id [%s]%s", $ARG, $name_str )
} @orphaned_pids;

return @orphaned_pids;

#.............................................................................
#35VME5ANZ432L2IYYC66DT3VSAFSOS7NXAGG4JZT5DTA5MEBP2GADLFODGJIIXV5ZFERWE7W74WL4
#::: W5UJF6F433KE2P4BDE7FURYEXBGV6KKOAA7NGONNMHAWMVNJS5A :::: NAILARA AMOS :::
# :: RSKZXNLA7MJBG4CBGR5T5GGAFVUZSL63MFJJUQG2UPSY2TVDE2DI :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
