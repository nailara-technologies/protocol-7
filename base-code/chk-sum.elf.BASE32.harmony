# >:]

# name  = chk-sum.elf.BASE32.harmony
# descr = return next true BASE32 encoded elf hash value [ VAX num ]

my $input_string = join( '', @ARG );

my $elf_checksum;
my $encoded_string;
my $B32_elf_checksum;

$elf_checksum   = <[chk-sum.elf]>->($input_string);
$encoded_string = encode_b32r( pack qw| V |, $elf_checksum );

my $template = qw| %s::%s::%s |;

my $calc_input
    = sprintf( $template, $encoded_string, $input_string, $elf_checksum );

my $max_rounds = 13;

RECALC:

$elf_checksum     = <[chk-sum.elf]>->($calc_input);
$encoded_string   = encode_b32r( pack qw| V |, $elf_checksum );
$B32_elf_checksum = <[chk-sum.elf]>->($encoded_string);

if (
    (      not AMOS::Assert::Truth::calc_true($elf_checksum)
        or not AMOS::Assert::Truth::calc_true($B32_elf_checksum)
    )
    and $max_rounds--
    ) {    ## ..230769.., == disharmony ..,

    ## change input with entropy from previous result ##
    $elf_checksum = sprintf qw| %09d |,
        $elf_checksum ^ <[chk-sum.elf]>->($calc_input);

    $calc_input = sprintf $template, $encoded_string, $input_string,
        $elf_checksum;

    goto RECALC;
}

return $encoded_string;

#.............................................................................
#MXHKP5GNCYCVAZHF72V36TF2TG3TUFDHXK362QJBABGFVWUEJPMOC3KIB53VT4ILZJXXOKSXUIZI6
#::: WLMUQ76MY2JMJ3CT5WUT3WBWQGNNG2AHSLB3UN2FFK6YWNUVE2T :::: NAILARA AMOS :::
# :: D54A2JNC2DTQXOSJ5VCVR6VKDMX4S7JHGJK4I4XJNCINMYGUDSAA :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
