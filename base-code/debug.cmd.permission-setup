# >:]

# name  = debug.cmd.permission-setup
# descr = return formatted access config section
# param = [name_pattern]

my $param_str = $$call{'args'} // '';
my $reply_str = '';
my $param_re;

eval { $param_re = qr|$param_str|i };
if ( defined $EVAL_ERROR ) {
    $EVAL_ERROR =~ s| at .+\n?$||;
    $EVAL_ERROR =~ s|;| \\\\ |g;
}
return {
    'mode' => 'nak',
    'data' => "input pattern regex error [ $EVAL_ERROR ] escape the pattern ?"
    }
    if $EVAL_ERROR or not defined $param_re;

if ( length($param_str) ) {
    $reply_str .= "\n#\n# ";
    $reply_str .= ' ' x 7;
    $reply_str .= ".: access permission setup"
        . " matching '$param_str' pattern :.\n#\n";
}

my $cmd_len = 0;
map {
    $cmd_len = length($ARG)
        if length($ARG) > $cmd_len
        and ( $ARG =~ $param_re or <access.cmd.usr>->{$ARG} =~ $param_re )
    }
    keys %{<access.cmd.usr>};
$cmd_len += 15;
my $max_width   = 77;
my $match_count = 0;

foreach my $user (
    sort { length <access.cmd.usr>->{$a} <=> length <access.cmd.usr>->{$b} }
    sort {
        split( / +/, <access.cmd.usr>->{$a} ) <=>
            split( / +/, <access.cmd.usr>->{$b} )
    }
    sort { length $a <=> length $b } sort keys %{<access.cmd.usr>}
) {
    next if $user !~ $param_re and <access.cmd.usr>->{$user} !~ $param_re;
    $match_count++;
    my @perms = sort { length $a <=> length $b } sort split / +/,
        <access.cmd.usr>->{$user};

    my $new_line = sprintf( "\n  %${cmd_len}s  =  ", "access.cmd.usr.$user" );
    my $first_len = length($new_line) - 1;
    my $subtract  = 0;
    while ( my $next_item = shift @perms ) {
        if (length($new_line) - $subtract + length($next_item) + 2
            > $max_width ) {
            $new_line .= " \\\n";
            $new_line .= ' ' x $first_len;
            $subtract = length($new_line) - $first_len;
            $new_line .= $next_item;

            # $new_line .= " [$subtract]";
        } else {
            $new_line .= ' ' if length($new_line) > $first_len + 1;
            $new_line .= $next_item;

            # $new_line .= " [$subtract]";
        }
    }
    $reply_str .= "$new_line\n";
}
$reply_str .= "\n";

return { 'mode' => 'nak', 'data' => "no match for '$param_str' pattern" }
    if !$match_count;

return { 'mode' => 'data', 'data' => $reply_str }

#.............................................................................
#ANBSYHGM7B45BFJGIIJWX24CR7NRO5GCXNCBEILEYNY4HCOLAKBNDA2AWM75KO3FB2XFW5JLEGY6C
#::: DVONZPHG532XJQ76N5NYJJYOJCETZHHL7TJS6WXB3GIQ5IE2ZFK :::: NAILARA AMOS :::
# :: TGW5CIRRNRETNMBBSRNTUFKTD2ORXZXGXSIZQO4OH2DGJUJXZ6AI :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
