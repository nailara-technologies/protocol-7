# >:]

# name  = source.extract_sig_body

my $src_ref     = shift;
my $strip       = shift // '';
my $footer_data = {
    'was-present'         => 0,
    'footer-length-found' => 0,
    'structure-was-valid' => 0,
    'encountered-error'   => undef,
    'data-reference'      => $src_ref
};
$strip = $strip eq 'strip' ? 1 : 0;
my $bit_size = <source.chksum_bitsize>;
die "invalid keyword '$strip' for 'strip' parameter" if $strip !~ m,^[0|1]$,;
die "expected source_str scalar reference" if ref($src_ref) ne 'SCALAR';

### extract [ optionally strip ] code signature footer #######################
my $footer_body;
my $footer_start = '#' . '.' x 77;
if ($strip) {
    $footer_body = $2   ### NOTE : also matches\strips old type \ multiple ###
        if $$src_ref =~ s{\n+(# _{78}|$footer_start)\n((#[^\n]+\n){4})$}
                         {\n}sg;
} else {
    $footer_body = $1
        if $$src_ref =~ m|(*nlb:[^\n])$footer_start\n((#[^\n]+\n){4})$|;
}

$footer_data->{'data-chksum'}
    = <[chk-sum.bmw.strsum]>->( $bit_size, $$src_ref );

return $footer_data
    if not defined $footer_body;    ## keeping current checksum ##

$footer_data->{'was-present'} = 1;  ## had a signature footer ##

my $footer_length = 1 + length($footer_start) + length($footer_body);
$footer_data->{'footer-length-found'} = $footer_length;

if ( $footer_length != length(<source.sign_template>) ) {    ## [E: length ]
    $footer_data->{'encountered-error'}
        = sprintf( "invalid code signature footer length [ %d != %d ]",
        $footer_length, length(<source.sign_template>) );
    return $footer_data;
}

my $signed_chksum;
my $signature_B32;

### comparing footer structure with signature template #######################
my $emptied_footer = join( "\n", $footer_start, $footer_body );
my @subst_params   = ( ( 80, 77 ), ( 163, 51 ), ( 242, 52 ) );
my $line_num       = 0;
while (@subst_params) {
    my $pos = shift @subst_params;
    my $len = shift @subst_params;
    $signature_B32 .= substr( $emptied_footer, $pos, $len, '_' x $len );
    $signed_chksum = $signature_B32 and $signature_B32 = ''
        if 0 == $line_num++;
}
if ( $emptied_footer ne <source.sign_template> ) {    ## [E: structural ]
    $footer_data->{'encountered-error'}
        = 'invalid signature footer structure [ template mismatch ]';
    return $footer_data;
}
##############################################################################

my @err_loc;
push( @err_loc, 'bmw-chksum' ) if $signed_chksum !~ m|^[0-9A-Z]+$|;
push( @err_loc, 'c25519-b32' ) if $signature_B32 !~ m|^[0-9A-Z]+$|;

if (@err_loc) {    ## [E: alien characters ]
    $footer_data->{'encountered-error'}
        = sprintf( "invalid characters in signature data [ %s ]",
        join( ' and ', @err_loc ) );
    return $footer_data;
}

$footer_data->{'structure-was-valid'} = 1;

$footer_data->{'data-type'} = 'CODE';   # [ other types soon: DATA, ZCFG,.., ]
$footer_data->{'checksum-type'}
    = 'BMW-384-B32';                    # only ones implemented so far
$footer_data->{'signature-type'}
    = 'C25519-B32';                     # <-- ########################
$footer_data->{'bmw-chksum'} = $signed_chksum;
$footer_data->{'signature'}  = $signature_B32;

return $footer_data;

#.............................................................................
#VVTS2WTTE35URA4IYK5N4ENIGO223XY65YWAX7VQR3SRIM3KMF3ACNMYINBOO4LO4E54FSVEXLAWI
#::: EBLCTN3GES2XY4BLYPSGCSSGCFUOIC6Y4TD3FTULBTKQG4UX7TP :::: NAILARA AMOS :::
# :: QHRJS55W3LWVZBIZ5Q6EJDYO6U37LQXUCNLJPPFCT4M43FNHD6CI :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
