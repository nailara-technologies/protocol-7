## >:] ##

# name  = source.extract_sig_body

my $src_ref = shift;
my $strip   = shift // '';

warn 'expected source_str scalar reference <{C1}>' and return undef
    if not length ref $src_ref;

<[base.s_warn]>->( 'got ref-type %s , want SCALAR <{C1}>', ref $src_ref )
    and return undef
    if ref $src_ref ne qw| SCALAR |;

my $footer_data = {
    qw| was-present               | => 0,
    qw| structure-was-valid       | => 0,
    qw| footer-length-found       | => 0,
    qw| amos-iterations-remaining | => -1,
    qw| endline-state-encoded     | => 5,      ##  endline state unchanged  ##
    qw| amos-payload-checksum     | => undef,
    qw| checksum-type             | => undef,
    qw| bmw-chksum                | => undef,
    qw| signature-type            | => undef,
    qw| signature                 | => undef,
    qw| signature-footer-str      | => undef,
    qw| footer-start-line         | => undef,
    qw| encountered-error         | => undef,
    qw| data-reference            | => $src_ref
};

$strip = $strip eq qw| strip | ? 1 : 0;
my $bit_size = <source.chksum_bitsize>;
<[base.s_warn]>->(
    "invalid keyword '%s' for 'strip' parameter <{C1}>", $strip
    )
    and return undef
    if $strip !~ m,^[0|1]$,;

### extract [ optionally strip ] code signature footer #######################
my $footer_body;
my $footer_start;
my $footer_start_regex = qr|#[\.,]{77}|;    #.......,.......,......., [..,]
my $footer_start_regex_length = 78;         ##  manually acquired  ##

my $seperator_endline_absent = 0;

if ($strip) {    ##  NOTE :  also matches\strips old type \ multiple  ##
    my $lf_re = qr|(*nlb:[^\n])\n|;
    $footer_body = ${^CAPTURE}[2]
        if $$src_ref
        =~ s,($lf_re)?(# _{78}|$footer_start_regex)\n((#[^\n]+\n){4})$,,sg;

    $seperator_endline_absent = 1
        if length($$src_ref)    ## missing endline ##
        and not length( ${^CAPTURE}[0] // '' );

    if ( length( ${^CAPTURE}[0] // '' ) ) {    ##  amend removed  ##
        $$src_ref .= "\n";
    }
    $footer_start = ${^CAPTURE}[1] if defined $footer_body;

} else {
    $footer_body = ${^CAPTURE}[2]
        if $$src_ref
        =~ m|((*nlb:[^\n])\n)($footer_start_regex)\n((#[^\n]+\n){4})$|;
    $footer_start = ${^CAPTURE}[1] if defined $footer_body;

    $seperator_endline_absent = 1              ## missing endline ##
        if length($$src_ref) > ( length($footer_start) + $footer_body )
        and not length( ${^CAPTURE}[0] // '' );
}

#### [ remove ? # missing ? ]  [LLL]

$footer_data->{'data-chksum'}    ## adding first footer line to BMW-chksum ##
    = <[chk-sum.bmw.strsum]>->( $$src_ref . "$footer_start\n", $bit_size )
    if defined $footer_start;

####

return $footer_data
    if not defined $footer_body;    ## keeping current checksum ##

$footer_data->{'was-present'} = 1;  ## had a signature footer ##

$footer_data->{'footer-start-line'} = sprintf "%s\n", $footer_start;

$footer_data->{'signature-footer-str'}
    = join( "\n", $footer_start, $footer_body );

my $footer_length = 1 + $footer_start_regex_length + length $footer_body;

$footer_data->{'footer-length-found'} = $footer_length;

if ( $footer_length != length <source.sign_template> ) {    ## [ ERR: length ]
    $footer_data->{'encountered-error'}
        = sprintf 'data signature footer size mismatch [ %d != %d ]',
        $footer_length, length <source.sign_template>;
    return $footer_data;
}

my $signed_chksum;
my $signature_B32;

### comparing footer structure with signature template #######################

my $match_template = <source.sign_template>;

if ( not defined $footer_start
    or $match_template !~ s|^$footer_start_regex|| ) {  ## [ ERR: structural ]
    $footer_data->{'encountered-error'}
        = 'data signature footer structure not valid'
        . ' [ footer-start not matched ]';
    return $footer_data;
}
my $emptied_footer = $footer_data->{'signature-footer-str'};

my @subst_params = ( ( 80, 77 ), ( 163, 51 ), ( 242, 52 ) );
my $line_num     = 0;
while (@subst_params) {
    my $pos = shift @subst_params;
    my $len = shift @subst_params;

    $signature_B32 .= substr $emptied_footer, $pos, $len, '_' x $len;
    $signed_chksum = $signature_B32 and $signature_B32 = ''
        if 0 == $line_num++;
}

( my $match_footer = $emptied_footer ) =~ s|^$footer_start_regex||;

if ( $match_footer ne $match_template ) {    ## [ ERR: structural ]
    $footer_data->{'encountered-error'}
        = 'data signature footer structure not valid [ template mismatch ]';
    return $footer_data;
}

if ($seperator_endline_absent) {    ## [ ERR: policy ]
    $footer_data->{'encountered-error'}
        = 'data signature footer not valid [ no seperator endline ]';
    return $footer_data;
}

##############################################################################

## decoding AMOS7 [ first ] footer line ##

my $amos7_header = <[amos7.decode_octal_bit_header]>->($footer_start);

if ( not $amos7_header->{'structure-was-valid'} ) {    ## [ ERR: structural ]

    $footer_data->{'encountered-error'}
        = $amos7_header->{'encountered-error'}
        // 'unspecified error in amos bit-header';
    return $footer_data;

} else {    ##  decoding was successful  ##

    <[source.restore_payload_endline_state]>->(
        $src_ref, $amos7_header->{'endline-state-encoded'}
    );

    map { $footer_data->{$ARG} = $amos7_header->{$ARG}; } qw[
        amos-payload-checksum
        endline-state-encoded
        amos-iterations-remaining
    ];
}

##############################################################################

my @err_loc;
push( @err_loc, qw| bmw-chksum | ) if $signed_chksum !~ m|^[0-9A-Z]+$|;
push( @err_loc, qw| c25519-b32 | ) if $signature_B32 !~ m|^[0-9A-Z]+$|;

if (@err_loc) {    ## [E: alien characters ]
    $footer_data->{'encountered-error'}
        = sprintf 'not valid characters in signature data [ %s ]',
        join( ' and ', @err_loc );
    return $footer_data;
}

$footer_data->{'structure-was-valid'} = 1;

$footer_data->{'checksum-type'}  = qw| BMW-384-B32 |;  # only ones implemented
$footer_data->{'signature-type'} = qw| C25519-B32 |; # <-- ###################
$footer_data->{'bmw-chksum'}     = $signed_chksum;
$footer_data->{'signature'}      = $signature_B32;

return $footer_data;

#,,..,..,,..,,...,,,.,,,,,..,,,,,,,,,,.,.,.,.,..,,...,...,,,,,.,,,,.,,...,..,,
#BM5WBPMUN2A7DGYPZWHACPMU7RBTURKNEVFLDK6ORSKJGGOYMDFZPCY576AUQD4A7TANQQFTQMPIO
#\\\|IAB55LJ5QGESP23SKIF6ZCTVKCWQL4PKBKRKU5OQI52HJVG4HW2 \ / AMOS7 \ YOURUM ::
#\[7]3CSHTEQK356IT6PXHWYGZ6A2WMWMFGOS3UGJF2OPEABDDGWGR2AI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
