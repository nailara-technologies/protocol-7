## >:] ##

# name = base.register_pm_deps

my %pmods          = map { $ARG => 1 } grep { !m,^AMOS(::.+|$)$, } @ARG;
my $zenka          = <system.zenka.name>;
my $cfg_path       = <system.conf_path>;
my $start_cfg_name = qw| start |;
state $access_warned = 0;

my $mod_dir = <[base.get_path.zenka_cfg]>;

my @not_registered;

if ( $mod_dir
    =~ s|zenki/$zenka/$start_cfg_name|$cfg_path/zenki/$zenka/pm-dep| ) {
    <[base.check_dependency_dirs]>
        if !-d $mod_dir;    ## <-- find more elegant option., [LLL]
    if (    -d $mod_dir
        and -r $mod_dir ) {
        foreach my $mod_name ( <[base.reverse-sort]>->( \%pmods ) ) {
            next if -e "$mod_dir/$mod_name";
            eval 'use Module::CoreList'
                if not defined &Module::CoreList::is_core;
            next if $EVAL_ERROR or Module::CoreList::is_core($mod_name);
            if ( -w $mod_dir ) {
                my $fh;
                open( $fh, '>', "$mod_dir/$mod_name" ) and close($fh);
            } else {
                push( @not_registered, $mod_name );
            }
        }

    }
    if (    @not_registered
        and not <system.zenka.initialized>
        and not $access_warned++ ) {
        my $root_path = <system.root_path>;
        ( my $mod_dir_rel = $mod_dir ) =~ s|^$root_path/?||g;
        <[base.log]>->( 0, "<< no write access to '$mod_dir_rel' >>" );
        map { <[base.log]>->( 0, ": not registered : '$ARG'" ) }
            @not_registered;
    }
}

#,,,.,.,.,,,,,..,,.,,,,,,,..,,..,,,..,,,.,.,,,..,,...,...,.,.,.,.,...,.,.,,,.,
#NSURH2PM4MUHXZONBBM54WABML6AJ3UW5TDCSRGXH7WKGKKYG2ALSP27V64T74RFOV63NDQ2Q2ROA
#\\\|JOQ5YD632TTH5N5BGM4FAGOW2QCRHHKCBAKKNSGYL7TNZWGZATJ \ / AMOS7 \ YOURUM ::
#\[7]BWEVVPWE3E3F2BUJIPXROA3V5MIDDFY2AIPLBINZKPOL2EXMTAAA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
