# >:]

# name  = nroot.cmd.forced-mod-reload
# param = <module-name>
# descr = rmmod + modprobe of a kernel module
# todo  = open rmmod as pipe, create output handler [make async.]

my $module_name = $$call{'args'} // '';

return { 'mode' => 'false', 'data' => 'expected valid <module> parameter' }
    if !length($module_name)
    or length($module_name) > 42
    or $module_name !~ /^[\w\s_]+$/;

return { 'mode' => 'false', 'data' => "'rmmod' binary not found!" }
    if not defined <nroot.rmmod_bin>;
my $rmmod_bin = <nroot.rmmod_bin>;
return { 'mode' => 'false', 'data' => "'modprobe' binary not found!" }
    if not defined <nroot.modprobe_bin>;
my $modprobe_bin = <nroot.modprobe_bin>;

<[base.log]>->(
    0, "<< ! >> [forced] reloading module '$module_name' << ! >>"
);

my @restart_timers;
map {
    if ( defined <nroot.zenka.instance>->{$ARG}->{'timeout_timer'}
        and <nroot.zenka.instance>->{$ARG}->{'timeout_timer'}->is_active ) {
        push( @restart_timers,
            <nroot.zenka.instance>->{$ARG}->{'timeout_timer'} );
        <nroot.zenka.instance>->{$ARG}->{'timeout_timer'}->stop;
    }
} keys %{<nroot.zenka.instance>};

my $reply_mode = 'true';
my $reply_data = 'module reloaded';

chomp( my $modprobe_output
        = qx($modprobe_bin --first-time $module_name 2>&1) );
if ( !length($modprobe_output) ) {
    $reply_data = 'module loaded';
    goto do_reply;
} elsif ( $modprobe_output =~ / not found / ) {
    $reply_data = "module '$module_name' not found!";
    goto do_reply;
}

## already in kernel ##

chomp( my $rmmod_output = qx($rmmod_bin -f $module_name 2>&1) );
if ( length($rmmod_output) ) {
    $reply_mode = 'false';
    $rmmod_output =~ s/(^.*rmmod: (FATAL: )?(Module )?|\.$)//g;
    $reply_data = "unable to unload module ['$rmmod_output']";
    goto do_reply;
}

chomp( $modprobe_output = qx($modprobe_bin --first-time $module_name 2>&1) );
if ( length($modprobe_output) ) {
    $reply_mode = 'false';
    $modprobe_output =~ s/(^modprobe: FATAL: (Module )?|\.$)//g;
    $reply_data = "unable to load module ['$modprobe_output']";
    goto do_reply;
}

do_reply:

map { $ARG->start } @restart_timers;

return { 'mode' => $reply_mode, 'data' => $reply_data }

#.............................................................................
#N3S5SGAGMMOQF4ITE2WEI4UBSBF6XJK2SBZQBJQIIFBJQQV5WQ55ZDF2QAJEWPS2RX4C2WNOTUUDM
#::: VQ5HTEYOMFIIZ7V3BYXFHYKR3EYPTKJLHFBX7WIZQZ3N6IZQ23T :::: NAILARA AMOS :::
# :: R67B7FSDWFIT3C4RKY27OSMPCXF5I6HDBSKZFHY647MZT5A6XADQ :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
