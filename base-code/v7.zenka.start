# >:]

# name = v7.zenka.start
# descr = start nailara zenka and add it to process maintenance table

my $job_id     = $ARG[0]->{'job_id'};
my $zenka_name = $ARG[0]->{'params'};
my $stdin_mode = 0;
my @p_arg      = qw| -nb |;

my $zenka_subname;
my $re_sn = <regex.base.subname>;
$zenka_subname = ${^CAPTURE}[0] if $zenka_name =~ s|\[($re_sn)\]$||;

if (<system.ansi_color>) {
    push( @p_arg, qw| -c | );
} else {
    push( @p_arg, qw| -nc | );
}

my $perl_bin    = <system.path.perl_bin>;
my $bin_p7_path = <system.start.exec_name>;

return warn 'expected zenka name <{C1}>' if not defined $zenka_name;

my $globals   = <v7.start_setup.globals> // {};
my $init_code = <v7.start_setup.zenki.startup.init_code>->{$zenka_name};
my $instances = <v7.zenka.instance>;
my $zenka_id  = <[zenka.get_id]>->($zenka_name);

# reuse instance id or create new one if none exists
my $instance_id = <jobqueue.joblist.by_id>->{$job_id}->{'instance_id'};
$instance_id //= <[zenka.instance.add]>->($zenka_id);

my $instance = $instances->{$instance_id};

<jobqueue.joblist.by_id>->{$job_id}->{'instance_id'} //= $instance_id;
$instance->{'job_id'} = $job_id;

my $starting = 0;    # check status of zenki with same name ..,
map { $starting++ if $instances->{$ARG}->{'status'} eq qw| starting | }
    @{ <[zenka.instance.get_ids]>->($zenka_id) };

if ($starting) {    # delay zenka start-up until previous one is online ..,
    <[base.logs]>->( 1, 'delaying next %s zenka instance ..,', $zenka_name );
    <[zenka.change_status]>->( $instance_id, qw| delayed | );
    return;
}

# initialize zenka instance start-up ..,
<[zenka.change_status]>->( $instance_id, qw| starting | );

### [ start-up timeout ]
my $start_timeout
    = <v7.start_setup.zenki.start-up.timeout>->{$zenka_name}
    // $globals->{'start-up'}->{'timeout'} // 64.707;    ##  <--  ##
<[base.log]>->(
    2,
    sprintf(
        "instance %d ['%s'] start timeout = %.1fs",
        $instance_id, $zenka_name, $start_timeout
    )
);

##  INCREASE START TIMEOUT WHEN LOG OUTPUT HAS HIGH LOAD  ##
if ( <system.verbosity.console> > 1 ) {
    my $verbosity_factor = 1.22420707 * ( <system.verbosity.console> - 1 );
    $start_timeout *= $verbosity_factor;
    <[base.logs]>->(
        1, ': increased instance start timeout to %.3f s [ verbosity ]',
        $start_timeout
    );
}

if ( defined $instance->{'timer'}->{'start-time-out'} ) {
    $instance->{'timer'}->{'start-time-out'}->cancel
        if $instance->{'timer'}->{'start-time-out'}->is_active();
}
$instance->{'timer'}->{'start-time-out'} = <[event.add_timer]>->(
    {   'after'   => $start_timeout,
        'handler' => qw| v7.handler.start-time-out |,
        'data'    => {
            'instance_id' => $instance_id,
            'timeout'     => $start_timeout
        }
    }
);
###

# execute v7-init code
my $init_result_data = {};
my $namespace_str
    = "\$data{'v7'}{'zenka'}{'instance'}{$instance_id}{'init_data'}";
if ( exists $init_code->{'v7-init'} ) {
    <[base.logs]>->(
        2,            'executing start init-code for instance %d [%s]',
        $instance_id, $zenka_name
    );
    my @root_init_code
        = <[base.parser.config]>->( $init_code->{'v7-init'}, $namespace_str );
    map {
        $ARG =~ s|<instance_id>|$instance_id|g;
        $ARG =~ s|<zenka_name>|$zenka_name|g
    } @root_init_code;
    my $success = <[base.execute_zenka_code]>->(@root_init_code);
    $init_result_data = $instance->{'init_data'};

    if ( not $success ) {
        <[base.logs]>->(
            0, '<< errors in zenka %s init-code, aborting start-up >>',
            $zenka_name
        );
        <[zenka.change_status]>->( $instance_id, qw| error | );
        return undef;
    }
}

my $zenka_sn_str
    = defined $zenka_subname ? "$zenka_name\[$zenka_subname]" : $zenka_name;

my ( $pid, $out_fh, $in_fh );

$instance->{'external'} = 0;

if ( exists $init_result_data->{'start_mode'}
    and $init_result_data->{'start_mode'} eq 'exec-external' ) {

    $instance->{'external'} = 1;

    my $exec_bin = $init_result_data->{'exec_bin'};
    my $prog_usr = $init_result_data->{'exec_usr'};

    if ( defined $prog_usr and $prog_usr eq qw| <AMOS-user> | ) {
        if ( defined <system.AMOS-user> ) {
            $prog_usr = <system.AMOS-user>;
        } else {
            <[base.logs]>->(
                0, "<< '%s' exec_usr [\<system.AMOS-user>] is not defined >>",
                $zenka_name
            );
            <[zenka.change_status]>->( $instance_id, qw| error | );
            return undef;
        }
    }

    ## local ./bin/ path ## [ no /-es in exec_bin param ] ##
    map {
        $exec_bin = <system.root_path> . $ARG . $exec_bin
            if $exec_bin !~ m|/| and -x <system.root_path> . $ARG . $exec_bin;
    } qw| /bin/ /bin/dependencies/ |;

    if ( not defined $exec_bin or not defined $prog_usr ) {
        my $reason
            = "expected program name [exec_bin] in '$zenka_name' set-up";
        $reason = "expected 'exec_usr' for '$zenka_name' to be defined"
            if defined $exec_bin and not defined $prog_usr;
        <[base.logs]>->( 0, '%s ., aborted.,', $reason );
        <[zenka.change_status]>->( $instance_id, qw| error | );
        <[zenka.cmd.stop]>
            ->( { 'args' => $instance_id, 'mode' => qw| implicit | } );
        return undef;
    } elsif ( $exec_bin =~ m|\s| or !-x $exec_bin ) {
        <[base.logs]>->(
            0,           "'%s' exec_bin '%s' not a valid executable",
            $zenka_name, $exec_bin
        );
        <[zenka.change_status]>->( $instance_id, qw| error | );
        return undef;
    } else {
        my $privs = <[base.root.drop_privs]>->( $prog_usr, qw| noop | );
        if ( not defined $privs or ref($privs) ne qw| HASH | ) {
            <[base.logs]>->(
                0, "exec_usr for '%s' is not valid", $zenka_name
            );
            <[zenka.change_status]>->( $instance_id, qw| error | );
            return undef;
        }
        map { $privs->{$ARG} =~ s|'||g }
            keys %{$privs};    # LLL: abort on match ?

        ## implement exec_args.., ##  [LLL]

        my $prepare_code = qw| %ENV=(); |;

        my $display = <x11.display>;
        $prepare_code .= "\$ENV{'DISPLAY'}='$display';"
            if defined $display;

        $prepare_code .= <<~ "EOT";
            \$EGID        = qw| $privs->{'all_gids'} |;
            \$GID         = qw| $privs->{'gid'} |;
            \$EUID        = qw| $privs->{'uid'} |;
            \$UID         = qw| $privs->{'uid'} |;
            \$ENV{'USER'} = qw| $prog_usr |;
            \$ENV{'HOME'} = qw| $privs->{'home'} |;
            \$ENV{'XDG_RUNTIME_DIR'} = qw| $privs->{'home'} |;
            \$ENV{'NO_AT_BRIDGE'} = 1;
            chdir( qw| $privs->{'home'} | );
        EOT

        <[base.logs]>->(
            "starting external '%s' program as '%s' ..,",
            $zenka_sn_str, $prog_usr
        );
        eval {
            $pid
                = open2( $out_fh, $in_fh, $EXECUTABLE_NAME, qw| -e |,
                "$prepare_code exec \"$exec_bin\"" );
        };
        goto SKIP_OPEN2;
    }
}

## todo : initializing $ENV{'USER'} with EUID user ..,  ##  [LLL]

$stdin_mode = 1 && push( @p_arg, qw| -stdin | )
    if exists $init_result_data->{'start_mode'}
    and $init_result_data->{'start_mode'} eq qw| stdin-zenka |
    and exists $init_code->{'zenka-init'};

my $apw_href = <v7.zenka.prefix_width> //= {};
push( @p_arg, join( '', qw| -lpw= |, $apw_href->{$zenka_name} ) )
    if defined $apw_href->{$zenka_name};

my $zenka_verbosity
    = <system.verbosity.console> || 1;  # -v is min. [ zenka output patterns ]
push( @p_arg, join( '', qw| - |, qw| v | x $zenka_verbosity ) );

<[base.logs]>->( 1, 'starting of %s zenka initiated ..,', $zenka_sn_str );
<[base.logs]>->( 2, ": exec args : ' %s '", join( ' ', @p_arg ) );

my @cmd_line_mods
    = defined $init_result_data->{'command_line_modules'}
    ? map {"-M$ARG"}
    split( m| +|, $init_result_data->{'command_line_modules'} )
    : ();

if (@cmd_line_mods) {
    my $_C = <system.perl_unicode>;
    push( @cmd_line_mods, "-C$_C" ) if defined $_C;
    eval {
        $pid
            = open2( $out_fh, $in_fh, $perl_bin, @cmd_line_mods,
            $bin_p7_path, $zenka_sn_str, @p_arg );
    };
} else {
    eval {
        $pid = open2( $out_fh, $in_fh, $bin_p7_path, $zenka_sn_str, @p_arg );
    };
}

SKIP_OPEN2:

if ( not defined $pid or $EVAL_ERROR ) {
    ( my $err_msg = $EVAL_ERROR ) =~ s,^open2: |\.?\n$,,g;
    my $err_reason
        = ( defined $OS_ERROR and length($OS_ERROR) )
        ? sprintf( " ['%s']", scalar <[base.format_error]>->($OS_ERROR) )
        : '';
    <[base.logs]>->(
        0, 'cannot start %s zenka %s [ %s ]',
        $zenka_name, $err_reason, scalar <[base.format_error]>->($err_msg)
    );
    <[zenka.change_status]>->( $instance_id, qw| error | );
    return undef;
}

### ZENKA CONSOLE OUTPUT ###

my $io = IO::Handle->new();
$io->fdopen( fileno($out_fh), qw| r | );
$io->blocking(0);

$instance->{'console-output'} = IO::Select->new();
$instance->{'console-output'}->add($io);    ## <-- [ can_read ] ##

<[event.add_io]>->(
    {   'fd'      => $io,
        'handler' => qw| v7.handler.zenka_output |,
        'data'    => $instance_id,
        'poll'    => qw| re |,
        'prio'    => 5
    }
);
###

<[v7.child.add]>->(
    $pid,
    { qw|instance_id| => $instance_id, qw|start_time| => <[base.time]>->(4) }
);

$instance->{'process'} = { 'id' => $pid, };                          # ..,
$instance->{'subname'} = $zenka_subname if defined $zenka_subname;

<[zenka.change_status]>->( $instance_id, qw| extbin | )
    if defined $init_result_data->{'start_mode'}
    and $init_result_data->{'start_mode'} eq qw| exec-external |;

## pushing init-code to zenka <stdin> [ if in stdin-mode., ] ##
if ($stdin_mode) {
    <[base.logs]>->(
        ': pushing start-up init-code < %s zenka >', $zenka_name
    );
    foreach my $_line ( @{ $init_code->{'zenka-init'} } ) {
        my $code_line = $_line;    # <-- keeping copy
           # <{mod.cmd}> [ zenka instance namespace ] variable fetching syntax
        while ( $code_line =~ m|<\{([^\}]+)\}>| ) {
            ( my $var_str = "{'$LAST_PAREN_MATCH'}" ) =~ s|\.|'}{'|g;
            my $var_value;
            eval "\$var_value = $namespace_str$var_str";
            if ($EVAL_ERROR) {
                $EVAL_ERROR =~ s|\n| |g;
                <[base.logs]>->(
                    0,
                    '<< error in zenka init-code : %s >>',
                    scalar <[base.format_error]>->($EVAL_ERROR)
                );
                last;
            } else {
                $code_line =~ s|<\{([^\}]+)\}>|$var_value|;
            }
        }
        print {$in_fh} "$code_line\n";
    }
}
close($in_fh);    ## <-- no further use for zenka stdin handle [ for now ] ##

<[base.logs]>->( '%s zenka started [ pid : %d ]', $zenka_sn_str, $pid );

#.............................................................................
#OYFIWB3REUDKDBAQF2KTF6LJV5WDNVMFFJ766RDR5NRHFHMXS4IJE32EJKW55NPYFRSOYZK7ZSMAM
#::: BVJTKTYF24U2CNRZC442K57W74E2L5M3JMRKV5TTE3RPV6BNSLD :::: NAILARA AMOS :::
# :: SDKVXCJAYW4DDJYUC3PRNNYXKLQ7EDVSXEXJTQK4WHHVLAITKYDA :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
