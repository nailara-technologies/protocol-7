## >:] ##

# name  = protocol.sftp.read_ssh_env

my $event   = shift;
my $id      = $event->w->data;
my $session = $data{'session'}->{$id};

$session->{'SSH-env'} //= {};

$event->w->stop;    ##  pause watcher to modify input buffer  ##

while ( $session->{'buffer'}->{'input'} =~ s|^set-ENV (\S+) (.+)\n|| ) {
    my $env_key = ${^CAPTURE}[0];
    my $env_val = ${^CAPTURE}[1];
    <[base.logs]>->( 2, "[%d] ssh-env : %s = %s", $id, $env_key, $env_val );
    if ( $env_key !~ m,^SSH_(CLIENT|CONNECTION)$, ) {
        $session->{'buffer'}->{'output'} .= "!TERM! option not expected\n";
        $session->{'flush_shutdown'} = 1;
        return 2;
    } elsif ( $env_val eq qw| undefined | ) {
        $session->{'buffer'}->{'output'}
            .= sprintf "!TERM! env-var '%s' is not defined\n", $env_key;
        $session->{'flush_shutdown'} = 1;
        return 2;
    }
    $session->{'SSH-env'}->{$env_key} = $env_val;
}

if ( $session->{'buffer'}->{'input'} =~ s|^close\n|| ) {
    $session->{'buffer'}->{'output'}
        .= "!TERM! closing session as requested\n";
    $session->{'flush_shutdown'} = 1;
    return 2;
}

if ( $session->{'buffer'}->{'input'} =~ s|^done-init\n|| ) {

    $event->w->start;    ##  restart watcher, modifications complete  ##

    ## check permission [ACLs] ., ##

    ## checking protocol type ##

    my $notify_close = 0;
    my $additional_message;

    if ( length( $session->{'buffer'}->{'input'} ) == 1
        and index( $session->{'buffer'}->{'input'}, "\0", 0 ) == 0 ) {

        ## todo : also implement scp protocol ## [LLL]

        <[base.logs]>->(
            0, '[%d] received _scp_ connection, notifying remote .,', $id
        );
        $additional_message = 'scp not yet';
        $notify_close       = 1;
    } elsif ( index( $session->{'buffer'}->{'input'}, "\0\0", 0 ) == -1 ) {
        <[base.logs]>->(
            0, '[%d] received ssh connection, closing channel .,', $id
        );
        $additional_message = 'not ssh';
        $notify_close       = 1;

    }
    if ($notify_close) {    ##  wrong connection type, closing link  ##

        ## sending message to ssh channel ##
        $session->{'buffer'}->{'output'}
            .= sprintf "!TERM-MSG!\n\n"
            . "  only SFTP connections are supported [ %s ]\n\n"
            . "  please configure the ssh-server appropriately\n\n",
            $additional_message;

        ##  closing unix session  ##
        $session->{'flush_shutdown'} = 1;

        return 2;    ## close link ##
    }

    ## is sftp, continue ##

    <[base.logs]>->(
        2, '[%d] env-init complete, start ftp-server process..,', $id
    );

    ##  launching 'sftp-server' process for current session  ##

    if ( not <[protocol.sftp.server.start-process]>->($id) ) {
        $session->{'buffer'}->{'output'}
            .= "!TERM! cannot start server process\n";
        $session->{'flush_shutdown'} = 1;
        return 2;
    }

    ### [..,] ###

    if ( not <[base.session.init_state]>->( $id, 1 ) ) {
        <[base.logs]>->(
            0, '[%d] session.init_state [ 1 ] was not successful'
        );
        $session->{'buffer'}->{'output'}
            .= "!TERM! unsuccessful protocol init\n";
        $session->{'flush_shutdown'} = 1;
        return 2;
    } else {
        $session->{'buffer'}->{'output'} .= "TRUE init complete\n";

        if ( length $session->{'buffer'}->{'input'} ) {   ## more in buffer ##
            $event->w->now;    ## generate another input read event ##
        }

        return 0;              ##  switching to sftp-server  ##
    }

}

$event->w->start;    ##  restart watcher, modifications complete  ##

if ( length $session->{'buffer'}->{'input'}
    and index( $session->{'buffer'}->{'input'}, "\n", 0 ) != -1 ) {
    <[base.logs]>->(
        0, '[%d] protocol error during env init, closing link..,', $id
    );
    ( my $buffer_copy = $session->{'buffer'}->{'input'} ) =~ s|\n|\\n|;
    <[base.parser.ellipse_center]>->( \$buffer_copy, 42 );
    <[base.logs]>->(
        1,   "[%d] :., buffer contained '%s' ..,",
        $id, $buffer_copy
    );
    $session->{'buffer'}->{'output'}
        .= "!TERM! protocol error [ expected"
        . " 'set-ENV <key> <value>' or 'done-init' ]\n";
    $session->{'flush_shutdown'} = 1;
    return 2;
}

return 0;

#,,.,,,,,,,.,,.,.,,.,,.,,,.,.,,,.,...,,.,,..,,..,,...,...,.,,,...,,..,,,.,...,
#MNATCBONL6GD6Q67ZGEJN4KQVCFOVIGZP4ZMHABX6NVDVZAMDEBI3HJMW63VCS7LLDXW5EQIX2ZY2
#\\\|IUORPXXBQGWKV2HNR3ZLOHON3U3FDUOWR43BXJQNT2P2MXJQXPS \ / AMOS7 \ YOURUM ::
#\[7]MVVCAEONQEIHRX4T322H7UWQTMIA73YB3LIG7HSYVVKSCGBWY4CY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
