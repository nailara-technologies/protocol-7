## >:] ##

# name = base.dump_data
# todo = named variables \ documenting parameters

my $arg_3 = $ARG[3];

my $encode_perl_refs = <base.dump_data.encode_perl_refs> //= 5;    ## true ##

if ( defined $ARG[3] and defined $ARG[0] ) {
    $ARG[5] = $ARG[2];
    $ARG[6] = $ARG[3];
    $arg_3  = \%data;
}
if ( not defined $ARG[3] ) { $arg_3  = \%data }
if ( not defined $ARG[5] ) { $ARG[5] = '' }
if ( not defined $ARG[6] ) { $ARG[6] = '' }
my $out = '';

foreach my $ARGkey ( sort( keys $arg_3->%* ) ) {
    my $ARGval = $arg_3->{$ARGkey};
    $ARGval = '' if not defined $ARGval;
    $ARGval =~ s|\\|\\\\|g;
    $ARGval =~ s|\n|\\n|g;
    $ARGkey =~ s|\'|\\'|g;    ## <-- not a valid key ##
    $ARGkey = "'$ARGkey'" if $ARGkey =~ m|[\. \'#]|;
    if ( defined $ARG[4] and length $ARG[4] ) {
        $ARGkey = sprintf qw| %s.%s |, $ARG[4], $ARGkey;
    }
    my $ARG_key = $ARGkey // '';
    if ( $ARG[5] ne '' ) { $ARG_key =~ s|$ARG[5]|$ARG[6]|ge }

    if ( ref $ARGval ne qw| HASH | ) {

        if (   not defined $ARG[2]
            or $ARG[2] eq ''
            or $ARGkey =~ m|^\^|   and $ARGkey =~ m|^\Q^$ARG[2]|
            or $ARGkey =~ m|\$PID| and $ARGkey =~ m|\Q$ARG[2]\$PID|
            or $ARGkey =~ m|$ARG[2]| ) {

            if ( ref $ARGval eq qw| ARRAY | ) {

                if ( tied @$ARGval ) {
                    $out .= sprintf "%s = TIED_ARRAY[ %s ]\n",
                        $ARGkey, tied( $ARGval->@* );
                    next;
                }

                my @array = $ARGval->@*;
                my $count = scalar @array;
                if ( $count > 42 ) {
                    $ARGval = sprintf '%s [%d]', $ARGval, $count;
                } else {
                    my $max_len = 68;
                    foreach my $element (@array) {
                        $element =~ s|"|\\"|g;
                        my $e_len = length $element;
                        substr(
                            $element,
                            $max_len - 3,
                            3 + $e_len - $max_len, '..,'
                        ) if $e_len > $max_len;
                    }
                    my $elements_str = join(
                        ' ',
                        map {
                            $ARG = sprintf '"%s"', $ARG
                                if $ARG =~ m{[ '"\{\}#]|TIED_};
                            $ARG
                        } @array
                    );
                    if ( $count == 0 ) { $ARGval = '[]' }
                    else {
                        my @val_str = '[';
                        $ARGval = sprintf '[ %s ]', $elements_str;
                    }
                }
            } else {

                if ( tied $ARGval ) {
                    $out .= sprintf "%s = TIED_SCALAR[ %s ]\n", $ARGkey,
                        tied($ARGval);
                    next;
                }
                $ARGval =~ s|"|\\"|g;
                $ARGval = sprintf '"%s"', $ARGval
                    if $ARGval =~ m,[ '"\{\}#]|TIED_,;
            }

            if ( $encode_perl_refs and length ref $ARGval ) {
                $ARGval
                    =~ s{((CODE|HASH|SCALAR|ARRAY|GLOB)\(0x[0-9a-f]{12}\))}
                        { <[base.parser.harmonized_reference]>->($1) }e
            }

            $out .= sprintf "%s = %s\n", $ARG_key, $ARGval;
        }
    } else {

        if ( tied $ARGval->%* ) {
            $out .= sprintf "%s = TIED_HASH[ %s ]\n", $ARGkey,
                tied( $ARGval->%* );
            next;
        } elsif ( not keys $ARGval->%* and not defined $ARG[2]
            or not keys $ARGval->%* and $ARGkey =~ m|$ARG[2]| ) {
            $out .= sprintf "%s = { }\n", $ARG_key;
            next;
        }

        $out .= <[base.dump_data]>->(
            undef, undef, $ARG[2], $ARGval, $ARGkey, $ARG[5], $ARG[6]
        );
    }
}

$out =~ s{((CODE|HASH|SCALAR|ARRAY|GLOB)\(0x[0-9a-f]{12}\))}
         { <[base.parser.harmonized_reference]>->($1) }ge
    if $encode_perl_refs;

if ( not defined $ARG[0] and not defined $ARG[1] ) { return $out }
else {

    # no longer exists:
    # <[net.raw_out]>->( $out, $ARG[1] );
    warn 'undefined \\ outdated subroutine usage';
}

#,,..,.,,,,,.,,,.,.,.,,,,,.,,,.,,,,,,,.,.,.,.,..,,...,..,,...,,..,.,.,,..,..,,
#I4PQBRBYH5X2YXN2P53MWZYNKN7K57I5TTV2VZ3EHPSLH2BDOE3WRGWZC3RYNEQ7IZV6N35A5SAKK
#\\\|JMBMVHD5HQOUUD6IOU5DNX6Z5OMDZ5M37CFDCUJO5SZOENZ5XEW \ / AMOS7 \ YOURUM ::
#\[7]BH6DMTGEOEHXYUHAQO46CIIBQQ7ECKOTZBJ345VB3NQF3T7NEUCI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
