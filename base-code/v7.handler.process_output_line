## >:] ##

# name  = v7.handler.process_output_line

my $watcher    = shift;
my $read_bytes = shift // 0;

return warn 'expected <watcher> argument' if not defined $watcher;
return                                    if $read_bytes < 1;

my $read_fh     = $watcher->fd;
my $instance_id = $watcher->data;

if ( not exists <v7.zenka.instance>->{$instance_id} ) {
    $watcher->cancel;
    close($read_fh);
    <[base.log]>->( 2, "instance $instance_id : output pipe closed." );
    return;
}
my $zenka_instance = <v7.zenka.instance>->{$instance_id};
my $zenka_id       = $zenka_instance->{'zenka_id'};
my $zenka_name     = <v7.zenka.setup>->{$zenka_id}->{'name'};

<v7.patterns.zenka_output> //= {};
<v7.patterns.log_matches>  //= 0;

<[base.log]>->( 2, "instance $instance_id : zenka name not defined." )
    and return
    if not defined $zenka_name;

$zenka_instance->{'output_buffer'} //= '';

my $stats_ref      = $zenka_instance->{'output-statistics'} //= {};
my $total_stat_ref = <v7.statistics.zenka-output>           //= {};

<[base.calculate_line_length_stats]>->(
    \$zenka_instance->{'output_buffer'},
    $stats_ref, $total_stat_ref
);

$zenka_instance->{'matched-name-patterns'}
    //= <[v7.init_match_name_patterns]>->($zenka_name);

my @match_name = @{ $zenka_instance->{'matched-name-patterns'} };

while ( $zenka_instance->{'output_buffer'} =~ s|^([^\n]+)\n||s ) {
    my $zenka_output_line = $LAST_PAREN_MATCH;

    utf8::decode($zenka_output_line);

    say $zenka_output_line    ##  display when verbose or log level 0  ##
        if <system.verbosity.console>
        or $zenka_output_line =~ m|\Q $ANSI{bold}\E|;

    ## remove colors before matching .., ##
    <[base.strip_ansi]>->( \$zenka_output_line );

    if ( !@match_name ) {
        if ( not exists <v7.status.warning>->{"pattern_$zenka_name"} ) {
            warn "no defined output patterns matching zenka '$zenka_name'";
            <v7.status.warning>->{"pattern_$zenka_name"} = 1;
        }
        goto SKIP_PROCESSING;    ##  no pattern matching  ##
    }

    ## matching pattern name exists ##
    my $output_patterns = <v7.patterns.zenka_output>;

    $zenka_output_line
        =~ s{^\.( +[^\.]+)?\.+($zenka_name|<zenka_name>) +\. }{};

    foreach my $pattern_name (@match_name) {
        foreach my $pattern ( keys %{ $output_patterns->{$pattern_name} } ) {

            if ( my @matches = $zenka_output_line =~ $pattern ) {

                <[base.logs]>->( 0, '<<M>>%s', $pattern )
                    if <v7.patterns.log_matches>;

                <v7.patterns.zenka_output>->{$pattern_name}->{$pattern}
                    ->( $instance_id, $zenka_name, @matches );
            }
        }
    }
}

SKIP_PROCESSING:

##  more data available ?  ##
$watcher->now if $zenka_instance->{'console-output'}->can_read(0);

#,,..,,.,,..,,.,,,,,,,.,,,,,,,,,,,.,.,,..,...,..,,...,...,.,.,...,.,.,...,..,,
#ME6BUOI4BNSW7WTBCXRKR3W3GSGSS3GY2KJOIEK6BID3PO4DCSGGBS7AKSIA35Y32WA22NGDZ77AU
#\\\|2E5ZSXECWD5UCMMTO7O4HDOLEPBFEQHQURDTWXTZFNE7DFH2ZOX \ / AMOS7 \ YOURUM ::
#\[7]WSCCJM3YVRGESP7K4PLJPZICWPS6SUG6MOM7LABC6MZ3FTGKYSDY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
