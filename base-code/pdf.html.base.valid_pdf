## >:] ##

# name  = pdf.html.base.valid_pdf
# param = <pdf_path> [width]

my $file_path = shift;

return 0
    if not defined $file_path
    or !length($file_path)
    or !-f $file_path
    or -z $file_path;

my $file_fh;

<[base.logs]>->( 2, "[PDF] '%s' .,", $file_path );

if ( !open( $file_fh, $file_path ) ) {
    <[base.s_warn]>->(
        ': file %s : %s',
        $file_path, scalar <[base.format_error]>->( $OS_ERROR, -1 )
    );
    return 0;
}

my $file_ok = 2;

my $result = <[base.s_read]>->( $file_fh, \my $buffer, 5 );

if (   $result != 5
    or not defined $buffer
    or $buffer ne '%PDF-'
    or !sysseek( $file_fh, -7, 2 ) ) {
    <[base.logs]>->( 2, "<< header mismatch ['%s'] >>", $buffer );
    $file_ok--;
}

$result = <[base.s_read]>->( $file_fh, \$buffer, 7 );

if (   $result < 6
    or not defined $buffer
    or $buffer !~ m|(\r?\n)?%%EOF(\r?\n)?$| ) {
    <[base.logs]>->( 2, "<< PDF footer syntax mismatch ['%s'] >>", $buffer );
    $file_ok--;

}

if (    $file_ok == 1
    and -x qw| /usr/bin/file |
    and qx(/usr/bin/file $file_path) =~ m|PDF document| ) {
    <[base.logs]>->(
        0,
        "apparent error in internal validation pattern for '%s'", $file_path
    );
    return 1;
}

if ($file_ok) {
    <[base.log]>->( 2, ': success, format valid.' );
    return 1 if $file_ok;
} else {
    <[base.logs]>->( "<< PDF format check failed : '%s' >>", $file_path );
    return 0;
}

#,,.,,.,.,.,,,.,,,...,,.,,,..,..,,.,,,...,.,.,..,,...,...,,,.,..,,,,,,..,,,,.,
#7CQEBYLROBDRD5RZZZYB3QORXBNV2PPKLHTBJ6ZLSMSMB2JV5O4RRN2WW5UVPSMGN3D3PRZYFNYEE
#\\\|YM4JWIKTH3I2D5QHBJKMCV64TNZK6DCJFK4BZQXJ5NHWYSQB2ZL \ / AMOS7 \ YOURUM ::
#\[7]5R2E5ORBZMRDK6MKS2CKJZV6DMKJD2O3EUEYPUJARTGUJ2DDUIBA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
