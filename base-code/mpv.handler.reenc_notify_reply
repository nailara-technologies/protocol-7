# >:]

# name = mpv.handler.reenc_notify_reply

my $reply = shift;
my $reenc_msg_sid;
my $refresh_interval = <mpv.reenc_refresh_interval>;

delete <mpv.reenc_msg_sid>;

my $err_reason;
if ( $reply->{'cmd'} ne 'ACK' ) {
    $err_reason = ' [' . $reply->{'call_args'}->{'args'} . ']';
} else {
    $reenc_msg_sid = $1
        if $reply->{'call_args'}->{'args'} =~ m| online.* \[(\d+)\]$|;
}

if (   defined $err_reason
    or not defined $reenc_msg_sid
    or $reenc_msg_sid !~ m|^\d+$| ) {
    $err_reason //= " [ answered '$$reply{call_args}{args}' ]";
    <[base.log]>->(
        0, "[!] unable to obtain reenc-msg zenka sid!$err_reason"
    );
    return;
}

<mpv.reenc_msg_sid> = $reenc_msg_sid;

<[base.log]>->( 2, "received reenc-msg zenka sid $reenc_msg_sid" );

<[mpv.callback.reenc_finished]>
    if !keys %{<mpv.converting>};    # already aborted

<mpv.timer.reenc_refresh>->cancel
    if exists <reenc-msg.timer.reenc_refresh>;
<mpv.timer.reenc_refresh> = <[event.add_timer]>->(
    {   'after'    => 0,
        'interval' => $refresh_interval + rand( $refresh_interval / 2 ),
        'handler'  => 'mpv.handler.reenc_refresh',
        'data'     => $reenc_msg_sid,
        'repeat'   => 1
    }
);

#.............................................................................
#XKA3E7FFPZ77TL3CLC4M5IW54Y3DE24VNZEEKGRUWQRMMRKSZ233FQDXQDCIJ235KQUK43GBLSNZE
#::: O6XIIUHKYBMDJSGOYGUWB3BJXH7AACISORS6KWIY6QNJLXJAMIB :::: NAILARA AMOS :::
# :: PWKABILSNRK2IE4QZH7Z5KXLQAAYPHP3G2IK5MCOYVIR7NTE3GDA :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
