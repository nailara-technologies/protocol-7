# >:]

# name  = base.cmd.verbosity
# descr = reports the current zenka log level[s]
# param = [buffer|file|console]

my $verbosity_type = $$call{'args'};

return {
    'mode' => 'false',
    'data' => 'incorrect verbosity type parameter [buffer|logfile|console]'
    }
    if defined $verbosity_type and $verbosity_type !~ m,buffer|file|console,;

my $verbosities = <system.verbosity> // {};

if ( defined $verbosity_type ) {

    $verbosity_type =~ s{^(file)$}{log$1};
    $verbosity_type =~ s{^(buffer|logfile)$}{zenka_$1};

    return { 'mode' => 'false', 'data' => 'type not valid' }
        if not exists $verbosities->{$verbosity_type};

    return { 'mode' => 'true', 'data' => $verbosities->{$verbosity_type} };
}

my $v_report;
foreach my $key ( reverse sort keys %{$verbosities} ) {
    ( my $name_str = $key ) =~ s|zenka_||;
    $v_report
        .= sprintf( ": : %7s  :.  %s\n", $name_str, $verbosities->{$key} );
}

return { 'mode' => 'data', 'data' => ":\n$v_report:\n" };

#.............................................................................
#NU6I7OFNMXLTPTOXSGQWQ43LEPKT7Q5I3UUKNJE7VHDGC4KEFE3N55QI4R32M7YAUVVQDV7ASNVAA
#::: LRJULGVVEM674Q4F6R2OKXTS6SKXFMIZ6YE7R26QG4BFCSOGXBM :::: NAILARA AMOS :::
# :: BGWKWSJDHLZWJZUPY5JI4MVQBZASQLV2VIGBLEIZTWRLETK24QDQ :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
