# >:]

# name  = plnx.cmd.get_ticker
# param = <pair|pattern|'all'>
# descr = return current ticker data

my $cur_pair = uc( $$call{'args'} // '' );

return {
    'mode' => 'false',
    'data' => "expected <market_pair|pattern|'all'>"
    }
    if !length($cur_pair);

my $ticker_data = <plnx.api.pub>->api_public('returnTicker');

my $top = $cur_pair =~ s|^TOP-(\d+)$|| ? $1 : keys( %{$ticker_data} );
$cur_pair = 'ALL' if defined $top and $top != keys( %{$ticker_data} );
return {
    'mode' => 'false',
    'data' => 'top-0 is not valid'
    }
    if $cur_pair eq 'ALL' and !$top;

my $match_count = 0;

my $reply_str = "\n";

foreach my $cur_key (
    sort {
        $ticker_data->{$b}->{'percentChange'}
            <=> $ticker_data->{$a}->{'percentChange'}
    } keys %{$ticker_data}
) {
    $top--;
    next
        if $cur_pair eq 'ALL'
        and <plnx.ticker_current>->{$cur_key}->{'isFrozen'};

    if ( $cur_pair ne 'ALL'
        and not exists <plnx.ticker_current>->{$cur_pair} )
    {    # partial match \ search pattern
        next if $cur_key !~ m|\Q$cur_pair\E|i;
    } else {
        next if $cur_pair ne 'ALL' and $cur_key ne $cur_pair;
    }
    $match_count++;
    delete <plnx.ticker_current>->{$cur_key};
    return {
        'mode' => 'false',
        'data' => 'currency pair is frozen'
        }
        if <plnx.ticker_current>->{$cur_key}->{'isFrozen'};

    $reply_str .= "[$cur_key]\n\n";
    foreach my $key_str (
        sort { length($a) <=> length($b) }
        keys %{ $ticker_data->{$cur_key} }
    ) {
        next if $key_str eq 'id' or $key_str eq 'isFrozen';
        ( my $key_lc = $key_str ) =~ s|([A-Z])|_\L$1|g;
        $key_lc =~ s|24hr|_24h|;
        <plnx.ticker_current>->{$cur_key}->{$key_lc}
            = $ticker_data->{$cur_key}->{$key_str};
        $reply_str .= sprintf( "  $key_lc = %s\n",
            $ticker_data->{$cur_key}->{$key_str} );
    }
    $reply_str .= "\n";
}

return {
    'mode' => 'false',
    'data' => "currency pair not recognized "
        . "[ use 'all' or a pattern to search ]"
    }
    if !$match_count;

return { 'mode' => qw| size |, 'data' => $reply_str }

#.............................................................................
#HBFNAPX5ACWJHTVI6E5YGRIMBZ2TMTAEU5J7CLXERH5N4OGJSEN4HS32ZT5BAVCDCMV6KORLJC4Z4
#::: E3G4U7IHL7H4EQRY4VN7OGIU5L67I4WF3BCEEUBL7XYTLOZAW5N :::: NAILARA AMOS :::
# :: NCP3GCIAOJLE65W5YQJHKZH7CAV6NWPCV3GFYNDO4VXGMX5NQOBY :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
