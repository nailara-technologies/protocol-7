# >:]

# name  = base.sig_usr2

my $start_lpw = <system.start.log_prefix_width>;
my $cur_lpw   = <system.zenka.log_prefix_width>;
my $max_lpw   = 27;                                ## <-- auto-calc

if ( $cur_lpw > $start_lpw ) {
    <[base.log]>->( 2, '[ SIGUSR2 ] decreasing log prefix width' );
    $cur_lpw -= 1;
} else {
    <[base.log]>->( 2, '[ SIGUSR2 ] minimum prefix width reached' );
    return;
}

<system.zenka.log_prefix_width> = $cur_lpw;

my $d = '';

my $dot_count = $cur_lpw - $start_lpw + 1;
my $next_dots = <log.dots> = '.' x $dot_count;

my $intended_prefix_width = length(
    sprintf( ':.%s%s%s.:',
        <system.node.name>, <log.dots>, <system.zenka.name> )
);

<log.next_console_line> = ':.';

my $logged_width = 0;
my $width_delta  = 0;
if ( defined <log.logged_prefix_width> ) {
    $logged_width = <log.logged_prefix_width>;
    if ( $intended_prefix_width == $logged_width ) {
        undef <log.next_console_line>;
        return;
    }
    $width_delta = $logged_width - $intended_prefix_width;
    substr( $next_dots, 0, $width_delta, '' );
    <log.next_console_line>
        .= ':' x ( $intended_prefix_width + $width_delta - 4 );
}
my $width_remaining
    = ( $intended_prefix_width - length(<log.next_console_line>) - 2 );

<log.next_console_line> .= '.:';
return if $width_remaining <= 0;

<log.next_console_line> .= '.' x ( $width_remaining - 1 ) if $width_remaining;
<log.next_console_line> .= ',' if $intended_prefix_width > $logged_width;

#.............................................................................
#MI25GY3EBAMM6LTEODWQDX6MR4YPYN4HD3P4BPE6I6LQHAGA3NLBGEQPHBKAT7N6AIBC6JA3XMDQW
#::: B77MLATAHO3NF5K5VXASKAN2MO55WI2UVS42KRXIBBGQXJNKFQP :::: NAILARA AMOS :::
# :: AYUEOGX4SRU63SDSIC6G4YKH7WNIOQUE56XMHLW3JNDJLDAPRKDY :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
