# >:]

# name = mpv.handler.rescale_video_reply

my $reply    = shift;
my $chk_hash = $reply->{'params'}->{'chk_hash'};

delete <mpv.converting>->{$chk_hash};

if ( $reply->{'cmd'} ne 'TRUE' ) {
    <mpv.rescale_failed> //= {};
    <mpv.rescale_failed>->{$chk_hash} = 1;
    <[mpv.callback.reenc_finished]>;    # removing 'reencoding' message..,
    return <[base.log]>->(
        0,
        '<< video rescaling failed >>  won\'t try again! :/  ( reason : '
            . $reply->{'call_args'}->{'args'} . ' )'
    );
}

my $old_path = $reply->{'params'}->{'orig_path'};
my $new_path = $reply->{'call_args'}->{'args'};
( my $video_name = $old_path ) =~ s|^.*/||;

<[base.log]>->( 1, "[rescaled] replacing playlist entry for '$video_name'" );

# quick-fix for entry order desyncronization
if (    <system.zenka.mode> eq 'universal-child'
    and <mpv.playlist_contains_pause> ) {
    my $sname_str
        = defined <system.zenka.subname>
        ? '[' . <system.zenka.subname> . ']'
        : '';
    <[base.log]>->( 1, "           : zenka restart., [universal$sname_str]" );
    <[base.protocol-7.command.send.local]>->(
        {   'command'   => 'cube.nroot.restart',
            'call_args' => { 'args' => 'universal' . $sname_str },
        }
    );
} else {
    <[mpv.send_command]>->('stop');
    <[mpv.send_command]>->('playlist_clear');
    <[mpv.get_playlist]>->('video');
}

<[mpv.callback.reenc_finished]>;

#.............................................................................
#CFJVLCPKPNEINLVLMNQHF6MDT3EPQ7AQW6BHC6VAK6WH7VWDEIGFALX33R37EQJJQDZ3FDAD53YUW
#::: YKX4PRYRB3TN64ZMAGUWKQF656OPFGBHJTLQNXPXEY6VOMMJW6I :::: NAILARA AMOS :::
# :: T5XO5XPVVAAGORKPB4AQM45S5U3HFV7HCGOUJBCQ6LIYMDEPVSDQ :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
