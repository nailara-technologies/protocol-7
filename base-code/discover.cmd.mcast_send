# >:]

# name  = discover.cmd.mcast_send
# descr = send (signed) message to mcast group

my $ann_msg = shift->{'args'} // '';
return { 'mode' => 'nak', 'data' => 'no announce message string given' }
    if not defined !length($ann_msg);

my $key_name = <discover.crypt.key_name>;

if ( not defined <discover.announce_msg_header> ) {

    <discover.announce_msg_header>
        = "[:<|ANNOUNCE|"
        . encode_b32r( $KEYS{'C25519'}{$key_name}{'public'} ) . "\n";

    map {
        <discover.announce_msg_header>
            .= join( ':', $ARG,
            $KEYS{'C25519'}{$key_name}{'root'}{$ARG}{'sig'} )
            . "\n"
        }
        keys %{ $KEYS{'C25519'}{$key_name}{'root'} };
}

$ann_msg =~ s/\n*$/\n/;

( my $t_stmp = <[base.time]>->( length(time) ) ) =~ s|\.||;
my $packet_str = <discover.announce_msg_header> . "\n$ann_msg\n$t_stmp:";

$packet_str .= encode_b32r( <[crypt.C25519.sign_data]>->( \$packet_str ) );

# print "---<sent>---\n$packet_str--</sent---\n";

return { 'mode' => 'nak', 'data' => "unable to send : \l$OS_ERROR" }
    unless <discover.mcast.obj.sock>->mcast_send( $packet_str . "\n",
    join( ':', <discover.mcast.ip4_addr>, <discover.mcast.ip4_port> ) );

return { 'mode' => 'ack', 'data' => 'message sent' };

#.............................................................................
#FMHBHZ7OA6WUNFFIZEZ7VXDZEBCWOVFETC5QA4MDQBRHCJMA6EWLD5TGDGRD4K67SGMKZOU2QIBE4
#::: 4F2V22CVW6RYD5FL3Q72LQ5R66O4L7PWZHU3VO3P6OSETMDDCZX :::: NAILARA AMOS :::
# :: NHJZOCPR3G4GDHYDVTYXWWEWPQKWHRPY33GQBEQKRBQQE3DGY4BA :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
