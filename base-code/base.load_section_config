# >:]

# name  = base.load_section_config
# args  = [<target_hashref>,] <file_name_pattern(s)>
# descr = load one or more 'section' config files, return hash_ref to values
# note: the way comments are stripped currently doesn't allow #'s in values!

my $conf_path   = <system.conf_path>;
my $config_data = {};

$config_data = shift if @ARG and ref( $ARG[0] ) eq 'HASH';

## config directory supplied ##
$conf_path = shift if @ARG > 1 and -d $ARG[0];

my @cfg_files = @_;

return warn 'expected configuration file parameter[s] <{C1}>'
    if !@cfg_files
    or @ARG == 1 and -d $ARG[0];

my $match_count = 0;
my $lines_count = 0;
foreach my $file_path ( <[file.match_files]>->( $conf_path, @cfg_files ) ) {

    ( my $file_name = $file_path ) =~ s|^.*/||g;
    <[base.log]>->( 2, ": loading section config '$file_name'.," );

    my @cfg_lines;

    <[file.slurp]>->( $file_path, \@cfg_lines );
    if ( !@cfg_lines ) {
        <[base.log]>->(
            0, ": unable to load section config file '$file_name'"
        );
        return undef;
    } else {
        $match_count++;
        $lines_count += scalar @cfg_lines;
    }

    my $line_num = 0;
    my ( $section, $sub_section, $sub_sub_section );
    foreach my $line (@cfg_lines) {
        $line_num++;
        $line =~ s{(#.*|\s*)+$}{}g;
        $line =~ s|^\s+||;
        next if $line eq '';
        if ( $line =~ m|^\.:\s*([\w_\-\.]+)\s*:\.$| ) {
            $section         = $1;
            $sub_section     = undef;
            $sub_sub_section = undef;
        } elsif ( $line =~ m|^-\s*([\w_\-\.]+)$| ) {
            $sub_section     = $1;
            $sub_sub_section = undef;
        } elsif ( $line =~ m|^:\s*([\w\[\]_\-\.]+)\s*:$| ) {
            $sub_sub_section = $1;
        } else {
            if ( $line =~ m|^([\w\.\-_]+)\s*=\s*(.+)+$| ) {
                if (    defined $section
                    and defined $sub_section
                    and defined $sub_sub_section ) {
                    $config_data->{$section}{$sub_section}{$sub_sub_section}
                        {$1} = $2;
                } elsif ( defined $section and defined $sub_section ) {
                    $config_data->{$section}{$sub_section}{$1} = $2;
                } elsif ( defined $section ) {
                    $config_data->{$section}{$1} = $2;
                } else {
                    <[base.log]>->(
                        0,
                        "$file_name: "
                            . "no section defined for "
                            . "'$line' [ line $line_num ]"
                    );
                }
            } else {
                <[base.log]>->(
                    0,
                    "syntax error in '$file_name' "
                        . "at line $line_num ['$line\']"
                );
            }
        }
    }
}

if ( !$match_count ) {
    <[base.log]>->( 0, ': no configuration file loaded or found .,' );
    <[base.log]>->( 2, ": : conf-path : '$conf_path' :." );
    map { <[base.log]>->( 2, ": : :.. '$ARG'" ); } @cfg_files;
} else {
    my $s_f = $match_count == 1 ? '' : 's';
    my $s_l = $lines_count == 1 ? '' : 's';
    <[base.log]>->(
        2, ": $match_count file$s_f loaded, $lines_count config line$s_l.,"
    );
}

return $config_data;

#.............................................................................
#7DTV3OYI3DLS6HT7YRANN3NSTPLBJWCM5GVSTZLTZU5K7ORPZDD3L26EUUD7RNXV67H2KKUAHTTXS
#::: ALAVD7LM2QWSK3MRAS6XK34C3XUD3MRKGVCCNVFDMXUAJ54K5FH :::: NAILARA AMOS :::
# :: JVUVTGBOQTL52RIQVY4JQ52PNNDP4NH44MW5NZXZERXXSSPMF6BI :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
