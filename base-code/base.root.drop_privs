## >:] ##

# name = base.root.drop_privs
# note = more cleanup required .,

my $noop = ( defined $ARG[1] and $ARG[1] eq qw| noop | ) ? 1 : 0;

my $user = shift;

return warn 'expected <user> parameter <{C2}>' if not defined $user;

<[base.root.check_system_user]>->($user);
<[base.check_dependency_dirs]>->($user);

if ( !length( $user // '' ) ) {
    <[base.log]>->(
        0, '<< cannot drop priviledges [ no user name supplied ] >>'
    );
    <[base.exit]>->(qw| 0110 |) if !$noop;
    return -1;
} else {

    my ($name,    $pwd,  $uid,         $gid, $quota,
        $comment, $gcos, $h_directory, $shell
    ) = getpwnam($user);

    my %_gid = map { $ARG => 1 } split( ' ', $GID );
    my %egid = map { $ARG => 1 } split( ' ', $EGID );

    if (    !$noop
        and defined $name
        and exists $_gid{$gid}
        and exists $egid{$gid}    ## complete secondary group set-up.., [LLL]
        and $EUID == $uid and $UID == $uid
    ) {
        <[base.logs]>->(
            2, "< drop_privs > already '%s', doing nothing.", $user
        );
        return -2;
    } elsif ($UID) {
        <[base.logs]>->(
            0, "<< cannot drop privs to user '%s' [ not root ] >>", $user
        );
        <[base.exit]>->(qw| 0110 |) if !$noop;
        return -1;
    } else {
        if ( not defined $name or $name ne $user ) {
            <[base.logs]>->(
                0, "<< cannot drop privs to '%s' [ no such user ] >>", $user
            );
            <[base.exit]>->(qw| 0110 |) if !$noop;
            return -1;
        } else {
            my @rgids;
            while ( my ( $_name, $_pw, $_gid, $_members ) = getgrent ) {
                push( @rgids, $_gid )
                    if ( grep( $ARG eq $user, split( m|\s+|, $_members ) ) );
            }

            if ( !length( $h_directory // '' ) ) {
                <[base.logs]>->(
                    0, "<< undefined homedir [ user '%s' ] >>", $user
                );
                <[base.log]>->( 2, " :. setting to '/'.," );
                $h_directory = qw| / |;
            } elsif ( !-d $h_directory and $h_directory ne '/nonexistent' ) {
                <[base.logs]>->(
                    0, qq|<< user '%s' has no home dir [ creating %s ] >>|,
                    $user, $h_directory
                );
                make_path(
                    $h_directory,
                    {   'mode'  => 0700,
                        'uid'   => $uid,
                        'group' => $gid
                    }
                );
            } elsif ( !-d $h_directory or $user eq 'nobody' ) { # /nonexistent
                <[base.log]>->(
                    0, "<< unable to create home directory '$h_directory' >>"
                ) if $h_directory ne qw| /nonexistent |;
                ### temporary home directory ###
                <system.privs.create_temp_home> //= 0;

                if ( !<system.privs.create_temp_home> ) {
                    $h_directory = qw| / |;
                    <[base.logs]>->(
                        "[unix:'nobody'] changing home path to '%s'",
                        $h_directory
                    );
                } else
                {    # creating temporary home directory for user 'nobody':.
                    my $tdir_template
                        = <system.zenka.name> ne qw| v7 |
                        ? sprintf "temp-home.%s.%s.%d", <system.zenka.name>,
                        $user, $PID
                        : sprintf( qw| temp-home.%s.XXXXXXXXXX |, $user );
                    $h_directory
                        = <[base.tmp_dir]>->( qw|/var/tmp/|, $tdir_template );
                    if ( -d $h_directory ) {
                        chown( $uid, $gid, $h_directory )
                            or warn "chown[$uid,$gid,$h_directory] : "
                            . <[base.format_error]>->( $OS_ERROR, -1 );
                        map { <[base.log]>->( 1, $ARG ) } (
                            ':. created temporary home directory',
                            " : $h_directory"
                        );
                        push(
                            @{<system.init_reports>},
                            {   'target_command' => qw| v7.report-temp-path |,
                                'param'          => $h_directory,
                                'descr' => 'registering temporary directory'
                            }
                        );
                    }
                }
            }

            return {
                qw| uid |      => $uid,
                qw| gid |      => $gid,
                qw| all_gids | => join( ' ', $gid, @rgids ),
                qw| home |     => $h_directory
                }
                if $noop;

            $EGID = join ' ', $gid, @rgids;
            $GID  = $gid;
            $EUID = $uid;
            $UID  = $uid;

            $ENV{'USER'}            = $name;
            $ENV{'HOME'}            = $h_directory;
            $ENV{'XDG_RUNTIME_DIR'} = $h_directory;
            $ENV{'NO_AT_BRIDGE'}    = 1;
            chdir($h_directory)
                or warn sprintf( ":: %s : chdir [ $h_directory ] ::\n",
                scalar <[base.format_error]>->( $OS_ERROR, -1 ) );

            <[base.logs]>->( "switched to unix user '%s'.,", $user );
        }
    }
}

#,,,.,,,.,,.,,...,,,,,,,,,.,.,...,,,.,,.,,,..,..,,...,...,,,,,.,,,.,,,,,,,,..,
#WUDJPLKPQND4G4L7BHR2DQZ6UDPBZNTGC4TCYUVPCCAEETPUY2POST7T7OSC576XGXYXIPMTCTRYY
#\\\|V6YIJESZTCBOSBCDVBHO42J35H2A6KU7NKTBRQQIVFW662RONPU \ / AMOS7 \ YOURUM ::
#\[7]LVPAVI5UZS4GVB3F43PYA4AOHLYRK6DRD3PYJVLN2IPW6MHA3CCY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
