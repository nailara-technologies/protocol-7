## >:] ##

# name  = base.sprint_t
# desc = registered template based sprintf wrapper

my $template_name = shift;
my $silence       = <base.silence.sprint_t>  // 0;
my $templates     = <base.templates.sprintf> // {};
warn 'no template name parameter given <{C1}>' and return undef
    if not defined $template_name;

if ( not keys %$templates ) {
    if ( not $silence ) {
        warn 'no sprintf templates defined yet <{C1}>';
    } else {    ## silence case at 'reload' ##
        delete <base.silence.sprint_t>;
        delete <base.silence> if not keys %{<base.silence>};
    }
    return undef;
}

my $t_group
    = $template_name =~ s|^(:[^:]+:([^:]+:(*pla:.))?)||
    ? $LAST_PAREN_MATCH
    : undef;

warn sprintf( "template group '%s' does not exist <{C1}>", $t_group )
    and return undef
    if defined $t_group
    and not defined $templates->{$t_group};

if ( not defined $t_group ) {
    my ( $package, $filename, $line, $subroutine ) = caller(0);
##  want module registry  ##   [LLL]
    ( my $module_name = $filename ) =~ s|\.[^\.]+$||;
    $t_group = sprintf( ':amos-p7-mod:%s', $module_name );
}

## search module namespace first, then main ##
my $template_str
    = (     defined $t_group
        and defined $templates->{$t_group}->{$template_name} )
    ? $templates->{$t_group}->{$template_name}
    : defined $templates->{$template_name} ? $templates->{$template_name}
    :                                        undef;

warn sprintf( "sprintf template '%s' not detined", $template_name )
    if not defined $template_str;

return sprintf( $template_str, @ARG );    ##  <-- can be without argument  ##

#,,,,,..,,.,.,.,.,,..,,.,,.,.,,..,,.,,,..,,.,,..,,...,...,..,,,,,,,,.,..,,,,.,
#QC643W5E4IGKGZSTYLG5SDHX576UWRBSF4J5CSCFDL7FMZBV7M2XBTS7OSDBLJBWPL7AAE5XJ7CXK
#\\\|LJFRQ4NNB2JBIC66P6GM3MLCRQB2STTLSGOKY5BXKWCXBPGKRQ4 \ / AMOS7 \ YOURUM ::
#\[7]6IVYYXHHULW6IIYUJQU4OIWK5QI4SDETUTDDZQYU73UFBQJOV2BQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
