# >:]

# name  = power.cmd.get_states
# descr = return power socket states
# param = <device_id>

<power.cfg.devices> //= {};
my $device_id = $$call{'args'} // '';

return { 'mode' => 'false', 'data' => 'numerical device id expected' }
    if !length($device_id)
    or $device_id !~ /\d+/;

return {
    'mode' => 'false',
    'data' => "device '$device_id' does not exist"
    }
    if not exists <power.cfg.devices>->{$device_id};

my $dev = <[power.dev_obj]>->($device_id);

$dev->_set_ctrl( SOCK_SKIP, SOCK_SKIP, SOCK_SKIP, SOCK_SKIP );

if ( not defined $dev or not defined $dev->{'poller'} ) {
    <[base.log]>->( 0, "connection to device $device_id failed" );
    return undef;
}

my @states;

# print STDERR Dumper( $dev->{'stat'} );

map {
    if (   $dev->{'stat'}->[$ARG] == 17
        or $dev->{'stat'}->[$ARG] == 18
        or $dev->{'stat'}->[$ARG] == 65 ) {
        $states[$ARG] = '1';
    } elsif ( $dev->{'stat'}->[$ARG] == 33
        or $dev->{'stat'}->[$ARG] == 34
        or $dev->{'stat'}->[$ARG] == 130 ) {
        $states[$ARG] = '0';
    } else {
        $states[$ARG] = 'E';
    }
} ( 0, 1, 2, 3 );

if ( $dev->{poller}->can_write(0.1) ) {
    $dev->{sock}->send( chr(0x11) );
    $dev->{sock}->close();
}

return { 'mode' => 'TRUE', 'data' => join( ' ', @states ) }

#.............................................................................
#6V74WRVXVSOOSZIPY7SUCJGUWL5GJ2NWUMFBK2XDN27EYKD5UIJWS6GY6DOTWLIJHOKPET2WKPIV4
#::: ZQGIALZZKPGKQR6TJZOKSZXADWWKWADDVWUFMNRLHIDVPXWPX22 :::: NAILARA AMOS :::
# :: X5IYERPPRGWVZ27BZNE3IYYXNSV2ZK3IA2ZYLSRDLK5VJZA4LMCY :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
