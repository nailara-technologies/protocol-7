# >:]

# name  = base.handler.connect

my $id     = $_[0]->w->data;
my $fd_srv = $_[0]->w->fd;

##  closed server session  ##
if ( not defined $data{'session'}{$id} ) {
    ## removing from event management ##
    $_[0]->w->cancel if $_[0]->w->is_active;
    return undef;
}

my $type  = $data{'handle'}{$fd_srv}{'link'};
my $proto = $data{'session'}{$id}{'protocol'};
my $state = $data{'session'}{$id}{'state'};
my $mode  = $data{'handle'}{$fd_srv}{'mode'};

my $handler       = $data{'io'}{'type'}{$type}{'handler'}{$mode}{'connect'};
my $banner_string = $data{'protocol'}{$proto}{'connect'}{'banner'} // '';

if ( not defined $data{'handle'}{$fd_srv}{'protocol'} ) {
    <[base.logs]>->(
        0,   '[%s] no protocol defined for submitted handle %s',
        $id, <[base.caller]>
    );
    <[base.session.check_remaining]>;
    return undef;
} else {
    ( my $handler_str = $handler ) =~ s{^io\.|\.connect$}{}g;
    <[base.log]>->( 1, "[$id] calling connect handler [$handler_str]" );
    my $fd_client = $code{$handler}->( $_[0] );
    if ( defined $fd_client and fileno($fd_client) and $fd_client->connected )
    {
        my $cid = <[base.session.init]>->( $fd_client, $proto, $mode );

        ## sending protocol banner string ., ##
        if ( length($banner_string) and $mode eq qw| input | ) {
            <[net.out]>->( $fd_client, $banner_string );
        }
        <[base.logs]>->( 1, "[%d] establishing %s connection", $cid, $proto );

    } else {
        <[base.logs]>->( 1, "[%d] connection was closed [?] .,", $id );
        return undef;
    }
}

#.............................................................................
#GVUTHK7Z7F4OXZSCUNW3XY6GVUO2ZDSJJXYOX6SGQQ34UMSG435RK64WCCGASC6P7C4XGBPFHYS6U
#::: ZEMLUGOOD2IODVNN737MPXILKRNQW4ATR3EGFR73UV63SZ5GWYP :::: NAILARA AMOS :::
# :: DTEAHU3Z46JTORBC53ZDMPPV5HHZSN4RZAYFNRXAYBCY4IG4MYAA :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
