## >:] ##

# name = pcycle.handler.toggle

my $e = shift;
$e->w->cancel if defined $e;

my $current_mode = <pcycle.state.switch> // 'off';
my $next_mode    = $current_mode eq 'on' ? 'off' : 'on';

again:
my $delta_t = sprintf(
    "%.1f",
    <pcycle.cfg.time>->{$next_mode}->{'min'} + rand(
        rand(
                  <pcycle.cfg.time>->{$next_mode}->{'max'}
                - <pcycle.cfg.time>->{$next_mode}->{'min'}
        )
    )
);
goto again
    if $delta_t > ( <pcycle.cfg.time>->{$next_mode}->{'max'} / 2 )
    and rand(1) % 1;

<[base.log]>->( 2, "fan now $next_mode for the next $delta_t seconds .." );

<[event.add_timer]>
    ->( { 'after' => $delta_t, 'handler' => 'pcycle.handler.toggle' } );

<[pcycle.switch]>->($next_mode);

#,,,.,.,.,..,,,..,,.,,...,,..,...,.,.,.,,,,,.,..,,...,...,,,,,..,,..,,,,.,...,
#NZYPREZKEX7AZTMTFBYIJ767TFAQVPDUSKQK6KECRABSFETDVVEMAAASV5GJM7KQRD7QBPVNVB62I
#\\\|PN7GYNNEQ6WM6L5Z5J2KTIU7ETMHO4VFA24MGSSQZCSZQZU7ELH \ / AMOS7 \ YOURUM ::
#\[7]OG7MSBZ3FK6EXTW35OAS5DPFPMLDRYDSPUX5KF25SFZN7KMJ5KDQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
