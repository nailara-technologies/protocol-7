## >:] ##

# name  = base.eval_regex

my $regex_str = shift;
warn 'regex string parameter undefined' if not defined $regex_str;

## regex compilation result details to stdout ##
my $print_debug_to_console = 0;

## setting up safe namespace ##
my $parse = new Safe;
$parse->permit_only(qw| :base_core :base_orig |);

#### create function to by iteration exclude all uneeded opcodes [man Opcode]
## required from base_core  ## const qr lineseq stringify ##

## evaluate regular expression with 'qr' ##
#
my $perlcode_qr_str = sprintf 'qr\'%s\'', $regex_str;

my $result = $parse->reval( $perlcode_qr_str, 1 );
#
##

if ($print_debug_to_console) {

    say "\n" . ' < perl code str > ', $perlcode_qr_str;
    say '   < eval result > ', $result // qw| UNDEF |, "\n";

    warn sprintf ' < eval error > %s <{NC}>',
        <[base.format_error]>->( $EVAL_ERROR, -1 )
        if length $EVAL_ERROR;
}

return undef if length $EVAL_ERROR;
return $result;    ## undef on eval errors ##

#,,.,,,.,,,,,,.,,,,,,,.,,,,,,,...,.,,,.,,,,..,..,,...,...,...,,,,,,,.,.,,,.,.,
#N7TNE6O5U5N3A7TUW2XRGCC5Y7PJ4JKKHIZU5IP6CS2OLHKHCS2TM7RLOYLWKMTQAHO65YKZ7YHJW
#\\\|ST7SETZTBOYJ3VKOQNNTRQR6YEEAK5XGFVSJVGM7YRWJ7F7XL57 \ / AMOS7 \ YOURUM ::
#\[7]LO7SUQDDICZK5SYY4YLT2HRCM25RNZLAAPBELJRDRNVRIVCER4CI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
