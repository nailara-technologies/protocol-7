## >:] ##

# name  = sourcecode.console.modules
# descr = list protocol-7 source code modules

my %C = %AMOS7::C;

my $zenki_str = shift;
my @zenki     = defined $zenki_str ? split( m| +|, $zenki_str ) : ();

my @p7_module_names;

if (@zenki) {
    foreach my $zenka (@zenki) {
        push @p7_module_names, <[sourcecode.extract_modules]>->($zenka);
    }
    @p7_module_names = uniq <[base.sort]>->(@p7_module_names);
} else {
    my $source_modules = <sourcecode.path.modules>;
    @p7_module_names
        = <[base.sort]>->(
        uniq map { $LAST_PAREN_MATCH if $ARG =~ m|^$source_modules/([^\.]+)| }
            <[file.all_files]>->($source_modules)->@* );
}

say sprintf qw| %s%s:%s |, $C{'b'}, $C{'0'}, $C{'R'};
map {
    printf(
        "%s%s: %s%s%s %s\n",
        $C{'b'}, $C{'0'},
        AMOS7::Assert::Truth::is_true($ARG) ? $C{'T'} . $C{'B'} : $C{'0'},
        $ARG, $C{'0'}, $C{'R'}
    )
} @p7_module_names;
say sprintf qw| %s%s:%s |, $C{'b'}, $C{'0'}, $C{'R'};

#,,.,,,..,,,,,,,,,.,.,,..,,.,,,,,,,,.,,,,,.,.,..,,...,...,,,,,...,,..,,,,,,.,,
#B3UJN7IEKID46X2YZ7WLJSBWLVAPQ5WUIE3QBHEGSFHAEJMSL2DEK7NI4DQRFZXRTAAC574X4PFQM
#\\\|Q2CH2DFMD5AZR6UK2B43GTFSSZCSPHCILHILPZCRZV2XX6L4PPB \ / AMOS7 \ YOURUM ::
#\[7]GBUWMIEVYGHOXPHLVJ7U6IG3VHZXRCXPSBFFIUT4QYNPVZG3TADA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
