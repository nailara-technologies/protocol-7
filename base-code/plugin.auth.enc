# >:]

# name   = plugin.auth.enc
# return = str(user name) (success), undef [error]

my $id = $_[0]->w->data;
my $re = <regex.base>;

my $input  = \$data{'session'}{$id}{'buffer'}{'input'};
my $output = \$data{'session'}{$id}{'buffer'}{'output'};

my $auth_versn = '0000000';    ### <-- AUTH VERSION ####
my $auth_state = $data{'session'}{$id}{'c25519'} //= {};
my $key_name   = <system.zenka.name>;

if ( $$input =~ s|^get-version\n|| )
{    ## get authentication protocol version ##
    $$output .= sprintf( "TRUE %s\n", $auth_versn );
    return 1;    # <-- keep state
}
if ( $$input =~ s{^get-(srv-(key)|key-(sig|ver))\n}{} ) {
    my $cmd_type = $1;
    my $rep_type = $2 // $3;
    $rep_type = 'sig' if $cmd_type eq 'key-ver';
    if (not defined $KEYS{'C25519'}{'session'}{$key_name}{"$rep_type-reply"} )
    {
        $$output .= "FALSE not available `:|\a\n";
        return 2;    # <-- terminate [ error state ]

    } elsif ( $cmd_type eq 'srv-key' ) {   ## returns current session p.key ##
        $$output .= sprintf( "TRUE %s\n",
            $KEYS{'C25519'}{'session'}{$key_name}{'key-reply'} );
    } elsif ( $cmd_type eq 'key-sig' ) {   ## returns session key signature ##
        $$output .= sprintf( "TRUE %s\n",
            $KEYS{'C25519'}{'session'}{$key_name}{'sig-reply'} );
    } elsif ( $cmd_type eq 'key-ver' ) {  ## return key and version chk-sum ##
        $$output .= sprintf(
            "TRUE %s\n",
            <[chk-sum.bmw.L13_str]>->(
                sprintf( "%s.[%d]",
                    $KEYS{'C25519'}{'session'}{$key_name}{'sig-reply'},
                    $auth_versn )
            )
        );
    }
    return 1;                             # <-- keeping connection state

} elsif ( $$input =~ s|^set-key ($re->{usr_str}) (\S+)( (\S+))?\n|| ) {
    $auth_state->{'peer_name'}          = $1;
    $auth_state->{'peer_pubkey'}        = $2;
    $auth_state->{'peer_net_signature'} = $3;    # optional in 'anon-usr' case

    ## search and check signature [if given]
    my $has_net_sig = defined $auth_state->{'peer_net_signature'} ? 1 : 0;

    return 1;                                    # <-- keep state

} elsif ( $$input =~ m|\n| ) {
    $$output .= ">:[\n";
    <[base.log]>->( 0, "[$id] authentication protocol mismatch [ enc ]" );
    return 2;                                    # <-- terminate
} else {
    return 1;                                    # <-- keep state
}

#.............................................................................
#3N3I634AX6B2YQNJETPQLEJCZFL2UN5GB7JEPEDZHHQPYFTASC3CX2ZBWLTSVU3YCSLPO6YWKDFYI
#::: 3GNJAKPE7ALB5AUVR46MZBW6OKU7CK74DAZC7TRJUXEIUZA5WKC :::: NAILARA AMOS :::
# :: YYT2MH76JZC6MNR3YM4PEYT7NFA2ODCMGE6AR5RWHKMWAYJG5SDI :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
