# >:]

# name = base.X-11.wait_for_window

my $timeout  = <x11.window_timeout> || 7;
my $name     = shift;
my $user     = shift // 'cube';
my $cmd_path = shift // '';
$cmd_path .= '.' if length($cmd_path);
if ( not defined $name ) {
    $name = <system.zenka.name>;
    $name .= '[' . <system.zenka.subname> . ']'
        if defined <system.zenka.subname>;
    $name =~ s|([\(\)\[\]\{\}\\])|\\$1|g;
}
die "expected window name parameter" if not defined $name or !length($name);
my ($local_sid) = keys( %{ $data{'user'}{$user}{'session'} } );

<[base.log]>->( 2, "waiting for window '$name'.," );

my $cmd_id = <[base.gen_id]>->( $data{'route'} );

my $cube_fh = $data{'session'}{$local_sid}{'handle'};

<[net.out]>->(
    $cube_fh, "($cmd_id)${cmd_path}X-11.wait_visible $timeout $name\n"
);

my $reply_string;
my $matched_reply = 0;
while ( !$matched_reply ) {
    $reply_string = <$cube_fh>;
    die "<<<!>>> cube handle exception <<<!>>>"
        if not defined $reply_string or !length($reply_string);

    $matched_reply = 1 if $reply_string =~ m{^\($cmd_id\)(ACK|NAK) };
    if ( !$matched_reply ) {
        $data{'session'}{$local_sid}{'buffer'}{'input'} .= $reply_string;
    }
}

if ( $reply_string =~ m{^\($cmd_id\)ACK (\d+)\n$} and <x11.id> = $1 ) {
    <[base.log]>->( 1, ": received X window id '" . <x11.id> . "'.," );
    return <x11.id>;
} elsif ( $reply_string =~ m|^\($cmd_id\)NAK window startup timed out| ) {
    <[base.log]>->( 0, ": window startup timed out after $timeout seconds.," );
    return undef;
} else {
    <[base.log]>->( 0, "not expected X-11 reply ['$reply_string' ] " );
    return undef;
}

#.............................................................................
#FPUF2ABKMRI3U5FZIOBYA34CHYZGERPNKOT6DQYX5SH5K2TFGSVHINU5E7DOLME3APOITI327XH5A
#::: UMEZZ7F4SEFR3VNVD42XYJLYDUQ5RW7H252QFGKT3SYDALKLR3B :::: NAILARA AMOS :::
# :: I3PLBDEA3VGFXQSOZIDHGNRTNIIEH3EAFUNAGWRQJOFADCK6ZYAY :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
