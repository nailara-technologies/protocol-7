## >:] ##

# name  = v7.zenka.cmd.start
# param = <zenka-id|name>
# descr = start a new zenka instance

my $zenka_id;
my $zenka_name;
my $zenka_subname;

my $call_params = shift           // {};
my $zenka_param = $call->{'args'} // '';

return { 'mode' => qw| false |, 'data' => 'zenka name or id expected' }
    if not length $zenka_param;

my $recursion = $call_params->{'recursion'} // 0;
my $once      = $call_params->{'once'}      // 0;

my $start_mode = $call->{'mode'}
    // $recursion ? qw| implicit | : qw| manual |;

if ( $zenka_param =~ <regex.base.iid> ) {
    $zenka_id   = $zenka_param;
    $zenka_name = <v7.zenka.setup>->{$zenka_id}->{'name'}
        if exists <v7.zenka.setup>->{$zenka_id};
    return {
        'mode' => qw| false |,
        'data' => "found no zenka with id $zenka_id"
        }
        if not defined $zenka_name;
} else {
    $zenka_name    = $zenka_param;
    $zenka_subname = $LAST_PAREN_MATCH if $zenka_name =~ s|\[([^\]]+)\]$||;
    my $sn_regex = <regex.base.subname>;
    ( my $chars = $zenka_subname // '' ) =~ s|$sn_regex||g;
    if ( length($chars) and length($chars) != length($zenka_subname) ) {
        return {
            'mode' => qw| false |,
            'data' => sprintf( 'not valid characters in zenka subname [ %s ]',
                $chars )
        };
    }
}

my $zenka_config = <v7.start_setup.zenki.config>->{$zenka_name};
return {
    'mode' => qw| false |,
    'data' => "start setup contains no zenka named '$zenka_name'"
    }
    if not defined $zenka_config;

return {
    'mode' => qw| false |,
    'data' => 'zenka is explicitly disabled in config'
    }
    if <[zenka.is_disabled]>->($zenka_name);

return {
    'mode' => qw| true |,
    'data' => "zenka '$zenka_name' already running [ 'start-once' mode ]"
    }
    if $once
    and ( defined $zenka_subname
    and <[v7.start_count]>->( $zenka_name . "[$zenka_subname]" )
    or not defined $zenka_subname and <[v7.start_count]>->($zenka_name) );

return {
    'mode' => qw| false |,
    'data' => "reached configured maximum concurrency for zenka '$zenka_name'"
    }
    if exists $zenka_config->{'max_concurrency'}
    and <[v7.start_count]>->($zenka_name)
    >= $zenka_config->{'max_concurrency'};

if ( defined $zenka_subname
    and exists $zenka_config->{'max_subname_concurrency'} ) {
    return {
        'mode' => qw| false |,
        'data' => sprintf(
            'maximum concurrency reached for %s[%s]',
            $zenka_name, $zenka_subname
        )
        }
        if <[v7.start_count]>
        ->( sprintf( '%s[%s]', $zenka_name, $zenka_subname ) )
        >= $zenka_config->{'max_subname_concurrency'};
}

return {
    'mode' => qw| false |,
    'data' => "zenka '$zenka_name' has 'manually stopped' status"
    }
    if $start_mode eq qw| implicit |
    and exists <v7.zenka.manually_stopped>->{$zenka_name};

delete <v7.zenka.manually_stopped>->{$zenka_name}
    if $start_mode eq qw| manual |;

<[base.logs]>->( "starting zenka '%s' .,", $zenka_name ) if not $recursion;

my $a_dep_str = <[zenka.get_dependencies]>->($zenka_name);
my @dependencies
    = defined $a_dep_str
    ? split( m| +|, $a_dep_str )
    : ();
foreach my $dep_name (@dependencies) {
    delete <v7.zenka.manually_stopped>->{$dep_name}
        and <[base.logs]>->(
        0, 'reset manually stopped status for %s zenka', $dep_name
        )
        if exists <v7.zenka.manually_stopped>->{$dep_name}
        and $start_mode eq qw| manual |;  ## <-- forced dependency start-up .,

    next
        if exists <v7.zenka.manually_stopped>->{$dep_name};   # .. or skipped.

    if ( !<[zenka.is_enabled]>->($dep_name) ) {
        <[base.logs]>->( "zenka enabled by dependency ['%s']", $dep_name );

        my $start_name_str = $dep_name;

        $start_name_str .= sprintf( '[%s]', $zenka_subname )
            if defined $zenka_subname
            and defined
            <v7.start_setup.zenki.config>->{$dep_name}->{'inherit_subname'}
            and
            <v7.start_setup.zenki.config>->{$dep_name}->{'inherit_subname'};

        my $reply = <[zenka.cmd.start_once]>->(
            { 'args' => $start_name_str, 'recursion' => $recursion + 1 } );

        <v7.zenka.auto_cleanup>->{$dep_name} = $LAST_PAREN_MATCH
            if $reply->{'data'} =~ m| id (\d+)$|;
    }
    <v7.zenka.dependency>->{$dep_name}->{$zenka_name} = 1
        if not exists <v7.zenka.autostart>->{$dep_name};
}

<v7.start_setup.globals.zenki.enabled> .= sprintf( ' %s', $zenka_name )
    if not <[zenka.is_enabled]>->($zenka_name);

if ( not defined $zenka_id ) {
    foreach my $id ( keys %{<v7.zenka.setup>} ) {
        $zenka_id = $id
            if <v7.zenka.setup>->{$id}->{'name'} eq $zenka_name;
    }
}

my $obj_id = <[zenka.get_object_id]>->($zenka_id);

my $target_queue = <[dependency.ok]>->($obj_id) ? qw|queued| : qw|depending|;

my $sn_str = defined $zenka_subname ? sprintf( '[%s]', $zenka_subname ) : '';

my $job_id = <[jobqueue.add_job]>->(
    {   'object_id'       => $obj_id,
        'job_callback'    => qw| zenka.start |,
        'callback_params' => sprintf( '%s%s', $zenka_name, $sn_str ),
        'target_queue'    => $target_queue
    }
);

return { 'mode' => qw| true |, 'data' => "job queued [ID=$job_id]" }

#,,.,,,..,,,,,,,,,...,..,,,.,,.,,,,.,,..,,.,.,..,,...,...,..,,.,.,...,,,,,...,
#YXBQ37FR3VBGQMT2LUAX5PROJWIIR2G3IHR4A3ZANZ7FZSRTGAEXXFIKOB4Z7PQIOYVQ3GE6K3IRM
#\\\|ZVOX2MJOSQXPLQ24DPR574FKEXNS7KJYVTIV5WPNXB53ADQM734 \ / AMOS7 \ YOURUM ::
#\[7]IVM4R7KSEIBZYFC3L5PMT6BIBLI6CNHYWHZFMJQJHT6CTBH4ASBA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
