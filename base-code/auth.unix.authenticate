# >:]

# name  = auth.unix.authenticate
# descr = unix domain socket client
# todo  = implement client side authentication timeout

return warn "module 'protocol.protocol-7' not loaded <{C1}>"
    if not defined <protocol.protocol-7>
    or not keys %{<protocol.protocol-7>};

my ( $backend_socket, $user ) = @ARG;

my $answer;
my $banner_string;

my $protocol_messages = <protocol.protocol-7.connect>;

my $protocol_banner     = $protocol_messages->{'banner'};
my $proto_msg_timeout   = $protocol_messages->{'timeout'};
my $protocol_error_msg  = $protocol_messages->{'protocol_error'};
my $auth_method_warning = $protocol_messages->{'auth_method_wrn'};
my $auth_method_err     = $protocol_messages->{'auth_method_err'};

if (   not defined $backend_socket
    or !-S $backend_socket
    or !$backend_socket->connected ) {
    <[base.log]>->(
        0, 'auth.unix : cannot authenticate [ have no valid socket ]'
    );
    return undef;
}

my $banner_string;
my ( $m_len, $read_len )
    = minmax( map {length} $protocol_banner, $proto_msg_timeout );
my $bytes_read
    = <[base.s_read]>->( $backend_socket, \$banner_string, $read_len ) // 0;
if ( $bytes_read > 0 ) {
    if ( $banner_string eq $protocol_banner ) {
        <[base.log]>->( 2, '[*] protocol seven banner detected.,' );
    } elsif ( $banner_string eq $proto_msg_timeout ) {
        <[base.log]>->( 2, '[#] authentication timeout :|' );
        return undef;
    } else {
        <[base.log]>->( 0, '[#] protocol error [ no valid banner : unix ]' );
        return undef;
    }
} else {
    <[base.log]>->( 0, 'auth.unix : [#] network error [ nothing received ]' );
    return undef;
}
<[net.out]>->( $backend_socket, "select unix\n" );
<[base.sleep]>->(0.2);

my $answer = readline($backend_socket);
chomp($answer) if defined $answer;

if ( not defined $answer ) {
    <[base.log]>->( 0, '[X] connection lost :|' ) and return undef;
} elsif ( "$answer\n" eq $auth_method_warning ) {
    <[base.log]>->( 0, '[#] server side auth method error >:|' );
    return undef;
} elsif ( "$answer\n" eq $auth_method_warning ) {
    <[base.log]>->( 0, '[#] unix authentication not available >:|' );
    return undef;
} elsif ( $answer ne 'TRUE continue' ) {
    <[base.log]>->( 0, '[#] authentication protocol error `:|' );
    return undef;
} else {
    <[base.log]>->( 2, '[*] unix authentication selected' );
    $answer = '';
}
<[net.out]>->( $backend_socket, sprintf( "auth %s\n", $user ) );

return <[auth.zenka.process_auth_reply]>->($backend_socket);

#.............................................................................
#RCZ54MVO33LGWIXZG77XXOSSUVTD32VQ5P232SZSWP6X5JBSLEMXRQTPVTZDHIV43Q5L2FWFA4YRS
#::: 3NLHREI6NSPYQHTL5P5245USB2LGZA4ENNRE7ZP2XN5ECVEXQID :::: NAILARA AMOS :::
# :: KV4IZMM7G44FNLKAC275IMLSYGCRSUJZBSPC5PG3N7JC427CQCDQ :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
