## >:] ##

# name = base.X-11.set_window_opacity
# todo = cleanup for consistency ..,

my $id        = shift;
my $opacity   = shift;
my $target    = shift;
my $route_str = defined $target ? "$target." : '';
die "expected numerical window id" if not defined $id or $id !~ /^\d+$/;
die "expected numerical opacity from 0 to 100"
    if not defined $opacity
    or $opacity !~ /^\d+$/
    or $opacity > 100;

<[base.log]>->( 2, "setting window '$id' opacity to $opacity% .." );

$target //= 'cube';

my ($sid) = keys( %{ $data{'user'}{$target}{'session'} } );

if ( defined $data{'session'}->{$sid} ) {   # status 'online' # ->{'cube_sid'}

    <[base.protocol-7.command.send.local]>->(
        {   'command'   => $route_str . 'cube.X-11.set_opacity',
            'call_args' => { 'args' => "$id $opacity" }
        }
    );
    return 1;
}

my $cmd_id  = <[base.gen_id]>->( $data{'route'} );
my $cube_fh = $data{'session'}{$sid}{'handle'};
<[net.out]>->(
    $cube_fh, "($cmd_id)${route_str}X-11.set_opacity $id $opacity\n"
);

my $reply_string;
my $matched_reply = 0;
while ( !$matched_reply ) {
    $reply_string = <$cube_fh>;
    die "cube handle had an exception" if not defined $reply_string;
    $matched_reply = 1 if $reply_string =~ m{^\($cmd_id\)(TRUE|FALSE) };
    if ( !$matched_reply ) {
        $data{'session'}{$sid}{'buffer'}{'input'} .= $reply_string;
    }
}

if ( $reply_string =~ /^\($cmd_id\)FALSE (.+)$/ ) {
    <[base.log]>->( 0, "set_opacity command failed with '$1'.," );
    return 0;
} else {
    return 1;
}

#,,,,,,..,,.,,.,,,.,.,,.,,.,,,.,,,.,.,...,.,,,..,,...,...,...,..,,...,,.,,...,
#6TB7CZA3UM3RCQKZPPUEWVBEGVR5AWZDOEXRUAYOSPH4YIUTEMZ4JVOISATMNA6SD4GCM4KVJIYL6
#\\\|QNES7KZ2WAAZV72YXTYU6K46AF3FZVEMEYIQRPJIC6ZO56UMR6Y \ / AMOS7 \ YOURUM ::
#\[7]OHCHF6GXGXI5IZL76XKV3MF4NW2T5EUM7VSAYGQHY7DQOD5U66AY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
