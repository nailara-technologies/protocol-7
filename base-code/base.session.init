# >:]

# name  = base.session.init
# descr = creates and initializes a new session

##[ PARAMETERS ]##############################################################

my ( $fd, $protocol, $mode, $name ) = @ARG;

##[ PROTOCOL DEFAULTS ]#######################################################

$protocol //= qw| protocol-7 |;
$mode     //= qw| client |;

my $re = <regex.base>;

##[ VALID FILEHANDLE ? ]######################################################

if ( not defined $fd ) {
    <[base.log]>->(
        0,
        '< base.session.init > [undefined filehandle] cannot create session'
    );
    <[base.session.check_remaining]>;
    return undef;
}

##[ VALID USERNAME ? ]########################################################

if ( defined $name and $name !~ $re->{'usr'} ) {
    <[base.log]>->(
        0,
        "< base.session.init > value '$name' for parameter name is not valid"
    );
    <[base.session.check_remaining]>;
    return undef;
}

##[ INIT NAME ]###############################################################

$name //=
    $mode eq qw| server |
    ? <base.session.uname.server>
    : <base.session.uname.client>;

if ( not defined $data{'protocol'}{$protocol} ) {
    <[base.log]>->( 0, "< base.session.init > unknown protocol '$protocol'" );
    <[base.session.check_remaining]>;
    return undef;
}

##[ INITIALIZATION ? ]########################################################

my $initialized = $mode eq qw| server | ? 1 : 0;

##[ SESSION ELEMENT ]#########################################################

my $id = <[base.list.element.add]>->(
    {   'key_ref' => \$data{'session'},
        'val_ref' => \{
            'start_time' => <[base.time]>->(5),             ## ntime ## [LLL]
            'protocol'   => $protocol,
            'handle'     => $fd,
            'link'       => $data{'handle'}{$fd}{'link'},
            'mode'       => $mode,
            'state'      => 0,
            'paused'     => 0,
            'complete'   => 1,
            'shutdown'   => 0,
            'read-mode'  => qw| line |,  ## line | bytes ## [ protocol state ]
            'read-to-fh' => undef,       ##  bypass buffer when set  ##
            'initialized'    => $initialized,
            'flush_shutdown' => 0,
            'user'           => $name,
            qw| size |       => {
                qw| buffer | => {
                    qw| input |  => <size.buffer.input>,
                    qw| output | => <size.buffer.output>,
                }
            },
            qw| buffer | => { qw| input | => '', qw| output | => '' }
        }
    }
);

my $session = $data{'session'}{$id};

##[ PAUSED WATCHERS ]#$#######################################################

$data{'watcher_list'}{'paused'} = []
    if not defined $data{'watcher_list'}{'paused'}
    or ref( $data{'watcher_list'}{'paused'} ) ne qw| ARRAY |;

##[ SERVER OR CLIENT ]########################################################

if ( $name ne <base.session.uname.server> ) {
    $mode = $data{'user'}{$name}{'session'}{$id}{'mode'} = qw| client |;
}

$data{'handle'}{$fd}{'cid'} = $id if $mode eq qw| client |;

##[ SESSION SHUTDOWN \ IMMEDIATE ]############################################

$session->{'watcher'}{'shutdown_trigger'} = <[event.add_var]>->(
    {   'var'     => \$session->{'shutdown'},          ## VARIABLE ##
        'poll'    => qw| w |,
        'handler' => qw| base.session.check.close |,
        'repeat'  => 0,
        'data'    => $id,
        'desc'    => "[$id] shutdown trigger"
    }
);

##[ SESSION SHUTDOWN ]########################################################

$session->{'watcher'}{'flush_shutdown'} = <[event.add_var]>->(
    {   'var'     => \$session->{'flush_shutdown'},             ## VARIABLE ##
        'poll'    => qw| w |,
        'handler' => qw| base.session.check.flushed |,
        'repeat'  => 0,
        'data'    => $id,
        'desc'    => "[$id] flush output and shutdown trigger"
    }
);

##[ INPUT HANDLER ]###########################################################

$session->{'watcher'}{'input_buffer'} = <[event.add_var]>->(
    {   'var'     => \$session->{'buffer'}->{'input'},          ## VARIABLE ##
        'handler' => qw| base.handler.input |,
        'poll'    => qw| w |,
        'repeat'  => 1,
        'data'    => $id,
        'desc'    => "[$id] input buffer"
    }
);

##[ OUTPUT BUFFER ]###########################################################

$session->{'watcher'}{'output_buffer'} = <[event.add_var]>->(
    {   'var'     => \$session->{'buffer'}->{'output'},         ## VARIABLE ##
        'handler' => qw| base.handler.write |,
        'poll'    => qw| w |,
        'data'    => $id,
        'prio'    => -1,
        'repeat'  => 0,
        'desc'    => "[$id] output buffer"
    }
);

##[ CLIENT CONNECTION ]#######################################################

if ( $mode eq qw| server | ) {    ##  SERVER SOCKET  ##

    <[event.add_io]>->(
        {   'fd'      => $fd,
            'handler' => qw| base.handler.connect |,
            'data'    => $id,
            'poll'    => qw| r |                     ## connection requests ##
        }
    );

} else {

##[ AUTH TIMEOUT ]############################################################

    my @timeout_callback
        = (
               $protocol ne qw| protocol-7 |
            or $name ne <base.session.uname.server>
            and $name ne <base.session.uname.client>
        )
        ? ()
        : (
        # set up auth. [input] timeout for protocol-7 sessions
        'timeout'    => <net.auth.timeout> || 13,
        'timeout_cb' => sub {
            <[base.log]>->( 1, "[$id] authentication timeout.," );
            $session->{'buffer'}->{'output'} .= ">:|\n";
            $session->{'shutdown'} = 1;
        }
        );

##[ HTTP TIMEOUT ]############################################################

    if ( $protocol eq qw| http | and $name eq <base.session.uname.server> ) {

        # http[d] timeout
        @timeout_callback = (
            'timeout'    => <httpd.timeout> || 13,
            'timeout_cb' => sub {
                <[base.log]>->( 1, "[$id] ,. http timeout ..," );
                $session->{'shutdown'} = 1;
            }
        );

##[ GENERIC TIMEOUT ]#########################################################

    } elsif ( defined <net.input_timeout> ) {    # generic input timeout
        <[base.logs]>->(
            2,                   'setting up %s second%s input timeout',
            <net.input_timeout>, <[base.cnt_s]>->(<net.input_timeout>)
        );
        @timeout_callback = (
            qw| timeout |    => <net.input_timeout>,
            qw| timeout_cb | => sub {
                <[base.log]>->(
                    1,
                    sprintf(
                        "[$id] input timeout after %s second%s.",
                        <net.input_timeout>,
                        <[base.cnt_s]>->(<net.input_timeout>)
                    )
                );
                $session->{'shutdown'} = 1;
            }
        );
    }

##[ FILEHANDLER READING ]#####################################################

    $session->{'watcher'}->{'input_handler'} = Event->io(
        'fd'     => $fd,
        'cb'     => sub { &{ $code{'base.handler.read'} } },
        'poll'   => scalar(@timeout_callback) ? qw| rt | : qw| r |,
        'prio'   => 1,
        'data'   => $id,
        'repeat' => 0,
        'desc'   => "[$id] input handler",
        @timeout_callback    # disabled eventually in 'base.handler.auth'
    );

##[ FILEHANDLE EXCEPTION ]####################################################

    $session->{'watcher'}->{'input_error'} = Event->io(
        'fd'     => $fd,
        'cb'     => sub { &{ $code{'base.handler.session_error'} } },
        'poll'   => qw| e |,
        'prio'   => 2,
        'data'   => $id,
        'repeat' => 0,
        'desc'   => "[$id] input exception handler"
    );
}

##[ INITIALIZING SESSION \ INIT ERROR ]#######################################

if ( not <[base.session.init_state]>->( $id, 0 ) ) {
    warn "cannot initialize $protocol protocol session $id";
    $session->{'shutdown'} = 1;
    return undef;
}

##[ RETURNING SESSION ID ]####################################################

return $id;

#.............................................................................
#SZPM5EIO6BVLNWDIYB3C25VVJE5QQH6U4CGM55DTG4NDOLPM4AIIJCW4ZAII772JUOA5CCHETNKKS
#::: IC4EN3XGTZ7FCBU47HDPHIXRQETSQGCK2AT7X4AK2XRAJJZEIGT :::: NAILARA AMOS :::
# :: KQTTPNNQYMPEHAYINYI65B5ZORLUAQG733WHJKWEFKV7FFMVPUAI :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
