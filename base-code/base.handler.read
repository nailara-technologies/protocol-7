# >:]

# name  = base.handler.read
# descr = session input handler

my $id = $ARG[0]->w->data;
my $fd = $ARG[0]->w->fd;

if (   not defined $id
    or not defined $data{'session'}{$id}
    or defined $data{'session'}{$id}
    and (  $data{'session'}{$id}{'shutdown'} // 0
        or $data{'session'}{$id}{'flush_shutdown'} // 0 )
) {
    $ARG[0]->w->cancel;    ## removing from event management ##
    $id //= '---';    ## <-- !!! session p7-log ?                        [LLL]
    my $type = defined $data{'session'}{$id} ? qw| removed | : qw| closing |;
    if ( $type ne qw| closing | or not $fd->eof ) {
        <[base.log]>->( 1, "[$id] handler of $type session called." );
        return undef;
    }
}

my $session     = $data{'session'}{$id};
my $handle_href = $data{'handle'}{ $session->{'handle'} };

if ( not fileno $session->{'handle'} ) {    ##  filehandle gone ?  ##
    $session->{'last-bytes-read'} = 0;
    $session->{'flush_shutdown'}  = 1;
    $ARG[0]->w->cancel;
    return;
}

my $return_code = <[net.read_proto_line]>->($id);    ##  read one line  ##

if ( $return_code > 1 ) {    ##  disconnect  ##
    $session->{'last-bytes-read'} = 0;
    $session->{'flush_shutdown'}  = 1;
    $ARG[0]->w->cancel;
} else {

    if ( $session->{'read-mode'} eq qw| bytewise | ) {

        $session->{'bytes-to-read'} -= $session->{'last-bytes-read'};

        if ( $session->{'bytes-to-read'} <= 0 ) {    ##  switching back  ##
            $session->{'read-mode'} = qw| linewise |;

            if ( $session->{'bytes-to-read'} < 0 ) {
                warn ' < over-read > ' . abs( $session->{'bytes-to-read'} );
                $session->{'bytes-to-read'} = 0;
            }
        }
    }

    my $bfs       = length( $session->{'buffer'}->{'input'} ) // 0;
    my $size_left = $data{'size'}->{'buffer'}->{'input'} - $bfs;

    ##  pause session input when no size left or target not reading  ##

    if ( $size_left > 0 ) {

        $ARG[0]->w->start;    ##  restarting : still space in buffer  ##
        $handle_href->{'paused'} = 0;

    } else {    ##  set timeout ? ##  [LLL]

        $handle_href->{'paused'}         = 1;
        $handle_href->{'paused-watcher'} = $ARG[0]->w;

        <[base.log]>->( 2, 'input handler paused [ buffer full ]' );
    }
}

return $return_code; ##  2 : disconnect | 1 : more to read | 0 : completed  ##

#.............................................................................
#2JPNACDANZ6KOIL4X52UOPGDLSRNFJOO3OW6LFSAZHDKXKFXQVYFJZ2XFORXIOG6C5HOSCPREKN5E
#::: FIX2SBBX2P6KBWAXM547XID4YOLBWJCWQKCVG46ZESMQHYYICSD :::: NAILARA AMOS :::
# :: 3AJUMN7T2KXJ7QYGD6I3N36AN5PJ2LWCZTHL6ENFT5SQAOKJQUCI :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
