# >:]

# name  = base.handler.read
# descr = session input handler

my $id = $_[0]->w->data;

if (   not defined $id
    or not defined $data{'session'}{$id}
    or defined $data{'session'}{$id}
    and $data{'session'}{$id}{'shutdown'} // 0 ) {
    $_[0]->w->cancel; ## removing from event management ##
    $id //= '---';    ## <-- !!! session p7-log ?                        [LLL]
    my $type = defined $data{'session'}{$id} ? 'removed' : 'closing';
    <[base.log]>->( 1, "[$id] handler of $type session called." );
    return undef;
}

my $session = $data{'session'}{$id};

my $bfs = length( $session->{'buffer'}->{'input'} ) // 0;

if (not fileno $session->{'handle'}
    or !<[base.s_read]>->(
        $session->{'handle'},
        \$data{'session'}{$id}{'buffer'}{'input'},
        $data{'size'}->{'buffer'}->{'input'},
        $bfs
    )
) {
    $session->{'shutdown'} = 1;
}

my $n_bfs = length( $session->{'buffer'}->{'input'} );

$data{'handle'}{ $session->{'handle'} }->{'bytes'}->{'in'} += $n_bfs - $bfs;

$bfs = $n_bfs;

if ( $bfs > $session->{'size'}->{'buffer'}->{'input'} ) {
    my $max_len = $session->{'size'}->{'buffer'}->{'input'};
    my $err_msg = 'input buffer size exceeded';
    $session->{'buffer'}->{'input'} = '';
    <[base.log]>->( 0, "[$id] $err_msg. [ $bfs > $max_len ]" );
    <[base.session.shutdown]>->( $id, "$err_msg [ max size ${max_len}B ]" );
} elsif ($bfs) {
    $_[0]->w->start;
}

#.............................................................................
#3EYMO4DOMNVMIKRQTQBX2AHVBDUIN756DLZ7HBQFI3MRBX7ORLDBDCBQSSG6CGDZMVUUT7JGU3BRC
#::: KCJBI7N2A5KYYLRDGW5GY3VC2AVGHVTJAPYLPYSHSIS26STCVYI :::: NAILARA AMOS :::
# :: 42DK6Z5IEKXDQZO5ZIBNNNYGZMOGBIMHFHBK7TSWNCHHPWRW2KBI :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
