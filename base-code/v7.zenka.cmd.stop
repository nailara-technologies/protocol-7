# >:]

# name  = v7.zenka.cmd.stop
# param = <name[s]|instance[s]>
# descr = [manually] shutdown zenka instance[s]

my $params = $call->{'args'} // '';
return { 'mode' => 'false', 'data' => 'expected zenka name or instance id' }
    if !length($params);

my $stop_mode
    = ( defined $$call{'mode'} and $$call{'mode'} eq qw| implicit | )
    ? qw| implicit |
    : qw|  manual  |;

my @instance_ids;
my $not_found_name;
my $not_found   = 0;
my $setup_found = 0;
foreach my $param_str ( split m| +|, $params ) {
    if ( $param_str =~ <regex.base.iid> ) {    ##  instance id  ##
        return {
            'mode' => qw| false |,
            'data' => "unknown zenka instance '$param_str' [see 'list zenki']"
            }
            if not exists <v7.zenka.instance>->{$param_str};
        push( @instance_ids, $param_str );
    } elsif (
        $param_str =~ <regex.base.usr>            ##   zenka name   ##
        or $param_str =~ <regex.base.usr_subn>    ##   [ subname ]  ##
    ) {
        my $zenka_name = $param_str;

        my $zenka_subname;
        my $re_sn = <regex.base.subname>;
        $zenka_subname = ${^CAPTURE}[0] if $param_str =~ s|\[($re_sn)\]$||;

        my $zenka_id = <[zenka.get_id]>->($zenka_name);
        if ( defined $zenka_id ) { $setup_found++ }
        else { $not_found++; $not_found_name //= $zenka_name; next }
        foreach my $iid (<[v7.instance_ids]>) {
            next
                if defined $zenka_subname
                and not exists <v7.zenka.instance>->{$iid}->{'subname'}
                or defined $zenka_subname
                and exists <v7.zenka.instance>->{$iid}->{'subname'}
                and <v7.zenka.instance>->{$iid}->{'subname'} ne
                $zenka_subname;

            push( @instance_ids, $iid )
                if <v7.zenka.instance>->{$iid}->{'zenka_id'} == $zenka_id;
        }
    } else {
        return {
            'mode' => qw| false |,
            'data' => 'zenka name or instance id expected'
        };
    }
}

map {
    <[zenka.instance.stop]>->($ARG);
    ## clean-up., ##
    delete <v7.zenka.instance>->{$ARG}->{'startup-error-retries'};
    delete <v7.zenka.instance>->{$ARG}->{'start-up-retries-left'};
    ##
} @instance_ids;

my $count   = scalar @instance_ids;
my $msg_str = sprintf( 'shutting down %d zenka instance%s',
    $count, <[base.cnt_s]>->($count) );

my %zenka_names;
map {
    my $zenka_name
        = <v7.zenka.setup>
        ->{ <v7.zenka.instance>->{$ARG}->{'zenka_id'} }->{'name'};
    $zenka_names{$zenka_name}++;
} <[v7.instance_ids]>;

my %shutdown_names;
map {
    my $zenka_name
        = <v7.zenka.setup>
        ->{ <v7.zenka.instance>->{$ARG}->{'zenka_id'} }->{'name'};
    <v7.zenka.instance>->{$ARG}->{'stopping'} = 1;
    $shutdown_names{$zenka_name}++;
} @instance_ids;
foreach my $name ( keys %shutdown_names ) {
    if ( exists <v7.zenka.auto_cleanup>->{$name} ) {
        delete <v7.zenka.auto_cleanup>->{$name};
        delete <v7.zenka.auto_cleanup>
            if not keys %{<v7.zenka.auto_cleanup>};
    }
    my $instances_remaining = $zenka_names{$name} - $shutdown_names{$name};
    if ( !$instances_remaining ) {

        my %zenka_list;
        map { $zenka_list{$ARG} = 1 } split m| +|,
            <v7.start_setup.globals.zenki.enabled>;
        delete $zenka_list{$name};
        <v7.start_setup.globals.zenki.enabled>
            = join( ' ', keys %zenka_list );

        <v7.zenka.manually_stopped>->{$name} = <[base.time]>->(4)
            if $stop_mode eq qw| manual |;

        <[base.logs]>->(
            2, "disabled zenka '%s' [ no more instances present ]", $name
        );
        <[base.logs]>->(
            ": << added '%s' to 'manually stopped' list >>", $name
        ) if $stop_mode eq qw| manual |;

        next if not exists <v7.zenka.dependency>;
        foreach my $dep_name ( keys %{<v7.zenka.dependency>} ) {
            delete <v7.zenka.dependency>->{$dep_name}->{$name};
            if ( !keys %{ <v7.zenka.dependency>->{$dep_name} } ) {
                delete <v7.zenka.dependency>->{$dep_name};
                if ( exists <v7.zenka.auto_cleanup>->{$dep_name} ) {
                    <[base.logs]>->(
                        'dependency based auto-start cleanup [ %s ]',
                        $dep_name
                    );
                    <[zenka.cmd.stop]>
                        ->( { 'args' => $dep_name, 'mode' => qw|implicit| } );
                }
            }
        }
        delete <v7.zenka.dependency>
            if not keys %{<v7.zenka.dependency>};
    }
}

map { <[zenka.change_status]>->( $ARG, qw| shutdown | ) } @instance_ids;

return {
    'mode' => qw| false |,
    'data' => sprintf( "zenka '%s' not in set-up [ see 'list zenki' ]",
        $not_found_name )
    }
    if not $setup_found and $not_found;

if ($count) {
    return { 'mode' => qw| true |, 'data' => $msg_str };
} else {
    ## clean up orphaned start jobs ###
    foreach my $param_str ( split m| +|, $params ) {
        my $job_attr = { 'job_callback' => qw| zenka.start | };
        if ( $param_str =~ m|^\d+$| ) {
            $job_attr->{'instance_id'} = $param_str;
        } else {
            $job_attr->{'callback_params'} = $param_str;
        }
        map {
            if ( my @removed_job = <[jobqueue.remove_job]>->($ARG) ) {
                my $a_n
                    = $removed_job[0]->{'callback_params'};   ## zenka_name ##
                <[base.logs]>->( 0, 'removed orphaned start job [%s]', $ARG );
                <[base.logs]>->( 0, ': zenka : %s',                    $a_n );
            }
        } <[jobqueue.find_jobs]>->($job_attr);
    }
    ##
    return {
        'mode' => qw| false |,
        'data' => 'there is no zenka matching zenka running'
    };
}

#.............................................................................
#3ZHWM7XZDBOLW2XYUKT4QRHYG4CJBIE5AMGNIF6LQWUKH3LUQJX4JTETOKWVUPPPTMXW27MKHEEPA
#::: 6P4TUESMQA5LOE6UW2RKH437VGVCDEL4R245AQ4SGUWOUYAO42M :::: NAILARA AMOS :::
# :: XUUMJQAINL3TZA2B52VTXIQ2XZHIS3VATAPO6LCMEVK3FUX5VICY :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
