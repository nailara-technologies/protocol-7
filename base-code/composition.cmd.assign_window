# >:]

# name  = composition.cmd.assign_window
# param = <id[,id]> [tilename]
# descr = report x11 window id[s] for current zenka
# todo  = SIGTERM handler to remove them + auto cleanup of window ids

my ( $source_name, $wid_str, $tile_name ) = split( m| +|, $$call{'args'}, 3 );
$source_name =~ s|^.+\.||g;
my $err_msg;

$err_msg = 'cube config error (source name parameter missing)'
    if not defined $source_name;
$err_msg = 'expected numerical window_id parameter'
    if not defined $wid_str or $wid_str !~ m|^\d+(,\d+)*$|;
if ( defined $err_msg ) {
    my $source_str = defined $source_name ? "[$source_name]" : '';
    <[base.log]>->( 0, "assign_window$source_str: $err_msg!" );
    return {
        'mode' => 'nak',
        'data' => $err_msg
    };
}

my $zenka_name
    = defined $tile_name ? "$source_name\[$tile_name]" : $source_name;

if ( not defined $tile_name ) {
    my $zenka_count = 0;
    map {
        if ( $ARG =~ m|^$source_name\[| ) {
            $zenka_count++;
            $zenka_name = $ARG;
        }
        }
        keys %{<composition.window_ids>};
    if ( $zenka_count > 1 ) {
        <[base.log]>->(
            0,
            "<assign_window> multiple '$source_name' zenki [ no tile name ]"
        );
        return {
            'mode' => 'nak',
            'data' =>
                'multiple zenki with that name (and no tile name provided)'
        };
    }
}

if (exists <composition.window_ids>->{$zenka_name}

    #    #    and not defined <composition.window_ids>->{$zenka_name}
) {

    $wid_str = join( ',', sort { $a <=> $b } split( m|\D+|, $wid_str ) );
    my $wid_lmsg = $wid_str;
    $wid_str =~ s|,| |g;
    <composition.window_ids>->{$zenka_name}
        = $wid_str;    # LLL: check if exists.
    my $s = $wid_str =~ m| | ? 's' : '';
    <[base.log]>->( 1, "assigned window id$s $wid_lmsg to '$zenka_name'" );

###[ ALPHA SUPPORT ]###
    my $tile_group_name = <composition.current_tile_group>;
    my $composition_data
        = <composition.setup.tile-groups>->{$tile_group_name}->{$zenka_name};
    if ( defined $composition_data->{'alpha'} ) {
        my $alpha_str
            = sprintf( "%.2f", ( 100 - $composition_data->{'alpha'} ) / 100 );
        <[base.protocol-7.command.send.local]>->(
            {   'command'   => "cube.X-11.fade_out",
                'call_args' => { 'args' => "0.8:$alpha_str $wid_str" }
            }
        );

        # warn( "alpha:0.8:$alpha_str $wid_str" );
    }
#####

    <[composition.sort_layers]>;

    return {
        'mode' => 'ack',
        'data' => 'assigned'
    };

} else {

    # [LLL] refine message [ reason ]
    return {
        'mode' => 'nak',
        'data' => 'unable to assign!'
    };
}

#.............................................................................
#YA6IPV7P7OQGX3IY5BYCFXZMHTEG5EF3TW3QRFTOIVWT64O4FETYMA6NYCJAFJNRHGLNCDPX23IKY
#::: MKPSM3K6HWGM4P44B64UDDKRSG75PHFJIXLEIPCOSKHGXY36LMW :::: NAILARA AMOS :::
# :: 4UCAV67IREGPT7HIGACAMJZFROUVHJBXVOUF4XORMORPXJGFH6DY :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
