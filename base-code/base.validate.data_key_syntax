# >:]

# name  = base.validate.data_key_syntax
# descr = validates data key parameters and provides error messages

my $data_key    = shift // '';
my $max_key_len = 255;

return warn 'expected %data key string parameter <{C1}>'
    and return ( 0, 'no data key name supplied' )
    if not length $data_key;

if ( $data_key =~ m|\.+$| ) {
    my $err_msg = sprintf( "not permitted ['%s'] at end of key", $MATCH );
    return ( 0, $err_msg ) if wantarray;
    return 0;
} elsif ( $data_key =~ m|([^A-Za-z0-9-_\.])| ) {
    my $err_msg = sprintf( 'not valid character [%s] in key name', $MATCH );
    return ( 0, $err_msg ) if wantarray;
    return 0;
}

$data_key =~ s,\'(([^\']|\.)+)\', my $k=$1; $k=~s|\.|_|g; $k,ge; ## z.'y.x' ##

my $key_len = length $data_key;
if ( $key_len > $max_key_len ) {
    my $err_msg
        = sprintf 'supplied data key too long [ max. %d bytes but was %d ]',
        $max_key_len, $key_len;
    return ( 0, $err_msg ) if wantarray;
    return 0;
}

return 5;    ## is valid [true] ##

#.............................................................................
#BUUQ726FCNDWW6VR5XUXGTZYY6Z7YOXDQEPD4WQKPLVYYJO2TNVEXEJKCEPLVZ4WVMOBKHZG7RJH4
#::: 6PWFZCMSHTAKGCBT2WNB3TRGQ2AHWDZNPQOGNEY3CHWJBKROL6B :::: NAILARA AMOS :::
# :: RP5HJKYQLPJEGQEXHH7Q7HOAWYZXUWD3FAYSR7D72QKE7DPM5QCA :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
