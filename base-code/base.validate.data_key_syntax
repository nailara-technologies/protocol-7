# >:]

# name  = base.validate.data_key_syntax
# descr = validates data key parameters and provides error messages

my $data_key    = shift // '';
my $max_key_len = 255;

return warn 'expected %data key string parameter <{C1}>'
    and return ( 0, 'no data key name supplied' )
    if not length $data_key;

## reparse key string to allow quote syntax in match below ##
$data_key =~ s,\'(([^\']|\.)+)\', my $k=$1; $k=~s|\.|_|g; $k,ge; ## z.'y.x' ##

if ( $data_key =~ m|\.+$| ) {
    my $err_msg = sprintf( "not permitted ['%s'] at end of key", $MATCH );
    return ( 0, $err_msg ) if wantarray;
    return 0;
} elsif ( $data_key =~ m|([^A-Za-z0-9-_\.])| ) {
    my $err_msg = sprintf( 'character [%s] not valid in data-key', $MATCH );
    return ( 0, $err_msg ) if wantarray;
    return 0;
}

my $key_len = length $data_key;
if ( $key_len > $max_key_len ) {
    my $err_msg
        = sprintf 'supplied data key too long [ limit %d and was %d ]',
        $max_key_len, $key_len;
    return ( 0, $err_msg ) if wantarray;
    return 0;
}

return 5;    ## is valid [true] ##

#.............................................................................
#LHU6XTQRBUGGGBLHJMJCFCGQ5BGPGLCV6U4K4K3JXKCL2QFDH624I2YLFGXCWZ2JPMYHUVOT7QXYO
#::: 2U5INQU6VCHWSGNLY72IFUBUAV5PRIBPMKV4GXT7W6OWVWR7J4Z :::: NAILARA AMOS :::
# :: E4HVV4ZUW33A5GFZVS46FZZUQ3US5VSUHNFAU2RFUANDBZLYVADY :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
