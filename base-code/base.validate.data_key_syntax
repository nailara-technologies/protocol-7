# >:]

# name  = base.validate.data_key_syntax
# descr = validates data key parameters and provides error messages

my $data_key    = shift // '';
my $max_key_len = 255;

return warn 'expected %data key string parameter <{C1}>'
    and return ( 0, 'no data key name supplied' )
    if not length $data_key;

## reparse key string to allow quote syntax in match below ##

## z.'y.x' ##
$data_key =~ s,'(([^']|\.)+)', my $k=$1; $k=~s|\.|_|g; $k,ge;

## z.<y-x> ## <-- [ at end of key ]##
$data_key =~ s,(*plb:(^|\.))(<[^<\.>]+>)$, my $k=$1; $k=~s|\.|_|g; $k ,ge;

if ( $data_key =~ m|\.+$| ) {
    my $err_msg = sprintf( "not permitted ['%s'] at end of key", $MATCH );
    return ( 0, $err_msg ) if wantarray;
    return 0;
} elsif ( $data_key =~ m|([^A-Za-z0-9-_\.])| ) {
    my $position_str = $MATCH =~ m|[<>]|    ? ' position' : '';
    my $in           = length $position_str ? 'at'        : 'in';
    my $err_msg      = sprintf( 'character [%s] not valid %s data-key%s',
        $MATCH, $in, $position_str );
    return ( 0, $err_msg ) if wantarray;
    return 0;
}

my $key_len = length $data_key;
if ( $key_len > $max_key_len ) {
    my $err_msg
        = sprintf 'supplied data key too long [ limit %d and was %d ]',
        $max_key_len, $key_len;
    return ( 0, $err_msg ) if wantarray;
    return 0;
}

return 5;    ## is valid [true] ##

#.............................................................................
#4RRTJBVAGRC7C7PV5CRUCZQW6AXM57FOL5YICYFJMZRKD6LVUH4TQRBQZPDFXULWZPSAESWHRHQQK
#::: 7XSAM63MPUSCB2VSARPNLXPVLGF2NTFQ36U3ZX6QTGVQYEQX7MC :::: NAILARA AMOS :::
# :: C45NT7GXAE7B7LFA4LOH5ZT5F4VI6HDROBFIOD3INECHRL52OSDI :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
