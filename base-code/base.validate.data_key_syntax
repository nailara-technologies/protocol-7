## >:] ##

# name  = base.validate.data_key_syntax
# descr = validates data key parameters and provides error messages

my $data_key    = shift // '';
my $max_key_len = 255;

return warn 'expected %data key string parameter <{C1}>'
    and return ( 0, 'no data key name supplied' )
    if not length $data_key;

## reparse key string to allow quote syntax in match below ##

## z.'y.x' ##
$data_key =~ s,'(([^']|\.)+)', my $k=$1; $k=~s|\.|_|g; $k,ge;

## z.<y-x> ## <-- [ at end of key ]##
$data_key =~ s,(*plb:(^|\.))(<[^<\.>]+>)$, my $k=$1; $k=~s|\.|_|g; $k ,ge;

if ( $data_key =~ m|\.+$| ) {
    my $err_msg = sprintf( "not permitted ['%s'] at end of key", $MATCH );
    return ( 0, $err_msg ) if wantarray;
    return 0;
} elsif ( $data_key =~ m|([^A-Za-z0-9-_\.])| ) {
    my $position_str = $MATCH =~ m|[<>]|    ? ' position' : '';
    my $in           = length $position_str ? 'at'        : 'in';
    my $err_msg      = sprintf( 'character [%s] not valid %s data-key%s',
        $MATCH, $in, $position_str );
    return ( 0, $err_msg ) if wantarray;
    return 0;
}

my $key_len = length $data_key;
if ( $key_len > $max_key_len ) {
    my $err_msg
        = sprintf 'supplied data key too long [ limit %d and was %d ]',
        $max_key_len, $key_len;
    return ( 0, $err_msg ) if wantarray;
    return 0;
}

return 5;    ## is valid [true] ##

#,,,.,,..,,,.,.,,,,..,,,.,.,,,,,.,,..,,..,.,.,..,,...,...,..,,...,.,.,,.,,.,.,
#AJ6IFDDSDF2CDNXJIDN46UUIMAVHR7MFGA6D4NLIENVYH2FGIK2GHMSUY425M2OJDXIR4STN33C5K
#\\\|4GXYUO2IOKTXADVUHTNH3K6FT2CFAV3GRLZFBBVBM5ZZJW6LAKJ \ / AMOS7 \ YOURUM ::
#\[7]YMCP66NOHNXUH6BTXRCUX5YOFBNCCAM2LNEK6VZEJ2MHRZ7RG6AY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
