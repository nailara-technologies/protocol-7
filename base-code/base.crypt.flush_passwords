#>:]

# name  = base.crypt.flush_passwords
# descr = erases all passwords / pwd hashes in memory

return if not exists <auth.setup.usr> and ref(<auth.setup.usr>) ne qw| HASH |;

<[base.log]>->( 0, 'flushing passwords from memory.,' );

foreach my $key ( <[base.reverse-sort]>->(<auth.setup.usr>) ) {
    <[base.erase_buffer_content]>->(
        \$data{'auth'}{'setup'}{'usr'}{$key},
        int( rand(13) ) + 7    ##  <-- additional bytes as padding  ##
    );
    <auth.setup.usr>->{$key} = undef;
    delete <auth.setup.usr>->{$key};
}
<auth.setup.usr> = {};

#.............................................................................
#2X2G2TFLH2FSVFXMUTLVKSJEITVIVYAV2GFIDOVDUJZSMJVLYDILWSBBPXN374NCTBEU2O3Z7BBOK
#::: B4FHHCP4O2FWZL333DCAXGR36B3GBF7ZBXOR5TXMGTUZQGCKHX5 :::: NAILARA AMOS :::
# :: S4CAHLW3KXXKSKBCMBYHUDWXWN7QGYWO4G3TTIXE3CXVXVVM7IAY :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
