#>:]

# name  = base.crypt.flush_passwords
# descr = erases all passwords / pwd hashes in memory

return if not exists <auth.setup.usr> and ref(<auth.setup.usr>) ne 'HASH';
my $usr_setup = <auth.setup.usr>;

<[base.log]>->( 0, 'flushing passwords from memory.,' );

foreach my $key ( keys %{<auth.setup.usr>} ) {
    my $rand_len = length( <auth.setup.usr>->{$key} );
    substr( $usr_setup->{$key}, 0, $rand_len,
        <[base.prng.characters]>->($rand_len) );
    <auth.setup.usr>->{$key}
        .= <[base.prng.characters]>->( 8 + int( rand(9) ) );
}
<auth.setup.usr> = {};

#.............................................................................
#AAK7GRWVVC4EQTNSQABGGM5OSADNXZN25TRTUMFIAHAYUO736OWNZWVEDSXRAA5IZ2GYBNLUERIJS
#::: STG4CMACMEMJHKVVFMCE4FE4S6QCOVT4D7727TFSZ5GLNMGPDAK :::: NAILARA AMOS :::
# :: VZVOZQANRA5DHJFCBGKEQK5QSCJ665C4UWJMH2MJTJ2YJU5EZ2CA :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
