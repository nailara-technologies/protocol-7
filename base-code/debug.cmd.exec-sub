# >:]

# name  = debug.cmd.exec-sub
# param = <sub_name>
# descr = run subroutine and return output

my $support_params = 0;   ## <-- keep this disabled for security reasons., ###
( my $sub_name, my @params )
    = split( m| +|, $$call{'args'} );    # no quotes supp.

return { 'mode' => 'nak', 'data' => 'expected subroutine name parameter' }
    if !length($sub_name);
return {
    'mode' => 'nak',
    'data' => 'subroutine parameters are not supported'
    }
    if @params and not $support_params;

return { 'mode' => 'nak', 'data' => 'no such subroutine' }
    if not exists $code{$sub_name};

my @sub_output = eval { $code{$sub_name}->(@params) };

my $err_str;
if ($EVAL_ERROR) {
    ( $err_str = $EVAL_ERROR ) =~ s, (while|at) .+$,,;
    $err_str =~ s|Can.t|cannot|;
    $err_str = 'undefined error' if !length($err_str);
    warn $err_str;
}

my $err_msg;
$err_msg = 'errors during subroutine execution' if $EVAL_ERROR;
$err_msg = 'undefined subroutine output'
    if not defined $err_msg and !@sub_output
    or @sub_output == 1 and not defined $sub_output[0];
return { 'mode' => 'nak', 'data' => $err_msg } if defined $err_msg;

map { $ARG //= 'UNDEF' } @sub_output if @sub_output > 1;

map { ( $ARG = Dumper($ARG) . "\n" ) =~ s|^\$VAR1 =|| if length( ref($ARG) ) }
    @sub_output;

my $rep_mode = 'ack';
if ( @sub_output == 1 ) {
    $sub_output[0] =~ s|\n$|| if $sub_output[0] =~ m|\n| <= 1;
    $rep_mode = 'data' if $sub_output[0] =~ m|\n|;
}

return { 'mode' => $rep_mode, 'data' => join( ', ', @sub_output ) };

#.............................................................................
#LLPNUHTRDAA777GVRJX5SINBQCJKDMNXNBTGSDX3TNK4OLWR327TWPCSBWIPXYFZCOLL3NDCO6Q5M
#::: 367R4XLOXNIKQMROADMEBWNSRVL777F7W6KSTFECFYX25UCVH3X :::: NAILARA AMOS :::
# :: DM2CBROY3KESMN2S3ZIUJG6OJFB7RQCDAB7N5J2CH5YU6ZX7UMCQ :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
