# >:]

# name  = v7.handler.sig_chld
# descr = clean up after terminated child process IDs

<[base.log]>->( 2, 'SIGCHLD received., collecting children..,' );

local ( $OS_ERROR, $CHILD_ERROR );
while ( ( my $pid = waitpid( -1, WNOHANG() ) ) > 0 ) {

    my ( $instance, $zenka_name, $instance_id, $zenka_subname );

    if ( my $child = <v7.child>->{$pid} ) {
        $instance_id   = $child->{'instance_id'};
        $instance      = <v7.zenka.instance>->{$instance_id};
        $zenka_name    = $instance->{'zenka_name'};
        $zenka_subname = $instance->{'subname'};
    }

    $instance_id //= delete <v7.process.instance_cache>->{$pid};
    <[base.clean_hashref]>->(<v7.process.instance_cache>);

    $instance = <v7.zenka.instance>->{$instance_id}
        if not defined $instance
        and defined $instance_id
        and defined <v7.zenka.instance>->{$instance_id};

    # determine exit status
    my $log_level = 2;
    my $e_val     = $CHILD_ERROR >> 8;
    my $e_sig     = $CHILD_ERROR & 127;
    my $e_sig_str = $e_sig ? sprintf( ', signal %s', $e_sig ) : '';
    $log_level = 0
        if $e_sig_str =~ s|(signal 11)$|$1 :: segmentation fault ::|;
    my $e_dmp = $CHILD_ERROR & 128 ? ' [ with core dump ]' : '';
    $log_level = 1 if $e_val;
    $log_level = 0 if $CHILD_ERROR & 128;
    my $zenka_str = defined $zenka_name ? "< $zenka_name > " : '';
    <[base.log]>->(
        $log_level,
        $zenka_str
            . "child pid=$pid shut down"
            . " [ exit code $e_val$e_sig_str ]$e_dmp"
    );

    <[v7.stop_heartbeat_timer]>->($instance_id) if defined $instance_id;

    <[v7.terminate_process]>->($pid);    # <-- cleaning up children  .., [LLL]

    if (    defined $instance_id
        and $instance_id =~ <regex.base.iid>
        and defined $instance
        and my $child = <v7.child>->{$pid} ) {
        <[base.logs]>->( 2, ': was instance %d', $instance_id );

        delete <v7.child>->{$pid};
        delete $instance->{'restart_pids'}->{$pid}
            if exists $instance->{'restart_pids'};

        my $old_status = $instance->{'status'} // qw| undefined |;

        <[base.logs]>->( 2, ": had status : '%s'", $old_status );

        ## record web-browser segfaults [ for crash mitigation ] ##
        if ( $e_sig == 11 and $zenka_name eq qw| web-browser | ) {
            my $web_browser_uname = <system.AMOS-user>;
            my $subname_b32
                = ( defined $zenka_subname and length($zenka_subname) )
                ? join( '', qw| . |, encode_b32r($zenka_subname) )
                : '';
            my $file_name = join( '',
                qw| /var/run/.7/web-browser.crash_pid |, $subname_b32 );

            <[file.put]>->( $file_name, sprintf( "%d\n", $pid ) )
                or warn join( qq| : |,
                $file_name, scalar <[base.format_error]>->($OS_ERROR) );
            chmod( 0644, $file_name )
                or warn join( qq| : |,
                $file_name, scalar <[base.format_error]>->($OS_ERROR) );
            my @pwn = getpwnam($web_browser_uname);
            chown( $pwn[2], $pwn[3], $file_name )
                or warn join( qq| : |,
                $file_name, scalar <[base.format_error]>->($OS_ERROR) );
        }

        my $next_status
            = $old_status =~ m,error|online|starting,
            ? qw|  error  |
            : qw| offline |;

        $next_status = qw| restart | if $old_status eq qw| restart |;

        if ( $old_status eq qw| online | and defined <v7.ondemand_zenki> ) {
            map { $next_status = qw| offline | if $ARG eq $zenka_name }
                @{<v7.ondemand_zenki>};
        }

        if ( <[v7.instance_pid_count]>->($instance_id) ) {

            <[zenka.change_status]>->( $instance_id, qw| delayed | )
                if $old_status eq qw| restart |;

            $instance->{'pid_check_timer'} = <[event.add_timer]>->(
                {   'after'    => 0.07,
                    'interval' => 0.13,
                    'handler'  => qw| v7.handler.children_left |,
                    'data'     => {
                        qw| instance_id | => $instance_id,
                        qw| next_status | => $next_status
                    }
                }
            );
        } else {
            <[zenka.change_status]>->( $instance_id, $next_status )
                if $old_status ne $next_status;

            <[v7.init_restart_timer]>->($instance_id)
                if $next_status !~ m,offline|shutdown,;
        }
    } elsif ( defined $instance_id and defined $instance ) {
        delete <v7.zenka.instance>->{$instance_id};
    }
}

#.............................................................................
#EOK3U4ISKXBPTR43M5KVSSDZ646BMMWVIKJZUX2ZZT3JUJKF6I5EMFI6KEII5BZ26FKEIXBIRJ5L6
#::: WTS2UUMIUFYAU3PMG7XJT4RLOCTWQLI3VZNBTLCSIWQZNRDXKRD :::: NAILARA AMOS :::
# :: ZMRDNNCOM3ZYA65YTG2AS6VWKFWUF553DLXQE5C7SXVGVUYYFQBI :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
