# >:]

# name  = set-up.cmd.install-profile
# param = <name>
# descr = install config profile to import directory

my $profile_name = $$call{'args'} // '';
return { 'mode' => 'false', 'data' => 'expected config name parameter' }
    if !length($profile_name);
return { 'mode' => 'false', 'data' => 'invalid profile name!' }
    if $profile_name !~ /^[\w\-_\.]+$/;

my $import_dir   = <set-up.json.import_dir>;
my $profile_dir  = <set-up.profile_dir>;
my $profile_file = "$profile_dir/$profile_name.json";

return { 'mode' => 'false', 'data' => 'specified profile not found.' }
    if !-f $profile_file;

<[base.log]>->( 1, "installing configuration profile '$profile_name'.," );

my $profile_json = <[file.slurp]>->($profile_file);

# LLL: check json data checksum .,

my $import_data  = <json.parser>->decode($$profile_json);
my @config_files = keys %$import_data;

my $file_count = 0;

foreach my $file_name (@config_files) {
    my $file_path     = "$import_dir/$file_name";
    my $settings_json = <json.parser>->encode( $import_data->{$file_name} );
    if ( -f $file_path ) {
        <[base.log]>->( 0, ": overwriting configuration file '$file_name'" );
    } else {
        <[base.log]>->( 1, ": exporting to set-up '$file_name' .." );
    }
    <[file.put]>->( $file_path, $settings_json );
    $file_count++;
}

return {
    'mode' => 'true',
    'data' => "$file_count config files installed to import dir"
    }
    if $file_count;

return { 'mode' => 'false', 'data' => 'no set-up files installed!' }

#.............................................................................
#VGHIEZ2U4AZEHKMNJVSMGNKRU7FJZDNVIC4XE2V43NJIERX7JLG52KT6VZLADFHVCURM7MO5U66VA
#::: 4JI67SXIXUVIDGHM53W3NOIRRQX3FQHOFTRMBXKXA75BQPU3NPW :::: NAILARA AMOS :::
# :: L6PP24L2JT2GLNP34EM3K5NZSKHI2LVTZTJNLEG4YYB4H7ZWDGCI :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
