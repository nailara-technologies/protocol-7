## >:] ##

# name  = composition.cmd.get_subconfig
# param = <zenka[+tile]_name>
# descr = return 'subconfig' for zenka or tile name

return { 'mode' => 'false', 'data' => "expected syntax is 'zenka[subname]'" }
    if not defined $$call{'args'}
    or $$call{'args'} !~ m|^(\S+)( +(\S+))?$|;

my ( $source_zenka, $zenka_name ) = ( $1, $3 );
$source_zenka =~ s|^.+\.||g;
$zenka_name = $source_zenka if not defined $zenka_name;

if ( not exists <composition.subconfig>->{$zenka_name} ) {
    my $last_match;
    my $match   = 0;
    my $msg_str = "no set-up for zenka '$zenka_name'";
    if ( $zenka_name !~ m|[\[\]]+| ) {
        map {
            if ( $ARG =~ m|^([^\[]+)\[| and $1 eq $zenka_name ) {
                $last_match = $ARG;
                $match++;
            }
        } keys %{<composition.subconfig>};
    }
    $msg_str
        = "multiple '$zenka_name' instances defined, zenka subname required."
        if $match > 1;
    return {
        'mode' => 'false',
        'data' => $msg_str
        }
        if $match != 1;
    $zenka_name = $last_match;
}

my $max_len
    = max map {length} keys %{ <composition.subconfig>->{$zenka_name} };

return {
    'mode' => qw| size |,
    'data' => join(
        '',
        map {
            sprintf( "%-${max_len}s = %s\n",
                $ARG, <composition.subconfig>->{$zenka_name}->{$ARG} )
            }
            sort keys %{ <composition.subconfig>->{$zenka_name} }
    )
    }

#,,..,,.,,.,,,..,,.,.,.,,,,,,,,,.,.,,,..,,,,.,..,,...,...,.,,,..,,,,,,..,,,,.,
#2FLJXS3KCQGVHPNS4S3QIQGNME5SUS3S63X57RYCOLYLYDDVTTK62IGUSDZ762M6JDPYRBFXIGNSS
#\\\|G5G6M2W7WL5UGHRCHRNPU5SEE72CHNH2NOSBGWA3IK3CYWB5YR6 \ / AMOS7 \ YOURUM ::
#\[7]XLD7E3IEFBD7HXQNLYVKCC4E6CD4RNB67JHIL5ZXUGACBRDIHUBQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
