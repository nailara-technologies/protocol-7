# >:]

# name  = base.init
# descr = initialize [execute] zenka

if ( $_[0] =~ m|~$| ) {
    <[base.log]>->(
        0, "<-- invalid zenka name [ a backup file ], aborting.,"
    );
    <[base.exit]>->(4);
}

$SUB_NAME = 'base.init';    ##  <--  used for warnings  ###

$PROGRAM_NAME = $_[0];

if ( $_[0] =~ m{([^\.]+)\.([\w|\.]+)$} ) {
    ( <system.node.name>, <system.zenka.name> ) = ( $1, $2 );
}

<[base.process-into-background]> if <system.background_mode>;

my $success = 1;
if ( <system.startup_initcode> and @{<startup.init_code>} ) {
    $success = <[base.execute_zenka_code]>
        ->( <[base.parser.config]>->(<startup.init_code>) );
    delete <startup.init_code>;  # clean up., [could contain auth key strings]
    delete $data{'startup'} if !keys( %{ $data{'startup'} } );
}

if ( !$success or $EVAL_ERROR ) {
    <[base.log]>->( 0, "WARNING: startup init code contained errors.," );
    undef $EVAL_ERROR;
}

my $zenka_cfg_path = <[base.get_path.zenka_cfg]>->(<system.zenka.name>);

if ( !-e "<system.conf_path>/$zenka_cfg_path" ) {
    my $zenka_name = <system.zenka.name>;
    local <system.zenka.name> = 'error';   # <-- changed zenka name to 'error'
    $SUB_NAME = undef;
    return <[log.error]>->("<< no such program or zenka ['$zenka_name'] >>");
}

<system.path.rel.cur_zenka_cfg> = $zenka_cfg_path;

<base.config_parser.cfg_type> = 'start_cfg';
<base.config_parser.cfg_name> = 'zenka';

# note : 'load_config_file' will not return for zenki invoking the event loop..,
<[base.load_config_file]>->($zenka_cfg_path)
    or
    <[log.error]>->("startup of zenka '<system.zenka.name>' not successful");
$SUB_NAME = undef;

#.............................................................................
#RDZNDZ4JKGOMHB2WAQZ4K6V2A3VZD7QAKDOOFMVZLJMO2XSK6TOIKLPA4HVA4P2FCZPPAMX7G5PZU
#::: ZB4FLSZQXDR4QUNK5LIWDIDWGCRXCZCDQBB6WXWOA3J7LXLDOHS :::: NAILARA AMOS :::
# :: MD4NLYLOULNZ63K4LOZ5I3KC3JCDAUVQAUSDKIXT4I3UEEUV2GCQ :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
