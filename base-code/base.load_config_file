## >:] ##

# name  = base.load_config_file

my $cfg_name = shift // '';
return warn 'expected <configuration_name> parameter <{C1}>'
    if not length $cfg_name;
my $zenka_name = <system.zenka.name>;
my $cfg_level  = <base.modules.cfg_level>++;
my $max_level  = <system.zenka.initialized> ? 1                 : 2;
my $log_level  = $cfg_level < 1             ? 1                 : $max_level;
my $log_str    = $cfg_level                 ? ': ' x $log_level : '';
my $cfg_str    = length($cfg_name) > 20     ? 'conf file' : qw|configuration|;
my $log_msg
    = $cfg_name eq sprintf( qw| zenki/%s/config |, $zenka_name )
    ? sprintf( '%s: loading %s zenka description.,', $log_str, $zenka_name )
    : $cfg_name =~ m|/[^/]+/| ? "${log_str}loading cfg.: ,./$cfg_name"
    :                           "${log_str}loading $cfg_str : $cfg_name";

<[base.log]>->( $log_level, $log_msg );

# store additional config filenames for later reload [rewrite if problematic]
<system.config.reload_order> = [] if not exists <system.config.reload_order>;
my $already_pushed = 0;
map { $already_pushed = 1 if $ARG eq $cfg_name }
    <system.config.reload_order>->@*;
push( @{<system.config.reload_order>}, $cfg_name )
    if $cfg_name ne <system.path.rel.cur_zenka_cfg> and !$already_pushed;

<base.config_parser.cfg_type> //= qw| exec_cfg |;
<base.config_parser.cfg_name> = $cfg_name;

##  used for eval error messages  ##
##
push @main::ZENKA_RUN_CFG_STACK, {
    qw| type | => <base.config_parser.cfg_type>,
    qw| name | => <base.config_parser.cfg_name>,
    qw| line | => 0,                               ## updated in the parser ##
    qw| vars | => {},
    qw| errs | => []
};

$main::LOAD_ZENKA_CFG_NAME = $cfg_name;    ## replace with stack vars ## [LLL]
## undefined again in execute_zenka_code ##

my $status = <[base.execute_zenka_code]>->(
    <[base.parser.config]>->(
        <[base.get_file.aref]>->(
            join( qw| / |, <system.conf_path>, $cfg_name ),
            sub {
                $cfg_name =~ s|^.+/||g;
                <[logs]>->(
                    0,         "cannot load '%s'-config [ %s ]",
                    $cfg_name, scalar <[base.format_error]>->( $OS_ERROR, -1 )
                );
                <base.modules.cfg_level>--;
                return undef;
            }
        )
    )
);

--<base.modules.cfg_level> or delete <base.modules.cfg_level>;
return 1 if <base.parser.config.errors>;
return $status;

#,,.,,.,,,.,,,.,,,,,,,..,,,,.,...,.,,,,.,,,,,,..,,...,..,,.,.,,,.,..,,..,,,,,,
#VPHOWKZAQQDKLRJ27CKNTHSCQW3VDC2AF4QTILUFS52CWNCFJUOPTKIODYVDJC23TWGCTSEUSAONA
#\\\|3DU2F5UL23LBXWPHBMUVD3Q5P2NOJFWGO7NB7GAWAYF4XLUHNYM \ / AMOS7 \ YOURUM ::
#\[7]ZMXNHMHKBVXSNZVTGYFKYS55W2YWIYP7UVFPWPAPWIWQOHIU4SBI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
