## >:] ##

# name  = base.init_modules
# descr = executes 'pre_init', 'init_code' and 'post_init' routines
# todo  = track moved namespaces for agument list as well

my @module_names = map { split m| +| } @ARG;

my %skip_list;
my $success = 1;
delete <base.modules.moved_to>;
<base.init_modules.sub_list> = [];
foreach my $init_mode (qw|  pre_init  init_code  post_init  |) {
    if (@module_names) {
        @{<base.init_modules.sub_list>} = ();
        foreach my $name_pattern (@module_names) {
            push(
                @{<base.init_modules.sub_list>},
                grep {m|^\Q$name_pattern\E(\..+)?$|} <[base.sort]>->( \%code )
            );
        }
    } else {
        my @sorted_subroutines = <[base.sort]>->( \%code );
        @{<base.init_modules.sub_list>}    ## <-- 'base' routines first ..,
            = grep {m|^base\.|} @sorted_subroutines;
        push(
            @{<base.init_modules.sub_list>},    ## <-- then other subroutines.
            grep { !m|^base\.| } @sorted_subroutines
        );
    }
    foreach my $sub_name ( @{<base.init_modules.sub_list>} ) {
        next if not defined $sub_name or exists $skip_list{$sub_name};
        if ( $sub_name =~ m|^(.+)\.$init_mode$| ) {
            my $module_name = $1;
            my $real_m_name = $module_name;
            $real_m_name = <base.modules.internal_name>->{$module_name}
                if exists <base.modules.internal_name>
                and exists <base.modules.internal_name>->{$module_name};
            ( my $init_txt = $init_mode ) =~ s|_|-|g;
            $init_txt =~ s|-code||;
            my $level      = $module_name ne 'base' ? 2 : 1;
            my $zenka_type = <system.zenka.type> // '';
            $level = 1
                if $module_name eq $zenka_type
                or $module_name eq <system.zenka.name>;

            <[base.log]>->(
                $level, "running '$module_name' $init_txt code.,"
            );
            my $reinit = 0;

            if (not exists
                <base.modules.initialized>->{$real_m_name}->{$init_mode} ) {
                <base.modules.initialized>->{$real_m_name}->{$init_mode} = 0;
            } else {
                $reinit = 1;
            }
            if ( exists $code{$sub_name} ) {
                my $moved_already = 0;
                $moved_already = 1
                    if exists <base.modules.moved_to>
                    and exists <base.modules.moved_to>->{$module_name};

                # [LLL] include module version[s] in argument list ?
                my $return_code;
                eval {
                    $return_code
                        = $code{$sub_name}->( $reinit, $real_m_name );
                };
                if (   $EVAL_ERROR
                    or not defined $return_code
                    or $return_code ne '0' ) {
                    my $err_msg = <[base.format_error]>->($EVAL_ERROR);
                    <[base.log]>->( 0, ": '$err_msg" ) if length $err_msg;
                    $success = 0;
                    <[base.log]>->(
                        0,
                        ": module '$module_name'-init not successful"
                            . " [ $init_mode != 0 ]"
                    );
                } else {
                    <base.modules.initialized>
                        ->{$real_m_name}->{$init_mode}++;
                    if (    !$moved_already
                        and exists <base.modules.moved_to>
                        and exists <base.modules.moved_to>->{$module_name} ) {
                        my $new_module
                            = <base.modules.moved_to>->{$module_name};
                        ( my $new_sub_name = $sub_name )
                            =~ s|^$module_name|$new_module|;
                        $skip_list{$new_sub_name} = 1;
                    }
                }
            } else {
                $success = 0;
                <[base.log]>->(
                    0,
                    ": module '$module_name' init not successful"
                        . " [ $sub_name undefined or broken ]"
                );
            }
        }
    }
}
undef <base.init_modules>;
return $success;

#,,..,...,.,.,.,,,,.,,,,.,..,,..,,..,,,.,,...,..,,...,...,.,,,..,,.,.,,,.,,..,
#YL5VMRJMGV4LKZF7G5T5RPQBDRMRSYOM4IDHIP3NMAJOWGO7ACWRSQBH5D2L2OUXVRCYAXV4XVK4I
#\\\|PCXT2GXADOTNLYOF5IFUUKOLM7M7YVTCVHI3WWNPTZHBGNTJ2T6 \ / AMOS7 \ YOURUM ::
#\[7]LPSM4D6VWBGPZRZBWQE4FU2UARTLAD2QJCDKUK2IKSMLB2KX22AA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
