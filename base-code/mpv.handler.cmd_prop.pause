# >:]

# name  = mpv.handler.cmd_prop.pause
# descr = pause playback

my $pause_status = shift // '';
<mpv.universal_resume_mode> //= 0;
my $pause_mode = delete <mpv.pause_cmd_mode>;

if ( $pause_mode eq 'pause' and $pause_status eq 'yes' ) {
    <[base.callback.cmd_reply]>->(
        shift @{<mpv.reply_ids>},
        {   'mode' => 'false',
            'data' => 'playback was already paused'
        }
    );
} elsif ( $pause_mode eq 'pause' ) {
    <mpv.success_reply_str> = 'playback paused';
    <[mpv.send_command]>->( 'set_property_string', 'pause', 'yes' );

    <[mpv.callback.silenced]> if <mpv.fade_idle_volume>;

    return { 'mode' => 'deferred' };
} elsif ( $pause_mode eq 'resume' and $pause_status eq 'no' ) {
    <[base.callback.cmd_reply]>->(
        shift @{<mpv.reply_ids>},
        {   'mode' => 'false',
            'data' => 'playback wasn\'t paused'
        }
    );
} elsif ( $pause_mode eq 'resume' ) {
    <mpv.success_reply_str> = 'playback resumed';
    <[mpv.send_command]>->( 'set_property_string', 'pause', 'no' );
    return { 'mode' => 'deferred' };
} elsif ( $pause_mode eq 'toggle' ) {
    <mpv.success_reply_str>
        = $pause_status eq 'yes' ? 'playback resumed' : 'playback paused';
    <[mpv.send_command]>->( 'cycle', 'pause' );
    return { 'mode' => 'deferred' };
}

#.............................................................................
#FTZI6WUUY6G5Z36ITQZTLT5FNZ33QS5H3UIYAXY6UQAXP2NQ5X2EEHNEVTLMDVQXCKDGBNBR4UUJE
#::: XILASZGIXAF7VZOIQQMZ2AYX6FW65JGZJMPDZCVEHSGLI5NV27U :::: NAILARA AMOS :::
# :: ON22RIV3PQEGPMLRQFXHREEUUAXPLYJUJQWQPEBEXWPPPHGLZEAY :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
