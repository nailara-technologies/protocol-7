## >:] ##

# name  = base.swap_subs
# descr = moves subroutines from one module namespace into another

my $source_sub_prefix = shift;
my $target_sub_prefix = shift;
my $overwrite_policy  = shift // qw| undefine |;
## policies : < undefine | overwrite | if_missing > ##

my @sub_names     = keys %code;
my $subs_matching = 0;
map {
    $subs_matching++
        if $ARG =~ m|^$source_sub_prefix\.|
        or $ARG eq $source_sub_prefix    ## exact match ##
} @sub_names;
if ( !$subs_matching ) {
    <[base.logs]>->(
        2, '<swap_subs> skipped [ no %s subs present ]',
        $source_sub_prefix
    );
    return 0;
}

if ( $overwrite_policy eq qw| undefine | ) {
    map {
        if ( $ARG =~ m|^$target_sub_prefix\.| ) {
            delete $code{$ARG};
            $data{'code'}{$ARG}{'status'} = qw| undefined |;
        }
    } @sub_names;
    my $removed_count = @sub_names - keys %code;
    <[base.logs]>->(
        2,              "undefined %d subs from '%s' namespace",
        $removed_count, $target_sub_prefix
    ) if $removed_count;
}

my $moved      = 0;
my $logged_yet = 0;
foreach my $sub_name ( keys %code ) {

    ( my $new_sub = $sub_name )
        =~ s|^($source_sub_prefix)\.|$target_sub_prefix.|;

    $new_sub = $target_sub_prefix    ## exact match ##
        if $new_sub eq $sub_name and $new_sub eq $source_sub_prefix;

    if ( $new_sub ne $sub_name ) {
        if ( $overwrite_policy eq 'if_missing' and exists $code{$new_sub} ) {
            delete $code{$sub_name};
            next;
        }
        if ( !$logged_yet ) {
            <[base.logs]>->(
                2,                  ': moving subroutines : %s --> %s',
                $source_sub_prefix, $target_sub_prefix
            );
            ++$logged_yet;
        }
        $code{$new_sub} = delete $code{$sub_name};
        $moved++;
        ## also transfer compilation status ##
        $data{'code'}{$new_sub}{'status'}
            = $data{'code'}{$sub_name}{'status'};
        $data{'code'}{$sub_name}{'status'} = qw| undefined |;

        if ( exists $data{'code'}{$sub_name} ) {
            $data{'code'}{$sub_name}{'moved_to'} = $new_sub;
        }
    }
}

my $sub_list_ref = <[base.resolve_key]>->(qw| base.init_modules.sub_list |);
if ( defined $sub_list_ref and ref($$sub_list_ref) eq qw| ARRAY | ) {
    my $del_index = 0;
    foreach my $sub_name ( @{$$sub_list_ref} ) {
        next if not defined $sub_name;
        if ( $sub_name =~ m,^$target_sub_prefix(\.|$), ) {
            delete $$sub_list_ref->[$del_index];
        } else {
            $sub_name =~ s{^$source_sub_prefix(\.|$)}{$target_sub_prefix$1};
        }
        $del_index++;
    }
}

map {
    <base.cmd>->{$ARG} =~ s,^$source_sub_prefix(\.|$),$target_sub_prefix$1,
    }
    keys <base.cmd>->%*
    if defined <base.cmd>;

map {
    <base.cli>->{$ARG} =~ s,^$source_sub_prefix(\.|$),$target_sub_prefix$1,
    }
    keys <base.cli>->%*
    if defined <base.cli>;

if ( not $moved ) {
    <[base.logs]>->(
        2,                  '<swap_subs> nothing done [ %s --> %s ]',
        $source_sub_prefix, $target_sub_prefix
    );
} else {
    <base.modules.internal_name>->{$target_sub_prefix} = $source_sub_prefix;
    <base.modules.moved_to>->{$source_sub_prefix}      = $target_sub_prefix;
    <[base.logs]>->(
        2,      ': : done [ %d sub%s ]',
        $moved, <[base.cnt_s]>->($moved)
    );
}

<[base.referenced_subroutines.clear_found]>;

##  adjusting names of tracked subroutines [ for error handling ]  ##
if ( <[base.is_defined_recursive]>->(qw| base.subroutines.referenced |) ) {
    foreach my $subname ( keys <base.subroutines.referenced>->%* ) {
        my $matched_href = <base.subroutines.referenced>->{$subname};
        foreach my $line ( keys $matched_href->%* ) {
            foreach my $found_in ( keys $matched_href->{$line}->%* ) {
                my $prev_name = $found_in;
                ## move to new name ##
                $matched_href->{$line}->{$found_in}
                    = delete $matched_href->{$line}->{$prev_name}
                    if $found_in   ## adjusting names of parent subroutines ##
                    =~ s|^($source_sub_prefix)\.|$target_sub_prefix.|
                    and $found_in ne $prev_name;
            }
        }
    }
}

#,,..,.,.,.,.,,,,,,,.,,,,,,..,,,.,,,,,,.,,..,,..,,...,...,...,..,,,..,,.,,,,,,
#US5CJ6NOK6FRGKWGCVUH2FTPB3P42S7DONUUKGLHOYJXSQTBNFAWLT6WPVKC2MM6GI4A2MRPXA6XE
#\\\|YTQJRGVBNFOQQKZSXXQTM2QRCPU7SOSVPEZZ6A3FZ5ZWH7I4Y2U \ / AMOS7 \ YOURUM ::
#\[7]R7WMASIPA2B2PWSSFPUG4GCM27REQHVP53N4UHV5ZMF7RSDTE2DI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
