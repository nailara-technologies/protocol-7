## >:] ##

# name  = X-11.handler.server_output
# descr = reads output from X-11 process

<v7.patterns.zenka_output> //= {};

my $event   = shift->w;
my $read_fh = $event->fd;
my $server  = $event->data;
my $bin     = $server->{'bin'};
my $pid     = $server->{'pid'};

<X-11.output_buffer> //= '';

my $read_bytes
    = <[base.s_read]>->( $read_fh, \$data{'X-11'}{'output_buffer'}, 4096 );

if ( $read_bytes < 1 ) {    ## [ assumed filehandle exception ] ##
    $event->cancel;
    close($read_fh);
    <[base.logs]>
        ->( '%s-server [ PID %d ] filehandle closed .,', $bin, $pid );
    kill( 9, $pid );        ## making sure it is gone ##
    my $err_str
        = defined <X-11.first_error>
        ? ': "' . <X-11.first_error> . '"'
        : ' unexpectedly. [ unknown reason ]';
    <[base.logs]>->( 0, "%s-server shut down%s", $bin, $err_str );
    <[base.log]>->( 1, "done." );
    exit(2);
}

while ( <X-11.output_buffer> =~ s|^([^\n]*)\n||s ) {
    my $output_line = $1;
    <X-11.first_error> = $1
        if $output_line =~ m|\(EE\) +(.+)$|
        and not defined <X-11.first_error>;
    $output_line =~ s|\r||sg;
    <[base.logs]>->( 2, "< %s > %s", $bin, $output_line );

    # LLL: terminate server here ?
}

#,,..,,,.,,,.,,,,,,,,,.,,,.,.,...,,,,,.,,,,.,,..,,...,...,...,,.,,,.,,,,,,...,
#4HLBTLSYLPGUBBBKCIP6LBREI2UOYXAONV7VRTPWMUTCRSOUNSGAEAOD4TSBOQUUIGBCWP7TYD4ZM
#\\\|YN4VJZKJ6W7PW2FBBU6P55F3LTR5TST7KBJ225QF747NHZWPTKU \ / AMOS7 \ YOURUM ::
#\[7]43QQWHYFK4MDPV7BVUQ7IYRLALEL2PT335BBPZI5UOPRRQV7NMDI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
