# >:]

# name = base.file.match_dirs
# args = [result_array_ref,] <search_path>, <dir_name_pattern(s)>

my $result_aref;
$result_aref = shift(@ARG) if ref( $ARG[0] ) eq 'ARRAY';    # [ append mode ]

my $search_path = shift @ARG;

my $recursion
    = ( @ARG and $ARG[0] eq 'recursive' and shift @ARG )
    ? 'recursive'
    : undef;

my @wildcard_filenames = @ARG;

# supported wildcard patterns are: '*' ([^\.]*) and '**' (.*)

if ( not defined $search_path or !length($search_path) ) {
    <[base.log]>->( 0, 'file.match_dirs: missing expected path argument' );
    return undef;
}
$search_path = abs_path($search_path);
if ( !-d $search_path ) {
    <[base.log]>->( 0, "file.match_dirs: no such directory '$search_path'" );
    return undef;
} elsif ( !@wildcard_filenames ) {
    <[base.log]>->( 0, 'file.match_dirs: no dir names \\ patterns provided' );
    return undef;
}

my $results = [];
$results = $result_aref if defined $result_aref;    ##  [ append mode ]
my @file_table = map {
    my $key = $ARG // '';
    $key =~ s|\.|\\.|g;
    $key =~ s{(\*{2}|\*)}{ $LAST_PAREN_MATCH eq '*' ? '[^\.]*' : '.*' }ge;

    qr|$key$|
} @wildcard_filenames;

foreach my $dir ( @{ <[file.all_dirs]>->( $search_path, $recursion ) } ) {
    foreach my $pattern (@file_table) {
        if ( $dir =~ $pattern ) {
            push( @{$results}, $dir );
            next;
        }
    }
}

return scalar @{$results} if defined $result_aref;    # [ append mode ]
return @{$results};

#.............................................................................
#ZSFKZR3JBP7CVIWT6UNAMU5SULFBQRNXS6CYMHZRCK4PDYTIL7ZYNUBBWAJB6QYOGGPLBTC4KQQHC
#::: CR5PXCELOQX6KD63UBRSEYXUHZJMBRRMDNTDA7MS7F2V2TROL73 :::: NAILARA AMOS :::
# :: MB46VUQ34KH4A5K7WQ5GEMH7PEVPC3GXXMAWLDF3AZP3IH5REODI :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
