## >:] ##

# name   = base.handler.auth
# return = 0 <-- session authorized [ change state ]
#          1 <-- keep state [ protocol continues ]
#          2 <-- not valid [ disconnect client ]

my $event        = shift;
my $id           = $event->w->data;
my $session      = $data{'session'}{$id};
my $input        = \$$session{'buffer'}{'input'};
my $output       = \$$session{'buffer'}{'output'};
my $count_select = $$session{'counter'}{'auth'}{'select'} //= {};
my ( $auth_method, $auth_code, $auth_name, $auth_handler_name );
my $Blen = length($$input);

my $protocol_messages   = <protocol.protocol-7.connect>;
my $protocol_banner     = $protocol_messages->{'banner'};
my $proto_msg_timeout   = $protocol_messages->{'timeout'};
my $protocol_error_msg  = $protocol_messages->{'protocol_error'};
my $auth_method_warning = $protocol_messages->{'auth_method_wrn'};
my $auth_method_err     = $protocol_messages->{'auth_method_err'};

if ( $session->{'last-bytes-read'} == 0 and length $$input ) {
    return 2;    ## <-- disconnecting client ##
} elsif ( $session->{'last-bytes-read'} == 0 ) {
    return 2;    ## <-- disconnecting client ##
}

$count_select->{'limit'}  //= 3; ##  <-- limiting allowed 'select' commands ##
$count_select->{'errors'} //= 0;
$count_select->{'calls'}  //= 0;

my $s_met = <auth.supported_methods>;

if ( not defined $s_met ) {
    my $msg = 'no auth methods defined';
    if ( defined $code{'chk-sum.amos'} ) {
        my $socket_checksum = <[chk-sum.amos]>->( $session->{'handle'} );
        $msg .= " [socket:$socket_checksum]";   ## add 'list sockets' [LLL] ##
    } else {
        $msg .= " [session:$id]";
    }
    warn $msg;
    $$output .= $auth_method_warning;
    return 2;                                   ## <-- disconnecting client ##
}

$auth_method = $session->{'auth'}->{'method'};

$event->w->stop;    # <-- stopping event handler to modify buffer

if ( $$input =~ s|^(auth\.)?close\n|| ) {

    <[base.log]>->( 1, "[$id] connection shutdown requested" );

    $$output .= "TRUE connection closed\n";
    return 2;    ## <-- disconnecting ##

} elsif ( $$input =~ s|^(auth\.)?select (?<method>\S+)\n|| ) {  ## auth method

    ## client template : <protocol.protocol-7.connect.select-method>

    my $req_method = $+{method};
    $event->w->start;

    if ( not exists $code{'auth.auth_select'} ) {
        <[base.log]>->(
            0, "[$id] auth module not loaded, 'select' rejected."
        );

        $$output .= $auth_method_warning;
        return 2;    ## <-- disconnecting ##

    } elsif ( $req_method !~ <regex.base.authmethod> ) {
        <[base.log]>->( 0, "[$id] invalid char[s] in auth method string" );
        <[base.log]>
            ->( 2, "[$id] :: requested auth method :: '$req_method'" );

        $$output .= $auth_method_err;
        return 2;    ## <-- disconnecting client ##

    } else {
        if ( $count_select->{'calls'} >= $count_select->{'limit'} ) {
            <[base.log]>->( 0, "[$id] auth select count limit exceeded >:[" );

            $$output .= $auth_method_err;
            return 2;    ## <-- disconnecting client ##

        } else {
            if ( <[auth.auth_select]>->( $id, $req_method ) ) {
                $count_select->{'calls'}++;
            } else {
                $count_select->{'errors'}++;
            }
            if ( $count_select->{'errors'} > 2 ) {

                $$output .= $auth_method_err;
                return 2;    ## <-- disconnecting client ##

            }
            return 1;        ## continue protocol ##
        }
    }
} elsif ( $$input =~ s|^(auth\.)?selected\n|| ) {   ## selected auth method ##
    $event->w->start;
    if ( defined $auth_method ) {
        $$output .= "TRUE $auth_method\n";
        return 1;
    } else {
        $$output .= "FALSE not selected yet\n";
        return 1;
    }

} elsif ( $$input =~ s|^(auth\.)?list\n|| ) {    ## list auth methods ##

    $event->w->start;

    if ( not exists $code{'auth.auth_list'} ) {
        <[base.logs]>->(
            0, "[%d] auth module not loaded, 'list' rejected.", $id
        );

        $$output .= $auth_method_warning;
        return 2;    ## <-- disconnecting ##

    } elsif ( ( $count_select->{'list'} // 0 ) > 1 ) {

        <[base.logs]>->( 0, '[%d] 3rd auth list requested >:[', $id );

        $$output .= $auth_method_err;
        return 2;    ## <-- disconnecting ##

    } elsif ( ( $count_select->{'list'} // 0 ) > 0 ) {

        <[base.logs]>->( 0, '[%d] repeated auth list requested.,', $id );

        $$output .= "FALSE once should be enough..,\n";
        $count_select->{'list'}++;

    } else {

        <[base.logs]>->( '[%d] auth method list requested', $id );

        my $auth_list = <[auth.auth_list]>->($id);
        $auth_list = 'SIZE ' . length($auth_list) . "\n" . $auth_list;
        $count_select->{'list'}++;
        $$output .= $auth_list;

    }
    return 1;    ## continue protocol ##
}

##### calling selected authentication plugin #####
elsif ( defined $auth_method
    and $auth_handler_name = sprintf( 'plugin.auth.%s', $auth_method )
    and defined $code{$auth_handler_name} ) {

    $event->w->start;    ## <-- resuming input event watcher ., ##

    ( $auth_code, $auth_name ) = ( $code{$auth_handler_name}->($event) );

    if (    $auth_code == 0
        and defined $auth_name
        and $auth_name =~ <regex.base.usr> ) {
        my $fh = $data{'session'}{$id}{'handle'};
        $$session{'encryption'} = $data{'handle'}{$fh}{'encryption'}
            // 'none';
        $$session{'user'}          = $auth_name;
        $$session{'mode'}          = qw| client |;
        $$session{'auth_time'}     = <[base.time]>->(5);
        $$session{'initialized'}   = 1 if $auth_method ne qw| zenka |;
        $$session{'authenticated'} = qw| yes |;

        my $unauth_client = <base.session.uname.client>;
        delete $data{'user'}{$unauth_client}{'session'}{$id};   ## clean-up ##
        <[base.clean_hashref]>->( $data{'user'}{$unauth_client} );
        <[base.clean_hashref]>->( $data{'user'} );

        $data{'user'}{$auth_name}{'session'}{$id}{'mode'} = 'client';

        $data{'user'}{$auth_name}{'connected_since'} = time()
            if delete $data{'user'}{$auth_name}{'last_seen'}
            or keys( %{ $data{'user'}{$auth_name}{'session'} } ) == 1;

        <[base.session.init_state]>->( $id, 1 );

        ## authentication timeout disabled ##
        $$session{'watcher'}{'input_handler'}->timeout(undef);

        undef $count_select;    ## clean-up ##
        delete $$session{'counter'}{'auth'};
        delete $$session{'counter'} if !keys( %{ $$session{'counter'} } );

        return 0;               ## <-- authorized ##

    } elsif ( $auth_code == 1 ) {
        return 1;               ## continue protocol ##
    } else {
        return 2;               ## <-- disconnecting ##
    }
} elsif ( defined $auth_method ) {

    <[base.logs]>->( 0, "auth-plugin '%s' not defined", $auth_method );
    $$output .= $auth_method_warning;
    return 2;                   ## <-- disconnecting client ##

} else {
    if ( $Blen <= 13 and $$input =~ m|^\s+$|s ) {
        $$output .= $auth_method_err;
    } elsif ( length $$input ) {
        my $id_len = length $id;
        <[base.logs]>->(
            '[%s] : pre-auth protocol error : %04d B',
            $id, $Blen
        );
        <[base.logs]>->(    ## truncating content for msg ##
            2, ": %*s : :., [BUF:'%s']",
            $id_len, '', <[base.parser.ellipse_center]>->( $$input, 17 )
        );
        $$output .= $protocol_error_msg;
    }
    return 2;               ##  no auth method selected + session closing  ##
}

#,,,.,,..,,..,,..,,.,,.,,,,,.,,,.,,,,,,,.,..,,..,,...,...,...,,.,,,,.,,.,,,.,,
#VBWII3G2Z5JDBSNFRMFMOBYJ67A6QNO342THQ7GRNY6NBUSH5UOKPQX52T4V34VPJ7JDSG7Q26DVU
#\\\|H3B7I77SA3SWOCXOHEXT2NGUEN2A6PAR4TLLFNEW3KJIAIHQFR3 \ / AMOS7 \ YOURUM ::
#\[7]ZXGVNVEUVV3NTONBI7FDFGJ3BYBPMPBDKAIRDPSXOTX65R7VEGDY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
