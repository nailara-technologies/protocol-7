## >:] ##

# name  = mpv.handler.stdout
# descr = reads and processes stdout output from mpv process

my $event     = shift->w;
my $read_fh   = $event->fd;
my $process   = $event->data;
my $pid       = $process->{'pid'};
my $whitelist = $process->{'log_whitelist'} || [];

<mpv.output.buffer>     //= '';
<mpv.output.parse_mode> //= '';
<mpv.output.reply_data> //= [];

my $read_bytes
    = <[base.s_read]>->( $read_fh, \$data{'mpv'}{'output.buffer'}, 4096 );

if ( $read_bytes <= 0 ) {    ## [ assumed filehandle exception ] ##
    $event->cancel;
    close($read_fh);
    <[base.logs]>->(
        "mpv-process [PID:%d] output filehandle was closed.", $pid
    );
    kill( 9, $pid );         ## making sure it is gone ##
    <[base.log]>->( 0, 'mpv process terminated.' )
        if not <zenka.shutdown>;
    <[base.logs]>->( 'stopping %s-zenka..,', <system.zenka.name> );
    exit(2);
}

while ( <mpv.output.buffer> =~ s|^([^\n]*)\n||s ) {
    my $log_level   = 0;
    my $output_line = $LAST_PAREN_MATCH;
    $output_line =~ s|\r||sg;
    next if not length $output_line;
    for my $pattern ( $whitelist->@* ) {
        if ( $output_line =~ m|$pattern| ) {
            $log_level = 2;
            last;
        }
    }
    <[base.logs]>->( $log_level, '< mpv > %s', $output_line );
}

#,,,,,.,,,,,.,,..,.,.,,.,,..,,,,.,..,,,..,,..,..,,...,...,..,,,..,.,,,.,.,.,.,
#K6RMO6QUCTOS2E665YPPADZ2YMD4LF5JLOXWEIVIYIG7NP25B72YZJDKZ3JXNOJASTXVEGGLQC4WW
#\\\|IJ2FR65CRCFJA4RB2S3BTFRNNWORTFI6N6S3RPSEYBEYV2V6XKB \ / AMOS7 \ YOURUM ::
#\[7]6CXRDDIZSFB735FWIQAZGCWRQQBVIPMHF6Q6G7AB55KEAZFTISAA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
