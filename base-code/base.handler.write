## >:] ##

# name  = base.handler.write
# descr = writes buffer content to client handle

my $id;
my $event;

if ( ref $ARG[0] ne qw| Event::Event::Io | and $ARG[0] =~ m|^\d+| ) {
    $id = shift;    ##  direct call with session id  ##
} else {
    $event = shift;
    $id    = $event->w->data;
}

return <[base.session.check_remaining]> if not exists $data{'session'}{$id};

my $session = $data{'session'}{$id};
my $dat_len = length( $session->{'buffer'}->{'output'} );

if ( fileno $session->{'handle'} ) {
    if ( $dat_len > 0 ) {
        my $written = <[base.s_write]>->(
            $session->{'handle'}, $session->{'buffer'}->{'output'}, $dat_len
        );
        if ( not defined $written ) {
            $session->{'shutdown'} = 1;
        } else {
            $event->w->stop;
            $data{'handle'}{ $session->{'handle'} }{'bytes'}{'out'}
                += $written;
            substr( $session->{'buffer'}->{'output'}, 0, $written, '' );

            if ( defined $session->{'burst-writes'}
                and $session->{'burst-writes'} =~ m|^\d+$| ) {
                $session->{'burst-write-counter'} //= 0;
                if ( $session->{'burst-write-counter'}++
                    < $session->{'burst-writes'} ) {
                    $event->w->start;    ## burst-write mode ##
                } else {
                    ##  deferred restart [ idle-watcher ]  ##
                    delete $session->{'burst-write-counter'};
                }

            } else {
                $event->w->start;    ## immediate restart ##
            }

            # httpd zenka [ download in progress ]
            if ( defined $session->{'watcher'}->{'download_handler'}
                and !$session->{'watcher'}->{'download_handler'}->is_running )
            {
                $session->{'watcher'}->{'download_handler'}->start;
            }
        }
    }
} else {
    $event->w->cancel;
    $session->{'shutdown'} = 1;
    return 2;
}

if ( $dat_len = length( $session->{'buffer'}->{'output'} ) ) {

    ##  deferred restart [ when idle ]  ##
    <[event.io_idle_restart]>->($event)
        if defined $event and not $event->w->is_active;

    $data{'watcher'}{'io'}{'transfer'}->start
        if not $data{'watcher'}{'io'}{'transfer'}->is_active;

} elsif ( not $session->{'watcher'}{'output_buffer'}->is_active ) {
    $session->{'watcher'}->{'output_buffer'}->start;
}

$session->{'shutdown'} = 1 if !$dat_len and $session->{'flush_shutdown'};

return 0;

#,,.,,,,,,.,.,,,,,.,.,.,.,,.,,,,,,,,,,,,.,..,,..,,...,...,...,,..,,,.,.,.,..,,
#VZWG2RSKWWW7KD6Q64KIL2SIM3X36FWKHYUZVKD7UYPNGZWF7ITFTN2ENBVKQ7GXXHCU452A37JLG
#\\\|LI2RVNYCZ5SL5LDBSJNIXFMOCJIGWQS462CGWZURUFY4LKFGNB5 \ / AMOS7 \ YOURUM ::
#\[7]GACBKEWI6NUJ6OZV3NXNFPIUHX5VMTDP5R5UJP6ISZXFW67K52BI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
