# >:]

# name  = base.handler.ondemand_startup
# param = error reason [ FALSE reply ]

my $reply = shift;
my $v_id  = $reply->{'params'}->{'v_id'};

if ( $reply->{'cmd'} eq qw| FALSE | ) {
    delete <zenki.virtual>->{$v_id}->{'starting'};
    my $reason = $reply->{'call_args'}->{'args'};
    <[base.log]>->( 0, "ondemand zenka startup error [ $reason ]" );
    while ( my $element = shift @{ <zenki.virtual>->{$v_id}->{'queue'} } ) {
        my $sid    = $element->{'source_id'};
        my $cmd_id = $element->{'cmd_id'};
        next if not exists $data{'session'}{$sid};

        $data{'session'}{$sid}{'buffer'}{'output'}
            .= <[base.sprint_t]>->( qw| GLPLXJQ |, $cmd_id );
    }
} else {
    <[base.protocol-7.command.send.local]>->(
        {   'command'   => qw| v7.notify_online |,
            'call_args' => { qw|args| => <zenki.virtual>->{$v_id}->{'name'} },
            'reply'     => {
                'handler' => qw| base.zenki.ondemand.handler.startup_reply |,
                'params'  => { qw| v_id | => $v_id }
            }
        }
    );
}

#.............................................................................
#3N4EISQCRQ5ZPFDM3ZMGOF4RZOZALCB7PCOYYZXEMQDIOGQMTFI3TZZ42YYRFNAHBCV6NQP33IPWW
#::: 2BNZJE2FVKJHCURLM3V5UIZAAE3JIKQQKDWFGEQZP65RSVO52ST :::: NAILARA AMOS :::
# :: APK2D3NCKLOTZRUAL2R6VQLKOALSK3ENJPAOBVN6AUA63MWLKWDI :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
