# >:]

# name = v7.sub-process.get_children

my $chk_pid = shift;
if ( not defined $chk_pid or $chk_pid !~ m|^\d+$| ) {
    ( my $caller_str = [ (caller) ]->[1] ) =~ s|^.+\.||g;
    return warn sprintf "[%s] expected parent process id <{C1}>", $caller_str;
}

### old method ### [ heavy, non-portable, to be removed.. ]

my $proc_table = <v7.process.pt>
    //= new Proc::ProcessTable( qw| enable_ttys | => 0 );

my %ppids;
my %start_times;
foreach my $proc ( reverse @{ $proc_table->table } ) {
    next if not <[v7.sub-process.exists]>->( $proc->{'pid'} );
    $ppids{ $proc->{'pid'} }       = $proc->{'ppid'};
    $start_times{ $proc->{'pid'} } = $proc->{'start'};
}

my %children;

my $found = 0;
foreach my $pid ( keys %ppids ) {
    if ( $ppids{$pid} == $chk_pid ) {
        $children{$pid}->{'checked'} = 0;
        $found++;
    }
}

while ($found) {
    $found = 0;
    foreach my $child_pid ( keys(%children) ) {
        next if $children{$child_pid}->{'checked'} == 1;
        foreach my $pid ( keys %ppids ) {
            if ( $ppids{$pid} == $child_pid ) {
                $children{$pid}->{'checked'} = 0;
                $found++;
            }
        }
        $children{$child_pid}->{'checked'} = 1;
    }
}

my $instance_id;
##
map {
    $instance_id = $ARG
        if $chk_pid
        == ( <v7.zenka.instance>->{$ARG}->{'process'}{'id'} // -1 )
} <[v7.instance_ids]>;
#
if ( defined $instance_id ) {
    map { $children{$ARG} = 1 if <[v7.sub-process.exists]>->($ARG) }
        ( <[v7.instance_child_pids]>->($instance_id) );
}
##
return [
    reverse sort { $start_times{$b} // 0 <=> $start_times{$a} // 0 }
        reverse sort keys %children
];

#.............................................................................
#KEYLRRMF6HW3EWWHZP63IEAMQLTB3I7WZII6TBDYYGJQFARU6JLIEKUNU5YDGHN4TZHEEKJZO6PMK
#::: RX3L6MRFWBVLYRT4V3TKXWBYKGVOVOFP3NKAFOKKKQPECLB6ZWV :::: NAILARA AMOS :::
# :: XQLYGNA7V3AU6THNSFLDORU3EENKQID46LSGRMM2K3J6LTUF5IBY :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
