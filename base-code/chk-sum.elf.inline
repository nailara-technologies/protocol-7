# >:]

# name  = chk-sum.elf.inline

my $input_ref = \'';    ##   empty   ##
my $start_sum = 0;      ## new input ##

## ANOS-13-ELF SETTINGS ##
##
my $elf_mode           = 5;             ## elf hash setting :   4        ##
my $shift_bits         = 13;            ## elf hash setting :  24        ##
my $overflow_threshold = 0XFE000000;    ## elf hash setting : 0XF0000000 ##
##
####

if ( ref( $ARG[0] ) eq qw| SCALAR | ) {
    $input_ref  = shift;
    $start_sum  = shift if @ARG and $ARG[0] =~ m{^(0+|\d{7,9})$};
    $elf_mode   = shift if @ARG and $ARG[0] =~ m|^\d{1,2}$| and $ARG[0] <= 64;
    $shift_bits = shift if @ARG and $ARG[0] =~ m|^\d{1,2}$| and $ARG[0] <= 64;
    $overflow_threshold = shift if @ARG and $ARG[0] <= 4294967295;  #[ 32bit ]

    warn '< elf.inline > option not expected [ '
        . shift
        . ' ] redundant mode param ? <{C1}>'
        if @ARG;

} elsif ( @ARG and not length ref $ARG[0] ) {  ## string input \ no mode ., ##
    $input_ref = \$ARG[0];
}

## parameters ##
## < input-data >, < start-csum >, < elf-mode >, [ shift-bits ], [shift-thrh.]

return AMOS::CHKSUM::ELF::elf_chksum(
    $$input_ref, $start_sum, $elf_mode,    ##  <--  make optional  ##  [LLL]
    $shift_bits, $overflow_threshold
);

#.............................................................................
#7KPOI66T3TGH7RH5Z5X7EMVX5DTFTUTPQVJ5HCROVVYK26XLFXL2G222XWWUUD6FVITDG4H2ZH6CK
#::: F6ZK3QS7PGH7RDOGJDCWTPQUJZMGJQVGHGCQIGPDENWOWA4ZTNJ :::: NAILARA AMOS :::
# :: CEC3GR5G5UWZSCGKNT3O5EUGYOMCGIWFPWVUKCDQUBDFYZVNIUAY :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
