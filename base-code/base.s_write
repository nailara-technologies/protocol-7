# >:]

# name = base.s_write
# desc = utf8 safe syswrite replacement [ with optional fh_offset parameter ]
# todo = create custom version to pass buffer by reference + reducing overhead

my $write_fh   = $_[0];
my $write_str  = $_[1];
my $write_len  = $_[2] // length $write_str;
my $str_offset = $_[3] // 0;
my $fh_offset  = $_[4];

my $count_written;

##   [ replacing syswrite : unicode-safe ]
#
#    syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET
#    syswrite FILEHANDLE,SCALAR,LENGTH
#    syswrite FILEHANDLE,SCALAR
#
#    aio_write $fh, $offset, $length, $data, $dataoffset, $callback->($retval)
##

if (    $write_len > 0
    and utf8::is_utf8($write_str)
    and $write_str =~ m|[^\p{ASCII}]| ) {

    my $prev_len = length($write_str);

    utf8::encode($write_str);
    utf8::downgrade( $write_str, 1 );

    my $delta_len = length($write_str) - $prev_len;

    $write_len += $delta_len if $delta_len != 0;    ##  string lengthened  ##
}

IO::AIO::aio_write( $write_fh, $fh_offset, $write_len, $write_str,
    $str_offset, sub { $count_written = $_[0] } );

IO::AIO::flush();

return undef if $count_written < 0;    # <-- syswrite() behaviour
return $count_written;

#.............................................................................
#YP35B7XX745FFYRLOOB2QSOUMYKK2WBJIJUB3WHGF4NXQ36FIBCMKVCOUQI4AV624JYWK77ANKCUY
#::: WXESGPGQU25V3GLWID246DLSDQEISEYVIXBDYX6BYVE4366CFSE :::: NAILARA AMOS :::
# :: BHSPMWERFACOSSNBIFTNYZMVCF5YC4CY5DSQPIUQK6RQNE4H4GAQ :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
