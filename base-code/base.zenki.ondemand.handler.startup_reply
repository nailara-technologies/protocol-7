# >:]

# name  = base.zenki.ondemand.handler.startup_reply
# descr = handles 'p7.notify_online' command replies

my $reply = shift;

my $v_id       = $reply->{'params'}->{'v_id'};
my $zenka_name = <zenki.virtual>->{$v_id}->{'name'};
delete <zenki.virtual>->{$v_id}->{'starting'};

if ( $reply->{'cmd'} eq 'FALSE' ) {
    my $reason = $reply->{'call_args'}->{'args'};
    <[base.log]>->(
        0, "on demand startup of zenka '$zenka_name' failed [ $reason ]"
    );
    while ( my $element = shift @{ <zenki.virtual>->{$v_id}->{'queue'} } ) {
        my $cmd_id = $element->{'cmd_id'};
        my $src_id = $element->{'source_id'};
        next if not exists $data{'session'}{$src_id};    ##   <--  gone.   ###

        $data{'session'}{$src_id}{'buffer'}{'output'}
            .= $cmd_id . "FALSE command unknown\n";
    }
} else {
    <[base.log]>->( 1, "ondemand zenka '$zenka_name' now present.," );
    while ( my $element = shift @{ <zenki.virtual>->{$v_id}->{'queue'} } ) {
        my $src_id = $element->{'source_id'};
        next if not exists $data{'session'}{$src_id};    ##   <--  gone.   ###

        my $cmd_id = $element->{'cmd_id'};
        my $subname
            = defined $element->{'cmd_subname'}
            ? sprintf( "[%s]", $element->{'cmd_subname'} )
            : '';

        my $output_str = join( '',
            $cmd_id, $zenka_name, $subname, '.', $element->{'cmd_str'} );

        $output_str .= ' ' . $element->{'cmd_args'}
            if defined $element->{'cmd_args'};

        # [LLL] add multiline command parameters ..,

        $data{'session'}{$src_id}{'buffer'}{'input'} .= "$output_str\n";
    }
}

#.............................................................................
#FNRGENYLXJEUDTNYXCNTHAAPSBVVONWNUSUSYFOATLFPF5CSHUEUVOVZVB3QM2WONTJLL5MPVRCXO
#::: IPBX47W53LKWJHAL7GE733MV2HDG5A6TUAB7SQV5Q4AIMXI6D35 :::: NAILARA AMOS :::
# :: HU3QUHK47O2G4OLUISUQUX24WZYY6K34VCUNC4B46PGVEJFG5QBQ :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
