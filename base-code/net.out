## >:] ##

# name  = net.out
# descr = write data to client
# args  = filehandle, data [string]

my $send_fh      = shift;
my $payload_sref = $ARG[0];    ##  not shifted for referencing  ##

if ( not defined $send_fh ) {
    warn 'send_fh param not defined <{C1}>';
    return undef;
} elsif ( not defined $payload_sref ) {
    warn 'payload param not defined <{C1}>';
    return undef;
} elsif ( not length ref $payload_sref ) {
    $payload_sref = \shift;    ## scalar reference to argument ##
}

if ( fileno $send_fh ) {
    my $cid = $data{'handle'}{$send_fh}{'cid'};

    my $size_written = -1;
    if (    defined $data{'handle'}{$send_fh}
        and defined $cid
        and defined $data{'session'}{$cid}{'output'}
        and defined $data{'session'}{$cid}{'output'}{'handler'} ) {
        if ( defined $code{ $data{'session'}{$cid}{'output'}{'handler'} } ) {
            $size_written = <[base.s_write]>->(
                $send_fh,
                $code{ $data{'session'}{$cid}{'output'}{'handler'} }
                    ->( $payload_sref->$* )
            );
        } else {
            <[base.logs]>->(
                0, "[%s] output handler '%s' is not defined", $send_fh
            );
            $data{'session'}{$cid}{'output'}{'handler'} = undef;
            <[base.session.shutdown]>->( $cid, 'filter chain error' );
            return 2;
        }
    } else {    ##  write directly  ##
        $size_written = <[base.s_write]>->( $send_fh, $payload_sref );
    }

    if ( $size_written > 0 ) {
        $data{'session'}{$cid}{'bytes'}{'in'} += $size_written
            if defined $cid;
        $data{'handle'}{$send_fh}{'bytes'}{'in'} += $size_written;

    } elsif ( $size_written == 0 ) {    ## nothing written \ fh buffer full ##
        <[base.s_warn]>->(
            '[%s] remote not ready to write to, please make write async !!!',
            scalar( $cid // $send_fh )
        );
        $data{'session'}{$cid}{'flush_shutdown'} = 1;
        eval { $send_fh->close() };     ##  forcing an exception  ##
        return 2;
    } else {    ##  write error \ recipient fh gone. ##
        <[base.s_warn]>->( 'write error in net.out on %s <{C1}>', $send_fh );
        if ( defined $cid ) {
            $data{'session'}{$cid}{'shutdown'} = 1;
        } else {
            eval { $send_fh->close() }    ##  forcing an exception  ##
        }
        return 2;
    }
    return 0;
} else {
    <[base.logs]>->( 0, '[%s] cannot send to socket', $send_fh );
    return 2;
}

#,,..,,..,.,,,.,.,.,.,.,,,,,,,.,,,,,.,,,.,.,.,..,,...,...,...,,,,,...,,..,.,,,
#RKQ6H657UKAXA2F5C43WHCKJGSUS3W25IXPNX2GIRRDRFDCOOPVKOBBBLHBT2Y75T5AYNIVUESQPU
#\\\|CSTAJKYASVQZBBMICCHI7VPAUYU2KKSLXS2WLR4U34XZYPSFPH5 \ / AMOS7 \ YOURUM ::
#\[7]BKQV7Q5XQCYRN6PCH3KZL2ZZJQSJB7M6QJ4ZRUFV4ED6RG3RV2DA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
