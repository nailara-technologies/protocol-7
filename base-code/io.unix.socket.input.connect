# >:]

# name  = io.unix.socket.input.connect

my $id = $_[0]->w->data;
my $fd = $_[0]->w->fd;

return undef if not defined $data{'session'}{$id};

if ( $fd->connected and -S $fd ) {
    my $unix_client;
    if ( $unix_client = $fd->accept() ) {

        no strict;   ##  retrieving peer credentials [ unix user details ]  ##
        my @peercred = unpack( 'i*', $unix_client->sockopt( SO_PEERCRED() ) );
        use strict;

        if ( @peercred != 3 ) {
            warn "[$id] no success with SO_PEERCRED()";
            return undef;
        }

        $data{'handle'}{$unix_client} = {
            'encryption' => qw| none |,
            'mode'       => qw| input |,
            'link'       => qw| ip.tcp |,
            'unix'       => {
                qw| pid | => $peercred[0],    # <-- process id  ###
                qw| uid | => $peercred[1],    # <-- unix-user-id  ###
                qw| gid | => $peercred[2]     # <-- unix-group id  ###
            }
        };

        return $unix_client;    ## <-- success ##

    } else {
        my $err_msg = <[base.format_error]>->($OS_ERROR);
        <[base.log]>->( 0, "[$id] cannot accept() connection : $err_msg" );
        return undef;
    }
} else {
    <[base.logs]>->(
        0,   '[%d] socket is not valid [ connection closed ? ] %s',
        $id, <[base.caller]>
    );
    return undef;    ## <-- error connecting ##
}

#.............................................................................
#IHHG7FGKXFYCIJ3JF3XMAH3GHSLJTJ5J3JD5H6ZJGFXJJCWCPJK4WVFTX7VRPLQ426ZTG6LBK6CSC
#::: INT6TO2EG5ZHSVA66C5QQ62M2NPT73ZLZHW7PXFJTNT2AFI54S3 :::: NAILARA AMOS :::
# :: QYE2LPHYLH74SLRVOJ6OAO4NJ5GOWXEA6MQYMTSIEIJZ3I6OTGCQ :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
