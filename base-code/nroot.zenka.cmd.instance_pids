# >:]

# name  = nroot.zenka.cmd.instance_pids
# param = [instance]
# descr = return list of instance process IDs

my $instance_id = $$call{'args'};

return {
    'mode' => 'nak',
    'data' => "invalid instance id parameter [numerical value expected]"
    }
    if defined $instance_id and $instance_id !~ /^\d+$/;

if ( not defined $instance_id ) {
    my %pids;
    my $reply_list = '';
    foreach my $i_id ( sort { $a <=> $b } keys %{<nroot.zenka.instance>} ) {
        my $parent_pid = <nroot.zenka.instance>->{$i_id}->{'process'}{'id'};
        map { $pids{$ARG} = 1 } (
            $parent_pid,
            @{ <[nroot.sub-process.get_children]>->($parent_pid) }
        );
    }
    $reply_list .= join( ' ', sort keys(%pids) );
    return {
        'mode' => 'ack',
        'data' => $reply_list
    };

} elsif ( $instance_id =~ /^\d+$/ ) {
    return {
        'mode' => 'nak',
        'data' => "instance not found [ nroot.list (zenki|children) ]"
        }
        if not exists <nroot.zenka.instance>->{$instance_id};
    my $parent_pid
        = <nroot.zenka.instance>->{$instance_id}->{'process'}{'id'};
    return {
        'mode' => 'ack',
        'data' => join( ' ',
            $parent_pid,
            @{ <[nroot.sub-process.get_children]>->($parent_pid) } )
    };
} else {
    return {
        'mode' => 'nak',
        'data' => 'instance id must be numeric'
    };
}

#.............................................................................
#MDQCFPSHZPB4ZFNG6NZKR4KMUHGQWNIBCTKLZQMFIQKZ6EMAUKNZ7EZZUA7F23PJUC35CLQKDBW5K
#::: MWT6VQEUVFVYNI62JQNEGMANECY7E6WJMEFVXBCVLQ3PFLC44TY :::: NAILARA AMOS :::
# :: UEQHSY5IJOBKHJOE7WPLXP4E5RIFRSORBY2FRBV2SGE5HSJ5DAAQ :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
