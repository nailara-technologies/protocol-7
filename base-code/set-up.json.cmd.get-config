# >:]

# name = set-up.json.cmd.get-config
# param = [type]
# descr = return zenka configuration as json

my $json_data;
my $data_copy     = {};
my $config_type   = $$call{'args'} || 'set-up';
my $zenka_name    = <system.zenka.name>;
my $rules_subname = "$zenka_name.set-up.export_rules";
return {
    'mode' => 'nak',
    'data' => "no export rules defined for zenka '$zenka_name'"
    }
    if not exists $code{$rules_subname};
my $export_rules = $code{$rules_subname}->();

return {
    'mode' => 'nak',
    'data' => "config type '$config_type' not defined in export rules"
    }
    if not exists $export_rules->{'keys'}->{$config_type};

my @export_keys = @{ $export_rules->{'keys'}->{$config_type}->{'export'} };

return {
    'mode' => 'nak',
    'data' => "type '$config_type' export key list is empty"
    }
    if !@export_keys;

my @exclude_list = ();
@exclude_list = @{ $export_rules->{'keys'}->{$config_type}->{'exclude'} }
    if exists $export_rules->{'keys'}->{$config_type}->{'exclude'};

foreach my $exp_key (@export_keys) {
    my $parent_ref = $data_copy;
    my @rest_keys  = split /\./, $exp_key;
    while ( my $k = shift @rest_keys ) {
        if (@rest_keys) {
            $parent_ref->{$k} //= {};
            $parent_ref = $parent_ref->{$k};
        } else {
            my $exp_resolved = <[base.resolve_key]>->($exp_key);
            $parent_ref->{$k} = ${ clone($exp_resolved) }
                if defined $exp_resolved;
        }
    }
}

foreach my $exclude_key (@exclude_list) {
    if ( $exclude_key !~ s/^\*\.// ) {
        <[base.del_key]>
            ->( { 'data_ref' => $data_copy, 'del_key' => $exclude_key } );
    } else {
        map {
            <[base.del_key]>
                ->( { 'data_ref' => $data_copy, 'del_key' => $ARG } )
                if $ARG =~ /(?<!\\)\.$exclude_key$/
        } keys %{ flatten($data_copy) };
    }
}

$EVAL_ERROR = undef;
my $err_msg;
eval '$json_data = $data{json}{parser}->encode($data_copy)';
( $err_msg = $EVAL_ERROR ) =~ s|at \(.+\n$|| if defined $EVAL_ERROR;
return { 'mode' => 'nak', 'data' => $err_msg }
    if defined $err_msg and length($err_msg);

return {
    'mode' => 'data',
    'data' => $json_data
};

#.............................................................................
#MB7MLFLRMYQA36CDNYPUQZOIBZUK56CTRQ6ASROQTBFSK6S6KYOWRJO3DP5HZKJ4GZSKBTDRV4ML2
#::: PUME5LDHPSLRWBLIOMMCMQTL4LQLOYG4BEIH7HOS7DZ7DGMJPET :::: NAILARA AMOS :::
# :: 5V5DCBOQNVOAA74ZA2YXA6GT2K4DU5FKB3RLWBMKE2BW67FHDWDA :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
