## >:] ##

# name  = mod-test.post_init

<mod-test.list.blacklisted_modules> //= <base.perlmod.reload_blacklist> // [];
<mod-test.list.registered_modules> = <[base.perlmod.all_registered]>;

<[base.logs]>->( 1, '.: loading all registered perl modules :' );

##  initializing with already blacklisted ones  ##
my %module_blacklisted = <[mod-test.update_blacklist_aref]>;

my @load_failed;
my $load_success = 0;
<[base.log]>->( 2, ':' );
{
    ##  catching load errors and warnings  ##
    ##
    use warnings qw| FATAL |;
    local $SIG{__WARN__} = sub { die @ARG };

    foreach my $perl_module ( <mod-test.list.registered_modules>->@* ) {
        <[base.logs]>->( 2, ':. %s', $perl_module );

        eval { Module::Load::load($perl_module) };

        if ( not length $EVAL_ERROR ) {
            $load_success++;
        } else {
            $module_blacklisted{$perl_module} = 5;
        }
    }
}

<[base.log]>->( 2, ':' );
<[base.log]>->( 2, ':.,' );

if ( scalar @load_failed ) {
    <[base.logs]>->(
        ':: could not load %d modules, adding to blacklist.,',
        scalar @load_failed
    );
} else {
    <[base.logs]>->(
        ':. successfully loaded all %d modules ::',
        $load_success
    );
    <[base.logs]>->(
        ':  :. %d were already blacklisted .:',
        scalar keys %module_blacklisted
    );
}

<[mod-test.update_blacklist_aref]>->( \%module_blacklisted );

0;

#,,.,,,,.,,.,,,,,,,,.,,..,,..,,..,.,.,...,,.,,..,,...,..,,.,,,,.,,,,,,,,,,.,,,
#A46M2C5PPW6VAZPN2GUSPXMLB2GYFZUGHXZGIX4J7B7FT7AXCSEKMK3WWOWAM5DD27PEYRJDY6GSY
#\\\|L4JMGVXNIAOD6F44RP55GU5N3NQUM7JTNRTMJKZPKCSL2AJ5WGP \ / AMOS7 \ YOURUM ::
#\[7]KMZ5MA33BBXOCHJPVXSOQICGMGHXKZLJ3FMOA3W4CNA5RGMMXQDI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
