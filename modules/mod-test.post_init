## [:< ##

# name  = mod-test.post_init

<[base.perlmod.load]>->('File::Copy');

<mod-test.list.blacklisted_modules> = <base.perlmod.reload_blacklist> // [];
<mod-test.list.registered_modules>  = <[base.perlmod.all_registered]>;

my @test_directory;
<mod-test.path.mod-reg-dir> //= {};
<mod-test.path.output_dir>    ##  zenka work directory  ##
    //= sprintf( qw| /var/run/.7/%s |, <system.zenka.name> );

## initializing reload test result path structure ##
foreach my $dir_type (qw| started complete blacklisted |) {
    my $dir_path_absolute = sprintf qw| %s/reload-test-%s |,
        <mod-test.path.output_dir>, $dir_type;
    push @test_directory, $dir_path_absolute;
    <mod-test.path.mod-reg-dir>->{$dir_type} = $dir_path_absolute;
}

##  creating expected test [sub-]directories  ##
foreach my $directory ( <mod-test.path.output_dir>, @test_directory ) {
    if ( not -d $directory ) {
        <[base.logs]>->( ': create : %s', $directory );
        <[file.make_path]>->( $directory, 0755, <system.amos-zenka-user> );
    }
}

<[base.logs]>->( 1, '.: loading all registered perl modules :' );

##  initializing with already blacklisted ones  ##
my %module_blacklisted = <[mod-test.update_blacklist_aref]>;

my @load_failed;
my $load_success = 0;
{
    ##  catching load errors and warnings  ##
    ##
    use warnings qw| FATAL |;
    local $SIG{__WARN__} = sub { die @ARG };

    <[base.log]>->( 2, ':' );

    foreach my $perl_module ( <mod-test.list.registered_modules>->@* ) {
        <[base.logs]>->( 2, ':. %s', $perl_module );

        eval { Module::Load::load($perl_module) };

        if ( not length $EVAL_ERROR ) {
            $load_success++;
        } else {
            push @load_failed, $perl_module;
            $module_blacklisted{$perl_module} = 5;
        }
    }
    <[base.log]>->( 2, ':' );
    <[base.log]>->( 2, ':.,' );
}

@load_failed = uniq @load_failed;

if ( scalar @load_failed ) {  ##  register unloadable modules in blacklist  ##
    <[base.logs]>->(
        ':: could not load %d modules, adding to blacklist.,',
        scalar @load_failed
    );
} else {    ##  no loading errors or warnings  ##
    <[base.logs]>->(
        ':. successfully loaded all %d modules ::',
        $load_success
    );
    <[base.logs]>->(
        ':  :. %d were already blacklisted .:',
        scalar keys %module_blacklisted
    );
}

$module_blacklisted{'Module::Refresh'} = 5;    ##  required enty  ##

##  converting module names to .pm style [ as found in %INC ]  ##
##
<[mod-test.update_blacklist_aref]>->( [ keys %module_blacklisted ] );

0;

#,,,,,...,,,,,..,,..,,.,.,,,.,.,.,,,.,,,.,.,.,..,,...,...,.,.,.,.,,.,,,..,..,,
#3UX7SRI33GYS62JHO2GGFJG5SG6OS555NZGQZCAYSEKN2SOPOWBO4NJTTY6ESKOSYP6ANOJVGM6YU
#\\\|Z4KEQFGBP4E4LCFLUGNIGJ3FEQNTVX4DADRQRWJPPQ3WC6I3FCM \ / AMOS7 \ YOURUM ::
#\[7]UAE2YEO2OXQ54K3WEHQQLV2FPZY4DJ2ZAKXDHYVXK5WSMFWIQODA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
