## [:< ##

# name  = base.net.client.auth_with_pwd
# descr = plain text 'pwd' authentication mode [client]

my $answer;
my $banner_string;
my $backend_socket = shift(@ARG), $banner_string = '', $answer = '';

( my $usr, my $pwd ) = ( shift @ARG, shift @ARG );

if ( not length( $usr // '' ) ) {
    warn 'username parameter not defined <{C1}>';
    return undef;
} elsif ( not length( $pwd // '' ) ) {
    warn 'password parameter is undefined <{C1}>';
    return undef;
}

my $re_proto_banner = <protocol.protocol-7.regex.protocol-version>;

if ( not defined $re_proto_banner
    or index( ref $re_proto_banner, qw| Regexp | ) == -1 ) {
    warn 'protocol banner regexp not defined, cannot authenticate <{C1}>';
    return undef;
}

my $protocol_messages = <protocol.protocol-7.connect>;
my $protocol_banner   = $protocol_messages->{'banner'};
my $proto_msg_timeout = $protocol_messages->{'timeout'};

my $link_mode_str = qw| pwd |;

$link_mode_str = lc $LAST_PAREN_MATCH
    if ref($backend_socket) =~ m|^IO::Socket::(\S+)$|;

if (   not defined $backend_socket
    or not -S $backend_socket
    or not $backend_socket->connected ) {
    <[base.log]>->(
        0, 'auth.pwd : cannot authenticate [ have no valid socket ]'
    );
    return undef;
}

my $read_len
    = [ minmax( map {length} $protocol_banner, $proto_msg_timeout ) ]->[1];
my $bytes_read
    = <[base.s_read]>->( $backend_socket, \my $banner_string, $read_len )
    // 0;

if ( $bytes_read > 0 ) {
    if ( $banner_string =~ $re_proto_banner ) {
        <[base.log]>->( 2, '[*] Protocol 7 banner detected.,' );

        my $protocol_7_version = $LAST_PAREN_MATCH;
        $data{'handle'}{$backend_socket}{'P7_version'}
            = $protocol_7_version;    ## linking version with handle ##

        <[base.logs]>->(
            2, '[v] protocol 7 version %s .,',
            $protocol_7_version
        );

    } elsif ( $banner_string eq $proto_msg_timeout ) {
        <[base.log]>->( 2, '[#] authentication timeout :|' );
        return undef;
    } else {
        <[base.logs]>->(
            0, '[#] protocol mismatch [ no valid connection banner \ %s ]',
            $link_mode_str
        );
        return undef;
    }
} else {
    <[base.logs]>->(
        0, 'auth.pwd : [#] network error [ nothing read on %s ]',
        $link_mode_str
    );
    return undef;
}

<[protocol.protocol-7.auth.select-method]>->( $backend_socket, qw|zenka| )
    or return undef;

<[base.logs]>->(
    2,    "[<] authenticating as '%s'., [%s]",
    $usr, $link_mode_str
);

<[base.net.send_to_socket]>->(
    $backend_socket, sprintf( "auth %s %s\n", $usr, $pwd )
);

return <[auth.zenka.process_auth_reply]>->(
    $backend_socket, 'authentication successful. =)'
);

#,,..,,,.,...,,,,,.,,,.,,,,..,,.,,,.,,.,,,,..,..,,...,...,.,.,.,,,...,.,,,.,.,
#JUYK4FE7DD3RU5KW4LCAE2XKEN3RF7JCB3FYGVL37SDP3Q6YECAKVMN4E6AYMGWMAHYM4QVEQWQZC
#\\\|WC7QBJFKJKISF2A4A4OU3LFKOHKOITIAXCP4NAQBYPNGUQWO526 \ / AMOS7 \ YOURUM ::
#\[7]4WGBN2ZXQVXO5JBG4IVK4YJDY7NT6KQQKMQBR3G62A4SGHKZ7WDY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
