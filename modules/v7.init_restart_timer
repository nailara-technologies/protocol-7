## [:< ##

# name = v7.init_restart_timer

my $instance_id = shift;

if ( not defined $instance_id ) {
    warn 'expected instance id <{C1}>';
    return undef;
}

my $instance = <v7.zenka.instance>->{$instance_id};

if ( not defined $instance ) {
    ( my $caller_str = [ (caller) ]->[1] ) =~ s|^.+\.||g;
    <[base.logs]>->(
        2,            "< init_restart_timer > instance %d gone ? [%s]",
        $instance_id, $caller_str
    );
    return undef;
}
my $zenka_name = <v7.zenka.setup>->{ $instance->{'zenka_id'} }->{'name'};

if ( defined $instance->{'timer'}->{'restart'}
    and $instance->{'timer'}->{'restart'}->is_active ) {
    <[base.logs]>->(
        2, ": instance %u ['%s'] restart-timer already active [ skipping ].,",
        $instance_id, $zenka_name
    );
    return FALSE;
}

my $fallback_delay = 0.7;    ## <-- when 'restart_delay' not defined ##

if ( not defined $instance->{'restart_delay'} ) {
    <[base.log]>->(
        0, 'restart_delay is not defined : setting to ' . $fallback_delay
    );
    $instance->{'restart_delay'} = $fallback_delay;
}

<[base.logs]>->(
    ": preparing instance %u ['%s'] :: restart ::",
    $instance_id, $zenka_name
);
<[base.logs]>->(
    ": :. current restart delay : %s",
    $instance->{'restart_delay'}
);

return $instance->{'timer'}->{'restart'} = <[event.add_timer]>->(
    {   'after'   => $instance->{'restart_delay'},
        'handler' => qw| v7.callback.instance.restart |,
        'data'    => $instance_id
    }
);

#,,,,,,,,,,.,,.,,,,.,,...,..,,..,,.,.,..,,..,,..,,...,..,,.,.,,.,,,,.,.,.,...,
#GDGJETXLQYWEKUIXJJSXYZ4FC26PWNZNPWYRYTG4LHY6SQL2MEXQCB53WSSUZLRLNQ26UNCVHCI3S
#\\\|4WT4QQV5U5HXNEERIEH6FAOOD7JXR66NWQUTOTQ5JMOJT6UGMR7 \ / AMOS7 \ YOURUM ::
#\[7]M7YXFQAP5DCPYQJ55LPH7ZTIICPFAZLR42H67HK5OE5VT4OP4QDI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
