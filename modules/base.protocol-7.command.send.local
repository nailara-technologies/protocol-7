## [:< ##

# name = base.protocol-7.command.send.local

my $cmd       = $ARG[0]->{'command'};
my $call_args = $ARG[0]->{'call_args'};
$ARG[0]->{'reply'}   //= {};
$call_args->{'args'} //= '';

return warn 'expected <command> parameter <{C1}>' if not defined $cmd;

return 0 if not exists $data{'session'} or not keys $data{'session'}->%*;

if ( $cmd =~ s|^([^\.]+)\.((([^\.]+)\.)*\w[\w\d\_\-\.]*)$|$2|go ) {

    my $cmd_id        = <[base.gen_id]>->( $data{'route'}, undef, undef, 0 );
    my $reply_handler = $ARG[0]->{'reply'}{'handler'} // qw| dev.null |;
    my $reply_params  = $ARG[0]->{'reply'}{'params'};

    my $target_name = ${^CAPTURE}[0];

    ## error handling on unknown target ## [LLL]

    ## send to all clients with that session id or username [in group mode] ##
    my @send_sids;
    my $target_sid = $target_name =~ m|^\d+$| ? $target_name : undef;
    if ( defined $target_sid
        and exists $data{'session'}{$target_sid} ) {   ##[ session id mode ]##
        @send_sids = ($target_sid);
    } elsif ( exists $data{'user'}{$target_name} ) {    ###[ group mode ]###
        @send_sids = keys $data{'user'}{$target_name}{'session'}->%*;
    }

    my $count = 0;
    foreach my $target_sid (@send_sids) {
        my $session;
        $session = $data{'session'}{$target_sid}
            if exists $data{'session'}{$target_sid};
        next    ## skip unauthorized connections \ modes ##
            if not defined $session
            or $session->{'mode'} ne qw| client |
            or $session->{'user'} eq <base.session.uname.server>
            or $session->{'user'} eq <base.session.uname.client>
            or defined $session->{'authenticated'}
            and $session->{'authenticated'} ne qw| yes |;

        ## setting up route ##

        my $route = <[base.route.add]>->(
            {   'source' => { 'sid' => $target_sid, 'cmd_id' => $cmd_id },
                'reply'  => {
                    'handler' => $reply_handler,
                    'params'  => $reply_params
                },
                'target' => { 'sid' => $target_sid }
            }
        );

        my $target_cmd_id = $$route{'target'}{'cmd_id'};

        my $src_name = <system.zenka.name>;
        $src_name .= sprintf qw| [%s] |, <system.zenka.subname>
            if exists <system.zenka.subname>;

     # [LLL]  implement [devmod] watch and filter patterns for command logging
        if (   <system.verbosity.console> >= 2
            or <system.verbosity.zenka_buffer> >= 2 ) {
            <[base.logs]>->(
                2, ':network: %s ..:. %s ..:. %s',
                $src_name, $target_name, $cmd
                )
                if ( $src_name ne qw| cube |
                or $target_name ne qw| p7-log |
                or $cmd ne qw| append |
                or !<devmod.skip_log_msg> )
                and ( $target_name ne qw| cube |
                or $cmd ne qw| p7-log.append |
                or !<devmod.skip_log_msg> )
                and ( $src_name ne qw| v7 |
                or
                ( $cmd ne qw|heart| and substr( $cmd, -5, 5 ) ne qw|.heart| )
                or !<devmod.skip_v7_heartbeat> );
        }

        $target_cmd_id =~ s|^(\d+)$|($1)|;

        #            if ( $command_mode == 1 )    # single line command mode
        #            {
        my $args = '';

        if ( length $call_args->{'args'} ) { $cmd .= ' ' }

        my $command_string    ##  prepare full command line  ##
            = join( '', $target_cmd_id, $cmd, $call_args->{'args'}, "\n" );

        ##  append command to target buffer  ##
        $data{'session'}{$target_sid}{'buffer'}{'output'} .= $command_string;

        ##  calculate and store average command line length  ##
        <[base.session.calc_cmd_stats]>->( $target_sid, \$command_string );

        $count++;

        ###  set up timeout handler ?  ###  [LLL]

        ##  }
        ##  elsif ( $command_mode == 2 )    # multi line command mode
        ##  {
        ##      my $header = '';
        ##      if ( defined $call_args->{'param'}
        ##          and ref( $call_args->{'param'} ) eq
        ##          'HASH' )    # prepare parameter header
        ##      {
        ##          my ( $key, $val );
        ##          while ( ( $key, $val ) = each( %{ $call_args->{'param'} } ) )
        ##          {
        ##              $header .= $key . '=' . $val . "\n";
        ##          }
        ##      }
        ##      $data{'session'}{$target_sid}{'buffer'}{'output'} .=
        ##        $target_cmd_id . $cmd . "+\n" . $header . "\n"
        ##        . $call_args->{'data'} . ".\n";
        ##  }
    }
    return $count;
} else {
    <[base.s_warn]>->( "protocol mismatch ['%s'] <{C1}>", $cmd );
    return -2;
}

#,,..,.,.,,,,,,,,,,,.,.,.,,,.,,,,,,..,,,,,.,,,..,,...,..,,...,,,.,,,,,...,...,
#JGUWAAFJYRKTOI4GQ3QFJ3WAMDEPP3A7Z5DNIDGYCYAMYYHRMB5G7UJEVLDO5BIRXB2XUWDJBIOHQ
#\\\|IDR76UQSEXHQNTILKKNEOEVE3RFCFDTHTJGKXDYDCAJUWVNCDQH \ / AMOS7 \ YOURUM ::
#\[7]2LXRU4BFGOZJ6L6KVL5PUO56UFJ6FGVIMTBAYQLQBS6R2RTOXUAA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
