## >:] ##

# name = crypt.C25519.sign_keys

my $key_vars = <[crypt.C25519.key_vars]>->(shift); # <-- <key_name> [optional]

my $uid          = $key_vars->{'uid'};
my $gid          = $key_vars->{'gid'};
my $key_usr      = $key_vars->{'usr_name'};
my $key_name     = $key_vars->{'key_name'};
my $key_basepath = $key_vars->{'key_basepath'};

my $key_bin = $keys{'C25519'}{$key_name};

if ( defined <crypt.C25519.root_key_url> ) {
    my $root_key_name;
    my %root_key = ( 'private' => '', 'public' => '' );

    ## DOWNLOAD IF URL ## ( todo : implement local file case )
    if ( <crypt.C25519.root_key_url>
        =~ m{^https?://.+/C25519\.B32\.(.+)\.(secret|public)$} ) {
        $root_key_name = $1 // '';
        my %root_key_url = mep { $ARG => <crypt.C25519.root_key_url> . $ARG }
        qw| secret public |;

        require LWP::UserAgent;    # use download zenka later, needs blocking
        my $ua = LWP::UserAgent->new();

        foreach my $type ( 'private', 'public' ) {
            <crypt.C25519.download_type> = $type;
            <[base.log]>->( 1, ": downloading '$root_key_url{$type}'.." );
            my $response = $ua->get( $root_key_url{$type} );
            if ( not $response->is_success ) {
                map { delete $root_key{$ARG} } ( 'private', 'public' );
                my $reason = $response->status_line;
                <[base.log]>->(
                    0, "[!] download [ $root_key_url{$type} ] $reason [!]"
                );
                <[base.log]>->(
                    0,
                    "<< ! >> key signing aborted [ error during download ] << ! >>"
                );
                return -2;
            } else {
                chomp( $root_key{$type} = $response->decoded_content );
            }
        }
        ##

        my $rkst = length($root_key_name) ? " '$root_key_name'" : '';

        my $rk_priv_len = length( $root_key{'private'} );
        if ( length( $root_key{'public'} ) != 43 or $rk_priv_len != 86 ) {
            <[base.log]>->(
                0,
                "<< ! >> root key not valid <<!>> key signing aborted << ! >>"
            );

            # LLL: log reason ..,
            goto skip_sign;
        }
        <[base.log]>->(
            0, ": signing C25519 key pair with$rkst root key ..,"
        );
        my $sig_file_path = $key_basepath . '.sig';
        $sig_file_path .= ".$root_key_name" if length($root_key_name);
        <[file.put]>->(
            $sig_file_path,
            encode_b32r(
                Crypt::Ed25519::sign(
                    $key_bin->{'public'} . "\n",
                    decode_b32r( $root_key{'public'} ),
                    decode_b32r( $root_key{'private'} )
                    )
                    . "\n"
            )
        );
        if ( -f $sig_file_path or -r $sig_file_path ) {
            <[base.log]>->( 1, ": : $sig_file_path" );
            ( my $root_pkey_path
                    = join( '.', $key_basepath, 'rkp', $root_key_name ) )
                =~ s|\.$||;
            <[file.put]>->( $root_pkey_path, $root_key{'public'} . "\n" );
            <[base.log]>->( 1, ": : $root_pkey_path" );
            return 1;
        } else {
            <[base.log]>->( 0, "<< unable to sign public host key >>" );
            return -1;
        }
    skip_sign:
        substr( $root_key{'private'}, 0, $rk_priv_len,
            <[base.prng.characters]>->($rk_priv_len) );
        map { undef $root_key{$ARG} } ( 'private', 'public' );
    } else {
        <[base.log]>
            ->( 1, ": unrecognized root key url, skipped signing..," );
        return -1;
    }
} else {
    <[base.log]>->( 1, ": no root key url defined, skipped key signing..," );
    return 0;
}

#,,..,..,,.,,,..,,...,,.,,,,.,,,.,,..,,,.,,..,..,,...,..,,..,,,,.,..,,.,.,,,.,
#3CXTZGDOXEXTHBLXYJMKESVNLEBOQ7WPPGH4ZRCFOWYQNXRHCBRKAMBRQOUVIE2PS5RXGYEFF4F7S
#\\\|STOI52VOZDILMX3GMOQHWM4Y5BUT7WB5IRI4QIB5J4LGXNT3ETY \ / AMOS7 \ YOURUM ::
#\[7]U3RP6Z34SUCL6LZ4M6YIFV76KHFRF2A26AJHTFHXV77GSTKO6MAQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
