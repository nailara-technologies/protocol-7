## [:< ##

# name = crypt.C25519.sign_keys

my $rkey_name         = shift;    ##  signature key name \ base url  ##
my $name_param        = shift;    ##  optional  ##
my $ask_for_password  = shift // FALSE;    ##  optional  ##
my $is_root_signature = shift // FALSE;    ##  optional  ##
my $use_rkey_name     = shift // FALSE;    ##  optional  ##

##  requires auto-download of root key in url case  ##

my $key_vars_ref = <[crypt.C25519.key_vars]>->($name_param);

my $uid     = $key_vars_ref->{'uid'};
my $gid     = $key_vars_ref->{'gid'};
my $key_usr = $key_vars_ref->{'usr_name'};
my $name    = $key_vars_ref->{'key_name'};
my $key_dir = $key_vars_ref->{'key_dir'};

my @fname_param = $name;
push @fname_param, $rkey_name if not $is_root_signature or $use_rkey_name;

( my $sig_file_path, my $root_pkey_path )
    = map { catfile( $key_dir, $ARG ) }
    <[crypt.C25519.sig_fnames]>->(@fname_param);

if ( not exists $keys{'C25519'}->{$rkey_name} ) {
    <[base.s_warn]>->(
        "signature key '%s' not loaded, cannot sign <{C1}>", $rkey_name
    );
    return undef;
}

if ( not exists $keys{'C25519'}->{$name} ) {
    my @passwd_otps = ($ask_for_password) x 2;
    <[base.logs]>->( 1, "loading target key '%s' .,", $name );
    if ( not <[crypt.C25519.load_keypair]>->( $name, undef, @passwd_otps ) ) {
        <[base.s_warn]>->(
            "target key '%s' not found \\ loaded, cannot sign <{C1}>", $name
        );
        goto skip_sign;
    }
}

if ( not defined $keys{'C25519'}->{$name}->{'public'} ) {
    <[base.s_warn]>->(
        "target key '%s' has no public key loaded .., <{C1}>", $name
    );
    goto skip_sign;
}

foreach my $type (qw| private public |) {
    next if defined $keys{'C25519'}->{$rkey_name}->{$type};
    <[base.s_warn]>->(
        "signature [root] key '%s' has no %s-key loaded ., <{C1}>",
        $rkey_name, $type
    );
    goto skip_sign;
}

if ( -f $sig_file_path ) {
    <[base.logs]>->(
        0,          "a signature file ['%s'] for key '%s' already exists .,",
        $rkey_name, $name
    );
    goto skip_sign;
} elsif ( -f $root_pkey_path ) {
    <[base.logs]>->(
        0, "root key pub key file ['%s'] for key '%s' already exists .,",
        $rkey_name, $name
    );
    goto skip_sign;
}

<[base.logs]>->( ": signing key '%s' with key '%s'..,", $name, $rkey_name );

<[file.put]>->(
    $sig_file_path,
    sprintf(
        "%s\n",
        Crypt::Misc::encode_b32r(
            Crypt::Ed25519::sign(
                $keys{'C25519'}->{$name}->{'public'},
                $keys{'C25519'}->{$rkey_name}->{'public'},
                $keys{'C25519'}->{$rkey_name}->{'private'}
            )
        )
    )
);

if ( -f $sig_file_path and -r $sig_file_path ) {
    <[base.logs]>->(
        ": :. writing '%s' .,",
        <[file.strip_path_str]>->($sig_file_path)
    );
    <[file.put]>->(
        $root_pkey_path,
        sprintf(
            "%s\n",
            Crypt::Misc::encode_b32r(
                $keys{'C25519'}->{$rkey_name}->{'public'}
            )
        )
    );
    <[base.logs]>->(
        ": :. writing '%s' .,",
        <[file.strip_path_str]>->($root_pkey_path)
    );

    undef $keys{'C25519'}->{$rkey_name};

    ##[ deleting keys from memory ]##
    <[crypt.C25519.unload_key]>->($rkey_name);

    if (wantarray) {    ##  also return created filenames in list context  ##
        return ( TRUE, grep {s|^$key_dir/||} $sig_file_path,
            $root_pkey_path );
    } else {
        return TRUE;
    }
} else {
    <[base.log]>->( 0, '<< key signing failed >>' );
}

skip_sign:

##[ deleting keys from memory ]##
<[crypt.C25519.unload_key]>->($rkey_name);

return FALSE;

#,,,,,.,,,.,.,,,.,..,,...,,..,,,.,...,.,,,,..,..,,...,...,,,,,.,.,...,..,,.,,,
#2H66R2WAFMDB2V7SKHIN4BVHU5W5E5B7KHVSANOY7VOMX4KSMJ2LBXPNWQHPEXK2GK7UFNXIYVD5Y
#\\\|5DB7T3ZYBSSULI3YMZE7CAW333T5GWWXNTINXE4XCWP53E6IYP7 \ / AMOS7 \ YOURUM ::
#\[7]5EMI2GGI7JTJJEG5WKCBVUWDPHEQRND7XYTMIVL25OHJ3GWGFWBQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
