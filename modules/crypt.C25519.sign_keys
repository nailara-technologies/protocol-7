## [:< ##

# name = crypt.C25519.sign_keys

my $key_name_param = shift;    ##  optional  ##

my $key_vars_ref = <[crypt.C25519.key_vars]>->($key_name_param);

my $uid          = $key_vars_ref->{'uid'};
my $gid          = $key_vars_ref->{'gid'};
my $key_usr      = $key_vars_ref->{'usr_name'};
my $key_name     = $key_vars_ref->{'key_name'};
my $key_basepath = $key_vars_ref->{'key_basepath'};

my $key_bin = $keys{'C25519'}{$key_name};

if ( defined <crypt.C25519.root_key_url> ) {
    my $root_key_name;
    my %root_key = ( qw| private | => '', qw| public | => '' );

    ## DOWNLOAD IF URL ## ( todo : implement local file case )
    if ( <crypt.C25519.root_key_url>
        =~ m{^https?://.+/([^/]+)\.(secret|public)$} ) {
        $root_key_name = ${^CAPTURE}[0] // '';
        my %root_key_url = mep { $ARG => <crypt.C25519.root_key_url> . $ARG }
        qw| secret public |;

        require LWP::UserAgent;    # use download zenka later, needs blocking
        my $ua = LWP::UserAgent->new();

        foreach my $type (qw|  private  public  |) {
            <crypt.C25519.download_type> = $type;
            <[base.logs]>->( ": downloading '%s' ..,", $root_key_url{$type} );
            my $response = $ua->get( $root_key_url{$type} );
            if ( not $response->is_success ) {
                map { delete $root_key{$ARG} } (qw|  private  public  |);
                my $reason = $response->status_line;
                <[base.logs]>->(
                    0,                    "<< download [ %s ] %s >>",
                    $root_key_url{$type}, $reason
                );
                <[base.log]>->(
                    0,
                    '<< ! >> key signing aborted '
                        . '[ error during download ] << ! >>'
                );
                return -2;
            } else {
                chomp( $root_key{$type} = $response->decoded_content );
            }
        }
        ##

        my $rkst
            = length($root_key_name)
            ? sprintf( " '%s'", $root_key_name )
            : '';

        my $rk_priv_len = length( $root_key{'private'} );
        if ( length( $root_key{'public'} ) != 43 or $rk_priv_len != 86 ) {
            <[base.log]>->(
                0,
                "<< ! >> root key not valid <<!>> key signing aborted << ! >>"
            );

            # LLL: log reason ..,
            goto skip_sign;
        }
        <[base.logs]>->(
            0, ': signing C25519 key pair with%s root key ..,', $rkst
        );
        my $sig_file_path = sprintf qw| %s.sig |, $key_basepath;
        $sig_file_path .= sprintf( qw| .%s |, $root_key_name )
            if length $root_key_name;
        <[file.put]>->(
            $sig_file_path,
            encode_b32r sprintf(
                "%s\n",
                Crypt::Ed25519::sign(
                    sprintf( "%s\n", $key_bin->{'public'} ),
                    decode_b32r( $root_key{'public'} ),
                    decode_b32r( $root_key{'private'} )
                )
            )
        );
        if ( -f $sig_file_path and -r $sig_file_path ) {
            <[base.logs]>->( ': : %s', $sig_file_path );
            (   my $root_pkey_path = join qw| . |,
                $key_basepath, qw| rkp |, $root_key_name
            ) =~ s|\.$||;
            <[file.put]>->(
                $root_pkey_path, sprintf( "%s\n", $root_key{'public'} )
            );
            <[base.logs]>->( ": : %s", $root_pkey_path );
            return TRUE;
        } else {
            <[base.log]>->( 0, "<< unable to sign public host key >>" );
            return -1;
        }
    skip_sign:
        substr( $root_key{'private'}, 0, $rk_priv_len,
            <[base.prng.characters]>->($rk_priv_len) );
        map { undef $root_key{$ARG} } (qw|  private  public  |);
    } else {
        <[base.log]>
            ->( 1, ': unrecognized root key url, skipped signing..,' );
        return -1;
    }
} else {
    <[base.log]>->( 1, ': no root key url defined, skipped key signing..,' );
    return FALSE;
}

#,,,.,..,,,,,,,,,,,,.,,,,,,,,,...,...,,,.,,.,,..,,...,...,...,...,.,.,.,,,..,,
#G5VKLBQ5FXYWNZWYCLCN5ZKAK6TRBP74WRRXMMFJ7PH6RLTBASFNP4J44GMNXDNH6JWKG5LULGF76
#\\\|ZABFVJQOF7O2ZXGKZHEKFBIH3UDPQIB52ULBO6HQQIRVOUHVLQY \ / AMOS7 \ YOURUM ::
#\[7]PHG6FZ26DCFA7ZMZHKYLW2OSYEFNSPRYRSFZ54WK4B3EO4GE5YAA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
