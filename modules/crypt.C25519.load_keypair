## [:< ##

# name = crypt.C25519.load_keypair

my $name_param         = shift;             ##  optional  ##
my $key_password       = shift;             ##  optional  ##
my $ask_for_password   = shift // TRUE;     ##  optional  ##
my $pwd_retry_on_error = shift // FALSE;    ##  optional  ##
my $test_key_chksum    = shift;             ##  optional  ##

my $key_vars_ref = <[crypt.C25519.key_vars]>->($name_param);

my $key_dir      = $key_vars_ref->{'key_dir'};
my $key_usr      = $key_vars_ref->{'usr_name'};
my $name         = $key_vars_ref->{'key_name'};
my $key_filename = $key_vars_ref->{'key_filename'};

foreach my $type ( <[base.sort]>->($key_filename) ) {
    if ( -f $key_filename->{$type} and not -r $key_filename->{$type} ) {
        ( my $file = $key_filename->{$type} ) =~ s|^.*/||;
        <[base.logs]>->(
            0, 'no read permission on %s [ aborted loading ]', $file
        );
        return undef;
    }
}

my $virtual_keyfile  = $key_filename->{'virtual'};
my $secret_key_file  = $key_filename->{'secret'};
my $public_key_file  = $key_filename->{'public'};
my $private_key_file = $key_filename->{'private'};

if (-r $virtual_keyfile    ##  key is 'virtual' [ seed-phrase ]  ##
    and ( defined $key_password or $ask_for_password )
) {

    <[base.logs]>->( "creating seedphrase key '%s' .,", $name );

    my $key_seed_entropy;

    ## requesting user input ., ##
    ##
    if ( not defined $key_password ) {
        <[base.perlmod.load]>->('AMOS7::TERM')
            if not <[base.perlmod.loaded]>->('AMOS7::TERM');
        say sprintf "%s:%s", $AMOS7::C{'0'}, $AMOS7::C{'R'};

        $key_seed_entropy
            = AMOS7::TERM::read_password_repeated(
            'generation entropy passphrase');

    } elsif ( defined $key_password ) {
        $key_seed_entropy = $key_password;    ## given ##
    }

    if ( not defined $key_seed_entropy or length $key_seed_entropy <= 1 ) {
        <[base.log]>->(
            0, 'cannot generate the key without seed entropy passphrase'
        );
        return ( FALSE, undef ) if wantarray;
        return FALSE;

    } else {

        <[base.logs]>->( ':. calculating [%s] ..,', $name );

        ##  generate keypair from user seed entropy  ##
        ##
        if ( not <[crypt.C25519.gen_keys]>->( $name, $key_seed_entropy ) ) {
            <[base.logs]>->(
                0, "'%s' key generation was not successful .,", $name
            );
            return ( FALSE, undef ) if wantarray;
            return FALSE;

        } else {    ##  key is loaded ., ##

            my $key_checksum = <[crypt.C25519.key_bin_checksums]>->(
                $keys{'C25519'}{$name}{'private'},
                $keys{'C25519'}{$name}{'public'}
            );

            <[base.logs]>->(
                ':  :. generated and loaded [%s] .,',
                $key_checksum
            );

            return ( TRUE, $key_checksum ) if wantarray;    ## <-- chksum ##
            return TRUE;
        }
    }

} elsif (
    -r $secret_key_file    ##  abort loading .secret  ##
    and not defined $key_password and not $ask_for_password
    and not -r $public_key_file
    and <[crypt.C25519.encrypted_key]>->($name)
) {
    <[base.logs]>->(
        0, "cannot load '%s' secret key without decryption password ..,",
        $name
    );
    return FALSE;

} elsif (
    -r $secret_key_file    ## load missing files from .secret ##
    and ( not -r $private_key_file or not -r $public_key_file )
    and (  defined $key_password
        or $ask_for_password
        or not <[crypt.C25519.encrypted_key]>->($name) )
) {

    return <[crypt.C25519.load_keys_from_secret]>->(
        $name, $key_password, $pwd_retry_on_error, $test_key_chksum
    );

} elsif (
    -r $public_key_file    ##  load public key only  ##
    and (  not -r $private_key_file
        or not defined $key_password
        and not $ask_for_password
        and <[crypt.C25519.encrypted_key]>->($name) )
) {

    return <[crypt.C25519.load_single]>->( $name, undef, qw| public | );

} elsif ( -r $private_key_file and -r $public_key_file ) {

    my $u_str = $name =~ m|^$key_usr(?:\..+)$| ? '' : " [usr:$key_usr]";
    <[base.logs]>->( ":. C25519-key .:. '%s'%s", $name, $u_str );

    my $B32_secret_key    ## load secret key if present ##
        = -r $secret_key_file
        ? <[file.slurp]>->($public_key_file)->$* // ''
        : undef;

    my $encoded_private_key = <[file.slurp]>->($private_key_file)->$* // '';
    my $encoded_public_key  = <[file.slurp]>->($public_key_file)->$*  // '';

    if ( not length $encoded_private_key or not length $encoded_public_key ) {
        <[base.logs]>->( 0, "cannot load '%s' key data ..,", $name );
        return FALSE;
    }
    chomp $encoded_public_key;
    chomp $encoded_private_key;
    chomp $B32_secret_key if defined $B32_secret_key;

    ## decode [ base 32 ] ##
    $keys{'C25519'}{$name}{'private'} = decode_b32r $encoded_private_key;
    $keys{'C25519'}{$name}{'public'}  = decode_b32r $encoded_public_key;

    foreach my $type (qw|  private  public  |) {
        <[base.logs]>->( 0, 'BASE32 decoding failed [ %s key ]', $type )
            if not defined $keys{'C25519'}{$name}{$type};
    }

    if (   not defined $keys{'C25519'}{$name}{'public'}
        or not defined $keys{'C25519'}{$name}{'private'} ) {
        <[base.logs]>->( 0, "cannot load key '%s'..,", $name );
        return FALSE;    ##  false  ##
    }

    ( my $key_status ) = <[crypt.C25519.get_type_from_key_str]>->(
        $keys{'C25519'}{$name}{'private'},
        $keys{'C25519'}{$name}{'public'}
    );

    if ( not defined $key_status ) {
        <[base.logs]>->( 0, "cannot read key status of '%s' .,", $name );
        return FALSE;    ##  false  ##
    }

    substr( $keys{'C25519'}{$name}{'private'}, 0, 2, '' )
        if $key_status->{'prefixed'} == TRUE;

    ##  decrypt private key [ when password provided ]  ##
    ##
    if ( $key_status->{'encrypted'} ) {
    RE_READ_PWD:
        if ( not defined $key_password ) {
            <[base.perlmod.load]>->('AMOS7::TERM')
                if not <[base.perlmod.loaded]>->('AMOS7::TERM');
            say sprintf qw| %s:%s |, $AMOS7::C{'0'}, $AMOS7::C{'R'};
            $key_password = AMOS7::TERM::read_password_single(
                sprintf( "'%s' key decryption password", $name ) );
        }

        if ( not defined $key_password ) {
            undef $keys{'C25519'}{$name}{'private'};
            delete $keys{'C25519'}{$name}{'private'};
            if ($ask_for_password) {    ## password input failed ##
                <[base.log]>->( 0, 'cannot decrypt private key .,' );
                <[base.log]>->( 1, ':' );
                <[base.logs]>->( ": public key loaded ['%s']", $name );
                <[base.log]>->( 1, ':' );
                return FALSE;
            } else {    ## load only public key [ no password mode ] ##
                <[base.log]>->( 2, ':' );
                <[base.logs]>->( 2, ": public key loaded ['%s']", $name );
                <[base.log]>->( 2, ':' );
                return TRUE;
            }
        } else {
            say sprintf qw| %s:%s |, $AMOS7::C{'0'}, $AMOS7::C{'R'};
        }

        my $decrypted_C25519_sref = <[crypt.C25519.decrypt_priv_keystr]>->(
            $keys{'C25519'}{$name}{'private'}, $key_password,
            $keys{'C25519'}{$name}{'public'},  $test_key_chksum
        );

        if ( ref $decrypted_C25519_sref ne qw| SCALAR | ) {

            undef $key_password;

            if ( defined $decrypted_C25519_sref
                and $decrypted_C25519_sref eq FALSE ) {
                ##[ password ]##
                goto RE_READ_PWD if $pwd_retry_on_error;

            }    ##  error during decryption  ##

            undef $keys{'C25519'}{$name}{'private'};
            delete $keys{'C25519'}{$name}{'private'};

            <[base.logs]>->( ": public key loaded ['%s']", $name );
            <[base.log]>->( 1, ':' );
            return $decrypted_C25519_sref;    ##  status undef \ FALSE  ##
        }

        $keys{'C25519'}{$name}{'private'} = $decrypted_C25519_sref->$*;

    } elsif ( defined $keys{'C25519'}{$name}{'private'} ) {
        ##[  verifying [ unencrypted ] key pair match  ]##

        if (not <[crypt.C25519.compare_keypair]>->(
                $keys{'C25519'}{$name}{'public'},
                $keys{'C25519'}{$name}{'private'}
            ) // FALSE
        ) {
            foreach my $type (qw| private public |) {
                undef $keys{'C25519'}{$name}{$type};
                delete $keys{'C25519'}{$name}{$type};
            }
            delete $keys{'C25519'}{$name};
            <[base.log]>->( 1, ':' );
            <[base.log]>->( 0, ': private and public keys do not match .,' );
            <[base.log]>->( 1, ':' );
            <[base.logs]>->( ': none of the keys loaded for %s', $name );
            <[base.log]>->( 1, ':' );

            return FALSE;    ##  false  ##
        }
    }

    if ( defined $B32_secret_key ) {    ##[ decode \ decrypt secret key ]##
        $keys{'C25519'}{$name}{'secret'} = decode_b32r $B32_secret_key;
        if ( not defined $keys{'C25519'}{$name}{'secret'} ) {
            <[base.logs]>->( 0, 'error at BASE32 decoding [ .secret key ]' );
            goto SKIP_SECRET_KEY_LOADING;
        }
        ( my $key_status )
            = <[crypt.C25519.get_type_from_key_str]>
            ->( $keys{'C25519'}{$name}{'secret'} );

        if ( not defined $key_status ) {
            <[base.logs]>->( 0, ': secret key format not valid : %s', $name );
            goto SKIP_SECRET_KEY_LOADING;
        }
        ## stripping prefix ##
        substr( $keys{'C25519'}{$name}{'secret'}, 0, 2, '' );

        if ( $key_status->{'encrypted'} == TRUE ) {
            my $decrypted_C25519_sref
                = <[crypt.C25519.decrypt_secret_key]>->(
                $keys{'C25519'}{$name}{'secret'},
                $key_password,
                $keys{'C25519'}{$name}{'public'},
                $keys{'C25519'}{$name}{'private'},
                $test_key_chksum
                );
            if ( ref $decrypted_C25519_sref ne qw| SCALAR | ) {
                <[base.logs]>->(
                    0, ': secret key decryption failed : %s', $name
                );
                goto SKIP_SECRET_KEY_LOADING;
            }
            $keys{'C25519'}{$name}{'secret'} = $decrypted_C25519_sref->$*;
        }
    }
SKIP_SECRET_KEY_LOADING:

    ##  lock key in memory to not never swap it to disk  ##
    IO::AIO::aio_mlock( $keys{'C25519'}{$name}{'private'}, 0, 64 )
        if exists $keys{'C25519'}{$name}{'private'};
    IO::AIO::aio_mlock( $keys{'C25519'}{$name}{'secret'}, 0, 32 )
        if exists $keys{'C25519'}{$name}{'secret'};

    return TRUE;    ## true ##

} else {
    delete $keys{'C25519'}{$name};
    delete $keys{'C25519'} if not keys $keys{'C25519'}->%*;
    <[base.logs]>
        ->( 0, "'%s' key pair not found or not readable ..,", $name );
    <[base.logs]>->( 0, " ::[ expected in : '%s' ]::", $key_dir );

    return FALSE;    ##  false  ##
}

#,,.,,...,.,,,,,.,...,.,.,.,,,,,,,.,,,,.,,,..,..,,...,...,.,,,...,,.,,,..,.,,,
#LUT2DZKWUOP2O5UHCSM4MNUQ5YBIMUAV72TPAWQH3UFJBG723IKHAGKHFNU2LNP3SWCGL7FJPS27Y
#\\\|TD6CXJ5OM6IOSB5CX2GKP3RQTT2HQXXB674BYPVI5TFZD7PHEN5 \ / AMOS7 \ YOURUM ::
#\[7]GYHON6UJV4OSQYZAOOA2CM77JJE3KZ4WLVK6MNETNU5YLHSBAUAQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
