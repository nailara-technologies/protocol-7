## [:< ##

# name  = base.file.open
# args  = <file_path>[, <encoding>][, <mode>][, <create>[, perm]]
# descr = returns file handle of to be opened file

my $requested_file_path = File::Spec->canonpath( shift // '' );
my @encoding = ( shift // '' );    # optional encoding type [ i.e. ':raw' ]
my $mode     = shift // qw| < |;
my $create   = shift // FALSE;
my $perm     = shift // 0664;

$perm = oct($perm) if index( $perm, qw| 0 |, 0 ) == 0;

## sysopen FILEHANDLE,FILENAME,MODE,PERMS ##

if ( not length $requested_file_path ) {
    <[base.log]>->(
        0, '< file.open > expected <filename> argument ' . <[base.caller]>
    );
    return undef;
}

if ( $create and not -f $requested_file_path ) {    ##  create file  ##
    if ( not sysopen( my $fh, $requested_file_path, O_CREAT(), $perm ) ) {
        <[base.s_warn]>->(
            "cannot create file '%s' [ %s ]",
            $requested_file_path, <[base.str.os_err]>
        );
        return undef;
    } elsif ( not close($fh) ) {
        <[base.s_warn]>->(
            "error at close() call on '%s' [ %s ]",
            $requested_file_path, <[base.str.os_err]>
        );
        return undef;
    }
}

if ( $mode eq qw| < | and not -f $requested_file_path ) {
    <[base.logs]>->(
        0, "< file.open > file '%s' not found %s",
        $requested_file_path, <[base.str.os_err]>, <[base.caller]>
    );
    return undef;
}

my $req_file_fh;
if (not
    open( $req_file_fh, join( ' ', $mode, @encoding ), $requested_file_path )
    or not fileno $req_file_fh ) {
    <[base.logs]>->(
        0, "< file.open > cannot to open file '%s' [ %s ] %s",
        $requested_file_path, <[base.str.os_err]>, scalar <[base.caller]>
    );
    return undef;
}

if (index( $mode, qw| < | ) == -1   ##  when not read mode  ##
    and                             ## update file permissions if different ##
    sprintf( '%#o', File::stat::stat($requested_file_path)->mode & 0777 ) ne
    sprintf( '%#o', $perm )
) {
    if ( not chmod( $perm, $requested_file_path ) ) {
        <[base.logs]>->(
            0,
            "< file.open > cannot chmod[%#o] file '%s' [ %s ] %s",
            $perm,
            $requested_file_path,
            <[base.str.os_err]>,
            scalar <[base.caller]>
        );
        if ( index( $mode, qw| >> | ) == -1 ) {    ## when not append mode ##
            unlink($requested_file_path)           ## remove file again ##
                or <[base.s_warn]>->(
                'unlink[%s] %s',
                $requested_file_path, <[base.str.os_err]>
                );
        }
        return undef;
    }
}

return $req_file_fh;

#,,,,,.,,,.,.,,.,,,.,,...,...,.,,,..,,.,,,,.,,..,,...,...,,..,,.,,.,,,..,,...,
#4N535ZRTKQ3RUOF3T6VCT755N2XO5UYYWHAXOB4FSJ3SX4TMNW7YAXHFOE4AV5SFTWHXK7JP444VE
#\\\|2FJAMMAGE4UFUGQPPKLMYZCURKM3KABTOMBVMWO266WHJIRQ22O \ / AMOS7 \ YOURUM ::
#\[7]NDHN35IPINXAWWHTJJKBX3CDNUWHSOVATTFS54I227OES2TXE2CA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
