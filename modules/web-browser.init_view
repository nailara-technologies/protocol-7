## >:] ##

# name = web-browser.init_view

my $id = shift;

my $bg_color = <web-browser.bg_color> // '#000013';

my $filter_events = 1;

################################################################################
##  following signals/events need to be managed if usr interaction is desired ##
################################################################################

%{<web-browser.blocked_signal_types>} = map { $ARG => 1 } qw(
    close
    print
    run-as-modal
    context-menu
    authenticate
    decide-policy
    script-dialog
    enter-fullscreen
    leave-fullscreen
    show-option-menu
    run-file-chooser
    show-notification
    run-color-chooser
    permission-request
);

##
#

%{<web-browser.blocked_event_types>} = map { $ARG => 1 } qw(
    scroll
    key-press
    key-release
    button-press
    2button-press
    3button-press
    motion-notify
    button-release
    run-file-chooser
);

#
##

delete @{<web-browser.blocked_event_types>}{'scroll'}
    if <web-browser.cfg.user_can_scroll>;

delete @{<web-browser.blocked_event_types>}{qw(key-press key-release)}
    if <web-browser.cfg.allow_text_edit>;

delete @{<web-browser.blocked_event_types>}{qw(button-press button-release)}
    if <web-browser.cfg.links_clickable>;

my $overlay = <web-browser.gtk_obj.overlay>;

my $scrolled_window = Browser::ScrolledWindow->new;

#my $scrolled_window = Gtk3::ScrolledWindow->new;
#$scrolled_window->set_policy( 'always', 'always' );

my $style_context = $scrolled_window->get_style_context();
$style_context->add_provider( <web-browser.gtk_obj.css_prov>, -1 );

my $view
    = Browser::WebView->new_with_context(<web-browser.gtk_obj.web_context>);

<web-browser.scr_win>->{$view} = $scrolled_window;

##[LLL] seems to not work., check why..,
# my $bg_rgba = Gtk3::Gdk::RGBA->new();
# $bg_rgba->parse('#0000FF');
# $view->set_background_color($bg_rgba);
##

$view->load_alternate_html( "<html><body bgcolor=\"$bg_color\"></body><html>",
    '[init:blank]' );

<web-browser.view_index>->{$view} = $id;

map {    # filtering blocked signal types
    $view->signal_connect( $ARG, sub { return 1 } )
} keys %{<web-browser.blocked_signal_types>};

$view->signal_connect
    (    # filtering all events according to blocklist setup above
    'event',
    sub {
        my $v    = shift;
        my $evt  = shift;
        my $type = $evt->type();

        return 1 if exists <web-browser.blocked_event_types>->{$type}; # block
        ## say "\n [ event : $type ]\n";
        if ( index( $type, 'key' ) == 0 )
        {    # block key presses outside input fields
            return 1               if !$v->can_paste_clipboard();
            $v->delete_selection() if $v->can_copy_clipboard();
        }

      # elsif ( index( $type, 'visibility-notify' ) == 0 ) {  ## track visible
      # }

        ## [LLL] create event handler [ sub-routine naming convention ] ##

        return 0;    # allow the rest
    }
    ) if $filter_events;

$view->signal_connect(    ### LLL: <-- check if ever called, remove .,
    'size_allocate',
    sub {
        my $view       = shift;
        my $view_index = <web-browser.view_index>->{$view};
        my $scrw       = <web-browser.gtk_obj.scrolled_window>->{$view_index};
        my $hadj       = $scrw->get_hadjustment();
        my $vadj       = $scrw->get_vadjustment();
        my $page_width = $hadj->get_upper();
        my $page_height   = $vadj->get_upper();
        my $window_height = <web-browser.window.size.y>;
        return 0;
    }
);

my $user_scrolling = <web-browser.cfg.user_can_scroll>;
$scrolled_window->set_kinetic_scrolling($user_scrolling);

if ( $user_scrolling and <web-browser.cfg.allow_scrollbars> ) {
    $scrolled_window->set_policy( 'automatic', 'automatic' );
} else {
    $scrolled_window->set_policy( 'external', 'external' );
}

# blocking website from overriding scrollbar policy
# $view->get_main_resource->signal_connect('scrollbars-policy-changed',
#                                                    => sub { return 1 } );

<web-browser.zoom_level>  //= 1;
<web-browser.zoom_factor> //= 1;

$view->set_zoom_level( <web-browser.zoom_level> * <web-browser.zoom_factor> );

my $settings = $view->get_settings;
$settings->set_zoom_text_only( <web-browser.zoom_text_only> ? 1 : 0 );
$view->set_settings($settings);

$view->set_editable(0);

# $view->can_go_back_or_forward(0);

# $view->set_maintains_back_forward_list(0);

<[web-browser.set_properties]>->($view);

$view->set_property( 'editable', 0 );

# my $viewport = Gtk3::Viewport->new();
# $viewport->set_hexpand(1);
# $viewport->set_vexpand(1);

$scrolled_window->set_hexpand(1);
$scrolled_window->set_vexpand(1);

$scrolled_window->set_size_request( -1, -1 );

# $viewport->add($view);
# $scrolled_window->add($viewport);
$scrolled_window->add($view);

$overlay->add_overlay($scrolled_window);

# <web-browser.gtk_obj.viewport>->{$id}        = $viewport;
<web-browser.gtk_obj.scrolled_window>->{$id} = $scrolled_window;
<web-browser.gtk_obj.view>->{$id}            = $view;

#,,,,,,.,,.,,,..,,..,,,.,,.,.,.,.,,,,,.,.,..,,..,,...,..,,...,,,.,.,,,...,,,,,
#R5PKQPNI23G55F2FC6DBFCGO6UIP6W4QSD6XEY2PQSHFA374X3YIET4SQ2X7DMYN6JJHUIJUDWFXQ
#\\\|2HRCCKWZRDVGRJSU7D77PHQHYZO24E34X6DXM3C6FHMANIEOVSC \ / AMOS7 \ YOURUM ::
#\[7]MS5GLG5W2MJB3GXNETFSVP3GIOLHSA5Z5OU5IU4UHBBVAUC6AACY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
