## [:< ##

# name  = X-11.set_background_image

my $bg_image   = shift;                      ##  image path [ chksum ]  ##
my $bg_mode    = shift // <X-11.bg_mode>;    ##  hsetroot scaling modes  ##
my $set_silent = shift // TRUE;              ##  changes report log level  ##

my $image_h_flipped = delete <X-11.bg_image_flipped> // FALSE;

if ( not defined $bg_image ) {
    warn 'expected bg_image parameter <{C1}>';
    return undef;
}

## amos7-chksum ##
##
my $amos_chksum;
if ( length($bg_image) == 7 and $bg_image =~ m|^[A-Z2-7]+$| ) {
    $amos_chksum = $bg_image;
    my $path_cached = <[X-11.bg-image.cached-path-look-up]>->($amos_chksum);
    if ( not defined $path_cached ) {
        <[X-11.background-image-list]>;    ##[ updated ]##
        $path_cached = <[X-11.bg-image.cached-path-look-up]>->($amos_chksum);
    }
    $bg_image = $path_cached if defined $path_cached;
}

if ( index( $bg_image, qw| / |, 0 ) != 0 ) {    ##[ relative path ]##
## check local backgrounds directory first ##
    my $bg_gfx_path          = <X-11.bg_gfx_directory>;
    my $chk_backgrounds_path = catfile( $bg_gfx_path, $bg_image );
    $bg_image = $chk_backgrounds_path if -f $chk_backgrounds_path;
##
}

if ( not -f $bg_image ) {
    <[base.s_warn]>->( ': image not found : %s <{C1}>', $bg_image );
    return FALSE;
} elsif ( not -r $bg_image ) {
    <[base.s_warn]>->( ': image not readable : %s <{C1}>', $bg_image );
    return FALSE;
} elsif ( index( $bg_image, qw| / |, 0 ) != 0 ) {    ##[ relative path ]##
    my $bg_image_path_rel = $bg_image;
    $bg_image = abs_path($bg_image);
    if ( not length $bg_image ) {
        <[base.s_warn]>->(
            'cannot resolve abs path of %s <{C1}>',
            $bg_image_path_rel
        );
    }
}

##  absolute image path available set  ##

my @hsetroot_params;    ## [LLL] 'hsetroot' call to be replaced soon ..,
my $hsetroot_bin = <[base.required_bin_path]>->('hsetroot');
if ( not -x $hsetroot_bin ) {
    <[base.logs]>->(
        0, "cannot set bg-image : '%s' not found",
        $hsetroot_bin
    );
    return undef;
}

( my $bg_image_name = $bg_image ) =~ s|^.+/||g;
my $image_setting = $amos_chksum // $bg_image_name;

<[base.logs]>->(
    $set_silent ? 2 : 1,
    'setting background image : %s',
    $image_setting
);

##  query available hsetroot params here  ##   [LLL]
@hsetroot_params = ( sprintf( qw| -%s |, $bg_mode ), $bg_image );

my $add_options_str = '';

## apply custom options if defined ##
##
if ( <[base.is_defined_recursive]>->(qw| X-11.hsetroot.options |) ) {
    $add_options_str = <X-11.hsetroot.options>;
    $add_options_str =~ s|[\t ]{2,}| |g;    ##  clean-up spaces  ##

    ##  # color prefix  ##
    $add_options_str =~ s|(*nlb:#)([A-F0-9]{6}([A-F0-9]{2})?)|#$1|g;

    <[base.logs]>->(                        ##  reporting applied values  ##
        $set_silent ? 2 : 1, ':. custom hsetroot options [ %s ]',
        $add_options_str
    );
    push @hsetroot_params, split ' ', $add_options_str; ##  adding options  ##
}

push @hsetroot_params, qw| -fliph |    ##  flipping image when enabled  ##
    if $image_h_flipped and index( $add_options_str, qw| -fliph | ) == -1;
##

if ( system( $hsetroot_bin, @hsetroot_params ) != 0 ) {
    <[base.logs]>->(
        0, "cannot execute 'hsetroot' command [ returned %s ]", $CHILD_ERROR
    );
    return FALSE;    ##  reporting [ not successful ]  ##
} else {
    if ( $image_setting !~ m|^[A-Z2-7]{7}$| ) {    ## image path ##
        my %bg_image_pathmap    ## look-up checksum from cache ##
            = reverse <X-11.cache.bg-images.amos-path-csum>->%*;
        $image_setting = $bg_image_pathmap{$image_setting}
            if exists $bg_image_pathmap{$image_setting};
    }

    <X-11.cur_bg_image> = $image_setting;    ##  updaing variable  ##
    return TRUE;                             ##  return success  ##
}

#,,,,,,,,,,,.,...,..,,...,...,,.,,..,,,,,,,.,,.,.,...,...,..,,...,.,.,,,.,,.,,
#J6W6CFG66WTU4VFEFR4EOCLT7F4AP7RBSOJON624VPKHITP4BFPNRRB6BU24GLBYM7UZG233MVRXI
#\\\|BLIUT5MZEWDLZSAT5TWAIDG2EWN6THUMYXFNGY4G7C5CHEVBBVB \ / AMOS7 \ YOURUM ::
#\[7]EFWOEQ2R4G7ZHYLXMNWUZ5SAFSMLPRIWV7RUFYZSR3IVQ5OWK2DI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
