## [:< ##

# name  = base.chk-sum.bmw.calculate_L13_sum

my $bmw_512_bin = shift // '';

if ( length $bmw_512_bin != 64 ) {
    warn 'expecting 64 byte [binary] 512 bit BMW digest <{C1}>';
    return undef;
}

## start entropy ##
state $start_seed_num;
$start_seed_num //= unpack qw| Q |, pack qw| B64 |, '10000000' x 8;
my $bits_num = $start_seed_num;

foreach my $segment_num ( unpack qw| Q8 |, $bmw_512_bin ) {

    while ( not AMOS7::Assert::Truth::true_int($segment_num) ) {
        $segment_num = sprintf qw| %u |, $segment_num / 13;
    }

    $bits_num ^= $segment_num;    ## stringwise XOR ##

    while ( not AMOS7::Assert::Truth::true_int($bits_num) ) {
        $bits_num <<= 1;          ## make true ##
    }

}

my $result_str_B32 = encode_b32r( pack qw| Q |, $bits_num );

while (not AMOS7::Assert::Truth::is_true( $result_str_B32, 0, 1 )
    or not AMOS7::Assert::Truth::true_int($bits_num) ) {
    $bits_num = sprintf qw| %u |, $bits_num / 13;
    $bits_num <<= 5;
    $bits_num = 13 if $bits_num == 0;    ##  make sure to exit true if 0  ##
    ##  again until true  ##
    $result_str_B32 = encode_b32r( pack qw| Q |, $bits_num );
}

return $result_str_B32;    ##  13 characters  ##  [ a true value ]  ##

#,,..,,..,.,.,...,,.,,..,,...,.,,,,..,.,.,,,,,..,,...,...,..,,.,,,.,,,..,,.,.,
#OWQXXWOLKVLRI2HAF6FKGEXH36LRNXZVYGS45TUM7NSP5RLKINM3P2OSTND75JEKHTRZRXM5WTFMI
#\\\|7WS3SVARZVZVEGRTSHFQP2E6QRT5U2WJUEZ3DBJYDDUATKIPQKR \ / AMOS7 \ YOURUM ::
#\[7]GH7D3AE57HQLR7D56QBCIAFVS5FLUUED7YS4GKKHFY5ZHKZNDEDI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
