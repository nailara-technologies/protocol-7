## [:< ##

# name  = auth.auth_select

my $id     = shift;
my $method = shift;

warn "[$id] expected auth _method_ parameter" if not defined $method;

my $client_sock_fd = $data{'session'}{$id}{'handle'};

my @available_auth_methods
    = <[base.reverse-sort]>->( split( "\n", <[auth.auth_list]>->($id) ) );

if ( <[base.list_matches]>->( \@available_auth_methods, $method . '$' ) ) {

    if ( $method eq qw| zenka | and <[plugin.auth.zenka.no-keys-defined]> ) {
        <[base.net.send_to_socket]>->(
            $client_sock_fd, "FALSE no zenka authentication expected >:[\n"
        );
        return 0;
    }

    $data{'session'}{$id}{'auth'}{'method'} = $method;
    <[base.net.send_to_socket]>->( $client_sock_fd, "TRUE continue\n" );
    <[base.log]>->( 1, "[$id] selected auth method '$method'.," );
    return 1;
} else {
    my $link_type
        = $data{'handle'}{$client_sock_fd}{'link'};

    <[base.net.send_to_socket]>->(
        $client_sock_fd,
        "FALSE not available \ enabled, see 'list' command\n"
    ) if $data{'session'}{$id}{'counter'}{'auth'}{'select'}{'errors'} < 2;
    my $m_len = 23;
    substr( $method, $m_len - 3, length($method) - $m_len + 3, '..,' )
        if length($method) > $m_len;
    <[base.logs]>->( 1, '[%d] requested auth-method not supported.,', $id );
    <[base.logs]>->( 2, qq|:%9s: requested :."%s".:|, '', $method );
    <[base.logs]>->(
        2,  ':%9s: : available methods .:. %s-link',
        '', $link_type
    );
    map { <[base.logs]>->( 2, ":%9s: : :.. %s", '', $ARG ) }
        @available_auth_methods;
    return 0;
}

#,,,.,,,,,..,,,..,,.,,.,.,,,,,.,,,,,.,,,,,,,.,..,,...,...,..,,.,,,..,,,..,...,
#HHLNKQHBRW7RGSU64VM6LLUXFOHPBY2BIDFYA5AI5VEB6ETS62XSHC6DC3MM3HX4SHENGRLRNGORW
#\\\|CZSMTRUNPWSX5YIOXY3MPPKRZPC3AQ4GMYAJ3RVTIVB3M3YGE3I \ / AMOS7 \ YOURUM ::
#\[7]QON7XBAVCLWCUQQZ7IIK5PT5QUGGI5JQG3MUCAQNNOB5RIO5J4AA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
