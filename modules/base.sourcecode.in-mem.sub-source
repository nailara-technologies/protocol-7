## [:< ##

# name  = base.sourcecode.in-mem.sub-source
# descr = returns scalar-ref to %code subroutine [deparsed] sourcecode

my $code_name = shift;    ## %code hash [ key ] subroutine name ##

##  translate warning bits states perl warning pragma lines  ##
##
my $parse_warnings     = 5;    ## true ##
my $parse_global_vars  = 5;    ## true ##
my $strip_header_lines = 5;    ## true ##

my $header_strip_chksum = qw| 21849019 |;
my $prefix_spaces =

    my @global_hashes = qw|  code  data  colors  keys  |;

## NOTE <<< collapses some cases wrong, check result for nothing missing >>>

my @deparser_options = qw| -sC |;    ##  B::Deparse settings  ##

if ( not defined $code_name ) {
    warn 'expected subroutine name param <{C1}>';
    return undef;
} elsif ( not defined $code{$code_name} ) {
    <[base.s_warn]>->( 'sub-routine %s not found <{C1}>', $code_name );
    return undef;
}

##  initializing source deparser object  ##
##
my $parse = B::Deparse->new(@deparser_options);
my $source_code;

## sample current warning state ##
##
## my $warn_state_href = <[base.get_warnings]>;   ## <-- not used yet., ##
#
## my $bits = warnings::bits(<[base.get_warnings]>);
## say '< bits > ', $bits;

my $global_hash_reg = join( qw. | ., @global_hashes );

my $bits_re = qr|^ *BEGIN \{\$\{\^WARNING_BITS\} = ("[^"]+")\}$|;

##  deparse subroutine from memory  ##
if ($parse_warnings) {

    my $coderef = $code{$code_name};

    my $parsed_src;
    $source_code = sprintf "%s\n", $parse->coderef2text($coderef);

    foreach my $src_line ( split "\n", $source_code ) {
        if ( $src_line =~ $bits_re ) {

            my $bits     = eval $LAST_PAREN_MATCH;
            my $prag_src = <[base.warnings.compact_diff_to_pragma]>->($bits);
            $src_line =~ s|^([ \t]+).+$|$1$prag_src|;

            $parsed_src .= $src_line . "\n";
        } else {
            $parsed_src .= $src_line . "\n";
        }
    }

    $source_code = $parsed_src;    ##  overwriting with result  ##

} else {

    $source_code = sprintf "%s\n", $parse->coderef2text( $code{$code_name} );

}

## add code parsers here ##
##
if ($parse_global_vars) {
    $source_code =~ s,([\$%])main::(*pla:($global_hash_reg)),$1,g;
}

# removing obsolete B::Deparse subroutine header ##
if ($strip_header_lines) {
    my $prefix_spc = $prefix_spaces ? ' ' x $prefix_spaces : undef;
    <[base.strip_chksum_lines]>->(
        \$source_code, $header_strip_chksum, $prefix_spc
    );
}

return \$source_code;    ## scalar ref to source code ##

#,,,.,,.,,...,,,.,,,.,,,.,..,,..,,.,,,,,,,,,.,..,,...,..,,,..,.,,,...,.,.,...,
#5KINFTZIJ2XL3OXX67FHD2TYKVFE6U4BSY3A5MV57B27VRRIXC7HPCRTQZAPHUS7QCGWBZRGSQQCO
#\\\|KD7V3FNXXET23WXGLGHA73PETCKMV6ENJB6HIYGKU3QA6VGYHYZ \ / AMOS7 \ YOURUM ::
#\[7]IBC7ODDJCPJAUC4HGSPH3BFBETZTCDXPESSDNKTPHVAJOKF476BY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
