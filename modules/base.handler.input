## >:] ##

# name  = base.handler.input
# descr = call input handler

my $event = shift;
my $id    = $event->w->data;

if ( not defined $id or not defined $data{'session'}{$id} ) {
    my $id = '!!!' if not defined $id;
    $event->w->cancel;
    ## call cleanup handler.., [protocol.,]                              [LLL]
    <[base.logs]>->(
        0, '[%d] input handler of session was already closed.,', $id
    );
    return undef;
}

my $session = $data{'session'}{$id};
my $fd      = $session->{'input'}->{'handle'} // $session->{'handle'};

my $type      = $data{'handle'}{$fd}{'link'};
my $proto     = $session->{'protocol'};
my $state     = $session->{'state'};
my $mode      = $data{'handle'}{$fd}{'mode'};
my $handler   = $session->{'input'}->{'handler'};
my $start_len = length( $session->{'buffer'}->{'input'} );

my $handle_href = $data{'handle'}{ $session->{'handle'} };

$session->{'shutdown'}       //= 0;
$session->{'flush_shutdown'} //= 0;

## [ linewise | bytewise | binary ] ##
$session->{'read-mode'}     //= qw| linewise |;
$session->{'bytes-to-read'} //= 0;

if ( defined $code{$handler} and ref $code{$handler} eq qw| CODE | ) {

    my $ret_code = $code{$handler}->($event);

    ## return code 0 ## command processed  [ removed from buffer ]
    ## return code 1 ## ..not complete.,   [ more data expected. ]

    ## call [registered] error handler in next case ##                   [LLL]
    <[base.s_warn]>->( 'return code of %s not defined', $handler )
        and $ret_code = 2
        if not defined $ret_code;
    <[base.s_warn]>->(
        "not expected return code from %s : '%s'",
        $handler, $ret_code
        )
        and $ret_code = 2
        if $ret_code !~ m|^\d+$|;
    ##

    $session->{'complete'} = $ret_code == 1 ? 0 : 1;

    ## return code 2 ## terminate session and close connection ##
    if (   $ret_code == 2
        or $session->{'shutdown'}
        or $session->{'flush_shutdown'} ) {
        $event->w->cancel;    ##  no longer watching buffer content  ##

        ##  secure buffer erasing  ##
        <[base.erase_buffer_content]>->( \$session->{'buffer'}->{'input'} );

        $session->{'flush_shutdown'} = 1
            if not $session->{'shutdown'}
            and not $session->{'flush_shutdown'};

        <[base.logs]>->(
            2, '[%d] stopped input processing [ session shutdown ]', $id
        );
    }
    ##
} else {

    ##  stopping variable watcher to modify buffer content  ##
    $event->w->stop;

    ##  secure buffer erasing  ##
    <[base.erase_buffer_content]>->( \$session->{'buffer'}->{'input'} );

    $event->w->start;    ##  modification complete restarting watcher  ##

    <[base.logs]>->(
        0,   "[%d] input handler '%s' not defined, buffer emptied.,",
        $id, $handler
    );

    if (   $session->{'mode'} eq qw| client |
        or $session->{'mode'} eq qw| in | ) {
        $session->{'shutdown'} = 1;
    }
}

my $len = length( $session->{'buffer'}->{'input'} );
return $event->w->cancel if not defined $len;   ## <-- buffer 'not defined' ##

if (    $len < <size.buffer.input>
    and not $session->{'shutdown'}
    and not $session->{'flush_shutdown'} ) {

    ##  deferred restart [ when idle ]  ##
    <[event.io_idle_restart]>->($event)    ##  required ?  ##
        if not $event->w->is_active;

    $data{'watcher'}{'io'}{'transfer'}->start
        if not $data{'watcher'}{'io'}{'transfer'}->is_active;

    if ( $handle_href->{'paused'} //= 0 ) {    ##  restart reading  ##
        <[base.log]>->( 2, 'restarting input handler =)' );
        if ( defined $handle_href->{'paused-watcher'} ) {
            $handle_href->{'paused-watcher'}->start
                if not $handle_href->{'paused-watcher'}->is_active;
            delete $handle_href->{'paused-watcher'};
        } else {
            warn 'paused input watcher not registered';
        }
        $handle_href->{'paused'} = 0;
    }
}

if ( $session->{'read-mode'} eq qw| linewise | ) {

##  buffer contains complete line ?  ##
    $session->{'watcher'}->{'input_buffer'}->now
        if $len
        and $len != $start_len
        and not $session->{'shutdown'}
        and not $session->{'flush_shutdown'}
        and index( $session->{'buffer'}->{'input'}, "\n" ) >= 0;
}

#,,..,,..,,..,,,,,..,,..,,,,.,,,.,,.,,.,,,...,..,,...,...,,,.,,..,.,.,,.,,,.,,
#FDBDDWTSGCZP6MIERDN7ECKY42TVM3CDSJFXURJJWGHIDY4YNL4X54FIMUYLVMLMEJ7LWI3N7YJH2
#\\\|RK6LXUSDCQ4HV5UB5GJGKSFQTV5QQ76H5AANJBDXYZYG4W6EDQC \ / AMOS7 \ YOURUM ::
#\[7]TU3EB3YKTLTWLJINSUTVCFPBB7AOH4FHA435ZQCQPWEDVWS3AGAA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
