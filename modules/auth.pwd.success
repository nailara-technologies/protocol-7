## [:< ##

# name  = auth.pwd.success

my $uname_str    = shift;
my $password_str = shift;

if ( not defined $uname_str ) {
    warn 'user param not defined <{C1}>';
    return undef;
} elsif ( not defined $password_str ) {
    warn 'passwd string param not defined <{C1}>';
    return undef;
} elsif ( not <[base.is_defined_recursive]>->(qw| auth.setup.usr |) ) {
    warn 'no user set-up found';
    return undef;
}

#######
<[base.log]>->( 0, 'called deprecated auth.pwd implementation.' );
return FALSE;
############

return 0 if not length $uname_str;    ## not authorized \ username required ##

my $key_href
    = <[base.resolve_key]>->( sprintf qw| auth.setup.usr.%s |, $uname_str );

##  no such user entry in set-up \ no access  ##
return 0 if not defined $key_href;

if ( length $key_href->{'r-type'} or not defined $key_href->{'r-data'} ) {
    <[base.s_warn]>->(
        'error in user set-up : entry for %s not valid', $uname_str
    );
    return 0    ##  entry type not valid \ access denied  ##
}

if (FALSE) {

    ## to be replaced with AMOS7::13::key_56 ##
    ##
    ## $key_href->{'r-data'} eq uc <[ chk-sum.sha.1 ]>->($password_str) ) {

    ##[  authorized .., ]##
    ##
    return TRUE;    ## true ##

} else {
    return FALSE;    ##  false  ##
}

#,,..,,..,.,,,,..,,..,..,,.,.,,,,,,,.,,..,..,,..,,...,...,..,,,,.,,.,,..,,,,,,
#ZQPKX56PKMURPIMH7ITW2CVBPOHQY5WX2XMW2EQNXTWYWJB2SIYJAACPCPC3GQIQKA2AKYFEIERYW
#\\\|5ZIVWLVZVSHHUF4D43OFRJFYY3YZDGBEGAWITTHGLAXFXJMX7JR \ / AMOS7 \ YOURUM ::
#\[7]XJ5X3V2OVAWIQEYYAGZZ2L7QYPOYXJBKHOI3MW64OP5B73WEZWBA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
