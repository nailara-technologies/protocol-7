## >:] ##

# name  = devmod.cmd.exec-sub
# param = <sub_name>
# descr = run subroutine and return output

my $support_params = <devmod.exec-sub.allow-params> // 0;    ##  config  ##

( my $sub_name, my @params )
    = split( m| +|, $call->{'args'} );    ## quotes not supported ##

my $timed      = 0;                       ##  create timing statistics  ##
my $resolution = 7;

if (    @params
    and length $sub_name == 7
    and index( $sub_name, qw| :timed: |, 0 ) == 0 ) {
    $sub_name = shift @params;    ##  sub name is next one  ##
    $timed    = 5;                ## true ##
}

return {
    'mode' => qw| false |,
    'data' => 'expected subroutine name parameter'
    }
    if not length $sub_name;
return {
    'mode' => qw| false |,
    'data' => 'subroutine parameters are not supported'
    }
    if @params and not $support_params;

return { 'mode' => qw| false |, 'data' => 'no such subroutine' }
    if not exists $code{$sub_name};

my $durationstr = '';
my $time_start  = <[base.time]>->($resolution) if $timed;
my @sub_output  = eval { $code{$sub_name}->(@params) };

if ($timed) {
    my $run_duration = <[base.time]>->($resolution) - $time_start;
    $durationstr = sprintf "\n: duration : %.*f\n\n", $resolution,
        $run_duration;
}

my $err_str;
if ( length $EVAL_ERROR ) {
    $err_str = <[base.format_error]>->($EVAL_ERROR);
    $err_str = 'undefined error' if not length $err_str;
}

my $err_msg;
$err_msg = 'errors during subroutine execution [ details logged ]'
    if defined $err_str;
$err_msg = 'undefined subroutine output'
    if not defined $err_msg and @sub_output == 0
    or @sub_output == 1 and not defined $sub_output[0];

<[base.logs]>->( 0, '< %s > %s', $sub_name, $err_str )
    if defined $err_str;

return { 'mode' => qw| false |, 'data' => $err_msg } if defined $err_msg;

map { $ARG //= qw| UNDEF | } @sub_output if @sub_output > 1;

map { ( $ARG = Dumper($ARG) . "\n" ) =~ s|^\$VAR1 =|| if length ref $ARG }
    @sub_output;

my $rep_mode = qw| true |;

foreach my $sub_output_str (@sub_output) {
    $sub_output_str =~ s|\n$|| if $sub_output_str =~ m|\n|s == 1;
    $sub_output_str =~ s|^ {2,}([\]}]);\n| $1\n|smg;
    $rep_mode = qw| size | if $sub_output_str =~ m|\n|;
}

my $out_size = length join '', @sub_output;

$rep_mode = qw| size | if $timed or not $out_size;

$sub_output[$#sub_output] .= "\n"
    if $rep_mode eq qw| size |
    and $out_size
    and $sub_output[$#sub_output] !~ m|\n$|;

return {
    'mode' => $rep_mode,
    'data' => $durationstr
        . join(
        scalar( $rep_mode eq qw| true | ? ', ' : "   ,\n" ),
        @sub_output
        )
        . scalar( $timed ? "\n\n" : '' )
};

#,,..,.,,,...,,..,.,,,...,,..,..,,,.,,,..,.,.,..,,...,...,...,..,,.,,,.,,,.,.,
#TFOKQLCDY7D7ZSCZNPTABY4KDIBJOYA6ZCOBENKMPAWF7HCTMFUHNCSUB66KXLRVLV3BWFIV6WTYY
#\\\|SL3DZF6P4OKCMBA6PPXGAJLLZEAV55UBAML2MTPLSPJD2BS6PZ6 \ / AMOS7 \ YOURUM ::
#\[7]EPT66N477U7BHH5YKU2AJHBQVELAJSCA3DY7IUUXS625KGA6J2BA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
