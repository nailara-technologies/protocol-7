## [:< ##

# name = X-11.post_init

<X-11.initialized>         //= FALSE;
<X-11.host_mode_unchanged> //= TRUE;

my $modes_re = <X-11.modes_re>;

if ( <X-11.mode> !~ $modes_re ) {
    <[base.log]>->(
        0, sprintf( "configured X-11 mode '%s' is not valid", <X-11.mode> )
    );
    <[base.exit]>->(qw| 0110 |);
}
<X-11.params>->{<X-11.mode>} //= '';

if ( <X-11.mode> eq qw| host | ) {
    if ( <[base.cfg_bool]>->(<X-11.host_mode_unchanged>) ) {
        <X-11.keep_unchanged>  = TRUE;
        <X-11.keep_background> = TRUE;
    }
    <X-11.display.host> //= defined $ENV{'DISPLAY'} ? $ENV{'DISPLAY'} : ':0';
} else {
    <X-11.display>->{<X-11.mode>} //= qw| :1 |;
    <X-11.keep_unchanged> = FALSE;
}
<[base.logs]>->(
    0, "<< X-11 mode changed to '%s', restart required >>", <X-11.mode>
) if defined <X-11.old_mode> and <X-11.mode> ne <X-11.old_mode>;

## image checksum cache file [ in /var/protocol-7/X-11/.., ] ##
##
<X-11.path.chksum_cache_name> //= qw| bg-image.name-checksum.cache |;

##  create '/var/protocol-7/X-11/' to store checksum cache  ##
<[base.path-set-up.check-zenka-paths]>->(TRUE);

## loading checksum cache ##
<[X-11.background.chksum-cache.reload_from_file]>;

return 0 if <X-11.initialized>;

<X-11.connect_timeout> //= 7.7;
<X-11.orientation>     //= qw| normal |;
<X-11.old_mode> = <X-11.mode>;
my $mode     = <X-11.mode>;
my $bg_col   = <X-11.bg_color>;
my $bg_image = <X-11.bg_image>;
my $bin_name;
my $server_bin;
my $server_pid;
my $server_params;

<X-11.params>->{'xephyr'} .= ' -glamor'
    if $mode eq qw| xephyr |
    and <X-11.orientation> eq qw| normal |
    and !<X-11.disable_glamor>;

## start-up \ connect ##
die 'X-11.mode is not defined' if not defined $mode or not length $mode;

if ( $mode ne qw| host | ) {

    $bin_name = $mode eq qw| xorg | ? qw| Xorg | : qw| Xephyr |;

    $bin_name = qw|  Xvfb   | if $mode eq qw|  xvfb   |;
    $bin_name = qw|  Xnest  | if $mode eq qw|  xnest  |;
    $bin_name = qw| nxagent | if $mode eq qw| nxagent |;

    $server_bin = <X-11.bin_path>->{$bin_name};

    die "X-11 binary '$bin_name' not found. [ installed ? ]"
        if not defined $server_bin or not -x $server_bin;

    <[base.logs]>->( 2, ':: xsrv-bin-path :: %s', $server_bin );

    $server_params
        = join( ' ', <X-11.display>->{$mode}, <X-11.params>->{$mode} );

    my $bin_name_lc = lc $bin_name;
    my $cmd_line    = sprintf '%s %s 2>&1 |', $server_bin, $server_params;

    <[base.logs]>->( 1, "starting '%s' server process .,", $bin_name_lc );

    # LLL: change uid for 'xephyr'..,
    $server_pid = open( my $out_fh, $cmd_line );

    if ( not defined $server_pid or length $EVAL_ERROR ) {
        my $err_reason
            = length $OS_ERROR
            ? sprintf( ': %s', <[base.str.os_err]> )
            : qw| ! |;
        <[base.logs]>->(
            0,            ': cannot start %s-server%s',
            $bin_name_lc, $err_reason
        );
        <[base.exit]>->(2);
    } else {
        <[base.logs]>->(
            ": '%s' process started [PID:%s]",
            $bin_name_lc, $server_pid
        );
        <X-11.pid> = $server_pid;

        ### registering server process id ###
        push <system.kill_list>->@*, <X-11.pid>;
        <[base.zenki.report_child_pid]>->($server_pid);
        if ( $mode eq qw| xorg | and $EFFECTIVE_USER_ID == 0 ) {
            <[base.change_prio]>->( <X-11.change_priority>, <X-11.pid> );
        }    ## use prio child otherwise ## [ LLL ]
    }

    <[event.add_io]>->(
        {   'fd'      => $out_fh,
            'handler' => qw| X-11.handler.server_output |,
            'data'    => { qw| bin | => $bin_name, qw| pid | => $server_pid }
        }
    );
} else {
    $bin_name = '[host] x11';

    <X-11.connect_timeout> = 15 if <X-11.connect_timeout> < 15;
    <[base.log]>->( 1, 'running in host mode [ using existing X11-server ]' );

    ##  drop before connecting., ##
    <[base.root.drop_privs]>->(<system.AMOS-user>);
}

<X-11.obj_bin_name> = $bin_name;
my $bin_name_lc = lc($bin_name);

## registering custom error handlers ###
$data{'base'}{'warn-match-handler'}{'X11/Protocol.pm:75'}
    = qw| X-11.handler.protocol-warnings |;
##  $self->{'connection'}->get( @ARG )  ##

<X-11.obj>->{'error_handler'} = sub {
    ( my $self, my $err_data ) = @ARG;
    chomp( my $err_str = $self->format_error_msg( $err_data // '' ) );
    $err_str =~ s|\s*\n+\s*| << ! >> |g;
    $err_str = 'unknown protocol error [ X-server crashed ? ]'
        if !length($err_data);
    warn( sprintf '[protocol-error] %s <{C7}>', $err_str );
    ## reconnect here, if not successful call: ## [ LLL ]
    #  <[X-11.error_handler]>->($err_str);
};
##

<[base.logs]>->( ': connecting to X display [%s]', <X-11.display>->{$mode} );

<[X-11.connect_X11]>;

<[base.logs]>->( ': : link to %s established [ responsive ]', $bin_name_lc );

## extensions ##

# <[base.log]>->( 1, ": initializing extensions ..," );
# <X-11.obj>->init_extensions;
# print STDERR Dumper( keys( %{ <X-11.obj>->{'ext'} } ) );

my $randr_expected = TRUE;
my $randr_reason   = ':|';
if ( <X-11.mode> =~ m{^(xephyr|nxagent)} ) {
    $randr_reason = sprintf( '[ %s ]', <X-11.mode> );

    ##  $randr_expected = FALSE;
}
if ( $randr_expected and <X-11.obj>->init_extension('RANDR') ) {
    <[base.log]>->( 1, ": : RANDR support present =)" );
    eval { <X-11.obj>->RRQueryVersion( 1, 0 ); };
    if ($EVAL_ERROR) {
        <X-11.has_randr> = FALSE;
        ( my $err_msg = $EVAL_ERROR ) =~ s| at .+\n$||;
        <[base.log]>->( 0, ': : : initialization error., RANDR disabled..,' );
        <[base.logs]>->(
            0,
            ": : : ::[ %s ]::",
            <[base.format_error]>->( $err_msg, -1 )
        );
    } else {
        <X-11.has_randr> = TRUE;
    }
} else {
    <[base.logs]>->( ': : no RANDR support %s', $randr_reason );
    <X-11.has_randr> = FALSE;
}

if ( <X-11.obj>->init_extension('DPMS') and <X-11.obj>->DPMSCapable ) {
    <[base.log]>->( 1, ': : DPMS is supported =)' );
    eval { <X-11.obj>->DPMSGetVersion() };
    if ($EVAL_ERROR) {
        <X-11.has_dpms> = FALSE;
        ( my $err_msg = $EVAL_ERROR ) =~ s| at .+\n$||;
        <[base.log]>->( 0, ': : : initialization error., DPMS disabled..,' );
        <[base.logs]>->( 0, ': : : ::[ %s ]::', $err_msg );
    } else {
        <X-11.has_dpms> = TRUE;
    }
} else {
    <[base.log]>->( 1, ': : DPMS not supported :|' );
    <X-11.has_dpms> = FALSE;
}

if ( <X-11.obj>->init_extension('Composite') ) {
    <[base.log]>->( 1, ': : X-11 is composited =)' );
    eval { <X-11.obj>->CompositeQueryVersion(); };
    if ($EVAL_ERROR) {
        <X-11.is_composited> = FALSE;
        ( my $err_msg = $EVAL_ERROR ) =~ s| at .+\n$||;
        <[base.log]>->(
            0, ': : : initialization error., Composite extension disabled..,'
        );
        <[base.logs]>->( 0, ': : : ::[ %s ]::', $err_msg );
    } else {
        <X-11.is_composited> = TRUE;
    }
} else {
    <X-11.is_composited> = FALSE;
    <[base.log]>->( 1, ': : X-11 is not composited :|' );

}

## display connected ? ##
<X-11.display_connected.any> //= TRUE;

<[X-11.init_display_states]> if <X-11.mode> eq qw| xorg |;

if ( <X-11.mode> eq 'xorg' and !<X-11.display_connected.any> ) {

    <X-11.wait_for_display.callback> = 'X-11.callback.display_connected';
    <[base.log]>->( 0, '<< display is off \ not connected >>' );

    <[X-11.start-up.show-screen-size]>;

  # polling for screen sizes, otherwise drm display status never gets updated.
    <X-11.timer.wait_for_display> = <[event.add_timer]>->(
        {   'after'    => 0.13,
            'interval' => 0.7,
            'handler'  => qw| X-11.handler.poll_size_list |
        }
    );
    <[base.log]>->( 0, '    : waiting for a display to restart X-11..,' );

    if ( defined <X-11.host_mode.min_size>
        and <X-11.host_mode.min_size> =~ m|^\d+x\d+$| ) {
        <[base.logs]>->(
            0, '    : setting min_size [ %s ]',
            <X-11.host_mode.min_size>
        );
        <[X-11.cmd.set_screen_size]>
            ->( { 'args' => <X-11.host_mode.min_size> } );
    }

} elsif ( <X-11.mode> eq qw| xorg | ) {
    <[base.log]>->( 1, ': : display is on \ connected =)' );

    my @max_size = <[X-11.max_screen_size]>;

    ( my $size_x, my $size_y ) = <[X-11.start-up.show-screen-size]>;

    # LLL: make configurable..,
    if (    <X-11.has_randr>
        and defined <X-11.video_driver>
        and <X-11.video_driver> ne qw| qxl |
        and (  $max_size[0] > $size_x
            or $max_size[1] > $size_y )
    ) {
        <[base.log]>->( 0, '<< X-11 cannot select highest screen size >>' );
        <[base.log]>->(
            0, " :. mitigating ., [ reloading gfx kernel module ]"
        );
        <[event.add_timer]>->(
            {   'after'   => 0.13,
                'handler' => qw| X-11.callback.force_driver_reload |
            }
        );
    } else {
        <X-11.display_status.handler> = qw|X-11.handler.display_power_state|;
    }
} else {
    <[X-11.start-up.show-screen-size]>;
}

if (<X-11.has_randr>) {

    ##  screen orientation  ##
    <[X-11.cmd.rotate-screen]>->( { 'args' => <X-11.orientation> } )
        if not <X-11.keep_unchanged>;

    map {    ## custom xrandr settings ##
        system( qw| /usr/bin/xrandr |,
            split( m| +|, <X-11.custom_xrandr>->{$ARG} ) )
        }
        sort { $a <=> $b } keys <X-11.custom_xrandr>->%*
        if <X-11.mode> eq qw| xorg |
        and defined <X-11.custom_xrandr>
        and ref(<X-11.custom_xrandr>) eq qw| HASH |;
}

## keyboard ##
<X-11.kbd>                = X11::Keyboard->new(<X-11.obj>);
<X-11.keycodes.modifiers> = <[X-11.get_modifier_map]>;

## registering keyboard event handler ##
<X-11.obj>->{'event_handler'} = qw| queue |;
<[event.add_io]>->(
    {   'fd'      => <X-11.obj>->{'connection'}->fh,
        'handler' => 'X-11.handler.global_hotkeys'
    }
);

## grab keyboard ##
<[X-11.grab_key]>
    if not <X-11.keep_unchanged>
    and <[base.cfg_bool]>->(<X-11.keybd.grab_all_keys>);

## screensaver \ blanking ##
if (    <X-11.has_dpms>
    and not <X-11.keep_unchanged>
    and <[base.cfg_bool]>->(<X-11.disable_blanking>)

) {
    <[base.log]>->( 1, ': deactivating screen blanking ..,' );
    <X-11.obj>->DPMSDisable();
    <X-11.obj>->SetScreenSaver( 0, 0, 1, 0 );
} elsif ( <X-11.has_dpms> and not <X-11.keep_unchanged> ) {
    ## default timeout [seconds] ##[ 13 minutes ]##
    ##
    my $t_sec = <X-11.blank_timeout> //= 780;
    <[base.logs]>
        ->( ': configured DPMS screen blanking [%03ds] ..,', $t_sec );
    <X-11.obj>->DPMSInfo();
    <X-11.obj>->DPMSSetTimeouts( $t_sec, $t_sec, $t_sec );
    <X-11.obj>->DPMSInfo();
}

## GPU load statistics [intel only] ##
<X-11.collect_intel_gpu_stats> //= FALSE;
<X-11.collect_gpu_stats_on_4K> //= FALSE;
<[X-11.start_gpu_top]> if <X-11.video_driver> =~ m|^i|i    # i9xx <?>
    and ( <X-11.collect_intel_gpu_stats>
    or <X-11.collect_gpu_stats_on_4K>
    and <X-11.obj>->width_in_pixels >= 3840 );

## background image / color ##
<X-11.keep_background> //= FALSE;
if (<X-11.keep_background>) {    # <-- do not touch background image and color
    <X-11.initialized> = TRUE;
    return 0;
}

if ( not defined $bg_col or $bg_col !~ m|^\#?[0-9A-F]{6}$|i ) {
    <[base.logs]>->(
        0, "<< no a valid background color syntax ['%s'] >>", $bg_col
    ) if defined $bg_col;
    $bg_col = <X-11.bg_col_default> // '#000000';    # <-- fallback color
}

if ( <X-11.bg_fade> //= TRUE and $bg_col ne '#000000' ) {
    <[X-11.fade_in_bg_col]>->($bg_col);
} else {
    <[base.logs]>->( "setting background color to '%s'", $bg_col );
    X11::Protocol::XSetRoot->set_background(
        'color'        => $bg_col,
        'use_esetroot' => TRUE
    );
}

## setting background image ##
##
if ( defined $bg_image ) {
    if ( $bg_image ne qw| :random: | ) {
        <[X-11.set_background_image]>->( $bg_image, undef, TRUE );
    } else {
        my $amos_chksum = <[X-11.backgrounds.set_random_image]>;
        <[base.logs]>->(
            'selected random background image : %s', $amos_chksum
        );
    }
}

## all done. ##
<X-11.initialized> = TRUE;

return 0;    ## success

#,,,,,...,,,.,.,,,.,.,.,,,,..,...,,,.,...,.,.,..,,...,...,.,.,,.,,..,,...,,,.,
#XCZMNGHO3BBBAPTTQCLD3ORIO3Y7HSFOXOVHYN4QTTCCLNI7GTY77YESOIP3ACCEUZ2YKZGVREDTY
#\\\|5Z5XIQD3NGFG3YGAK3LJRWMEI7RBFZWA7QFGIF7FUIFB3TQGNAQ \ / AMOS7 \ YOURUM ::
#\[7]36NZBMOKV4ZG6RDFLM7L3JCZB54OF4DWQVAVPOM6BJO5E2LLECAI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
