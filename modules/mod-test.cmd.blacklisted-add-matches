## >:] ##

# name  = mod-test.cmd.blacklisted-add-matches
# param = <ptn.>
# descr = add matching %INC modules to reload blacklist

my $name_pattern = $call->{'args'};

return { 'mode' => qw| false |, 'data' => 'expected name pattern' }
    if not defined $name_pattern and $name_pattern ne qw| ^ |;

$name_pattern =~ s|::|/|g;

my @loaded_mods = <[base.perlmod.get_loaded_INC_names]>;

if ( $name_pattern =~ s|^\^|| ) {
    @loaded_mods = grep { index( $ARG, $name_pattern, 0 ) == 0 } @loaded_mods;
} else {
    @loaded_mods = grep { index( $ARG, $name_pattern, 0 ) >= 0 } @loaded_mods;
}

return { 'mode' => qw| false |, 'data' => 'none match pattern' }
    if @loaded_mods == 0;

my $matching_mods_count = scalar @loaded_mods;

@loaded_mods = grep {
    not <[mod-test.callback.reload-test.is_registered]>->(
        qw| blacklisted |, $ARG
    )
} @loaded_mods;

return {
    'mode' => qw| true |,
    'data' => $matching_mods_count == 1
    ? 'one matching is already present'
    : sprintf( 'all %d matching mods are already present',
        $matching_mods_count )
    }
    if @loaded_mods == 0;

foreach my $module_name (@loaded_mods) {
    <[mod-test.callback.reload-test.add-link]>->(
        qw| blacklisted |, $module_name
    );
}

<[mod-test.update_blacklist_aref]>->( [@loaded_mods] );

my $entry_count = scalar @loaded_mods;

return {
    'mode' => qw| true |,
    'data' => sprintf( 'added %d ent%s',
        $entry_count, <[base.cnt_s]>->( $entry_count, qw| ies y | ) )
    }

#,,..,...,.,.,..,,,.,,,,.,,.,,,.,,.,.,,,.,,,.,..,,...,...,...,...,.,,,,,.,,,.,
#NOQYK57XIVSETX555IJKFZNFUPZX7YFUWLZ2TGYL5GPU2S5JR4R5LWZ2QPX46F3UVSSAMFQA5WKXW
#\\\|QQ3V3WPXTHMXZ2GVW6KM2H2PGOJNANXDAQ6GXWVJTYRXFBRWV7E \ / AMOS7 \ YOURUM ::
#\[7]NXONYJOJNKHC72JWD5ETJD7ZNBGPCVU4HWEJYNDYIJNCIF6A7YCA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
