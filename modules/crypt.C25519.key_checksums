## [:< ##

# name  = crypt.C25519.key_checksums
# descr = returns harmonized checksums for requested key name

my $name             = shift // '';
my $ask_for_password = shift // FALSE;    ##  optional  ##
my $log_level        = shift // 1;        ##  optional  ##

if ( not length $name ) {
    warn 'expected C25519 key name param <{C1}>';
    return undef;
} elsif ( not <[crypt.C25519.key_exists]>->($name) ) {
    <[base.s_warn]>->( "key '%s' not found <{C1}>", $name );
    return undef;
}

my $key_checksum;

<[base.logs]>->( $log_level, "generating key chksums for '%s' ..,", $name );

my $key_ref = $keys{'C25519'} //= {};

my $key_loaded = exists $key_ref->{$name} ? TRUE : FALSE;

my $single_key_file       = <[crypt.C25519.single_file]>->($name);
my $key_encryption_status = <[crypt.C25519.encrypted_key]>->($name);

if ( not $key_loaded ) {    ##  loading  ##

    my $keys_load_status;
    if ( $key_encryption_status != TRUE and $single_key_file ) {

        ## loading single key file ##
        $keys_load_status = <[crypt.C25519.load_single]>->($name);

    } elsif ( not $single_key_file ) {
        my @password_req = ($ask_for_password) x 2;    ##  ask , retry  ##

        $keys_load_status    ## loading only not encrypted files by default ##
            = <[crypt.C25519.load_keypair]>->( $name, undef, @password_req );
    } else {
        $keys_load_status = TRUE;    ## skip error message ## [LLL] check file
    }

    if ( not $keys_load_status ) {
        $key_checksum = qw| <:[load.error]:> |;
        ## detailed error descr required ## [LLL]
        undef $key_ref;
        delete $keys{'C25519'} if not keys $keys{'C25519'}->%*;
        return $key_checksum;
    }
}

$key_ref = $key_ref->{$name};

$key_ref->{'private'} = qw| [enc-key] |
    if not exists $key_ref->{'private'}
    and <[crypt.C25519.encrypted_key]>->($name);

$key_checksum = <[crypt.C25519.key_bin_checksums]>->(
    $key_ref->{'private'}, $key_ref->{'public'}    ## checksums available ##
);

undef $key_ref;
if ( not $key_loaded and keys $key_ref->%* ) {    ##  unloading  ##
    <[crypt.C25519.del_keys_hash_entry]>->( $name, TRUE );
}
delete $keys{'C25519'} if not keys $keys{'C25519'}->%*;

return $key_checksum;

#,,..,.,.,.,.,..,,,.,,...,,,,,,.,,...,,,,,..,,..,,...,...,...,,,.,.,,,,..,..,,
#FFSNLUI6TRDBPPVUNRKSXFGDVEUPW37D33ZMIQF6T7EKUWKVVNTYSKGFPYKPX26EGV62SZPEDFXQ4
#\\\|DJPP4NVUZ4YETT4JVZOSXB35MXBG5ICAQ2BDNIRRUQCYHSGGDV4 \ / AMOS7 \ YOURUM ::
#\[7]UUYWK7QGQ4DXVOPOU5F3OFPSUMZH7AXOENN74DEUZREYUMNLSSDY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
