## >:] ##

# name  = crypt.C25519.key_checksums
# descr = returns harmonized checksums that are true combined and seperate

my @key_strings_binary = <[base.reverse-sort]>->(@ARG);

if ( @key_strings_binary == 0 ) {
    warn 'expected binary key string parameter[s] <{C1}>';
    return undef;
} elsif ( @key_strings_binary > 2 ) {
    warn 'unexpected parameter[s] <{C1}>';
    return undef;
}

foreach my $key_bin (@key_strings_binary) {
    my $key_len = length $key_bin;
    if ( $key_len != 32 and $key_len != 64 ) {
        <[base.s_warn]>->(
            'supplied key str len %d is not valid [32|64]', $key_len
        );
        return undef;
    }
}

my $checksum_template         = qw| <:%s:> |;
my $priv_key_truth_template   = qw| <:%s:>,:%s: |;
my $pubkey_str_truth_template = qw| <:%s:%%s:>,<:%%s:>,:%%s: |;

my @checksums;

if ( @key_strings_binary == 1 ) {
    my $privkey_amos_chksum = <[chk-sum.amos.truth_template_chksum]>->(
        $priv_key_truth_template, \$key_strings_binary[0]
    );
    push @checksums, $privkey_amos_chksum;
} else {
    my $privkey_amos_chksum = <[chk-sum.amos.truth_template_chksum]>->(
        $priv_key_truth_template, $key_strings_binary[0]
    );
    my $pubkey_chksum = <[chk-sum.amos.truth_template_chksum]>->(
        sprintf( $pubkey_str_truth_template, $privkey_amos_chksum ),
        $key_strings_binary[1]
    );
    push @checksums, $privkey_amos_chksum, $pubkey_chksum;
}

my $combined_key_amos
    = sprintf( $checksum_template, join( qw| : |, @checksums ) );

return $combined_key_amos;

#,,..,,,,,...,.,.,,,,,,..,,..,...,,..,,.,,...,..,,...,...,..,,..,,,,,,...,,..,
#KBW4W7VANBYPSR4QTOUFSWSQ75CAIOLITIGDFEYNHQSYZPKQA6TX27WFUENYICVAJWQB5NAQSADX4
#\\\|GQLHZVKP4OXMK4524S7GYZHCIIR3BDE76Y7YV3ITPSNX25WCKO4 \ / AMOS7 \ YOURUM ::
#\[7]BYQCWWPI4MDVNFOZ47AC7D6PNUDK2WMQZ5AO3XRCPISKSXD3JMBQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
