## [:< ##

# name = crypt.C25519.chk_key_dir

my $key_vars_ref = <[crypt.C25519.key_vars]>;

return undef if ref $key_vars_ref ne qw| HASH |;

my $key_dir = $key_vars_ref->{'key_dir'};
my $uid     = $key_vars_ref->{'uid'};
my $gid     = $key_vars_ref->{'gid'};

my $UPdir    = File::Spec->updir;
my $parent_0 = catdir( $key_dir, ($UPdir) x 2 );
my $parent_1 = catdir( $key_dir, $UPdir );

if (   $EFFECTIVE_USER_ID == 0
    or $EFFECTIVE_USER_ID == $uid
    and
    ( -d $parent_1 and -w $parent_1 or not -d $parent_1 and -w $parent_0 ) ) {
    if ( not -d $key_dir ) {
        <[base.logs]>->( 1, "creating key directory '%s' ..", $key_dir );
        eval {
            make_path( $key_dir,
                { mode => 0700, uid => $uid, group => $gid } );
        };
        warn <[base.str.eval_error]> if $EVAL_ERROR;
        return undef if not -d $key_dir;    # <-- return error state
        return $key_dir;                    # success [ dir exists now ]
    }
} elsif ( not -r $key_dir or not -d $key_dir ) {
    my $perms     = -d $key_dir ? '' : ' [ permissions ]';
    my $log_level = <crypt.C25519.initialized> // 0;
    $log_level++ if $log_level;
    <[base.logs]>->( $log_level, "no key dir%s ['%s']", $perms, $key_dir );
    return undef;    # <-- error state
}

return $key_dir      # <-- success [ true ]

#,,.,,...,,,,,,,.,.,.,.,.,,..,,..,,..,,.,,,..,..,,...,...,.,,,,,.,,,,,..,,,,.,
#7SO5YY4MVQ5OHPJQQ4CF26AKP3DWZD6L7GSEKDFK4JJC3QMU6ICBM2CASJZZVBA7LNHFRXBNAJUYI
#\\\|4NTCVNNPVPOLJ2YITAO66WB7HWXOEKCSABMKBQNHY3TBF7E3RQN \ / AMOS7 \ YOURUM ::
#\[7]LV4AR7UAGHPMWED6WRJAIWQT3C4YVBX6Z5SIYYQ7HVJDMKK3TECA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
