## [:< ##

# name  = v7.zenka.cmd.restart
# param = <zenka-name|instance>
# descr = restart one or more zenka instances

my $params = $call->{'args'} // '';
return {
    'mode' => qw| false |,
    'data' => 'expected zenka name or instance id'
    }
    if not length $params;

my $restart_mode;
my @instance_ids;
my $unknown_name;
my $not_found   = 0;
my $setup_found = 0;
foreach my $param_str ( split m| +|, $params ) {
    if ( $param_str =~ <regex.base.iid> ) {    ## <-- [ instance-id ]
        return {
            'mode' => qw| false |,
            'data' => "unknown zenka instance $param_str"
                . " [ see 'list zenki' ]"
            }
            if not exists <v7.zenka.instance>->{$param_str};
        push( @instance_ids, $param_str );
    } elsif ( $param_str =~ m|^\d+| ) {
        return {
            'mode' => qw| false |,
            'data' =>
                sprintf( 'length not valid [ instance id %d ]', $param_str )
        };
    } elsif (
        $param_str =~ <regex.base.usr>            ##   zenka name   ##
        or $param_str =~ <regex.base.usr_subn>    ##   [ subname ]  ##
    ) {
        my $zenka_subname;
        my $re_sn = <regex.base.subname>;
        $zenka_subname = $LAST_PAREN_MATCH if $param_str =~ s|\[($re_sn)\]$||;

        my $zenka_id = <[zenka.get_id]>->($param_str);
        if ( defined $zenka_id ) { $setup_found++ }
        else { $not_found++; $unknown_name //= $param_str; next }

        map {
            push( @instance_ids, $ARG )
                if <v7.zenka.instance>->{$ARG}->{'zenka_id'} == $zenka_id
                and ( not defined $zenka_subname
                or defined <v7.zenka.instance>->{$ARG}->{'subname'}
                and $zenka_subname eq
                <v7.zenka.instance>->{$ARG}->{'subname'} )

        } <[v7.instance_ids]>;

    } else {
        return {
            'mode' => qw| false |,
            'data' => 'zenka name or instance id expected'
        };
    }
}

map {
    my $zenka_id           = <v7.zenka.instance>->{$ARG}->{'zenka_id'};
    my $zenka_name         = <v7.zenka.setup>->{$zenka_id}->{'name'};
    my $zenka_dependencies = <[zenka.get_dependencies]>->($zenka_name);

    if ( defined $zenka_name and defined $zenka_dependencies ) {

        foreach my $dep_name ( split( m| +|, $zenka_dependencies ) ) {
            delete <v7.zenka.manually_stopped>->{$dep_name}
                and <[base.logs]>->(
                0, "[restart] cleared manually stopped status [ %s ]",
                $dep_name
                ) if exists <v7.zenka.manually_stopped>->{$dep_name};
            ##
            ##  ^-- forced dependency start-up, or....,
            next if exists <v7.zenka.manually_stopped>->{$dep_name}; # skipped

            if ( !<[zenka.is_enabled]>->($dep_name) ) {
                <[base.logs]>->(
                    "zenka enabled by dependency [%s]", $dep_name
                );
                <[zenka.cmd.start_once]>
                    ->( { 'args' => $dep_name, 'mode' => qw| implicit | } );
            }
            <v7.zenka.dependency>->{$dep_name}->{$zenka_name} = 1
                if not exists <v7.zenka.autostart>->{$dep_name};
        }
    }

} @instance_ids;

map { <[zenka.instance.restart]>->($ARG) } @instance_ids;

my $count   = scalar @instance_ids;
my $msg_str = sprintf( 'restarting %d zenka instance%s .,',
    $count, <[base.cnt_s]>->($count) );

return {
    'mode' => qw| false |,
    'data' => sprintf( 'no zenka %s found in set-up', $unknown_name )
    }
    if not $setup_found and $not_found;

if ($count) {
    return { 'mode' => qw| true |, 'data' => $msg_str };
} else {
    return {
        'mode' => qw| false |,
        'data' => 'there is no matching zenka running'
    };
}

#,,,.,.,.,,,,,.,,,..,,..,,..,,..,,..,,.,,,..,,..,,...,...,,,.,...,,..,..,,.,.,
#ZNFEAA7ELWZPLJP4YUV25N7M466JDTDOKKDNCZSCXI6HQXDV4D6RLOQXJS56JUHZWCJ74DZZAT4T4
#\\\|BUYCXDJC6K7KPRJGK4KRZSRWKJ6BQJSEN5IC7IJI6X42PC7PVX2 \ / AMOS7 \ YOURUM ::
#\[7]PVGPXTNX77HW3L7UKRU6AOPTHJRCKKCKUKIAVRABX5QBSCBJIQCA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
