## [:< ##

# name  = crypt.C25519.keyfiles
# descr = return all \ requested keyfiles for current user
# todo  = root keys must be included ..,

my $name       = shift;    ##  optional  ##
my $type_param = shift;    ##  optional  ##

if ( defined $type_param and $type_param !~ m{(encrypted|plain)} ) {
    <[base.s_warn]>->(
        'type %s not recognized [encrypted|plain]', $type_param
    );
    return undef;
}

my $key_vars_ref = <[crypt.C25519.key_vars]>;
return undef if ref $key_vars_ref ne qw| HASH |;

my $key_dir = $key_vars_ref->{'key_dir'};
my $key_usr = $key_vars_ref->{'usr_name'};

my $keys_re   = <crypt.C25519.regex>;
my $re_kfiles = $keys_re->{'key_files'};

my @k_files;

foreach my $file ( grep {m{$re_kfiles}} <[file.all_files]>->($key_dir)->@* ) {
    next if defined $name and $name ne <[crypt.C25519.get_keyname]>->($file);

    if ( not defined $type_param ) {
        push @k_files, $file;
    } elsif ( $type_param eq qw| encrypted | ) {
        push @k_files, $file if <[crypt.C25519.encrypted_key]>->($file);
    } elsif ( $type_param eq qw| plain | ) {
        push @k_files, $file if not <[crypt.C25519.encrypted_key]>->($file);
    }

    last if defined $name;    ## skip rest \ have matched key ##
}

return <[base.sort]>->(@k_files);

#,,.,,...,.,.,..,,.,.,.,,,,..,..,,,,,,,.,,,.,,..,,...,..,,,.,,.,.,,,,,.,.,,,,,
#BN7EN2SGCSXSRQMAMPYTXLFABGGBQPN2KDU3FMTAY35LDVDJT7DLNV74G25WPG6G2NH2OWRJVJH2M
#\\\|7RJFVU52AGGPVE2XCOGIYQAGSRR2R4NK4E2OENDCPQZGBRZOZAH \ / AMOS7 \ YOURUM ::
#\[7]OS5UVRBAOALUQ5XDIZSCF5BIA266NXSMHBO2LMXUGF3NQBEN36DI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
