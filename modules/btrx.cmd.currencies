## >:] ##

# name  = btrx.cmd.currencies
# descr = return list of (active) currencies

my $hide_inactive   = 1;
my $hide_restricted = 1;

my @currency_data;
my $err_msg;
{
    local $SIG{__WARN__} = undef;
    local *STDERR;
    open( STDERR, '>', \$err_msg );
    @currency_data = ( <btrx.api.pub>->getcurrencies() );
}

#  {
#    'CurrencyLong' => 'HempCoin',
#    'Notice' => undef,
#    'MinConfirmation' => 14,
#    'TxFee' => '0.2',
#    'IsActive' => $VAR1->[0]{'IsActive'},
#    'Currency' => 'THC',
#    'IsRestricted' => $VAR1->[0]{'IsRestricted'},
#    'CoinType' => 'BITCOIN',
#    'BaseAddress' => 'HCt5LgCkUX39ekrQdEHaN8Rp5AHZP3MKTj'
#  },

if ( !@currency_data ) {
    $err_msg //= 'no data';
    $err_msg =~ s/ at \S+ line \d+\.|\n$//g;
    $err_msg =~ s|\n| / |g;
    my $log_msg = "API request failed ['$err_msg']";
    <[base.log]>->( 0, 'currencies: ' . $log_msg );
    return {
        'mode' => qw| false |,
        'data' => $log_msg
    };
}

my @currencies;

foreach
    my $cur ( sort { $a->{'Currency'} cmp $b->{'Currency'} } @currency_data )
{
    push( @currencies,
        sprintf( "%-8s %s\n", $cur->{'Currency'}, $cur->{'CurrencyLong'} ) )
        if ( !$hide_inactive
        or $cur->{'IsActive'} )
        and ( !$hide_restricted
        or !$cur->{'IsRestricted'} );
}

return {
    'mode' => qw| size |,
    'data' => join( '', @currencies )
};

#,,..,,,,,.,.,..,,,.,,,,.,,,.,,,.,,..,,.,,..,,..,,...,...,...,,,.,,.,,,.,,,.,,
#H7YT6FQS4OITBHNRHUACIU7CLF4WAVZJX4SUO6FPD542YN3US75FS6E5EVJGLCDFNTAQKINLNBOKC
#\\\|LIPBPF5S3EE72ZCXX5RR3TQMWOD4JWDSQOS57ABLKHGHQ5DGFYW \ / AMOS7 \ YOURUM ::
#\[7]XEFMBNHG3FTTW5GOQU7BBZW3OFGHDWJBBAS6TDIM2E4VVDZER4DA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
