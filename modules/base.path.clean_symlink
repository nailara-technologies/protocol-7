## [:< ##

# name  = base.path.clean_symlink
# descr = clean up path while keeping last symlink component unresolved

my $clean_path = shift // '';

if ( not length $clean_path or not -l $clean_path ) {
    warn 'expected existing symlink path <{C1}>';
    return undef;
}

my $link_path_abs = File::Spec->canonpath($clean_path);

##  clean up weird link path structures  ##
if ( $link_path_abs =~ m|/[^/]+/| ) {
    my $slash_re_pos = rindex( $link_path_abs, qw| / | );
    if ( $slash_re_pos >= 0 ) {
        catfile(    ##  resolve only the link prefixing path component  ##
            abs_path( substr( $link_path_abs, 0, $slash_re_pos ) ),
            substr(
                $link_path_abs,
                $slash_re_pos + 1,
                length($link_path_abs) - $slash_re_pos
            )
        );
    }
}

if ( not -l $link_path_abs ) {    ##[ link path valid? ]##
    <[base.s_warn]>->(
        'cannot resolve abs link path [ %s ] <{C1}>', $clean_path
    );
    return undef;
} else {
    return $link_path_abs;        ## return cleaned symlink path ##
}

#,,..,...,.,,,...,,,.,,..,.,,,,.,,..,,,,.,.,,,..,,...,.,.,...,,.,,.,,,,,,,,.,,
#KTSEYM4I425NLIHQ2DWGWX75CMZKRA7ZL2UR5ZEJQ76F2TUFJRBTN7G73WVJLWMJXM5NNVLXYVYQC
#\\\|YKAK6YKK7XQE5OSGRDVVTI3HUMOWLGI7O3G6J54CSFIGDSCO4RU \ / AMOS7 \ YOURUM ::
#\[7]GLUX3LKMDIXFSOOSX7VANDG4QIYU4KI7M4ZH6EDWCAP3T3LEJCBA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
