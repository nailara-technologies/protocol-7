## [:< ##

# name  = crypt.C25519.cmd.set-client-key
# param = <pub_key_B32>
# descr = set client C25519 public key [BASE32 encoded]

my $params  = shift;
my $key_str = $params->{'args'};
my $sid     = $params->{'session_id'};
my $session = $data{'session'}{$sid};
my $base_re = <regex.base.base_32>;

my $session_keyname = sprintf qw| session:%s |, <system.zenka.name>;

return {
    'mode' => qw| false |,
    'data' => 'session key not loaded [ cannot sign key ]'
    }
    if not exists $keys{'C25519'}{$session_keyname}
    or not exists $keys{'C25519'}{$session_keyname}{'sig-reply'};

return {
    'mode' => qw| false |,
    'data' => 'expected [ RFC 4648 base32 encoded ] C25519 public key'
    }
    if not defined $key_str
    or length($key_str) != 52
    or $key_str !~ m|^$base_re$|;

$session->{'client_key'} = decode_b32r($key_str);

if ( length( $session->{'client_key'} // '' ) != 32 ) {
    delete $session->{'client_key'};
    return {
        'mode' => qw| false |,
        'data' => 'decoding not successful [ BASE32 expected ]'
    };
}

my $creation_ntime = <[base.ntime.b32]>->(3);
my $template       = sprintf '[%s|%%s]', $creation_ntime;

my $key_sig = <[crypt.C25519.sign_data]>->( \sprintf $template, $key_str );

return {
    'mode' => qw| true |,
    'data' => sprintf( $template, encode_b32r($key_sig) )
};

#,,..,,..,...,...,...,,,.,,,.,.,,,,,.,,,.,.,.,..,,...,...,,,.,..,,,,.,.,,,.,.,
#RJAI6U472AYCN4SFKOQCUH6YMXRKCNMET6YGPGAWPFVXE6LKRC57KRSKNG4GUT657NJFPXX3QOKZQ
#\\\|FI4EAWNSCMOI5FE7ZRCPQHVKU6XD5KGNRKNLEEZNGOBNSC5HOLN \ / AMOS7 \ YOURUM ::
#\[7]GQIG32LCC2NQUMBS7SIYEX57UYZVAXNXBF4IRE5NHOY63CLWRSCQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
