## >:] ##

# name  = mod-test.perlmod.run_reload_test

my $mod = <base.modules.refresh>;

my @modtest_list = @ARG;

my $test_count                 = 5;    ##  iterations per module  ##
my $test_run_console_verbosity = 1;

my %refresh;
my @warnings_collected;    ##  initializing with already blacklisted ones  ##
my %module_blacklisted = <[mod-test.update_blacklist_aref]>;

my $callbacks              ## | started complete blacklisted | ##
    = {
    qw|   check    | => $code{'mod-test.callback.reload-test.is_registered'},
    qw|  register  | => $code{'mod-test.callback.reload-test.add-link'},
    qw| unregister | => $code{'mod-test.callback.reload-test.remove-link'},
    };

my $collect_coderef = sub {
    push @warnings_collected, scalar <[base.format_error]>->( $ARG[0] )
        if defined $ARG[0]
        and $ARG[0] !~ m,(^| )subroutine \S+ redefined ,i;
};

local $SIG{__WARN__} = $collect_coderef;

my %skip = <[mod-test.update_blacklist_aref]>;

<[base.log]>->( 1, '.:[ starting module reload test ]:.' );

my $console_verbosity_backup;
if ( $test_run_console_verbosity > <system.verbosity.console> ) {
    $console_verbosity_backup = <system.verbosity.console>;
    <system.verbosity.console> = $test_run_console_verbosity;
}

@modtest_list = <[base.reverse-sort]>->( keys %INC )
    if scalar @modtest_list == 0;

my @sorted_paths = <[base.reverse-sort]>->(
    uniq map {
        <[base.perlmod.strip_INC_path]>
            ->( $INC{$ARG} !~ m|$ARG| ? $ARG : $INC{$ARG} )
        } @modtest_list

);

return 0 if @sorted_paths == 0;

foreach my $module_pm_path_rel (@sorted_paths) {

    <[event.once]>;    ##  network events [ answer heartbeat ]  ##

    if ( $callbacks->{'check'}->( qw| blacklisted |, $module_pm_path_rel ) ) {
        <[base.logs]>->(
            ':: skipping : %s : blacklisted ::',
            $module_pm_path_rel
        );
        next;

    } elsif ( $callbacks->{'check'}->( qw| complete |, $module_pm_path_rel ) )
    {
        <[base.logs]>->(
            2, ':: skipping : %s : completed ::',
            $module_pm_path_rel
        );
        next;
    }

    <[base.logs]>->( 1, ':: starting test  %s  ::', $module_pm_path_rel );

    $callbacks->{'register'}->( qw| blacklisted |, $module_pm_path_rel );

    foreach my $iteration ( 1 .. $test_count ) {
        <[base.logs]>
            ->( 2, ':. iteration .: %03d', $test_count - $iteration );
        for ( 1 .. 7 ) {
            <[event.once]>;    ##  network events [ answer heartbeat ]  ##
        }

        $mod->unload_module($module_pm_path_rel);
        $refresh{$module_pm_path_rel}
            = $mod->refresh_module($module_pm_path_rel);

        <[base.sleep]>->(0.07);

        <[event.once]>;
    }

    <[base.log]>->( 2, ':, iterations completed.' );
    <[base.logs]>->(
        2, ':  :. removing %s from blacklist',
        $module_pm_path_rel
    );

    if ( not $callbacks->{'register'}->( qw| complete |, $module_pm_path_rel )
        or not $callbacks->{'unregister'}
        ->( qw| blacklisted |, $module_pm_path_rel ) ) {
        <[base.log]>->( 0, 'unregister not successful, restarting ..,' );
        <[base.exit]>->(qw| 0110 |);
    }

    <[mod-test.update_blacklist_aref]>;
}

## restore previous console verbosity ##
<system.verbosity.console> = $console_verbosity_backup
    if defined $console_verbosity_backup;

<[base.log]>->( 1, ': done.' );

return 5;    ## true \ success ##

## return  \@warnings_collected;

#,,,.,..,,..,,.,,,...,.,.,,,,,.,,,..,,,.,,,.,,..,,...,...,,..,.,.,,,,,,,.,,..,
#RO2RL5IW34HWDXH554KK3PWST4TXFCNE5CUXBJBU6R6BOL6UH42T6HUXCLANP3FUECBIQ6AI4BO4E
#\\\|ABR5EMI27LYDTTULWHP4ODDRVJVI4KCIIB3QGTSZZRTXVYXPOY5 \ / AMOS7 \ YOURUM ::
#\[7]2KQ7XH6GJSCHJ77I2YCIVJ3Y54YFQQ6BN3ALMFLG5DV56O5EWYBA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
