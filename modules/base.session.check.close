## [:< ##

# name = base.session.check.close

my $event   = shift;
my $id      = $event->w->data;
my $session = $data{'session'}->{$id};

$event->w->cancel if $event->w->is_active;

## reporting server mode session close ##
if ( $session->{'mode'} eq qw| server | ) {
    <[base.logs]>->( 0, '[%d] server-mode session shutdown ..,', $id );
} else {    ##  client-mode session shutdown  ##
    <[base.logs]>->( 2, '[%d] session shutdown.,', $id );
}

## calling session rip handler ##
if ( defined $session->{'rip_handler'} ) {
    my $rip_handler_c_ref;
    if ( not length ref $session->{'rip_handler'}
        and defined $code{ $session->{'rip_handler'} } ) {
        $rip_handler_c_ref = $code{ $session->{'rip_handler'} };
    } elsif ( ref $session->{'rip_handler'} eq qw| CODE | ) {
        $rip_handler_c_ref = $session->{'rip_handler'};
    } else {
        <[base.logs]>->(
            0,   "[%d] session rip_handler is not valid or defined '%s'",
            $id, $session->{'rip_handler'}
        );
    }
    if ( ref $rip_handler_c_ref eq qw| CODE | ) {
        <[base.logs]>->(
            2,   '[%d] calling session rip_handler [%s] ..,',
            $id, $session->{'rip_handler'}
        );
        $rip_handler_c_ref->($event);
    }
}

# cancel outstanding commands / routes
my $route_term_msg = 'FALSE command route collapsed';

<[base.session.cancel_route]>->(
    $id, $route_term_msg, keys $session->{'route'}->%*
);

## cancel watchers ##
foreach my $watcher ( keys $session->{'watcher'}->%* ) {
    $session->{'watcher'}{$watcher}->cancel;
    delete $session->{'watcher'}{$watcher};

    <[httpd.update_download_count]> if $watcher eq 'download_handler';
}

my $user = $session->{'user'};

## cleaning up user to session reference ##
if ( defined $data{'user'}{$user}{'session'}{$id} ) {

    # first clean up subname to session reference
    if (    defined $session->{'subname'}
        and defined $data{'user'}{$user}{'subname'} ) {
        my $subname = $session->{'subname'};
        $data{'user'}{$user}{'subname'}{$subname}--
            if defined $data{'user'}{$user}{'subname'}{$subname};
        delete $data{'user'}{$user}{'subname'}{$subname}
            if !$data{'user'}{$user}{'subname'}{$subname};
        delete $data{'user'}{$user}{'subname'}
            if not keys $data{'user'}{$user}{'subname'}->%*;
    }

    delete $data{'user'}{$user}{'session'}{$id};
}

if ( not keys $data{'user'}{$user}{'session'}->%* ) {
    delete $data{'user'}{$user}{'connected_since'};

    # record time-stamp in case it was the last session
    $data{'user'}{$user}{'last_seen'} = time();

    delete $data{'user'}{$user}{'session'};
    delete $data{'user'}{$user};
    delete $data{'user'} if not keys $data{'user'}->%*;
}

my $dfh;    ## disconnecting file handle ##
if ( $dfh = $session->{'handle'} and fileno($dfh) ) {
    close( $session->{'handle'} );
}

# force freeing of all memory consumed by buffers ..,
if ( defined $session->{'buffer'} ) {
    map {
        undef $session->{'buffer'}->{$ARG};
        delete $session->{'buffer'}->{$ARG}
        }
        keys $session->{'buffer'}->%*;
}

my $session_mode = $session->{'mode'};    ##  keep for loggin below  ##

map { undef $session->{$ARG}; delete $session->{$ARG} } keys $session->%*;
map {
    undef $data{'handle'}{$dfh}->{$ARG};
    delete $data{'handle'}{$dfh}->{$ARG}
} keys $data{'handle'}{$dfh}->%*;

## cleaning up references ##

map {
    undef $data{'user'}{$ARG}{'session'};
    delete $data{'user'}{$ARG}{'session'};
    <[base.clean_hashref]>->( $data{'user'}->{$ARG} )
} keys <base.session.uname>->%*;

undef $session;
delete $data{'session'}{$id};
delete $data{'handle'}{$dfh};

map { <[base.clean_hashref]>->( $data{$ARG} ) } qw| user handle session |;

if ( $session_mode eq qw| server | ) {    ##  closed server session  ##
    <[base.logs]>->( '[%d] : server-socket closed.,', $id );
} else {    ##  client-mode session shutdown  ##
    <[base.logs]>->( '[%d] client connection closed.,', $id );
}

<[base.session.check_remaining]>;

#,,,.,,,,,,,,,,..,,.,,.,.,,..,,,,,.,.,,,.,...,..,,...,...,..,,,,.,,..,...,,..,
#6DPPNJIXN6XSVTYWDDXWEZ7MDQ6IFOUKMUN5QTJBVCG4AH5FCJ4H4LQMQJOXIGTH3AKXUUAVLBCAQ
#\\\|3BRJ2VADJGOOCFZFP33A4HWTOOB52IRDEWBWQI7LA65KO6EWVE3 \ / AMOS7 \ YOURUM ::
#\[7]L7AYHBSYMZZI7TKZBOCBWRAG3VEXRRKK2WECXW733Q4LHDY7CIAQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
