# >:]

# name       = base.session.check.close

my $id = $_[0]->w->data;

$_[0]->w->stop;

<[base.log]>->( 2, "[$id] session shutdown ..." );

# cancel outstanding commands / routes

foreach my $s_cid ( keys %{ $data{'session'}{$id}{'route'} } ) {
    my $route_id  = $data{'session'}{$id}{'route'}{$s_cid};
    my $s_sid     = $data{'route'}{$route_id}{'source'}{'sid'};
    my $s_cid     = $data{'route'}{$route_id}{'source'}{'cmd_id'};
    my $reply_str = $s_cid ? "($s_cid)" : '';
    $reply_str .= "NACK command route collapsed\n";
    $data{'session'}{$s_sid}{'buffer'}{'output'} .= $reply_str
        if exists $data{'session'}{$s_sid};
    delete $data{'route'}{$route_id};
}

# call rip handler

if (    defined $data{'session'}{$id}{'rip_handler'}
    and defined &{ $data{'session'}{$id}{'rip_handler'} } ) {
    &{ $data{'session'}{$id}{'rip_handler'} }( $_[0] );
}

# stop input bufffer

$data{'session'}{$id}{'watcher'}{'input_buffer'}->stop;

# flush output buffer

# while(length $data{'session'}{$id}{'buffer'}{'output'})
# { $data{'session'}{$id}{'watcher'}{'output_buffer'}->now }

# cancel watchers

foreach my $watcher ( keys( %{ $data{'session'}{$id}{'watcher'} } ) ) {

    $data{'session'}{$id}{'watcher'}{$watcher}->cancel;
    delete $data{'session'}{$id}{'watcher'}{$watcher};
}

# cleanup user2session reference
my $user = $data{'session'}{$id}{'user'};
if ( defined $data{'user'}{$user}{'session'}{$id} ) {
    delete $data{'user'}{$user}{'session'}{$id};
}

# record the timestamp in case it was the last session
if ( !keys( %{ $data{'user'}{$user}{'session'} } ) ) {
    delete $data{'user'}{$user}{'connected_since'};
    $data{'user'}{$user}{'last_seen'} = time();
    delete $data{'user'}{$user}{'session'};
}

close( $data{'session'}{$id}{'handle'} );
delete $data{'session'}{$id};

<[base.log]>->( 1, "[$id] session closed" );

<[base.session.check_last]>;
