## [:< ##

# name  = base.file.callback.chown-all

my $add_changed = 0;
my $path_name   = $File::Find::name;

my $old_uid = <base.file.chown-all.change_from.uid>;
my $old_gid = <base.file.chown-all.change_from.gid>;

my $new_uid = <base.file.chown-all.change_to.uid>;
my $new_gid = <base.file.chown-all.change_to.gid>;

return
    if $path_name =~ qr{^/(proc|sys|dev)/}
    or ( not -e $path_name and not -l $path_name );

eval {
    my $path_stat = File::stat::stat($path_name);
    if ( $path_stat->uid == $old_uid ) {
        <[base.log]>->( 2, "< UID-match > '$path_name'" );
        $add_changed = 1;
    }
    if ( $path_stat->gid == $old_gid ) {
        <[base.log]>->( 2, "< GID-match > '$path_name'" );
        $add_changed = 1;
    }
};

my $err_str;
$err_str = <[base.str.eval_error]> if length $EVAL_ERROR;
warn $err_str                      if defined $err_str;

if ($add_changed) {
    if ( not chown( $new_uid, $new_gid, $path_name ) ) {
        <base.file.chown-all.errors.chown.total>++;
        my $warned_paths = <base.file.chown-all.warnings>;
        my $ch_err_str;
        $ch_err_str = <[base.str.os_err]> if length $OS_ERROR;
        if ( defined $ch_err_str ) {
            <[base.logs]>->( '[ %s ] %s', $ch_err_str, $ch_err_str );
            $ch_err_str =~ s| +|_|g;
            $warned_paths->{'chown'}->{$ch_err_str}->{$path_name} = 1;
        }
    }
}

<base.file.state.change_count> += $add_changed;

#,,,,,,..,.,,,,.,,,.,,,,.,..,,,,.,,,.,,,,,.,,,..,,...,...,..,,.,,,.,.,.,.,..,,
#575LYMWGXWIMIQDOQBZMYU4BPOTSJQKI7TZ3KJEE4AJFSBOPD4JUIRGYGSJ7FXXYMBIRKA4KY5LYA
#\\\|EH3UT6ZS46EOL3MV5J2EZY2E22KPPI62PACIH634G4SORGKEYB7 \ / AMOS7 \ YOURUM ::
#\[7]PCKCW6LM7I2ICPSX4CLATTRK5IWPKSQYMICY4BLDMMJBKSWCNECQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
