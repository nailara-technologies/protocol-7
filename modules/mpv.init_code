# >:]

# name = mpv.init_code

use JSON::XS;
use IPC::Open3;
use File::Path qw(make_path);

<mpv.json.parser> = JSON::XS->new->pretty(0);

<mpv.bin_path> //= '/usr/bin/mpv';
chomp( <mpv.bin_path> = qx(which mpv) ) if !-f <mpv.bin_path>;

die "[!] mpv binary not found, aborting startup..."
    if not defined <mpv.bin_path> or !length(<mpv.bin_path>);

<mpv.fade_in>           //= 0;
<mpv.reply_ids>         //= [];
<mpv.file_map.rescaled> //= {};
<mpv.fade_start_geom>   //= '1x1--0--0';
<system.agent.mode>     //= 'stand-alone';
<mpv.agent_title>
    = <system.agent.mode> eq 'media-child' ? 'media.mpv' : <system.agent.name>;
<mpv.current.load_iteration> //= 0;
<mpv.cleanup_rescaled_after> //= 0;    # <- 0 [days] means no cleanup (disabled)
<mpv.cleanup_check_delay>    //= 42 + int( rand(242) );       # first file check
<mpv.cleanup_check_interval> //= 3600 + int( rand(7200) );    # 1-3 hrs (repeat)
<mpv.rescaled_extension>     //= 'mp4';

if ( defined <mpv.rescale_path> ) {
    <mpv.rescale_path> =~ s|\/$||;
    <[base.log]>->( 2, "checking rescale_path '" . <mpv.rescale_path> . "'" );
    if ( !-d <mpv.rescale_path> ) {
        my $resc_path = <mpv.rescale_path>;    # XXX: check path on demand ...
        <[base.log]>->( 1, "creating video rescale directory '$resc_path'.." );
        my ( undef, undef, $uid, $gid ) = getpwnam(<system.privs.user>)
            or die "user '" . <system.privs.user> . "' not in passwd file";
        make_path( $resc_path,
            { 'mode' => 0750, 'uid' => $uid, 'group' => $gid } )
            or warn "failed to create local config directory '$resc_path' [$!]";
        delete <mpv.rescale_path> if !-d <mpv.rescale_path>;
    }    # XXX: } else { check permissions..
    if ( defined <mpv.rescale_path>
        and <mpv.cleanup_rescaled_after> ) {    # <- 0 == cleanup disabled
        <[base.log]>->( 2, ": rescale path ok [exists]" );
        <mpv.timer.rescaled_check> = <[event.add_timer]>->(
            {   'after'    => <mpv.cleanup_check_delay>,
                'interval' => <mpv.cleanup_check_interval>,
                'handler'  => 'mpv.handler.scan_encoded_timer'
            }
        );
    }
}

0;
