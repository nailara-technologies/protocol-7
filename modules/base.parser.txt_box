## >:] ##

# name  = base.parser.txt_box
# descr = render an ascii frame around the supplied text and return the result

my $param     = shift;
my $title_str = shift // '';   # <-- optional title string as second parameter

my $t_ref = ref $param eq qw| SCALAR | ? $param : \$param;
my @lines = split( "\n", $$t_ref );

( undef, my $maxlen )
    = minmax map {length} ( @lines, sprintf( ' %s ', $title_str ) );
my $len_2     = $maxlen + 3;                # include third parameter length ?
my $title_bar = ' ,' . '.' x $len_2 . ',';

if ( length($title_str) ) {
    substr(
        $title_bar,
        -7 - length($title_str),
        length($title_str) + 4,
        sprintf( '[ %s ]', $title_str )
    );
}

##[  todo : also adjust side padding ..,  ]##
##
my @term_size = grep {defined} ( AMOS7::TERM::terminal_size() );
@term_size = ( 0, 25 ) if @term_size == 0;
my $overflow_size = $term_size[1] - scalar @lines + 7;

my @line_feed_top    = ('');
my @top_line         = ( ' :' . ' ' x $len_2 . ':' );
my @bottom_line      = ( ' :' . ' ' x $len_2 . ':' );
my @line_feed_bottom = ('');

shift @bottom_line      if $overflow_size <= -1;
shift @line_feed_top    if $overflow_size <= -2;
shift @line_feed_bottom if $overflow_size <= -3;
shift @top_line         if $overflow_size <= -4;

return join "\n",
    @line_feed_top,
    $title_bar,
    @top_line,
    ( map { sprintf ' : %-*s  :', $maxlen, $ARG } sort @lines ),
    @bottom_line,
    ' :' . '.' x $len_2 . ":\n",
    @line_feed_bottom;

#,,.,,...,,,,,,..,.,.,,..,..,,,,,,.,.,...,,..,..,,...,...,,,,,...,.,,,,,,,...,
#CAWDO6N3YBPC2S4Z4JQTNWS2AFLSRRIQGACYXIMRP7V65W7IXR4ASGOG3G33DLQDMOD6233LVMYN4
#\\\|DWC3VJFAVGP6LI4KMLF4LK65SRUPPVTFW2M4BB2DDYXJZXTXK3H \ / AMOS7 \ YOURUM ::
#\[7]II4MQ63RUC6MGAALGHAIHSCYISPM7WJQCJE2PYN6GXDZNISMICBQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
