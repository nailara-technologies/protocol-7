# >:]

# name  = media.cmd.report_paused
# descr = notify parent of paused client

my $session_id = $call->{'session_id'};
my $agent_name = $data{'session'}{$session_id}{'user'};
<media.child>->{$agent_name}->{'paused'} //= 0;
my $position = <media.sequence.position>;
my $switch_agent
    = defined $position ? <media.sequence.switch_order>->[$position] : undef;
<media.sequence.frame_pos> //= 0;
<media.sequence.frame_pos> = 0 if $position == 0;

if ( <media.child>->{$agent_name}->{'paused'} ) {
    <[base.log]>
        ->( 2, "'$agent_name' already paused, ignoring pause-report.." );
    return {
        'mode' => 'nack',
        'data' => 'already paused'
    };
}

<[base.log]>->( 2, "pause reported from '$agent_name'-child" );

<media.child>->{$agent_name}->{'paused'} = 1;

my $was_starting = 0;
if ( <media.child>->{$agent_name}->{'status'} eq 'starting' ) {
    <media.child>->{$agent_name}->{'status'} = 'ready';
    $was_starting = 1;
}

my $all_ready = 1;
map { $all_ready = 0 if <media.child>->{$_}->{'status'} ne 'ready' }
    keys %{<media.child>};

if ( $all_ready and $was_starting ) {
    <[base.log]>->( 1, "agent children are now online! :)" );
    <[base.x11.assign_window]>->(
        join( ',',
            map { <media.child>->{$_}->{'window_id'} } keys %{<media.child>} )
    );
}

if ($all_ready) {
    if ( defined $switch_agent ) {
        <[media.switch_child]>->($switch_agent) if @{<media.playlist.files>};
    } elsif (<media.loadsplash_running>) {    # (empty playlist case)
        <media.playlist_was_empty> = 1;
        <[base.proto.nailara.command.send.local]>->(
            {   'command' => "core.root.stop_implicit",
                'call_args' =>
                    { 'args' => 'loadsplash[' . <system.agent.subname> . ']' }
            }
        );
        <media.loadsplash_running> = 0;
    }
}

return {
    'mode' => 'ack',
    'data' => 'acknowledged'
    }
