## [:< ##

# name  = v7.teardown
# descr = shut down v7 zenka [with an optional error message]

my $reason    = shift // '';
my $exit_code = length($reason) ? 1 : $CHILD_ERROR;
my $log_level = length($reason) ? 0 : 1;
my $t_res     = 3;    # <-- time delta float resolution

my $kill_timeout  = <system.kill_timeout> //= 2.1;    # floating seconds
my $abort_timeout = 2;

my %wait_pids = map { $ARG => TRUE } keys <v7.child>->%*;
foreach my $p_pid ( keys <v7.child>->%* ) {
    map { $wait_pids{$ARG} = TRUE }
        <[v7.sub-process.get_children]>->($p_pid)->@*;
    <v7.child>->{$p_pid}->{'start_time'} //= <[base.time]>;    # ..in case.,
}

my $child_count = keys %wait_pids;

while ( ( my $pid = <[base.waitpid]>->(-1) ) > 0 ) {    ##  WNOHANG  ##
    $child_count-- if $pid and delete $wait_pids{$pid};
}

my $es = <[base.cnt_s]>->( $child_count == 1, ' process', 'es' );
$reason = sprintf( '.. %u sub-process%s .,', $child_count, $es )
    if not length($reason)
    and $child_count;
my $reason_txt = length($reason) ? sprintf( ' [ %s ]', $reason ) : '';

<[base.logs]>->( $log_level, 'v7 zenka shutdown%s', $reason_txt );

<[base.logs]>->( '.:[ terminating sub-process%s ]:.', $es )
    if $child_count and <system.verbosity.console> == 1;

foreach my $pid (
    sort {
        <v7.child>->{$b}->{'start_time'} <=> <v7.child>->{$a}->{'start_time'}
    }
    keys <v7.child>->%*
) {
    next if exists <v7.child>->{$pid}->{'zenka_child'};
    my $inst_id    = <v7.child>->{$pid}->{'instance_id'};
    my $zenka_name = <v7.zenka.instance>->{$inst_id}->{'zenka_name'}
        // 'unknown';
    my @children = <[v7.sub-process.get_children]>->($pid)->@*;
    if ( kill( 15, $pid ) ) {
        <[base.logs]>->( ': <TERM> PID %-7s  <-= %11s', $pid, $zenka_name );
    } else {
        delete <v7.child>->{$pid};
    }
    if (@children) {
        <[base.logs]>->(
            ': <TERM> `-- sub-process%s %s',
            <[base.cnt_s]>->( @children == 1, ' -- :', 'es :' ),
            join( ', ', @children )
        );
        map { delete <v7.child>->{$pid} if not kill( 15, $ARG ) } @children;
    }
}

map { <[base.logs]>->( ': <TERM> orphan %s', $ARG ) if kill( 15, $ARG ); }
    <[v7.sub-process.orphan_pids]>;

while ( ( my $w_pid = <[base.waitpid]>->(-1) ) > 0 ) {
    delete <v7.child>->{$w_pid};
}

my %children_left = map { $ARG => TRUE } keys <v7.child>->%*;

my $wait_start = <[base.time]>->($t_res);

while ( keys %children_left ) {
    foreach my $pid (
        sort {
            <v7.child>->{$b}->{'start_time'}
                // 0 <=> <v7.child>->{$a}->{'start_time'} // 0
        }
        keys %children_left
    ) {
        my $inst_id      = <v7.child>->{$pid}->{'instance_id'};
        my $zenka_name   = <v7.zenka.instance>->{$inst_id}->{'zenka_name'};
        my $time_now     = <[base.time]>->($t_res);
        my $waiting_secs = $time_now - $wait_start;
        if ( not kill( 15, $pid ) ) {
            delete $children_left{$pid};    # <-- gone now .,
        } elsif ( $waiting_secs >= ( $kill_timeout + $abort_timeout ) ) {
            kill( 9, keys %children_left );
            <[base.log]>->( 0, 'ABORT TIMEOUT during process shut-down ..,' );
            exit(1);
        }
        if ( $waiting_secs >= $kill_timeout ) {
            my @children = <[v7.sub-process.get_children]>->($pid)->@*;
            if ( not exists <v7.child>->{$pid}->{'zenka_child'} ) {
                <[base.logs]>->(
                    ': <KILL> PID %-7s  <-= %11s',
                    $pid, $zenka_name
                ) if kill( 9, $pid );
            }
            delete $children_left{$pid};
            if (@children) {
                <[base.logs]>->(
                    ': <KILL> `-- sub-process%s %s',
                    <[base.cnt_s]>->( @children == 1, ' -- :', 'es :' ),
                    join( ', ', @children )
                );
                kill( 9, @children );
                map { delete $children_left{$pid}; } @children;
            }
        }
    }
    <[base.sleep]>->(0.042);
}

map {
    <[base.logs]>->( ': <KILL> orphan process %s', $ARG );
    kill( 9, $ARG )
} <[v7.sub-process.orphan_pids]>;

<[v7.tmp-paths.global.clean-up]>->(2);    ##  silent clean up  ##

<[base.log]>->( 1, ':. done.' );
exit($exit_code);

#,,.,,,.,,.,,,,,,,.,.,,,.,,.,,,.,,,..,,,,,.,,,..,,...,...,.,,,,..,,,.,,,,,..,,
#7UYWKQATZDZ74H6CK3W24VTLERF5QLCLWECKLO5AEVNC67VWGJGZQ5EZM3RY66G6GCIORSJAQFC6K
#\\\|4OVY6X5N4MVERGVQMZOXPARVBOZ7Z7XLEG4OYYYGPARWEC3THMO \ / AMOS7 \ YOURUM ::
#\[7]4Z2XTVG2OJZOXUP42FM2ACYUQA6XMB6JKHJWORDXFHQTJ3CYZMCY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
