## [:< ##

# name  = v7.zenka.cmd.report-temp-path
# param = <tmp-path>
# descr = register temp. paths for later clean-up

( my $zenka, my $zenka_sid, my $tmppath ) = split( m| |, $$call{'args'}, 3 );

my $valid_chars_re = qr|[0-9a-zA-Z\-_\./]+|;
$zenka =~ s|^.*\.||;    # <-- node portion

my $err_reason;
$err_reason = 'expected zenka sid from cube [ misconfigured ]'
    if not defined $zenka_sid or $zenka_sid !~ m|^\d+$|;

<[base.s_warn]>->( '[%d] << %s >>', $call->{'session_id'}, $err_reason )
    if defined $err_reason;

$err_reason = 'expected path parameter' if not length( $tmppath // '' );
$err_reason = 'absolute path expected'
    if not defined $err_reason and $tmppath !~ m|^/|;
$err_reason
    = sprintf( 'path parameter %s not allowed for deletion', $tmppath )
    if not defined $err_reason
    and abs_path($tmppath)    ##  checking minimal exclusion list  ##
    =~ m,^/[^/]+(/local(/s?bin)?|/share|/s?bin)?$,;   ## system directories ##

( my $inv_chars = $tmppath ) =~ s|$valid_chars_re||g;
$err_reason = sprintf 'temp path contains not valid characters [%s]',
    $inv_chars
    if not defined $err_reason and $tmppath !~ m|^$valid_chars_re$|;

$tmppath = abs_path($tmppath) if not defined $err_reason;

$err_reason = sprintf( "specified path '%s' does not exist", $tmppath )
    if not defined $err_reason
    and ( not defined $tmppath or not -e $tmppath );

my $zenka_instance;
if ( not defined $err_reason ) {

    foreach my $instance_id (<[v7.instance_ids]>) {

        my $instance = <v7.zenka.instance>->{$instance_id};

        $zenka_instance = $instance_id and last
            if exists $instance->{'cube_sid'}
            and defined $instance->{'cube_sid'}
            and $instance->{'cube_sid'} == $zenka_sid
            or $zenka eq qw| cube |
            and $zenka_sid eq qw| 0000000 |
            and $instance->{'zenka_name'} eq $zenka;
    }
}

##
##
$err_reason = 'no instance matches cube-sid [ requested ? ]'
    if not defined $err_reason and not defined $zenka_instance;

my $instance;
my %has_uid;
my %has_gid;
if ( not defined $err_reason ) {
    $instance = <v7.zenka.instance>->{$zenka_instance};
    my $p_pid = $instance->{'process'}->{'id'};

    <v7.process.instance_cache>->{$p_pid} = $zenka_instance;

    my @children = <[v7.sub-process.get_children]>->($p_pid)->@*;
    my @i_pids   = @children ? ( $p_pid, @children ) : ($p_pid);

    foreach my $inst_PID (@i_pids) {

        ( my $p_uid, my $p_gid ) = <[v7.sub-process.get_uid]>->($inst_PID);

        if ( $p_uid == -1 and $inst_PID == $p_pid ) {
            $err_reason
                = sprintf( 'zenka %s seems gone [ no uid match for pid %d ]',
                $zenka, $inst_PID );
            last;
        } else {
            push( $has_uid{$p_uid}->@*, $inst_PID );
            push( $has_gid{$p_gid}->@*, $inst_PID ) if defined $p_gid;
        }
    }

    $err_reason //= 'could not map instance to user id' if not keys %has_uid;
}

my $uid_match = FALSE;    # LLL: also check gids.,

if ( not defined $err_reason ) {
    my @match_type;
    my $stat_ref = File::stat::stat($tmppath);
    my $stat_uid = $stat_ref->uid;
    my $stat_gid = $stat_ref->gid;
    my %match_pid;

    push( @match_type, qw| user | )
        if exists $has_uid{$stat_uid}
        and $stat_ref->cando( S_IWUSR(), $stat_uid );    ## <-- user can write

    push( @match_type, qw| group | )
        if defined $stat_gid
        and exists $has_gid{$stat_gid}
        and $stat_ref->cando( S_IWGRP(), $stat_gid ); # <-- group write access

    if (@match_type) {
        $instance->{'stat_uid'} = $stat_uid;
        $instance->{'stat_gid'} = $stat_gid;
        <[base.logs]>->(
            2,
            "<report-temp-path> %s write access for '%s'",
            join( ' and ', @match_type ), $zenka
        );
    } else {    ##  no owner match in @match_type  ##
        $err_reason
            = sprintf 'path owner of %s does not match process '
            . '[ path pid : %d gid : %d \ process uid : %s gid : %s ]',
            $tmppath, $stat_uid, $stat_gid,
            join( ', ', sort keys %has_uid ),
            join( ', ', sort keys %has_gid );
    }
}
<[base.logs]>->(
    0, "< %s > [sid:%d] report-temp-path : %s",
    $zenka, $zenka_sid, $err_reason
) if defined $err_reason;

return { 'mode' => qw|false|, 'data' => $err_reason } if defined $err_reason;

push <v7.zenka.instance>->{$zenka_instance}->{'temp-path'}->@*, $tmppath;

## register global [ for zenka shutdown case ]
##
<[v7.tmp-paths.global.register]>->($tmppath);

my $str_len = 52 - length <system.node.name>;

my $tmppath_str = <[base.parser.ellipse_center]>->( $tmppath, $str_len );
<[base.logs]>->( '[%s] <pth> %s', $zenka_instance, $tmppath_str );

##  reporting success  ##
return { 'mode' => qw|true|, 'data' => sprintf "registered '%s'", $tmppath };

#,,,.,,.,,..,,.,.,...,,,.,,..,...,.,,,,.,,.,.,..,,...,..,,...,.,.,.,,,.,,,.,,,
#EXX3NMCJL7SGACWO7XYBNND7JCSE25CSIEWCU4YKBEGJ5CKSQI6CGQ6I6PMXHYUE3CCDL3UPGBOSY
#\\\|IMH5F7V4FWYJJEYI5KNLFWSKWUOPCMYXCC774STWT6GMWS6DBML \ / AMOS7 \ YOURUM ::
#\[7]W6IPEC4T3LI4Q2TOM4CZTRXB42Y7K7KX3M7MUCLYK7N7JN63Q6BI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
