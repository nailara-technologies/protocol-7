## >:] ##

# name  = base.cmd.verbosity
# descr = reports the current zenka log level[s]
# param = [buffer|file|console]

my $verbosity_type = $$call{'args'};

return {
    'mode' => qw| false |,
    'data' => 'incorrect verbosity type parameter [buffer|logfile|console]'
    }
    if defined $verbosity_type and $verbosity_type !~ m,buffer|file|console,;

my $verbosities = <system.verbosity> // {};

if ( defined $verbosity_type ) {

    $verbosity_type =~ s{^(file)$}{log$1};
    $verbosity_type =~ s{^(buffer|logfile)$}{zenka_$1};

    return { 'mode' => qw| false |, 'data' => 'type not valid' }
        if not exists $verbosities->{$verbosity_type};

    return {
        'mode' => qw| true |,
        'data' => $verbosities->{$verbosity_type}
    };
}

my $v_report;
foreach my $key ( reverse sort keys %{$verbosities} ) {
    ( my $name_str = $key ) =~ s|zenka_||;
    $v_report
        .= sprintf( ": : %7s  :.  %s\n", $name_str, $verbosities->{$key} );
}

return { 'mode' => qw| size |, 'data' => ":\n$v_report:\n" };

#,,..,...,,.,,,,,,,,,,...,.,,,,,,,,.,,,..,.,,,..,,...,...,..,,,..,.,.,.,,,.,.,
#GYZCUL7K4LPIVLPWIGLNFIMJDNYGWXWYSICVBOUE4IAU32GW6MPFZDFLOWAGDRS2MTZFFSHY3JEA6
#\\\|WDJVKMO6BU6FJYDFOBRAUBWCTHOE5BNN5IBFXD6I5LS4NZR3DBS \ / AMOS7 \ YOURUM ::
#\[7]WR5AK7DPXFMV72G5IVQNNO5L34XUSNY7R3FCUREYXVVQJZLS5KAI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
