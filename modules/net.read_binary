## [:< ##

# name  = net.read_binary

my $id = shift;

if ( not defined $id ) {
    warn 'expected session id param <{C1}>';
    return undef;
}

return 2 if not exists $data{'session'}->{$id};    ## session gone. ##

my $session     = $data{'session'}->{$id};
my $handle_href = $data{'handle'}->{ $session->{'handle'} };

## further error checks in base.handler.read ##

if ( not defined $session->{'bytes-to-read'} ) {
    warn 'bytes-to-read is not defined <{C1}>';
    return undef;
}

my $return_code = 2;    ##  set to disconnecting  ##

my $size_left = $data{'size'}->{'buffer'}->{'input'}
    - length $session->{'buffer'}->{'input'};

if ( $size_left <= 0 ) {    ##  no space left in buffer  ##
    $handle_href->{'paused'} = TRUE;
    warn 'input buffer size exceeded <{C1}>';
    return;
}

my $bytecount = <[base.s_read]>->(    ## limit : remaining buffer size ##
    $session->{'handle'}, \$session->{'buffer'}->{'input'}, $size_left
);

if ( $bytecount > 0 ) {
    $session->{'fh-last-read-error'} = FALSE;
    $handle_href->{'bytes'}->{'in'} += $bytecount;
    $return_code = 0;    ##  reports request complete [ no size-limit ]  ##

} else {    ##  client is gone \ error  ##
    $session->{'fh-last-read-error'} = TRUE;    ## return code : 2  ##
}

return $return_code;

#,,.,,.,,,,..,,,,,,,,,.,,,..,,.,,,,,.,,,,,,..,..,,...,...,,..,,..,,.,,,,,,.,.,
#TY22WGKB3JAG3BMQE6Y675JIATVI4DVCKOG2OJXWFO5EMTVBH7XHS75SWHNTVVH773LBIFB64IWI6
#\\\|WVK3YTZNNQ4RSJRC736LLJSZMSE3JOT5PAVGKSAGYCPBNMNBJFC \ / AMOS7 \ YOURUM ::
#\[7]RAHEPX2VXPR5JQZ6QBZOBRVNR2T627UQGUYLQZVI3XDY52XQO6DA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
