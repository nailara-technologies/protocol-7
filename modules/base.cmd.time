# >:]

# name  = base.cmd.time
# param = [clock|date|%d]
# descr = returns time, date or unix time (%d = float)

my $param = $$call{'args'};

if ( not defined $param ) {
    return {
        'mode' => 'ack',
        'data' => time()
    };
} elsif ( defined $param and $param eq 'clock' ) {
    return {
        'mode' => 'ack',
        'data' => $code{'base.parser.timestamp'}->('clock')
    };
} elsif ( defined $param and $param eq 'date' ) {
    return {
        'mode' => 'ack',
        'data' => $code{'base.parser.timestamp'}->('date')
    };
} elsif ( defined $param and $param =~ /^\d+$|^$/ ) {
    my $float = 0;
    my $limit = 22;

    # XXX: consider additional access control to floating seconds?
    $float = $param if defined $param and $param =~ /^\d+$/;
    return {
        'mode' => 'nack',
        'data' => "current float precision limit is $limit"
        }
        if $float > $limit;
    return {
        'mode' => 'ack',
        'data' => $code{'base.time'}->($float)
    };
} elsif ( defined $param and $param eq '%d' ) {
    return {
        'mode' => 'nack',
        'data' => "'%d' is expected to be a decimal value"
            . " describing floating point precision!"
    };
} else {
    return {
        'mode' => 'nack',
        'data' => "invalid parameter '$param'.. [clock|date|%d]"
    };
}
