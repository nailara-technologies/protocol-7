## [:< ##

# name  = base.cmd.time
# param = [zone|date|unix[.<n>]]
# descr = return time[zone], date or unixtime [%.0<n>f]

my $param = $$call{'args'};

if ( not defined $param ) {
    return {
        'mode' => qw| true |,
        'data' => <[base.parser.timestamp]>->('time')
    };
} elsif ( $param eq 'date' ) {
    return {
        'mode' => qw| true |,
        'data' => <[base.parser.timestamp]>->('date')
    };
} elsif ( $param eq 'zone' ) {
    return {
        'mode' => qw| true |,
        'data' => <[base.timezone]>
    };
} elsif ( $param eq 'unix' ) {
    return {
        'mode' => qw| true |,
        'data' => time()
    };
} elsif ( $param =~ /^unix\.(\d+)$/ ) {    # LLL: consider access control?
    my $float = $1;
    my $limit = 22;
    return {
        'mode' => qw| false |,
        'data' => "current float precision limit is $limit"
        }
        if $float > $limit;
    return {
        'mode' => qw| true |,
        'data' => <[base.time]>->($float)
    };
} else {
    return {
        'mode' => qw| false |,
        'data' => "invalid parameter '$param'.. [date|unix[.<n>]]"
    };
}

#,,.,,,,,,.,.,,,,,...,,..,,,.,,,.,.,,,...,,.,,..,,...,...,,..,.,,,.,.,.,.,...,
#H4C7DCMHW5LC7Q42LPOVC745Z4VVLDEZM2PDM7JKAQSQL3BDGZYCBRODOP7YCKE4KQ4WLLNZRYWZU
#\\\|36FTT47TTWH7OFFX63ZCLJPBWVCQ24ZNXP4YRB5DHD7BYJ75LYG \ / AMOS7 \ YOURUM ::
#\[7]6MY5KG3FRGQ45GQXKTPXSWZE3QEQXNCRBQ4TOB7ODLCSAGC27YAI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
