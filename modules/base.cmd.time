## >:] ##

# name  = base.cmd.time
# param = [zone|date|unix[.<n>]]
# descr = return time[zone], date or unixtime [%.0<n>f]

my $param = $$call{'args'};

if ( not defined $param ) {
    return {
        'mode' => qw| true |,
        'data' => <[base.parser.timestamp]>->('time')
    };
} elsif ( $param eq 'date' ) {
    return {
        'mode' => qw| true |,
        'data' => <[base.parser.timestamp]>->('date')
    };
} elsif ( $param eq 'zone' ) {
    return {
        'mode' => qw| true |,
        'data' => <[base.timezone]>
    };
} elsif ( $param eq 'unix' ) {
    return {
        'mode' => qw| true |,
        'data' => time()
    };
} elsif ( $param =~ /^unix\.(\d+)$/ ) {    # LLL: consider access control?
    my $float = $1;
    my $limit = 22;
    return {
        'mode' => qw| false |,
        'data' => "current float precision limit is $limit"
        }
        if $float > $limit;
    return {
        'mode' => qw| true |,
        'data' => <[base.time]>->($float)
    };
} else {
    return {
        'mode' => qw| false |,
        'data' => "invalid parameter '$param'.. [date|unix[.<n>]]"
    };
}

#,,,.,..,,.,,,.,.,,,,,,,,,,,,,,,.,.,.,..,,,,.,..,,...,...,..,,,,,,.,.,..,,.,,,
#VENC4SB3XLLKTPWKSEWKYGLLFWNERYFO32M64KPKZOWZMUEZRHBUR6M67AHCSFYDHLLYWKY53MLMO
#\\\|ELDJPJSKDC2UJQ57UXJOI5MSTFTH4TOQVUYFCFXKGJUB2JYLGTM \ / AMOS7 \ YOURUM ::
#\[7]SH4JMEF6AGIAWOQ6JWAM6SA4LHS6MA4DVVEUKAXT5KYJEVRTI4BY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
