## [:< ##

# name  = crypt.C25519.single_file
# descr = return true when key is a single file [ private or public ]

my $name = shift // '';

if ( not length $name ) {
    warn 'expecting key name param <{C1}>';
    return undef;
} elsif ( not <[crypt.C25519.key_exists]>->($name) ) {
    <[base.s_warn]>->( "key '%s' not found <{C1}>", $name );
    return undef;
}

my $key_vars_ref = <[crypt.C25519.key_vars]>->($name);
my $key_filename = $key_vars_ref->{'key_filename'};

my $virtual_keyfile  = $key_filename->{'virtual'};
my $secret_key_file  = $key_filename->{'secret'};
my $public_key_file  = $key_filename->{'public'};
my $private_key_file = $key_filename->{'private'};

##  key is 'virtual' [ seed-phrase ]  ##
return FALSE if -f $virtual_keyfile;

##  secret key file [ pair can be derrived from ]  ##
return TRUE if -f $secret_key_file;

my $num_key_files = 0;

$num_key_files++ if -f $public_key_file;
$num_key_files++ if -f $private_key_file;

if ( not $num_key_files ) {
    <[base.s_warn]>->( "key '%s' not found", $name );
    return undef;
} elsif ( $num_key_files == 1 ) {

    return TRUE;    ##[  single key file  ]##

} else {
    return FALSE;    ##  not single file  ##
}

#,,,.,.,.,,,.,.,.,.,.,..,,.,.,,.,,,.,,.,,,,,.,..,,...,...,..,,,.,,.,,,,,,,,,,,
#5JIINSNBSTK3X5XPYRMJCVK4CLGPAQHDPLWL4I4XCGF67O2O6IL2TPP5LORHBMZZ5F265Y5ECVLMU
#\\\|GO2ND6U6HYQCIAKCT6ZMIMGNCJSEQQFFFUCZZK6PG7K6TRTFJBS \ / AMOS7 \ YOURUM ::
#\[7]5JVN6656UWBXMULSIKRB7NGZCRTUKX2GMZLCETIGBE6CBLT5L6AA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
