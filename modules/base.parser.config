## [:< ##

# name  = base.parser.config
# descr = returns perl code from parsed zenka config
# [LLL] = needs more clean up \ extracting of parser code..,

<[base.log]>->( 2, ': parsing protocol-7 zenka code ..,' );
<base.parser.config.errors> //= 0;
my $parse_aref = shift // [];
my $var_prefix = shift // qw| $data |;
my $entries    = 0;
my @init_code  = ();

my $last_line = '';

foreach my $_line ( $parse_aref->@* ) {
    my $conf_line = $_line;    #  <-- leaving original intact.,
    <base.config_parser.cfg_descr> = ${^CAPTURE}[0]
        if $conf_line =~ m|\.:\[ +([^:]+) +\]:\.|
        and defined <base.config_parser.cfg_type>
        and defined <base.config_parser.cfg_name>
        and ( !length(<base.config_parser.cfg_descr>)
        or <base.config_parser.cfg_descr> eq qw| <STDIN> | );
    $conf_line =~ s{^ +| *(#.*|\.:.*)$|[\r\n\t]+}{}g;
    next if not length $conf_line;

    ##  skipping inline subroutine code  ##
    next if index( $conf_line, qw| : |, 0 ) == 0;

    if ( $conf_line =~ s|\\ *$|| ) {
        $last_line .= $conf_line;
        next;
    } elsif ( length($last_line) ) {
        $conf_line =~ s|^[ \t]+||;
        $conf_line = "$last_line$conf_line";
        $last_line = '';
    }
    $conf_line =~ s|(^[^=]+=)[ \t]+|$1|;
    $conf_line =~ s|\$([\{\w])|\\\$$1|g;    ## <-- disallow perl variables ##

    # <<keyword>> requests corresponding data value from network
    # warning: <<<variable>>> will not work in current implementation.,
    $conf_line =~ s|<<([\w_-]+(\.[\w_-]+)*)>>|\[net.get:"$1"]|g;

    my ( $found, $rec_depth ) = ( 1, 0 );
    while ($found) {
        $found = 0;
        if ( $conf_line =~ m{(?<![\w\d])\[([^\[|^\]]+)\]} )
        {    # [LLL] check '|'
            $found = 1;
            my ( $cmd_name, $param ) = ( ${^CAPTURE}[0], '' );
            my $out = '';
            if ( $cmd_name =~ s|([^:]+):(.+)$|$1| ) {
                $param = ${^CAPTURE}[1];
                ## $param = "\"$2\"";
                ## $param =~ s|,|","|g;
            }

            while ( $param =~ m|(?<!')<([\w_-]+(\.[\w_-]+)+)>(?!')| ) {
                my $conf_key  = ${^CAPTURE}[0];
                my $eval_code = $conf_key;
                $eval_code =~ s|[ \t\n]+||g;
                $eval_code =~ s|\.|'}{'|g;
                $eval_code = "${var_prefix}{'$eval_code'}";
                $eval_code =~ s|\.|\\.|;
                $param     =~ s|(?<!')<$conf_key>(?!')|$eval_code|g;
            }

            ## [code_name:param] shortcut patterns ##

            my $cmd_name_prefixes = qr,^(zenka|root)\.,;

            if ( $cmd_name !~ m|\.|
                and defined $code{ qw| base. | . $cmd_name } ) {
                $cmd_name = sprintf qw| base.%s |, $cmd_name;

            } elsif ( $cmd_name =~ $cmd_name_prefixes
                and defined $code{ qw| base. | . $cmd_name } ) {
                $cmd_name = sprintf qw| base.%s |, $cmd_name;

            } elsif ( $cmd_name !~ m|\.|
                and defined $code{ qw| base.cmd. | . $cmd_name } ) {
                $cmd_name = sprintf qw| base.cmd.%s |, $cmd_name;

            } elsif ( $cmd_name !~ m|\.| ) {
                <[base.logs]>->(
                    "called not defined command '%s'..,", $cmd_name
                );
            }

            $conf_line =~ s{(?<![\w\d])\[([^\[|^\]]+)\]}
                           {\$code{'$cmd_name'}->($param)};

            while ( $conf_line =~ m,^[ \t]*([^\$|^ |^\t]+)[ \t]*=, ) {
                my $new_conf_line = $LAST_PAREN_MATCH;
                $new_conf_line =~ s|[ \t\n]||g;
                $new_conf_line = "${var_prefix}{\'$new_conf_line\'}";
                $new_conf_line =~ s|\.|'}{'|g;
                $conf_line     =~ s{^[ \t]*([^\$|^ |^\t]+)[ \t]*=}
                                   {$new_conf_line = };
            }
            $rec_depth++;
        }
    }
    if ($rec_depth) {
        push( @init_code, $conf_line );
        $conf_line = '';
        $found     = 0;
    } else {
        my ( $_name, $_value ) = split( qw| = |, $conf_line, 2 );
        if ( defined $_value ) {
            $_name  =~ s|[ \t\n]||g;
            $_value =~ s|'||g;
            my $conf_hash = sprintf qw| %s{'%s'} |, $var_prefix, $_name;
            $conf_hash =~ s|\.|'}{'|g;

            while ( $_value =~ m|(?<!')\<([\w_-]+(\.[\w_-]+)+)>(?!')| ) {
                my $conf_key  = ${^CAPTURE}[0];
                my $eval_code = $conf_key;
                $eval_code =~ s|[ \t\n]+||g;
                $eval_code =~ s|\.|'}{'|g;
                $eval_code = sprintf qw| %s{'%s'} |, $var_prefix, $eval_code;
                $eval_code =~ s|\.|\\.|;
                $_value    =~ s|(?<!')<$conf_key>(?!')|'.$eval_code.'|g;
            }

            my $cmd = join( qw| = |, $conf_hash, "'$_value'" );

            $cmd =~ s{''\.|\.''}{}g;
            push( @init_code, $cmd );

            if ($EVAL_ERROR) {
                <base.parser.config.errors>++;
                <[base.logs]>->(
                    0,    "<< error during config parsing : ['%s'] %s >>",
                    $cmd, <[base.str.os_err]>
                );
                undef $EVAL_ERROR;
            } else {
                $entries++;
            }
        }
    }
}

if ( defined <system.verbosity.console> and <system.verbosity.console> > 1 ) {
    foreach my $code (@init_code) { <[base.logs]>->( 1, ': : %s', $code ) }
}

if (    my $cfg_type = <base.config_parser.cfg_type>
    and my $cfg_name = <base.config_parser.cfg_name> ) {
    <system.descr.config>->{$cfg_type}->{$cfg_name}
        = <base.config_parser.cfg_descr> // '';
}
delete <base.config_parser>;

return @init_code;

#,,..,.,,,.,,,.,.,.,.,...,..,,,,,,.,.,.,,,...,..,,...,...,..,,,,.,..,,,,,,,,.,
#BEBZMBZNAGU6RCCFYM3ZZMTBULA2IU3DJT4K3V7E4BJ33TJYMTNLVTV32WWOD5HGSFGWS4CWVHYLU
#\\\|LJHSSBYTMUE46KFQBSHJGG5VK4I24UX4A2ZQNDFPJTM4QYDHIOO \ / AMOS7 \ YOURUM ::
#\[7]EBDYB2EKTLCFBW6YFY4TQKB4CDEG6ACBZYA6PEW233UCOMYB5YBI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
