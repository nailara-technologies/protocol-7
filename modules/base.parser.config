# >:]

# name    = base.parser.config
# descr   = returns perl code from parsed agent config
# comment = todo: needs cleanup!

&{ $code{'base.log'} }(1,': parsing init code..');
my @parse_code = @_;
my $entries   = 0;
my @init_code = ();

foreach my $conf_line (@parse_code) {
    $conf_line =~ s/^\s+|\t+|#.*|[\s|\t]*\.\:.*|[\s|\t]+$|\r|\n//g;
    next if $conf_line eq '';
    $conf_line =~ s/(^[^\=]+\=)[\s|\t]+/$1/;
    $conf_line =~ s/\$/\\\$/g;

    # <<keyword>> requests corresponding data value from network
    # warning: <<<variable>>> will not work in current implementation!
    $conf_line =~ s/<<([\w\_\.]+)>>/\[net.get:"$1"]/g;

    my ( $found, $rec_depth ) = ( 1, 0 );
    while ($found) {
        $found = 0;
        if ( $conf_line =~ /\[([^\[|^\]]+)\]/ ) {
            $found = 1;
            my ($cmd_name, $param) = ($1,'');
            my $out = '';
	    if ( $cmd_name =~ s/([^\:]+)\:(.+)$/$1/ ) {
		$param = $2;

#                $param = "\"$2\"";
#		$param =~ s/\,/\",\"/g;
            }

	    while ( $param =~ /(?<!\')\<([\w\._-]+)\>(?!\')/ ) {
		my $conf_key = $1;
		my $eval_code = $conf_key;
		$eval_code =~ s/\s+|\t+|\n//g;
		$eval_code =~ s/\./\'\}\{\'/g;
		$eval_code = "\$data{\'$eval_code\'}";
		$eval_code =~ s/\./\\./;
		$param =~ s/(?<!\')\<$conf_key\>(?!\')/$eval_code/g;
	    }

            if (    $cmd_name !~ /\./
                and defined $code{ 'base.' . $cmd_name }
                and defined &{ $code{ 'base.' . $cmd_name } } )
            {
                $cmd_name = "base.$cmd_name";
            }
            elsif ( $cmd_name !~ /\./
                and defined $code{ 'base.cmd.' . $cmd_name }
                and defined &{ $code{ 'base.cmd.' . $cmd_name } } )
            {
                $cmd_name = "base.cmd.$cmd_name";
            }
            elsif ( $cmd_name !~ /\./ ) {
                &{ $code{'base.log'} }( 1,
                    "undefined command '$cmd_name' called!");
            }

            $conf_line =~ s/\[([^\[|^\]]+)\]/&{\$code{'$cmd_name'}}($param)/;
            while ( $conf_line =~ /^[\s|\t]*([^\$|^\s|^\t]+)[\s|\t]*=/ ) {
                my $new_conf_line = $1;
                $new_conf_line =~ s/\s+|\t+|\n//g;
                $new_conf_line = "\$data{\'$new_conf_line\'}";
                $new_conf_line =~ s/\./\'\}\{\'/g;
                $conf_line     =~
                  s/^[\s|\t]*([^\$|^\s|^\t]+)[\s|\t]*=/$new_conf_line = /;
            }
            $rec_depth++;
        }
    }
    if ($rec_depth) {
        push( @init_code, $conf_line );
        $conf_line = '';
        $found     = 0;
    }
    else {
        my ( $_name, $_value ) = split( /=/, $conf_line );
        if ( defined $_value ) {
            $_name  =~ s/\s+|\t+|\n//g;
            $_value =~ s/\'//g;
            my $conf_hash = "\$data{\'$_name\'}";
            $conf_hash =~ s/\./\'\}\{\'/g;

	    while ( $_value =~ /(?<!\')\<([\w\._-]+)\>(?!\')/ ) {
		my $conf_key = $1;
		my $eval_code = $conf_key;
		$eval_code =~ s/\s+|\t+|\n//g;
		$eval_code =~ s/\./\'\}\{\'/g;
		$eval_code = "\$data{\'$eval_code\'}";
		$eval_code =~ s/\./\\./;
		$_value =~ s/(?<!\')\<$conf_key\>(?!\')/'.$eval_code.'/g;
	    }

            my $cmd = "$conf_hash=\'$_value\'";
	    $cmd =~ s/''\.|\.''//g;
            push( @init_code, $cmd );

            if ($@) {
                &{ $code{'base.log'} }( 1,
                    "DANGER: CONFIG PARSER ERROR: ($cmd) $!");
            }
            else { $entries++ }
        }
    }
}

if ( defined $data{'system'}{'verbosity'} and $data{'system'}{'verbosity'} > 1 )
{
    foreach my $code (@init_code) { &{ $code{'base.log'} }(1,": : $code") }
}

return @init_code;
