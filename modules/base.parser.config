# >:]

# name    = base.parser.config
# descr   = returns perl code from parsed agent config
# comment = todo: needs cleanup!

<[base.log]>->( 2, ': parsing agent code..' );
<base.parser.config.errors> //= 0;
my $parse_aref = shift // [];
my $var_prefix = shift // '$data';
my $entries    = 0;
my @init_code  = ();

my $last_line = '';

foreach my $_line ( @{$parse_aref} ) {
    my $conf_line = $_line;    # leaving original intact!
    $conf_line =~ s/^ +| *(#.*|\.:.*)$|[\r\n\t]+//g;
    next if $conf_line eq '';
    if ( $conf_line =~ s|\\ *$|| ) {
        $last_line .= $conf_line;
        next;
    } elsif ( length($last_line) ) {
        $conf_line =~ s|^[ \t]+||;
        $conf_line = "$last_line$conf_line";
        $last_line = '';
    }
    $conf_line =~ s/(^[^=]+=)[ \t]+/$1/;
    $conf_line =~ s/\$/\\\$/g;

    # <<keyword>> requests corresponding data value from network
    # warning: <<<variable>>> will not work in current implementation!
    $conf_line =~ s/<<([\w_-]+(\.[\w_-]+)*)>>/\[net.get:"$1"]/g;

    my ( $found, $rec_depth ) = ( 1, 0 );
    while ($found) {
        $found = 0;
        if ( $conf_line =~ /\[([^\[|^\]]+)\]/ ) {    # XXX: check '|' !
            $found = 1;
            my ( $cmd_name, $param ) = ( $1, '' );
            my $out = '';
            if ( $cmd_name =~ s/([^:]+):(.+)$/$1/ ) {
                $param = $2;

                #                $param = "\"$2\"";
                #		$param =~ s/,/","/g;
            }

            while ( $param =~ /(?<!')<([\w_-]+(\.[\w_-]+)+)>(?!')/ ) {
                my $conf_key  = $1;
                my $eval_code = $conf_key;
                $eval_code =~ s/[ \t\n]+//g;
                $eval_code =~ s/\./'}{'/g;
                $eval_code = "${var_prefix}{'$eval_code'}";
                $eval_code =~ s/\./\\./;
                $param =~ s/(?<!')<$conf_key>(?!')/$eval_code/g;
            }

            if (    $cmd_name !~ /\./
                and defined $code{ 'base.' . $cmd_name }
                and defined &{ $code{ 'base.' . $cmd_name } } ) {
                $cmd_name = "base.$cmd_name";
            } elsif ( $cmd_name !~ /\./
                and defined $code{ 'base.cmd.' . $cmd_name }
                and defined &{ $code{ 'base.cmd.' . $cmd_name } } ) {
                $cmd_name = "base.cmd.$cmd_name";
            } elsif ( $cmd_name !~ /\./ ) {
                <[base.log]>->( 1, "undefined command '$cmd_name' called!" );
            }

            $conf_line =~ s/\[([^\[|^\]]+)\]/\$code{'$cmd_name'}->($param)/;
            while ( $conf_line =~ /^[ \t]*([^\$|^ |^\t]+)[ \t]*=/ ) {
                my $new_conf_line = $1;
                $new_conf_line =~ s/[ \t\n]//g;
                $new_conf_line = "${var_prefix}{\'$new_conf_line\'}";
                $new_conf_line =~ s/\./'}{'/g;
                $conf_line
                    =~ s/^[ \t]*([^\$|^ |^\t]+)[ \t]*=/$new_conf_line = /;
            }
            $rec_depth++;
        }
    }
    if ($rec_depth) {
        push( @init_code, $conf_line );
        $conf_line = '';
        $found     = 0;
    } else {
        my ( $_name, $_value ) = split( /=/, $conf_line, 2 );
        if ( defined $_value ) {
            $_name =~ s/[ \t\n]//g;
            $_value =~ s/'//g;
            my $conf_hash = "${var_prefix}{\'$_name\'}";
            $conf_hash =~ s/\./'}{'/g;

            while ( $_value =~ /(?<!')\<([\w_-]+(\.[\w_-]+)+)>(?!')/ ) {
                my $conf_key  = $1;
                my $eval_code = $conf_key;
                $eval_code =~ s/[ \t\n]+//g;
                $eval_code =~ s/\./'}{'/g;
                $eval_code = "${var_prefix}{'$eval_code'}";
                $eval_code =~ s/\./\\./;
                $_value =~ s/(?<!')<$conf_key>(?!')/'.$eval_code.'/g;
            }

            my $cmd = "$conf_hash='$_value'";
            $cmd =~ s/''\.|\.''//g;
            push( @init_code, $cmd );

            if ($@) {
                <base.parser.config.errors>++;
                <[base.log]>->(
                    0, "WARNING: ERROR DURING CONFIG PARSING: ($cmd) $!"
                );
                undef $@;
            } else {
                $entries++;
            }
        }
    }
}

if ( defined $data{'system'}{'verbosity'} and $data{'system'}{'verbosity'} > 1 )
{
    foreach my $code (@init_code) { <[base.log]>->( 1, ": : $code" ) }
}

return @init_code;
