# >:]

# name  = ssh.handler.ssh_io
# descr = reads and processes output from mpv control pipe

my $event = shift->w;

my $read_fh      = $event->fd;
my $con_id       = $event->data->{'con_id'};
my $ssh          = $event->data->{'ssh_obj'};
my $profile_name = $event->data->{'profile_name'};
my $link_name    = $event->data->{'link_name'};
my $connection   = $data{'ssh'}{'connections'}->{$con_id};
my $profile_data = <ssh.cfg.profiles>->{$profile_name};
my $channel      = $connection->{'nch'};

if ( $channel->eof ) {
    <[base.log]>->(
        0, "ssh connection '$link_name' [$con_id] closed by remote host"
    );
    <[ssh.connection.stop]>->($con_id);
    return;
}

my $buffer;
my $bytes = $channel->read( $buffer, 4096 );
if ( defined $bytes and $bytes ) {
    $connection->{'buffer'} .= $buffer;
    $event->now;
} else {
    return;
}

if ( !$connection->{'authorized'} ) {
    my $local_user  = $profile_data->{$link_name}->{'nailara.local.user'};
    my $remote_user = $profile_data->{$link_name}->{'nailara.remote.user'};
    if ( $connection->{'buffer'} =~ s/^>:]\n// ) {
        my $remote_pass = $profile_data->{$link_name}->{'nailara.remote.pass'};
        $channel->write("auth $remote_user $remote_pass\n");
    } elsif ( $connection->{'buffer'} =~ s/^YEAH >:P\n// ) {
        $connection->{'authorized'} = 1;
        <[base.log]>->(
            1, ": : remote nailara authentication successful [$remote_user]"
        );

        # XXX: check status...
        my $local_sock = <[base.open]>->(
            'tcp/ip', 'out', <net.local.addr>, <net.local.port>
        );
        if ( not defined $local_sock or !$local_sock->connected ) {
            <[base.log]>->( 0, ": : tcp connection to local core failed!" );
            return <[ssh.connection.stop]>->($con_id);
        }
        $local_sock = <[net.authme]>->(
            $local_sock,
            $profile_data->{$link_name}->{'nailara.local.user'},
            $profile_data->{$link_name}->{'nailara.local.pass'}
        );
        if ( not defined $local_sock or !$local_sock->connected ) {
            <[base.log]>->( 0, ": : local nailara authentication failed!" );
            return <[ssh.connection.stop]>->($con_id);
        }
        $connection->{'local_fh'} = $local_sock;
        <[base.log]>->( 1, ": : local nailara authentication successful" );
        $connection->{'io'}->{'nailara'} = <[event.add_io]>->(
            {   'fd'      => $connection->{'local_fh'},
                'handler' => 'ssh.handler.nailara_io',
                'data'    => {
                    'con_id'       => $con_id,
                    'ssh_obj'      => $ssh,
                    'profile_name' => $profile_name,
                    'link_name'    => $link_name
                }
            }
        );
        $connection->{'linked'} = 1;

    } elsif ( $connection->{'buffer'} =~ s/^FAIL >:\|\n// ) {
        <[base.log]>->( 0, ": : remote nailara authentication failed!" );
        <[ssh.connection.stop]>->($con_id);
    } elsif ( $connection->{'buffer'} =~ s/^>:\|\n// ) {
        <[base.log]>->( 0, ": : remote nailara authentication timeout!" );
        <[ssh.connection.stop]>->($con_id);
    } else {
        <[base.log]>->(
            0, ": : protocol error during remote nailara authentication!"
        );
        <[ssh.connection.stop]>->($con_id);
    }
} else {
    if (   !$connection->{'linked'}
        and $connection->{'buffer'} =~ s/^\((\d+)\).+\n// ) {
        my $cmd_id = $1;
        $channel->write("($cmd_id)NACK link not initialized yet!\n");
    } else {
        my $blen = length( $connection->{'buffer'} );
        my $bytes
            = syswrite( $connection->{'local_fh'}, $connection->{'buffer'} );
        if ( not defined $bytes ) {
            <[base.log]>->(
                0, "local nailara link filehandle closed! connection shutdown.."
            );
            <[ssh.connection.stop]>->($con_id);
        } else {
            substr( $connection->{'buffer'}, 0, $bytes, '' );
        }
    }

}
