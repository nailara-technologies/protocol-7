# >:]

# name  = ffmpeg.cmd.rescale_video
# param = <path> <new_size> [box_size]
# descr = rescale video dimensions

my $params = shift->{'args'};
my ( $video_path, $new_size, $box_size ) = split( / +/, $params );

return { 'mode' => 'nack', 'data' => 'expected path to video file' }
    if not defined $video_path;
return { 'mode' => 'nack', 'data' => 'expected new video size' }
    if not defined $new_size;
return { 'mode' => 'nack', 'data' => 'syntax error in video size parameter' }
    if $new_size !~ /^\d+x\d+$/;
return { 'mode' => 'nack', 'data' => 'syntax error in box size parameter' }
    if defined $box_size and $box_size !~ /^\d+x\d+$/;
return { 'mode' => 'nack', 'data' => 'video file not found!' }
    if !-f $video_path;

$box_size //= $new_size;
( my $video_name = $video_path ) =~ s|^.*/||;

<[base.log]>->( 1, "rescaling video '$video_name' ($new_size) [$box_size].." );

$new_size =~ s|x|:|;

( my $output_path = $video_path ) =~ s|/([^/]+)$|/rescaled/$1|;
if ( !-d $output_path ) {
    make_path($output_path) or die "make_path($output_path): $!";
}

my $partial_output_file = "$output_path/$box_size...converting...mp4";
if ( -f $partial_output_file ) {
    <[base.log]>->( 0, ": found partial output file, cleaning up..." );
    unlink($partial_output_file) or warn "unlink($partial_output_file): $!";
}
unlink($partial_output_file);
my $output_file = "$output_path/$box_size.mp4";

my @ffmpeg_params = (
    <ffmpeg.path.ffmpeg_bin>, '-i',
    $video_path,              '-loglevel',
    'quiet',                  '-y',
    '-strict',                '-2',
    '-c:v',                   'libx264',
    '-preset',                'medium',
    '-x265-params',           'crf=' . <ffmpeg.quality>,
    '-c:a',                   'aac',
    '-b:a',                   <ffmpeg.bitrate>,
    '-vf',                    "scale=$new_size",
    $partial_output_file
);

if ( !-f $output_file ) {
    if ( system(@ffmpeg_params) != 0 or $? == -1 or $? & 127 ) {
        unlink($partial_output_file) if -f $partial_output_file;
        <[base.log]>->( 0, "ffmpeg failed to execute: $!" );
        return {
            'mode' => 'nack',
            'data' => "ffmpeg failed to execute [$!]"
        };
    } else {
        rename( $partial_output_file, $output_file )
            or warn "rename failed: $!";
    }
}

return { 'mode' => 'ack', 'data' => $output_file }
