## [:< ##

# name  = ffmpeg.cmd.rescale_video
# param = src size [box] [path]
# descr = rescale video dimensions

my $params = shift->{'args'};
my ( $video_path, $new_size, $box_size, $target_path )
    = split( m| +|, $params );

my $format = <ffmpeg.output_format> // qw| mp4 |;

if ( not defined $target_path and $box_size !~ m|^\d+x\d+$| ) {
    $target_path = $box_size;
    undef $box_size;
}

return { 'mode' => qw| false |, 'data' => 'expected path to video file' }
    if not defined $video_path;
return { 'mode' => qw| false |, 'data' => 'expected new video size' }
    if not defined $new_size;
return {
    'mode' => qw| false |,
    'data' => 'syntax error in video size parameter'
    }
    if $new_size !~ m|^\d+(x\d+)?$|;
return {
    'mode' => qw| false |,
    'data' => 'syntax error in box size parameter'
    }
    if defined $box_size and $box_size !~ m|^\d+x\d+$|;
return { 'mode' => qw| false |, 'data' => 'target_path does not exist' }
    if defined $target_path and !-d $target_path;
return { 'mode' => qw| false |, 'data' => 'video file not found!' }
    if !-f $video_path;

my ( $w, $h ) = ( $1, $3 ) if $new_size =~ m|^(\d+)(x(\d+))?$|;
return {
    'mode' => qw| false |,
    'data' => 'size parameters for libx264 codec not valid'
    }
    if $w % 16
    or defined $h and $h % 2;

$box_size //= $new_size;
( my $video_name = $video_path ) =~ s|^.*/||;

my $size_msg = $new_size;
if ( $new_size !~ m|x| ) {
    $size_msg = sprintf qw| width:%s |, $new_size;
    $new_size = sprintf qw| %s:-1 |,    $new_size;
}

<[base.logs]>->(
    "rescaling video '%s' [ %s ] [box:%s]..,",
    $video_name, $size_msg, $box_size
);

my $output_path;
$new_size =~ s|x|:|;

if ( defined $target_path ) {
    ( $output_path = $video_path ) =~ s|^.+/([^/]+)$|$target_path/$1|;
} else {
    ( $output_path = $video_path ) =~ s|/([^/]+)$|/rescaled/$1|;
}

if ( not -d $output_path ) {

  #    make_path($output_path) or die "make_path($output_path) : \l$OS_ERROR";

    make_path( $output_path, { chmod => 0777 } )    ##  [LLL] fix permissions
        or die
        "make_path($output_path) : \l$OS_ERROR";    ## <<< ! >>> ## chmod ###

}

my $partial_output_file = sprintf qw| %s/%s...converting...%s |,
    $output_path, $box_size, $format;
if ( -f $partial_output_file ) {
    <[base.log]>->( 0, ': found partial output file, cleaning up..,' );
    unlink($partial_output_file)
        or <[base.s_warn]>->(
        ': unlink[ %s ] : %s',
        $partial_output_file, <[base.str.os_err]>
        );
}
unlink($partial_output_file);
my $output_file = sprintf qw| %s/%s.%s |, $output_path, $box_size, $format;

my @audio_codec = <ffmpeg.drop_audio> ? (qw| -an |) : (qw|  -c:a  aac  |);

my @ffmpeg_params = (
    <ffmpeg.path.ffmpeg_bin>,  '-i',
    $video_path,               '-loglevel',
    'error',                   '-y',
    '-strict',                 '-2',
    '-preset',                 'medium',
    @audio_codec,              '-c:v',
    'libx264',                 '-x264-params',
    'crf=' . <ffmpeg.quality>, '-vf',
    "scale=$new_size",         '-threads',
    <ffmpeg.threads>,          $partial_output_file
);

<[base.logs]>->( 2, "executing '%s'", join( ' ', @ffmpeg_params ) );

new_log_name:
my $error_log_file = sprintf( qw| /var/protocol-7/.ffmpeg.%u.%f.log |,
    $PID, <[base.time]>->(5) );
goto new_log_name if -e $error_log_file;

if ( !-f $output_file ) {
    local $ENV{'FFREPORT'} = sprintf qw| file=%s:level=16 |, $error_log_file;
    if (   system(@ffmpeg_params) != 0
        or $CHILD_ERROR == -1
        or $CHILD_ERROR & 127 ) {
        unlink($partial_output_file) if -f $partial_output_file;
        my $err_str = lcfirst($OS_ERROR);
        if ( -f $error_log_file ) {
            my $log_content = <[file.slurp]>->($error_log_file);
            my @log_lines   = split( /\n/, $$log_content );
            if ( scalar(@log_lines) > 3 ) {
                $err_str = $log_lines[2];
            } elsif (@log_lines) {
                $err_str = pop @log_lines;
            }
        }
        <[base.logs]>->(
            0,        "ffmpeg cannot execute: %s [%s]",
            $err_str, join( ' ', @ffmpeg_params )
        );
        return {
            'mode' => qw| false |,
            'data' => sprintf( 'ffmpeg cannot execute [%s]', $err_str )
        };
    } else {
        rename( $partial_output_file, $output_file )
            or <[base.s_warn]>->( 'rename failed : %s', <[base.str.os_err]> );
    }
}
unlink($error_log_file) if -f $error_log_file;

<[base.log]>->( 1, ": done. [ success ]" );

return { 'mode' => qw| true |, 'data' => $output_file }

#,,,,,,,,,...,,,.,,,,,.,.,.,,,,.,,,,.,,,,,.,.,..,,...,...,...,.,,,,,.,.,,,..,,
#YBBXAFOUVI5AQCNNU3JEX5XQHIYTPHHMCHOJPFAMWNAM43YGQI4UJGBOCBCF6NAVXF55JL2NIDMLU
#\\\|BGGVUFE54RN27S763Q2KOSJXIELQY5AU74YMPMT57EC2ASRE7YO \ / AMOS7 \ YOURUM ::
#\[7]6SALD6GPNT5JFHAH4LFVG7KRE3ZAQ5X5SWOUGNST64OWDCMOSGAI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
