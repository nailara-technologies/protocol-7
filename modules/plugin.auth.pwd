## [:< ##

# name    = plugin.auth.pwd
# args    = int(session id)
# return  = str(user name) (success), undef [error]

my $id = $_[0]->w->data;
my $re = <regex.base>;

my $input  = \$data{'session'}{$id}{'buffer'}{'input'};
my $output = \$data{'session'}{$id}{'buffer'}{'output'};

if ( $input->$* =~ s|^auth ($re->{usr_str}) (.+)\n|| ) {

    ( my $name, my $password_str ) = ( ${^CAPTURE}[0], ${^CAPTURE}[1] );

    if ( <[auth.pwd.success]>->( $name, $password_str ) ) {
        $output->$* .= "AUTH_TRUE =)\n";
        <[base.logs]>->( "[%u] user session authorized to '%s'", $id, $name );
        return ( 0, $name );
    } else {
        $output->$* .= "AUTH_ERROR `>:|\n";
        <[base.logs]>->(
            0,   "[%u] [ auth pwd ] access denied to user '%s'",
            $id, $name
        );
        return 2;    ## access denied [ user credentials ] ##
    }
} elsif ( $input->$* =~ m|\n| ) {
    $output->$* .= ">:[\n";
    <[base.log]>->(
        0, '[%u] authentication protocol mismatch [ pwd ] >:[', $id
    );
    return 2;    ##  no access [ protocol error ]  ##
} else {
    return 1;    ##  continue [ incomplete line ]  ##
}

#,,,.,.,.,..,,,.,,.,,,,..,,,.,,,,,,,,,,.,,...,..,,...,...,...,.,.,,,,,,,,,...,
#YUDPDZLQHHUG5TACQTIFBWPNDC4B6EEGLRCYHHM22JP7XQJYAL57VULQJKMAWXB5TAC6KHNW2EDFK
#\\\|D6AXWI6CSJVHRPL5ROAQKBFL3TW3GYUWVALZU3Q3HQ6QAOSB5MM \ / AMOS7 \ YOURUM ::
#\[7]46WHP3AADN332TXJGJ5RKUHRVM2GXT2KR7HDWEJZWZFUKWOJAQAQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
