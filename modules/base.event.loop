## [:< ##

# name  = base.event.loop

## return after <timeout> seconds [ value is not updated ] ##
my $ev_loop_timeout = shift;    ## optional ##

my $time_start = <[base.time]>->(5)
    if defined $ev_loop_timeout and <[base.get_max_verbosity]> > 1;

my $ret;
if ( defined $ev_loop_timeout ) {
    $ret = Event::loop($ev_loop_timeout);    ## exits loop ater <timeout> ##
} else {
    $ret = Event::loop();                    ## loop until unloop() called ##
}

<[base.log]>->( 1, 'event.loop: no more active connections.' )
    if not defined $ev_loop_timeout;

<[base.logs]>->(
    2,
    ': loop exit after %.1f seconds [ timeout value ]',
    <[base.time]>->(5) - $time_start
) if defined $ev_loop_timeout and <[base.get_max_verbosity]> >= 2;

return $ret;    ##  contains unloop $result parameter  ##

#,,,.,,..,,,,,,,.,..,,.,.,,.,,,.,,.,.,,.,,,,,,..,,...,...,...,...,.,.,,..,..,,
#D2SRVXAVVWTVXBIL2SDT2Y5UJW3ODWLIWCIHYEILEWWEM3XSN6S4PGF2YI5ZMCMXVXRVEHMNL7JRA
#\\\|5BSQLV72FGL6U4FOBTJMXLFYUWA6MM2AE43FUM3EW4B4K2DGR7J \ / AMOS7 \ YOURUM ::
#\[7]TCEYBR5QNHSXZG575JZ4NRRDGJNG2GZCLDBMB5S7J4QMMZHTY6AI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
