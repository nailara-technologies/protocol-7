## [:< ##

# name = base.start.unlink_child

<system.path.perl_bin> //= <[base.get_path.perl_exec]>;

if ( not defined <process.unlink_child.w_fh> and ( $EUID == 0 or $UID == 0 ) )
{
    my $zenka_name_chars = qr|0-9A-Za-z_\-|;
    <[base.log]>->( 2, ': : starting unlink-child ..,' );
    ( my $zenka_name = <system.zenka.name> ) =~ s|[^$zenka_name_chars]+||g;

    my $child_code = <<~ "EOT";
    use v5.24; use strict; use warnings; use English;
    map { \$SIG{\$ARG} = qw| IGNORE | } qw| INT TERM QUIT |;
    \$PROGRAM_NAME = q|$zenka_name-<root>-unlink-child|;
    while ( my \$file = <STDIN> ) {
        exit if not length( \$file // '' );  ##  no tolerance of errors  ##
        chomp( \$file );
        unlink(\$file) if -e \$file and -w \$file;
    }
    EOT

    <[base.perlmod.load]>->('IPC::Open2')
        if not <[base.perlmod.loaded]>->('IPC::Open2');

    <process.unlink_child.pid>
        = IPC::Open2::open2( undef, <process.unlink_child.w_fh>,
        <system.path.perl_bin>, qw| -e |, $child_code )
        || die sprintf( "cannot start perl unlink child process [ %s ]\n",
        scalar <[base.format_error]>->($OS_ERROR) );
    <[base.logs]>->(
        2, qq|: started unlink child [pid:%d]|,
        <process.unlink_child.pid>
    );

    return <process.unlink_child.w_fh>;
}

#,,,,,,,.,,,.,...,...,..,,,,,,,.,,.,.,,,.,,,.,..,,...,...,...,,,,,...,,,,,,,,,
#4O5YMIYVJG6RCQKO3IDKYCDL4ELXJYK4X5SNHM4IC2NT7RRYSEIWDQK7XQHZH4J7WYOJVBXFYYLNE
#\\\|LNKTLYJD6GEFRLOM6HWUCK224NMP2YCIXPZHXTNWAEOXFVOMFCJ \ / AMOS7 \ YOURUM ::
#\[7]X24GJZKRREZCESJ24OM6QDSRXBAXVWX7K2QJDLIWON7JA32NP2AA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
