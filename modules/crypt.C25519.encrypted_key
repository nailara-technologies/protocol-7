## >:] ##

# name  = crypt.C25519.encrypted_key

my $key_name = shift // '';    ##  key name \ absolute path to key file  ##

if ( not length $key_name ) {
    warn 'expecting key_name parameter <{C1}>';
    return undef;
}

my $re_kfiles = <crypt.C25519.regex>->{'key_files'};

my $key_type;
my $public_keyfile;
my $private_keyfile;

if ( index( $key_name, qw| / |, 0 ) == 0 and $key_name =~ $re_kfiles ) {
    ## absolute path to keyfile ##
    my $keyfile_abs_path = $key_name;

    return -2 if not -f $keyfile_abs_path;  ##  no key file with that name  ##
    return -3 if not -r $keyfile_abs_path;  ##  is not readable  ##

    ( my $filepath_rel = $keyfile_abs_path ) =~ s|^.+/||;

    ( $key_name, $key_type )
        = <[crypt.C25519.key_name_and_type]>->($filepath_rel);

    ##  public key [ never encrypted ]  ##
    ##
    return FALSE if $key_type eq qw| public |;

    $private_keyfile = $keyfile_abs_path;    ##  private key abs file path  ##
    $public_keyfile  = <[crypt.C25519.key_vars]>
        ->($key_name)->{'key_filename'}->{'public'};

    if ( not length $public_keyfile or not length $public_keyfile ) {
        warn 'key_vars function returned undefined filename <{C1}>';
        return undef;
    }
} else {

    my $key_filenames
        = <[crypt.C25519.key_vars]>->($key_name)->{'key_filename'};

    $private_keyfile = $key_filenames->{'private'} // '';
    $public_keyfile  = $key_filenames->{'public'}  // '';

    if ( length $private_keyfile and not -f $private_keyfile ) {

        if ( length $public_keyfile and -f $public_keyfile ) {
            return -1;    ##  only public key present  ##
        } else {
            return -2;    ##  no key with specified name  ##
        }

    } elsif ( not length $private_keyfile or not length $public_keyfile ) {
        warn 'key_vars function returned undefined filename <{C1}>';
        return undef;
    }
}

my $key_file_ref = <[file.slurp]>->( $private_keyfile, undef, qw| :raw | );

if (   not defined $key_file_ref
    or ref $key_file_ref ne qw| SCALAR |
    or not defined $key_file_ref->$* ) {
    return -3;    ##  cannot read file  ##
} else {
    chomp( $key_file_ref->$* );    ##  strip linefeed  ##
}

( my $key_status )
    = <[crypt.C25519.get_type_from_key_str]>->( $key_file_ref->$* );

if ( not defined $key_status ) {
    <[base.logs]>->( 0, ': key format not valid : %s', $key_name );
    return -4;                     ##[  not a valid key format  ]##
}

my $key_encrypted = $key_status->{'encrypted'};

if ( $key_encrypted == UNKNOWN and -r $public_keyfile ) {
    my $public_file_ref
        = <[file.slurp]>->( $public_keyfile, undef, qw| :raw | );

    ($key_status) = <[crypt.C25519.get_type_from_key_str]>->(
        $key_file_ref->$*, $public_file_ref->$*
    );

    if ( not defined $key_status ) {
        <[base.logs]>->(
            0, '[ public ] key format not recognized : %s', $key_name
        );
        return -4;    ##[  not a valid key format  ]##
    } else {
        $key_encrypted = $key_status->{'encrypted'};   ##  updating status  ##
    }
} elsif ( $key_encrypted == UNKNOWN ) {    ##  private key only  ##
    $key_name =~ s|^.*/||;
    <[base.log]>
        ->( 2, ': encryption status not knowable without public key' );
    <[base.logs]>->( 2, ": :, private-key '%s'", $key_name );
}

return $key_encrypted;                     ##  key encryption status  ##

#,,.,,..,,.,,,.,,,,.,,,,,,,.,,..,,,,.,,..,...,..,,...,...,,,.,..,,..,,..,,..,,
#MC646EMEL27EMICP5SFG5TINIFVQVSNB3RZWPUXPEOCG3B4KU2AKFA7EIXHI5VR56FXSLN7IYR3SC
#\\\|XDGY5DHKJIUYTJTCAWDYUL52K5OMVUK4LL55POBIKKZPNBDJXZF \ / AMOS7 \ YOURUM ::
#\[7]HBXKTZKU6ZJ7WVZ3T2GNXMA5TVKPUNYBMATOXOXNWZKJNZM2DIDY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
