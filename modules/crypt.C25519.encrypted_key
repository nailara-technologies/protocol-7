## [:< ##

# name  = crypt.C25519.encrypted_key

my $name = shift // '';    ##  key name \ absolute path to key file  ##

if ( not length $name ) {
    warn 'expecting key_name parameter <{C1}>';
    return undef;
}

my $re_kfiles = <crypt.C25519.regex>->{'key_files'};

my $key_type;

my $key_filenames = <[crypt.C25519.key_vars]>->($name)->{'key_filename'};

my $virtual_keyfile = $key_filenames->{'virtual'} // '';
my $public_keyfile  = $key_filenames->{'public'}  // '';
my $secret_keyfile  = $key_filenames->{'secret'}  // '';
my $private_keyfile = $key_filenames->{'private'} // '';

if ( index( $name, qw| / |, 0 ) == 0 and $name =~ $re_kfiles ) {
    ## absolute path to keyfile ##
    my $keyfile_abs_path = $name;

    ( my $filepath_rel = $keyfile_abs_path ) =~ s|^.+/||;

    ( $name, $key_type )
        = <[crypt.C25519.key_name_and_type]>->($filepath_rel);

    ##  virtual key [ never encrypted ]  ##
    ##
    return -5 if $key_type eq qw| virtual |;
    return -2 if not -f $keyfile_abs_path;  ##  no key file with that name  ##
    return -3 if not -r $keyfile_abs_path;  ##  is not readable  ##

    ##  public key [ never encrypted ]  ##
    ##
    return FALSE if $key_type eq qw| public |;

    $private_keyfile = $keyfile_abs_path;    ##  private key abs file path  ##
    $public_keyfile
        = <[crypt.C25519.key_vars]>->($name)->{'key_filename'}->{'public'};

    if ( not length $public_keyfile or not length $public_keyfile ) {
        warn 'key_vars function returned undefined filename <{C1}>';
        return undef;
    }
} else {

    ##  virtual key : never encrypted  ##
    return -5 if length $virtual_keyfile and -e $virtual_keyfile;

    if (    length $private_keyfile
        and not -f $private_keyfile
        and not -f $secret_keyfile ) {

        if ( length $public_keyfile and -f $public_keyfile ) {
            return -1;    ##  only public key present  ##
        } else {
            return -2;    ##  no key with specified name  ##
        }

    } elsif ( not length $private_keyfile or not length $public_keyfile ) {
        warn 'key_vars function returned undefined filename <{C1}>';
        return undef;
    }
}

if ( -r $private_keyfile or not -r $secret_keyfile ) {

    my $key_file_ref
        = <[file.slurp]>->( $private_keyfile, undef, qw| :raw | );

    if ( ref $key_file_ref ne qw| SCALAR |
        or not defined $key_file_ref->$* ) {
        return -3;    ##  cannot read file  ##
    } else {
        chomp( $key_file_ref->$* );    ##  strip linefeed  ##
    }

    ( my $key_status )
        = <[crypt.C25519.get_type_from_key_str]>->( $key_file_ref->$* );

    if ( not defined $key_status ) {
        <[base.logs]>->( 0, ': key format not valid : %s', $name );
        return -4;                     ##[  not a valid key format  ]##
    }

    my $key_encrypted = $key_status->{'encrypted'};

    if ( $key_encrypted == UNKNOWN and -r $public_keyfile ) {
        my $public_file_ref
            = <[file.slurp]>->( $public_keyfile, undef, qw| :raw | );

        ($key_status) = <[crypt.C25519.get_type_from_key_str]>->(
            $key_file_ref->$*, $public_file_ref->$*
        );

        if ( not defined $key_status ) {
            <[base.logs]>->(
                0, '[ public ] key format not recognized : %s', $name
            );
            return -4;    ##[  not a valid key format  ]##
        } else {
            $key_encrypted
                = $key_status->{'encrypted'};    ##  updating status  ##
        }
    }
    if ( $key_encrypted == UNKNOWN and !-r $secret_keyfile ) {
        ##  only a private key present  ##
        $name =~ s|^.*/||;
        <[base.log]>->(
            2, ': encryption status not knowable without public key'
        );
        <[base.logs]>->( 2, ": :, private-key '%s'", $name );
    }

    ##  key encryption status  ##
    return $key_encrypted if $key_encrypted == TRUE or !-r $secret_keyfile;
}

if ( -r $secret_keyfile ) {
    my $secret_key_sref
        = <[file.slurp]>->( $secret_keyfile, undef, qw| :raw | );
    if ( ref $secret_key_sref eq qw| SCALAR | ) {

        ( my $key_status )
            = <[crypt.C25519.get_type_from_key_str]>
            ->( $secret_key_sref->$* );

        if ( not defined $key_status ) {
            <[base.logs]>->(
                0, '[ secret ] key format not recognized : %s', $name
            );
            return -4;    ##[  not a valid key format  ]##
        } else {
            ##  returning [secret] key status  ##
            return $key_status->{'encrypted'};
        }
    } else {    ##  cannot read file  ##
        return -3;
    }
}

return UNKNOWN;    ##  key encryption status  ##

#,,,.,,,,,.,,,...,...,,.,,.,,,,..,,,.,.,.,.,.,..,,...,...,.,,,,.,,,..,,..,,,,,
#5DGXN2ZEEBTAYSA6UMKI3V5RSSKWBNWMPJTZBA5VS4U3XYVCT27K5OWKDYZND7FJVDPROOJPF3IRO
#\\\|A4X4B6VDXCWQ2WFPBN5MONOQOZBOSJES5SSIFZL5BXVQDTL4V3C \ / AMOS7 \ YOURUM ::
#\[7]WEYAEOH2PUBM4RJBKZ7RA5EFINSCPX3LPIB4VDVRJREPVVYCYOCQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
