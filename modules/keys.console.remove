## [:< ##

# name  = keys.console.remove
# param = <key-name>
# descr = delete the C25519 key with the specified name

my $name = shift;

if ( not defined $name ) {
    say "\n  << expected <key_name> parameter >>\n";
    <[base.exit]>->(qw| 0110 |);
}
my $key_vars_ref = <[crypt.C25519.key_vars]>->($name);

my $keys_re = <keys.regex>;

my $re_kfiles = $keys_re->{'key_files'};
my $key_dir   = $key_vars_ref->{'key_dir'};
my $key_usr   = $key_vars_ref->{'usr_name'};

my $shred_bin = <keys.bin_path.shred>;

## warns when absent ##
my @k_files = grep {s|^.+/||} <[keys.get_keyfiles]> or return;

my $match_re = qr|^(\Q$name\E$re_kfiles)$|;

my $key_found = FALSE;
foreach my $file (@k_files) {
    $key_found = TRUE if $file =~ $match_re;
    next              if -w catfile( $key_dir, $file );
    printf "\n << no write access to '%s' >>\n\n", catfile( $key_dir, $file );
    <[base.exit]>->(qw| 0020 |);
}

if ( not $key_found ) {
    printf( "\n  << specified key '%s' not found >>\n\n", $name );
    <[base.exit]>->(qw| 0010 |);
}

my $del_count = 0;

chdir($key_dir)
    or die
    sprintf( "<< %s : chdir [ %s ] >>\n", <[base.str.os_err]>, $key_dir );

say "\n::";

my $len = 0;
foreach my $file_name (@k_files) {
    next if $file_name !~ $match_re;
    printf " : purging '%s'\n", $file_name;
    system( $shred_bin, qw| -fzu |, $file_name )
        if length $shred_bin
        and -x $shred_bin;
    die sprintf( ":\n: unlink failed : %s\n:\n", <[base.str.os_err]> )
        unless unlink($file_name)
        or not -f $file_name;
    $del_count++;
}

<[crypt.C25519.clear_chksums]>;    ##  cleaning key chksum cache  ##

printf " :\n :: [ removed %d key file%s ]\n\n", $del_count,
    <[base.cnt_s]>->($del_count);

#,,..,,,,,.,.,...,,.,,,..,...,.,,,,.,,,.,,,.,,..,,...,..,,..,,,.,,,.,,,.,,,,,,
#3JT77ZQYIG7LS3VZWG2UP6NKAB5LHZAGIIWOICSCVXH4STOATOFNU7MHCE7W4WPK4T2W3KTHQRHHA
#\\\|4B7UWDQKMASXVOECC2H46VSSMAW5WQDJ2N5RPBQJZTDRLOLAHV6 \ / AMOS7 \ YOURUM ::
#\[7]Q5J5CKMBOFL635P4ULUA3AZWQYTFAHCVUXQXHQ7WNAYJZ2H4RCBA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
