## >:] ##

# name  = keys.console.remove
# param = <key-name>
# descr = delete the C25519 key with the specified name

my $key_name_param = shift;

return print "\n  << expected <key_name> parameter >>\n\n"
    if not defined $key_name_param;

my $key_vars_ref = <[crypt.C25519.key_vars]>->($key_name_param);

my $keys_re = <keys.regex>;

my $re_kfiles      = $keys_re->{'key_files'};
my $re_public      = $keys_re->{'key_file'}->{'public'};
my $key_re_private = $keys_re->{'key_file'}->{'private'};

my $key_dir = $key_vars_ref->{'key_dir'};
my $key_usr = $key_vars_ref->{'usr_name'};

my $shred_bin = <keys.bin_path.shred>;

## warns when absent ##
my @k_files = grep {s|^.+/||} <[keys.get_keyfiles]> or return;

my $match_re = qr|^(\Q$key_name_param\E\.$re_kfiles)$|;

my $key_found = FALSE;
map {
    $key_found = TRUE if $ARG =~ $match_re;
    my $k_path = "$key_dir/$ARG";
    return sprintf "\n << no write access to '%s' >>\n\n", $k_path
        if not -w $k_path;
} @k_files;

return printf "\n  << specified key '%s' not found >>\n\n", $key_name_param
    if not $key_found;

my $del_count = 0;

chdir($key_dir)
    or die
    sprintf( "<< %s : chdir [ %s ] >>\n", <[base.str.os_err]>, $key_dir );

print "\n::\n";

my $len = 0;
foreach my $file_name (@k_files) {
    next if $file_name !~ $match_re;
    printf " : purging '%s'\n", $file_name;
    system( $shred_bin, '-fzu', $file_name )
        if length $shred_bin
        and -x $shred_bin;
    return printf( ":\n: unlink failed : %s\n:\n", <[base.str.os_err]> )
        unless unlink($file_name)
        or not -f $file_name;
    $del_count++;
}

printf " :\n :: [ removed %d key file%s ]\n\n", $del_count,
    <[base.cnt_s]>->($del_count);

#,,..,...,...,.,.,...,,,,,.,.,.,,,,.,,.,,,,..,..,,...,...,,..,,,,,,,,,,..,,,,,
#RQAFYPFJZWCTPWYDATCFB6XDN3HIOTF36M2WTM2ZIIH73LNQKI4OS24MYLTLSNGQQHSCETXMGXVIU
#\\\|7OQRBL5GO5RFPVT6SWKRFVR67U7GQZ2HCMWTXWGRGYEZF3L6ZE2 \ / AMOS7 \ YOURUM ::
#\[7]ELHVJUX6TDTBOCNAVHTCHI3KONX65TLX3XVLJVXZL2AWDVM3JMCQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
