## [:< ##

# name  = keys.unpack_format.key_archive_payload

my $archive_payload_ref = shift;

if ( ref $archive_payload_ref ne qw| SCALAR | ) {
    warn 'expected scalar ref to archive payload <{C1}>';
    return undef;
} elsif ( not length( $archive_payload_ref->$* // '' ) ) {
    warn 'archive payload is empty or not defined <{C1}>';
    return undef;
}

my $payload_data_body;    ##  archive container  ##
my $header_str         = "## [:< ##\n#.\n";
my $archive_footer_str = "\n#.\n#.::\n";

##  unwrapping  ##
##
if ( $archive_payload_ref->$*
    !~ m|^\Q$header_str\E(.+)\Q$archive_footer_str\E$|s ) {
    warn 'archive format not correct [ header \ footer ] <{C1}>';
    return undef;
} else {
    $payload_data_body = $LAST_PAREN_MATCH;
}

###      ###
##  keys  ##
###      ###

my $vkey = {    ## virtual [ stub ] key format regular expression ##
    'header'    => '##  [:<  ##\n\n',  ##  file-name :: <name>:seed-phrase  ##
    'comment'   => '##  virtual C25519 stub-key for seed-phrase prompt  ##\n',
    'timestamp' => qr|timestamp : [A-Z2-7]{15}\\n\\n|  ##[ in network-time ]##
};
my $v_keys_re = qr|\Q$vkey->{header}\E$vkey->{timestamp}\Q$vkey->{comment}\E|;

## extracting key lines ##
##
my $key_ref;
foreach my $key_line ( split "\n", $payload_data_body ) {

    if ($key_line     !~ m|^\['([^']+)'\]([A-Z2-7]+(\\n)?)$|    #[regular]#
        and $key_line !~ m|^\['([^']+)'\]($v_keys_re)|    ##[virtual\stub]##
    ) {
        warn 'archive format not correct [ key line error ] <{C1}>';
        <[base.log]>->( 1, ':' );
        <[base.logs]>->(
            ':: not recognized line :: [%s] ::',
            <[base.parser.ellipse_center]>->( $key_line, 42 )
        );
        return undef;
    }
    my $name             = ${^CAPTURE}[0];  ## C25119-key file name ##
    my $key_payload_data = ${^CAPTURE}[1];  ## base32 encoded \ virtual key ##
    $key_payload_data =~ s|\\n|\n|g;        ## restoring escaped linefeeds ##

    if ( exists $key_ref->{$name} ) {
        warn 'key archive error [ duplicate key ] <{C1}>';
        return undef;
    }

    $key_ref->{$name} = $key_payload_data;  ##  storing extracted user key  ##
}
if ( not keys $key_ref->%* ) {
    warn 'key archive error [ no keys extracted ] <{C1}>';
    return undef;
}

return $key_ref;    ##  hash ref to keys  ##

#,,.,,.,.,.,,,.,.,,,,,.,.,,.,,...,,.,,...,.,,,..,,...,.,.,,,.,,,.,.,.,,.,,.,,,
#UJWUJJRY3IZDGKFCJRTLQYF7T2SSWGTDGD5FHAGIIYB2BE2GYJ4WTZE4JKJMAL5FA2VTKHT4JMPHC
#\\\|DFK3ZEQZJNFNUQOL6HUB4LYNA2IACDQWILAVDFPDENFOASRMTZQ \ / AMOS7 \ YOURUM ::
#\[7]YCBZFLM2JHJXWLRXSQHKPQTGXLWY7KVCKUGLHMNDHUJMRPJIKMCY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
