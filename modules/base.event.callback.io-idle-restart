## [:< ##

# name   = base.event.callback.io-idle-restart
# descr  = restart watcher when idle

my $event = shift;

if ( defined <watcher_list.paused>
    and ref <watcher_list.paused> eq qw| ARRAY | ) {
    foreach my $paused_event ( <watcher_list.paused>->@* ) {

        my $id   = $paused_event->w->data;
        my $desc = $paused_event->w->desc;

        next if not defined $id or not defined $data{'session'}{$id};

        $paused_event->w->start;

        ## hotfix [ to be improved with the new event module ] ##
        if ( $desc =~ m|^\[(\d+)\] output buffer$| ) {
            my $session_id = $LAST_PAREN_MATCH;
            $paused_event->w->now    ##  more data waiting to write  ##
                if length $data{'session'}{$session_id}{'buffer'}{'output'};
        }
    }
    <watcher_list.paused> = [];
    $event->w->stop;
} else {
    <watcher_list.paused> = [];
    $event->w->stop;
}

if ($PID == <system.process_start.pid>    ##  is parent \ not forked  ##
    and defined <system.ondemand_timeout>
    and (  not defined <base.timer.ondemand_timeout>
        or not <base.timer.ondemand_timeout>->is_active )
) {
    ##  shut down zenka after ondemand_timeout  ##
    <base.timer.ondemand_timeout> = <[event.add_timer]>->(
        {   'after'   => <system.ondemand_timeout>,
            'handler' => qw| base.handler.ondemand_timeout |,
            'data'    => {}
        }
        )
        if not defined $data{'route'}
        or not keys $data{'route'}->%*;   ## no outstanding command replies ##
}

#,,,.,.,,,,,.,..,,..,,.,.,.,,,...,,..,,..,,.,,..,,...,...,,..,,,,,,.,,,..,,,.,
#AYT73RCODKHAWF7EBF44SAGKMA5JPNQLMJ74YMK3ALTMDBE6I4OLXCIF2WVIGQFHOKO7JB4ROGUJ4
#\\\|BOKDD24NWAIURJPKCHIDZCY2EWZVWKUVA32VHXSA4CCYSCGUFEQ \ / AMOS7 \ YOURUM ::
#\[7]ZGBKADDAYUIP7IHPOI3T2SBHUJGFXVVQLXVNIFMNG5LHDW4MXUCQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
