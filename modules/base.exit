## >:] ##

# name  = base.exit
# descr = end zenka process, has optional command-reply handler mode

my $exit_msg;
my $log_level;
my $exit_code;

## called as protocol-7 reply-handler ##
##
if ( ref( $ARG[0] // '' ) eq qw| HASH | and exists $ARG[0]->{'cmd'} ) {
    my $reply_p = shift;

    $exit_code = $reply_p->{'return-code'}
        if defined $reply_p->{'return-code'};

    $exit_msg = $reply_p->{'log-message'}
        if defined $reply_p->{'log-message'};

    $log_level = $reply_p->{'log-lvl'} if defined $reply_p->{'log-lvl'};

    if ( $reply_p->{'cmd'} eq qw| FALSE | ) {   ##  warn on command errors  ##
        if ( not exists $reply_p->{'ignore-errors'} ) {
            $exit_code = 1;
            $log_level = 0;
            $exit_msg  = $reply_p->{'call_args'}->{'args'};
        }
    } else {
        $exit_msg //= sprintf( ': success : %s',
            $reply_p->{'call_args'}->{'args'} );
    }

} else {    ## regular procedural mode ##

    $exit_code = shift @ARG if @ARG and $ARG[0] =~ m|^\d+$|;
    $exit_msg  = shift @ARG if @ARG;
    $log_level = shift @ARG if @ARG and $ARG[0] =~ m|^\d$|;

}

$exit_code //= 0;
$log_level //= $exit_code == 0 ? 2 : 1;
$exit_msg  //= sprintf( '.. exit [ %s ] called .,', $exit_code );

<[base.log]>->( $log_level, $exit_msg );

##  resetting terminal input  ##
eval 'ReadMode(0)' if defined &main::ReadMode;

##  resetting terminal output  ##
print STDOUT $colors{'reset'};
print STDERR $colors{'reset'};

CORE::exit($exit_code);

#,,,,,,.,,.,,,...,,,,,,.,,,..,,,,,...,,..,..,,..,,...,...,..,,,..,,..,.,.,.,,,
#JOW2MNQ3UKEHDRXWVHGG476WO7F4HPEDSRUMRVNLHQF72LOWECRVJNUU2W6DDCX2VZOMBOVIS4STI
#\\\|V6BXJWOUYR4M53RZJAXUM26ZLLJF2OU2JBKPLMYOHO3POHSWVXS \ / AMOS7 \ YOURUM ::
#\[7]DHSZTKBG75YVLGO53UYUILWDIFW34D5N5735UAD4ZJ43S2Z6KGDA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
