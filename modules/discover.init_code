## [:< ##

# name = discover.init_code

<[base.perlmod.autoload]>->('IO::Interface::Simple');

my $key_path_owner = <crypt.C25519.usr_name> // <system.amos-zenka-user>;
<discover.crypt.key_user> //= $key_path_owner;
<discover.crypt.key_name> = <[crypt.C25519.key_vars]>->{'key_name'};

my $max_nodes_entries = <discover.cfg.max_entries.nodes> //= 4200;

##  disable in zenki/discover/start when required  ##
##
<discover.cfg.log-packets.incoming> //= TRUE;
<discover.cfg.log-packets.outgoing> //= TRUE;

##  target route to 'nodes' zenka  ##
##
<discover.cfg.nodes.host_status_command> //= qw| cube.nodes.host-status |;

$data{'hosts'} //= {};

<list.nodes> = {
    'var'      => qw| data |,
    'key'      => qw| hosts |,
    'sort_key' => qw| alpha:pkey |,
    'mask'     => 'host pkey:host_key ip_addr iface hwaddr',
    'align'    => {
        qw| pkey  |   => qw|  left+2  |,
        qw| host  |   => qw|  right-1 |,
        qw| ip_addr | => qw|  center  |,
        qw| iface   | => qw|  center  |,
        qw| hwaddr  | => qw|  left+1  |
    },
    'filters' => {
        qw| pkey |   => qw| base.parser.key_mem_chksum |,
        qw| hwaddr | => qw| base.parser.hwaddr |,
    },
    'descr' => 'protocol 7 nodes [ hosts ] seen online'
};

<[base.list.init]>->(
    {   qw| name |     => qw| nodes |,
        'key_ref'      => \$data{'hosts'},
        'max_elements' => $max_nodes_entries    ## <-- implement limit [LLL]
    }
);

##  host awareness resend [announce] requests  ##
##
<discover.resend-host-reqs> //= {};
<[discover.load_resend_requests]>;

<list.resend-rqs> = {
    'var'      => qw| data |,
    'key'      => qw| discover.resend-host-reqs |,
    'sort_key' => qw| host |,
    'mask'     => 'host host-key:host_pkey',
    'align'    => {
        qw| host  |    => qw| right-2 |,
        qw| host-key | => qw| left+2  |
    },
    'filters' => { qw| host-key | => qw| base.parser.key_mem_chksum |, },
    'descr'   => 'announce host resend requests'
};
<[base.list.init]>->(
    {   qw| name |     => qw| resend-rqs |,
        'key_ref'      => \$data{'discover'}{'resend-host-reqs'},
        'max_elements' => $max_nodes_entries    ## <-- implement limit [LLL]
    }
);
##

##  host [online] status update requests  ##
##
<discover.host-status-requests> //= {};
<[discover.load_update_notify_rqs]>;

<list.notify-rqs> = {
    'var'      => qw| data |,
    'key'      => qw| discover.host-status-requests |,
    'sort_key' => qw| host |,
    'mask'     => 'host host-key:host_pkey zenki:requested_by_zenki',
    'align'    => {
        qw| host  |    => qw| right-2 |,
        qw| zenki |    => qw| left+3 |,
        qw| host-key | => qw| left+2 |,
    },
    'filters' => {
        qw| host-key | => qw| base.parser.key_mem_chksum |,
        qw|  zenki   | => qw| base.parser.sorted_array_ref_list |
    },
    'descr' => 'host presence change update requests'
};
<[base.list.init]>->(
    {   qw| name |     => qw| notify-rqs |,
        'key_ref'      => \$data{'discover'}{'host-status-requests'},
        'max_elements' => 32    ## <-- implement limit [LLL]
    }
);
##

##  host status log buffers  ##
##
if ( not exists <buffer.host-status> ) {
    <buffer.host-status.max_size> = 24 * 1024;    ## 24K buffer size ##
    my $log_level  = 0;
    my $log_msg    = 'host status buffer initialized ..,';
    my $time_stamp = <[base.anum_log_time]>->( 5, TRUE );
    <[base.buffer.add_line]>->(
        qw| host-status |,
        join( ' ', $time_stamp, $log_level, $log_msg ), $log_level
    );
}

##  initialize packet log buffers  ##
<[discover.init_packet_buffer]>;

<[discover.callback.resend_interval_reset]>;    ## reset announce interval ##

<[event.add_signal]>->( { 'signal' => 'CHLD', 'handler' => qw| dev.null | } );

0;

#,,,,,,,,,,,.,.,,,...,,,,,,,.,.,.,.,,,,.,,.,.,..,,...,...,...,..,,,,.,,..,..,,
#C46ZHL5QJRFCYSQP4E5WLJH55UVBR3MIIAXXRX4AKEHQCIYVKRUM6624AR7DXADUU45O7HDYFYY24
#\\\|VFI64DQBGVW6UFOVNY3Y4NS64ETE4DZR7ND3SAIP4C4WOMUWDQA \ / AMOS7 \ YOURUM ::
#\[7]ON5BWBSRVCOCGKXWDWHIBRMBNAG7HJV24UUKZZDFDNLQM3HQRWAQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
