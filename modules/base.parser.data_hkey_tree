## >:] ##

# name  = base.parser.data_hkey_tree

my $data_hash_key_str = shift // '';

warn 'expected valid %data hash key syntax <{C1}>' and return ()
    if not length $data_hash_key_str;

my @result = <[base.validate.data_key_syntax]>->($data_hash_key_str);
warn sprintf( 'href key syntax is not valid [ %s ] <{C2}>', $result[1] )
    and return ()
    if not $result[0];

##  allowing keys containing '.'s by quoting them  [ z.'y.x' syntax ]
$data_hash_key_str =~ s,\'([^\']+)\', my $k=$1; $k =~ s|\.|\0|g; $k ,ge;

my @dtree = split '\.', $data_hash_key_str;

map { $ARG =~ s|\0|.|g } @dtree;    ## restore quoted dots ##

return @dtree;

#,,..,..,,.,,,.,,,.,.,,,,,..,,.,.,..,,..,,..,,..,,...,...,...,.,,,,,.,,,,,.,.,
#G4PCSTE3P5OTJBJFNCDVQPV4VGZFY3GMZUSHY22KKR63ZOL7D7NSKXQIEXUX5UCFBNAOTVRANR7L2
#\\\|DLVNAHI3N6FEOAYBBOHHJUTCNDJTCYEOMST4NVW53DNHGQ5GAIC \ / AMOS7 \ YOURUM ::
#\[7]7W4Q65327UZ745RICF4HBHEX4S4EQZG3RQMQPEHFY2O66QNIKUAQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
