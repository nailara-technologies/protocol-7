## >:] ##

# name = base.file.match_dirs
# args = [result_array_ref,] <search_path>, <dir_name_pattern(s)>

my $result_aref;
$result_aref = shift(@ARG) if ref( $ARG[0] ) eq qw| ARRAY |; # [ append mode ]

my $search_path = shift @ARG;

my $recursion
    = ( @ARG and $ARG[0] eq qw| recursive | and shift @ARG )
    ? qw| recursive |
    : undef;

my @wildcard_filenames = @ARG;

# supported wildcard patterns are: '*' ([^\.]*) and '**' (.*)

if ( not defined $search_path or !length($search_path) ) {
    <[base.log]>->( 0, 'file.match_dirs: missing expected path argument' );
    return undef;
}
$search_path = abs_path($search_path);
if ( !-d $search_path ) {
    <[base.log]>->( 0, "file.match_dirs: no such directory '$search_path'" );
    return undef;
} elsif ( !@wildcard_filenames ) {
    <[base.log]>->( 0, 'file.match_dirs: no dir names \\ patterns provided' );
    return undef;
}

my $results = [];
$results = $result_aref if defined $result_aref;    ##  [ append mode ]
my @file_table = map {
    my $key = $ARG // '';

    $key =~ s|[\.\\\[\]\(\)\-\+\?]|\\$MATCH|g;
    $key =~ s{(\*{2}|\*)}{ $LAST_PAREN_MATCH eq '*' ? '[^\.]*' : '.*' }ge;
    $key .= '\$';

    <[base.eval.comp_regex]>->($key);

    if ( length $EVAL_ERROR ) {
        <[base.s_warn]>->(
            ' regex error [ %s ] <{C1}>',
            $key, <[base.str.eval_error]>
        );
        return undef;
    }
} @wildcard_filenames;

foreach my $dir ( @{ <[file.all_dirs]>->( $search_path, $recursion ) } ) {
    foreach my $patterm_re (@file_table) {
        push( @{$results}, $dir ) if $dir =~ $patterm_re;
    }
}

return scalar @{$results} if defined $result_aref;    # [ append mode ]
return @{$results};

#,,.,,,,.,,.,,,,.,.,.,,,,,..,,,..,.,.,.,.,...,..,,...,...,,..,,..,...,,.,,.,,,
#P7IWPSZQJNWQK3GYALZJ5GLEXTBCCIBDO3P3YMOWORAOPKEVCX2NJIA5PNC3IJQDM6GWPJGI2JBIY
#\\\|O62OXJYPQXH2CRDHDRPWZET7ROTI7GTBWMCKRKVQJRDH43QZSQJ \ / AMOS7 \ YOURUM ::
#\[7]DGEGJGXZFS6VX2IKAOZRSERNVEX2EE3MGNWAAZCTWAN6OKVOD4CI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
