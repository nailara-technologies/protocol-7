# >:]

# name  = xserver.cmd.wait_visible
# param = <timeout> <title>
# descr = wait until a specific window becomes visible
# todo  = combine poll timer for all requested windows

my ( $timeout, $title_pattern ) = split( / +/, $$call{'args'}, 2 );

return { 'mode' => 'nack', 'data' => 'expected numerical timeout argument' }
    if not defined $timeout or $timeout !~ /^\d+(\.\d+)?$/;
return { 'mode' => 'nack', 'data' => 'expected title [sub]string argument' }
    if not defined $title_pattern or !length($title_pattern);

my $xtops = <xserver.x11_tops>;
$xtops->update;

for my $window ( values %{ $xtops->byid } ) {
    return { 'mode' => 'ack', 'data' => $window->id }
        if $window->title =~ $title_pattern;
}

my $poll_delay = 0.13;

my $req_id = <[base.gen_id]>->(<xserver.waiting>);

my @timers = (
    'poll' => <[event.add_timer]>->(
        {   'after'    => 0,
            'prio'     => 4,
            'interval' => $poll_delay,
            'handler'  => 'xserver.handler.wait_visible',
            'data'     => $req_id
        }
    )
);
push(
    @timers,
    (   'timeout' => <[event.add_timer]>->(
            {   'after'   => $timeout,
                'repeat'  => 0,
                'prio'    => 2,
                'handler' => 'xserver.handler.wait_visible_timeout',
                'data'    => $req_id
            }
        )
    )
) if $timeout > 0;

<xserver.waiting>->{$req_id} = {
    'reply_id' => $$call{'reply_id'},
    'pattern'  => qr/$title_pattern/,
    'timer'    => {@timers}
};

return { 'mode' => 'later' }
