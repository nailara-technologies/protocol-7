## [:< ##

# name = crypt.C25519.init_code

<crypt.C25519.initialized> //= FALSE;

<[base.perlmod.load]>->( 'File::Path', qw| make_path | );

##  C25519 and BASE-32 modules loaded in 'pre_init'  ##

<crypt.C25519.autocreate-user-key> //= FALSE;

<crypt.C25519.key_usr> //= <system.amos-zenka-user>; #  <--  C25519 key owner.

<crypt.C25519.path.key_chksums_cache_file>
    //= sprintf qw| %s/.key-chksums.cache |,
    <[crypt.C25519.key_vars]>->{'key_dir'};

## regex ##
##
my @key_ext   = qw| \.secret  \.public  :seed-phrase  |;
my @key_types = qw| private public |;                  # virtual #

my $re_keyfiles = sprintf qw| (%s) |, join( '|', @key_ext );
my $name_regex  = qr|[0-9a-zA-Z\._\-]+|;

delete <crypt.C25519.regex>    ##  allow updates during reload  ##
    if <[base.is_defined_recursive]>->(qw| crypt.C25519.regex |);

const <crypt.C25519.regex> => {
    qw| key_name | => qr|^$name_regex$|,
    qw| key_file | => {
        qw| virtual | => qr|^($name_regex):\Qseed-phrase\E$|,
        map {
            my $type = $ARG;
            my $xt   = $type;
            $xt = qw| secret | if $xt eq qw| private |;

            $type => qr|^($name_regex)\.$xt$|

        } @key_types
    },
    qw| key_files | => qr|$re_keyfiles|
};

delete <crypt.C25519.keys.sizetype>    ##  allow updates during reload  ##
    if <[base.is_defined_recursive]>->(qw| crypt.C25519.keys.sizetype |);

const <crypt.C25519.keys.sizetype> => {

    ##  binary [ not encoded ] public key  ##
    ##
    32 => {
        qw| type |        => qw| public |,
        qw| encoding |    => qw| bin |,
        qw| prefixed |    => FALSE,
        qw| linefeed |    => FALSE,
        qw| old-form |    => FALSE,
        qw| encrypted |   => FALSE,
        qw| virtual-key | => FALSE,
        qw| seed-phrase | => FALSE
    },

    ##  binary private keys  ##
    ##
    64 => {
        qw| type |        => qw| private |,
        qw| encoding |    => qw| bin |,
        qw| prefixed |    => FALSE,
        qw| linefeed |    => FALSE,
        qw| old-form |    => FALSE,
        qw| encrypted |   => UNKNOWN, ##  requires public key test signing  ##
        qw| virtual-key | => FALSE,
        qw| seed-phrase | => FALSE
    },
    66 => {
        qw| type |     => qw| private |,
        qw| encoding | => qw| bin |,
        qw| prefixed | => TRUE,         ##  <-- remove prefix before using  ##
        qw| linefeed | => FALSE,
        qw| old-form | => FALSE,
        qw| encrypted |   => UNKNOWN,    ##  requires prefix match  ##
        qw| virtual-key | => FALSE,
        qw| seed-phrase | => FALSE
    },

    ##  encoded private keys  ##
    ##
    103 => {
        qw| type |        => qw| private |,
        qw| encoding |    => qw| b32 |,
        qw| prefixed |    => FALSE,
        qw| linefeed |    => FALSE,
        qw| old-form |    => TRUE,
        qw| encrypted |   => UNKNOWN,       ##  : probably : test required  ##
        qw| virtual-key | => FALSE,
        qw| seed-phrase | => FALSE
    },
    104 => {
        qw| type |        => qw| private |,
        qw| encoding |    => qw| b32 |,
        qw| prefixed |    => FALSE,
        qw| linefeed |    => FALSE,
        qw| old-form |    => TRUE,
        qw| encrypted |   => FALSE,
        qw| virtual-key | => FALSE,
        qw| seed-phrase | => FALSE
    },
    106 => {
        qw| type |        => qw| private |,
        qw| encoding |    => qw| b32 |,
        qw| prefixed |    => TRUE,
        qw| old-form |    => TRUE,
        qw| linefeed |    => FALSE,
        qw| encrypted |   => UNKNOWN,         ##  requires prefix match  ##
        qw| virtual-key | => FALSE,
        qw| seed-phrase | => FALSE
    },
    107 => {
        qw| type |        => qw| private |,
        qw| encoding |    => qw| b32 |,
        qw| prefixed |    => TRUE,
        qw| linefeed |    => TRUE,
        qw| old-form |    => FALSE,
        qw| encrypted |   => UNKNOWN,         ##  requires prefix match  ##
        qw| virtual-key | => FALSE,
        qw| seed-phrase | => FALSE
    },

    ##  encoded public keys  ##
    ##
    52 => {
        qw| type |        => qw| public |,
        qw| encoding |    => qw| b32 |,
        qw| prefixed |    => FALSE,
        qw| linefeed |    => FALSE,
        qw| old-form |    => TRUE,
        qw| encrypted |   => FALSE,
        qw| virtual-key | => FALSE,
        qw| seed-phrase | => FALSE
    },
    53 => {
        qw| type |        => qw| public |,
        qw| encoding |    => qw| b32 |,
        qw| prefixed |    => FALSE,
        qw| linefeed |    => TRUE,
        qw| old-form |    => FALSE,
        qw| encrypted |   => FALSE,
        qw| virtual-key | => FALSE,
        qw| seed-phrase | => FALSE
    },

    ##  virtual private keys [ stub-key file ]  ##
    ##
    97 => {
        qw| type |        => qw| virtual |,
        qw| encoding |    => qw| plain |,
        qw| prefixed |    => FALSE,
        qw| linefeed |    => FALSE,
        qw| old-form |    => FALSE,
        qw| encrypted |   => FALSE,
        qw| virtual-key | => TRUE,
        qw| seed-phrase | => TRUE
    }
};

0;

#,,,,,..,,...,.,.,,..,,.,,...,.,,,,,.,..,,,.,,..,,...,...,...,.,,,,,.,,,,,.,.,
#JE234AQQEBOQTDV522B3LRUSU5GVE63X5556YEVDFPTO7CSJ4XMXZ6FOJKOE5NGKDPSMAZNTDJE6E
#\\\|PBZVSSCUZ3MQMROWLIHXB7ESX6PDG6NQQWSXZVKRYS3OG2LL63T \ / AMOS7 \ YOURUM ::
#\[7]ZV7KWKEBFTARMLLAPQW5O5F4JWDC4DKG7FKZCTQAHZG4FHC44GBA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
