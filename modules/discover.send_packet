## [:< ##

# name  = discover.send_packet
# descr = send 'announce' msg packet to mcast group

my $type        = shift // '';
my $payload_str = shift // '';
my $log_level   = shift // 2;

if ( not length $type ) {
    warn 'expected packet type parameter';
    return undef;
} elsif ( not length $payload_str ) {
    warn 'expected packet payload string';
    return undef;
}

<discover.counter.send_error> //= 0;

my $packet_str    ##  compose signed packet payload string  ##
    = <[discover.format_discover_mcast_packet]>->( $type, $payload_str );

if ( not <discover.mcast.obj.sock>->mcast_send($packet_str) ) {  ## sending ##
    <[base.logs]>->( $log_level, "error sending '%s' packet", $type );
    <[base.logs]>->( $log_level, ':. [  %s  ]', <[base.str.os_err]> );
    ##  counting errors for interval resets  ##
    <discover.counter.send_error>++;
} else {
    <discover.counter.send_error> = 0;   ## reset error count after success ##
}

## restart with short interval after errors [ i.e. system suspend ] ##
##
if ( <discover.counter.send_error> == 1 ) {
    <[discover.check_packet_timeouts]>;
    <[discover.callback.resend_interval_reset]> and return undef;
}

## log sent packets [ when configured ] ##
##
if ( <[base.cfg_bool]>->(<discover.cfg.log-packets.outgoing>) ) {
    <[discover.log_mcast_packet]>->( qw| outgoing |, $packet_str );
}

return TRUE;

#,,..,,..,,,,,.,.,,,.,,,,,...,,.,,,,,,,..,,..,..,,...,..,,..,,.,.,,,.,,..,,,.,
#4GM7ZNKYYIF55UMUJNSZ7YY6DRDFIJF6Q5XMSF73OQTNIWUXWKFCRDVASHXYVF2VTK56UDCTLQYEI
#\\\|CXLUVFHR7QUXFVWQXSC66NBH2NPPZBAULD3EF4EY5SFALOAXLR7 \ / AMOS7 \ YOURUM ::
#\[7]36RUETQBBBWO6RYLRT57MYSSYGKTZNOOT56YES76G4D4O6RJQYCI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
