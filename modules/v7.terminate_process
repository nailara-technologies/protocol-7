## [:< ##

# name = v7.terminate_process

my $instance_id;
my $kill_pid = shift;

if ( not defined $kill_pid or $kill_pid !~ m|^\d+$| ) {
    warn 'expected numerical process id to terminate <{C1}>';
    return undef;
} elsif ( $kill_pid <= 2 ) {
    <[base.s_warn]>->(
        'received not valid process id [ %03d ] to terminate', $kill_pid
    );
    return undef;
}

return if exists <v7.terminating.pid>->{$kill_pid};    ## ,..in progress.., ##

$instance_id = <v7.child>->{$kill_pid}->{'instance_id'}
    if defined <v7.child>->{$kill_pid};

my $children_ref = <[v7.sub-process.get_children]>->($kill_pid);

my @children = defined $children_ref ? $children_ref->@* : ();

map {
    <v7.child>->{$ARG}->{'instance_id'} = $instance_id
        if defined $instance_id
} @children;

<[base.logs]>->( ': <TERM> instance PID %d', $kill_pid )
    if kill( qw| TERM |, $kill_pid );

my @kill_list = ($kill_pid);

my @actually_ended;
map { push( @actually_ended, $ARG ) if kill( qw| TERM |, $ARG ) } @children;

if (@actually_ended) {
    push( @kill_list, @actually_ended );
    <[base.logs]>->(
        ": <TERM> child%s %s",
        <[base.cnt_s]>->( scalar @actually_ended, '', 'ren :' ),
        join( ', ', @actually_ended )
    );
}

map { <v7.terminating.pid>->{$ARG} = <[base.time]>->(3) } @kill_list;

<[event.add_timer]>->(
    {   'after'   => <v7.timeout.kill_list>,
        'handler' => qw| v7.handler.process_kill_list |,
        'data'    => \@kill_list
    }
) if @kill_list;

#,,.,,,.,,,,.,,,,,...,,..,,,.,,,.,...,.,,,.,,,..,,...,...,.,,,,..,,,,,..,,...,
#JFPDLOTZTW2SQAVEBFXSCYHQRIYZU2VWGO64DJYD3NAML6U3WKDRFEDKQUY75LYHNKCLP5Q3K653Q
#\\\|T43BRZF72CIGQYIWBL22EJHZFE4TNRQXB64XMUX2CNYUNV4UNGQ \ / AMOS7 \ YOURUM ::
#\[7]JVLPAOT4WJENPTN54R2WVOKRFTXSGXZ32NEFVW7HTAYXE57WPWAY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
