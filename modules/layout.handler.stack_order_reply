# >:]

# name = layout.handler.stack_order_reply

my $answer   = shift;
my $reply_id = delete $answer->{'params'};

return <[base.callback.cmd_reply]>->(
    $reply_id,
    {   'mode' => 'nack',
        'data' => "unexpected answer from (missing?) xserver agent!"
    }
) if defined $reply_id and $answer->{'cmd'} ne 'RAW';
return <[base.callback.cmd_reply]>->(
    $reply_id,
    {   'mode' => 'nack',
        'data' => "no open windows found"
    }
) if defined $reply_id and $answer->{'call_args'}->{'args'} == 0;

$answer->{'data'} =~ s|\n$||;
my @window_stack = split( /\n/, $answer->{'data'} );

my %wid_check = map { $_ => 1 } @window_stack;
for my $agent_name ( keys %{<layout.layers>} ) {
    my $w_chk = <layout.window_ids>->{$agent_name};
    <layout.window_ids>->{$agent_name} = undef
        if defined $w_chk and not exists $wid_check{$w_chk};
}

my @lower_ids;
my %known_ids;
for my $agent_name (
    sort { <layout.layers>->{$b} <=> <layout.layers>->{$a} }
    keys %{<layout.layers>}
    ) {
    my $window_id = <layout.window_ids>->{$agent_name};
    next if not defined $window_id;
    my $layer_pos = <layout.layers>->{$agent_name};
    push( @lower_ids, $window_id );
    $known_ids{$window_id} = 1;
}
my @known_windows;
map { push( @known_windows, $_ ) if exists $known_ids{$_} } @window_stack;

my $ack_msg = 'layers sorted';
if ( join( ',', @known_windows ) eq join( ',', @lower_ids ) ) {
    $ack_msg = 'already sorted';
} else {
    map {
        <[base.proto.nailara.command.send.local]>->(
            {   'command'   => "core.xserver.lower_window",
                'call_args' => { 'args' => $_ },
                'reply'     => { 'handler' => 'dev.null' }
            }
            )
    } @lower_ids;
}

<[base.callback.cmd_reply]>->(
    $reply_id,
    {   'mode' => 'ack',
        'data' => $ack_msg
    }
) if defined $reply_id;
