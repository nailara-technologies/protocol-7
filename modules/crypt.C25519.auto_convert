## >:] ##

# name  = crypt.C25519.auto_convert

my $key_dir = shift;
<[base.log]>->( 2, ': key dir not found., [ skipped auto-convert ]' )
    and return
    if !-d $key_dir;
<[base.log]>->( 2, ": [ auto-convert ] '$key_dir'..," );

my @key_files = grep {m{C25519_b32}} @{ <[file.all_files]>->($key_dir) };

<[base.log]>->( 2, ": [ auto-convert ] no convertable keys present.," )
    and return
    if !( grep {m{C25519_b32\.(public|secret)\..+}} @key_files );

map { <[base.log]>->( 0, $ARG ) }
    ( ':', ": [ auto_convert ] : .. renaming .. :.", ':' );

foreach my $source_path (@key_files) {
    my $target_path = $source_path;
    if (   $target_path =~ s|_b32$|.B32.secret|
        or $target_path =~ s|_b32\.pub$|.B32.public| ) {
        ( my $source_name = $source_path ) =~ s|^.*\/||;
        ( my $target_name = $target_path ) =~ s|^.*\/||;
        <[base.log]>->( 0, ": [ file '$source_name' ]" );
        <[base.log]>->( 0, ":  '$target_name'.," );
        if ( -e $target_path ) {
            map { <[base.log]>->( 0, $ARG ) }
                ( ':', "<< $source_name :: target path exists `:| >>" );
        } else {
            rename( $source_path, $target_path )
                or map { <[base.log]>->( 0, $ARG ) }
                ( ':', "<< $source_name : : \l$OS_ERROR >>" );
        }
    }
    <[base.log]>->( 0, ":" );
}

#,,,,,,,.,,,,,..,,,.,,,.,,...,...,.,.,.,.,..,,..,,...,...,,..,.,,,,.,,,..,,.,,
#IFSAUZMRIU26VLXYT6SWAY35GKH373WN4XXQZFZYG2UWRVCLLWJNUEP3ZNO6SH4DNMVHNFHOXBVYI
#\\\|FIGFJBAETKYVK4ZSX4FZLBTK6UO4R7UGNBGG5TZDS64UWIXYYVU \ / AMOS7 \ YOURUM ::
#\[7]G5WWCOGMVWSCVCNKYCK7YKIYAMVJGDEKIWQGRT6IBLE2SW5L3MDA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
