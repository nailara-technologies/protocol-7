# >:]

# name  = layout.cmd.get_coordinates
# param = <agent_name>
# descr = return window edge coordinates for layout

return { 'mode' => 'nack', 'data' => "expected valid agent name" }
    if not defined $$call{'args'}
    or $$call{'args'} !~ /^(\S+)( +(\S+))?$/;

my ( $source_agent, $agent_name ) = ( $1, $3 );
$source_agent =~ s|^.+\.||g;
$agent_name = $source_agent if not defined $agent_name;

if ( not exists <layout.coordinates>->{$agent_name} ) {
    my $last_match;
    my $match   = 0;
    my $msg_str = "no coordinates found for agent '$agent_name'";
    if ( $agent_name !~ /[\[\]]+/ ) {
        map {
            if ( $_ =~ /^([^\[]+)\[/ and $1 eq $agent_name ) {
                $last_match = $_;
                $match++;
            }
        } keys %{<layout.coordinates>};
    }
    $msg_str
        = "multiple '$agent_name' instances defined, agent subname required!"
        if $match > 1;
    return {
        'mode' => 'nack',
        'data' => $msg_str
        }
        if $match != 1;
    $agent_name = $last_match;
}

my $coordinates_data = <layout.coordinates>->{$agent_name};

my @coordinates;
my @borders = ( 'left', 'top', 'right', 'bottom' );
foreach my $border_name (@borders) {
    return {
        'mode' => 'nack',
        'data' => "coordinates for $border_name border are missing"
        }
        if not exists $coordinates_data->{$border_name};
    push( @coordinates, $coordinates_data->{$border_name} );
}

return { 'mode' => 'ack', 'data' => join( ' ', @coordinates ) }
