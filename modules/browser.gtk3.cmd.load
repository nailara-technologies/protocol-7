# >:]

# name  = browser.gtk3.cmd.load
# param = [url]
# descr = load given url
# todo  = deal with new requests while previous one is loading (abort|deny)

my $url      = $$call{'args'};
my $reply_id = $$call{'reply_id'};

my $window = <browser.gtk3.obj.window>;

if ( defined <browser.gtk3.obj.view> ) {
    <browser.gtk3.obj.view>->unrealize();
    <browser.gtk3.obj.view>->destroy();
    delete <browser.gtk3.obj.view>;
}
if ( defined <browser.gtk3.obj.scr_win> ) {
    <browser.gtk3.obj.scr_win>->unrealize();
    <browser.gtk3.obj.scr_win>->destroy();
    delete <browser.gtk3.obj.scr_win>;
}

$window->show_all();

<[browser.gtk3.init_view]>;

my $view  = <browser.gtk3.obj.view>;
my $frame = <browser.gtk3.obj.frame>;

$window->show_all();

return { 'mode' => 'nack', 'data' => "expected url parameter" }
    if not defined $url
    or !length($url);

<browser.loop_timer>->cancel;
Event->unloop_all();

$url = "file://$url" if $url =~ m|^/|;
$url = "http://$url" if $url !~ /^\w+:/;
<browser.error_page> //= 'about:blank';

if ( not <browser.zoom_text_only> and defined <browser.skip_content_zoom_path> )
{
    my $skip_pattern = qr{^file://<browser.skip_content_zoom_path>};
    if ( $url =~ $skip_pattern ) {
        $view->set_full_content_zoom(0);
    } else {
        $view->set_full_content_zoom(1);
    }
}

$view->load_uri('about:blank');

my $signal_id;
$signal_id = $view->signal_connect(

    'notify::load-status' => sub {

        my $view        = shift;
        my $frame       = $view->get_main_frame;
        my $n_res       = $frame->get_network_response;
        my $message     = $n_res->get_message;
        my $load_status = $view->get_load_status;
        my $title       = $view->get_title // '';
        my $status_code
            = defined $message ? $message->get('status-code') : undef;

        return if $load_status ne 'finished' and $load_status ne 'failed';

        Glib::Source->remove(<browser.load_timeout_id>)
            if defined <browser.load_timeout_id>;

        if (    $load_status eq 'finished'
            and defined $status_code
            and $status_code == 200 ) {
            $view->signal_handler_disconnect($signal_id);
            <[base.callback.cmd_reply]>->(
                $reply_id, { 'mode' => 'ack', 'data' => 'finished loading' }
            );
        } else {
            $view->signal_handler_disconnect($signal_id);
            my $st_txt = defined $status_code ? " ($status_code)" : '';
            my $reason_txt = $st_txt;

            $reason_txt .= " [$title]" if $title eq '404 Not Found';
            $reason_txt = " [$1]"
                if $title =~ /^proxy error:.+failed: ([\w\.\:\/\s]{1,42})\.$/i;

            if (    not defined $status_code
                and !length($reason_txt)
                and !length($title) ) {
                my $check_sock = IO::Socket::INET->new(
                    PeerAddr => <browser.proxy.addr>,
                    PeerPort => <browser.proxy.port>,
                    Proto    => 'tcp',
                    Timeout  => 0.2
                );
                if (   not defined $check_sock
                    or !-S $check_sock
                    or !$check_sock->connected() ) {
                    $reason_txt = ' [proxy unreachable!]';
                } else {
                    $check_sock->close();
                }
            }

            <[base.log]>->( 0, " failed to load url $url" . $reason_txt );

            <[base.callback.cmd_reply]>->(
                $reply_id,
                { 'mode' => 'nack', 'data' => "failed to load" . $reason_txt }
            );
            my $fail_page_ref = <[file.slurp]>->(<browser.error_page>);
            $$fail_page_ref =~ s|\[ERR_MSG\]|<locales.string.failed_to_load>|sg;
            Glib::Idle->add(
                sub {
                    $view->load_string( $$fail_page_ref, 'text/html',
                        'UTF-8', 'FAIL' );
                    return 0;
                }
            );
        }
    }
);

<browser.load_timeout_id> = Glib::Timeout->add_seconds(
    <browser.cfg.load_timeout>,
    sub {
        $view->stop_loading();
        return 0;
    },
    undef,
    -10
);

<[base.log]>->( 2, " loading url '$url' ..." );
$view->load_uri($url);

return { 'mode' => 'later' };
