# >:]

# name  = browser.gtk3.cmd.load
# param = [url]
# descr = load given url
# todo  = deal with new requests while previous one is loading (abort|deny)

my $url      = $$call{'args'};
my $reply_id = $$call{'reply_id'};

my $window = <browser.gtk3.obj.window>;

if ( defined <browser.gtk3.obj.view> ) {
    <browser.gtk3.obj.view>->unrealize();
    <browser.gtk3.obj.view>->destroy();
    delete <browser.gtk3.obj.view>;
}
if ( defined <browser.gtk3.obj.scr_win> ) {
    <browser.gtk3.obj.scr_win>->unrealize();
    <browser.gtk3.obj.scr_win>->destroy();
    delete <browser.gtk3.obj.scr_win>;
}

$window->show_all();

<[browser.gtk3.init_view]>;

my $view  = <browser.gtk3.obj.view>;
my $frame = <browser.gtk3.obj.frame>;

$view->size_allocate( { 'width' => 1, 'height' => 1 } );

$window->show_all();

return { 'mode' => 'nack', 'data' => "expected url parameter" }
    if not defined $url
    or !length($url);

<browser.loop_timer>->cancel;
Event->unloop_all();

$url = "file://$url" if $url =~ m|^/|;
$url = "http://$url" if $url !~ /^\w+:/;
<browser.error_page> //= 'about:blank';

if ( not <browser.zoom_text_only> and defined <browser.skip_content_zoom_path> )
{
    my $skip_pattern = qr{^file://<browser.skip_content_zoom_path>};
    if ( $url =~ $skip_pattern ) {
        $view->set_full_content_zoom(0);
    } else {
        $view->set_full_content_zoom(1);
    }
}

$view->load_uri('about:blank');

my $signal_id;
$signal_id = $view->signal_connect(
    'notify::load-status' => sub {
        my $status = $view->get_load_status;
        my $title  = $view->get_title;
        $title //= '';

        if ( $status eq 'finished' and $title ne '404 Not Found' ) {
            $view->signal_handler_disconnect($signal_id);
            <[base.callback.cmd_reply]>->(
                $reply_id, { 'mode' => 'ack', 'data' => 'finished loading' }
            );
        } elsif ( $status eq 'failed'
            or $status eq 'finished' and $title eq '404 Not Found' ) {
            $view->signal_handler_disconnect($signal_id);
            my $reason_txt = $title eq '404 Not Found' ? " [$title]" : '';
            <[base.log]>->( 0, "failed to load url $url" . $reason_txt );

            <[base.callback.cmd_reply]>->(
                $reply_id, { 'mode' => 'nack', 'data' => 'failed to load' }
            );
            my $fail_page_ref = <[file.slurp]>->(<browser.error_page>);
            $$fail_page_ref =~ s|\[ERR_MSG\]|<locales.string.failed_to_load>|sg;
            Glib::Idle->add(
                sub {
                    $view->load_string( $$fail_page_ref, 'text/html', 'UTF-8',
                        'FAIL' );
                    return 0;
                }
            );
        }
    }
);

<[base.log]>->( 2, "loading url '$url'.." );
$view->load_uri($url);

#$view->size_allocate( { 'width' => 1, 'height' => 1 } );    # reset page size

return { 'mode' => 'later' };
