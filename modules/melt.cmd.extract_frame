## >:] ##

# name  = melt.cmd.extract_frame
# param = <position> <video_path>
# descr = extract specified video frame, start=0

my ( $frame_num, $video_path ) = split( / +/, $$call{'args'} // '', 2 );

<[melt.trigger.auto_cleanup]>;

return {
    'mode' => qw| false |,
    'data' => 'expected frame number and video path parameters!'
    }
    if not defined $frame_num
    or $frame_num !~ /^\-?\d+$/
    or not defined $video_path
    or !length($video_path);

if ( !-r $video_path ) {
    my $reason = !-e $video_path ? 'existing' : 'redable';
    return { 'mode' => qw| false |, 'data' => "file not $reason" };
}

<[base.protocol-7.command.send.local]>->(
    {   'command'   => 'cube.ffmpeg[melt].frame_count',
        'call_args' => { 'args' => $video_path },
        'reply'     => {
            'handler' => 'melt.handler.frame_count_reply',
            'params'  => {
                'frame'    => $frame_num,
                'vid_path' => $video_path,
                'reply_id' => $$call{'reply_id'}
            }
        }
    }
);

return { 'mode' => 'deferred' };

#,,.,,,..,,,,,,,,,,.,,,,.,...,.,.,,,,,,,.,.,.,..,,...,..,,,,.,,.,,,..,,,.,,.,,
#TOIQXCXZA2EG2ZRVF43EAQ6SNEP6TC2CUFHLQ44BU4TLZ7DBQ5VQTOFPRH3YAQSGKGXUUSVH7ML4K
#\\\|XHXA7MAA7BQIOJFN62UFH67YTEQFNZJB66THBXH7TZDWIXGTLXD \ / AMOS7 \ YOURUM ::
#\[7]5C6HSV3DVAS4KZSPOGQXOLME7MBVM7VRPMPOCSYYS4RHYSEPBACA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
