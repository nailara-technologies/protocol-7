## [:< ##

# name  = base.zenki.ondemand.handler.startup_reply
# descr = handles 'v7.notify_online' command replies

my $reply = shift;

my $v_id       = $reply->{'params'}->{'v_id'};
my $zenka_name = <zenki.virtual>->{$v_id}->{'name'};

delete <zenki.virtual>->{$v_id}->{'starting'};

if ( $reply->{'cmd'} eq qw| FALSE | ) {
    my $reason = $reply->{'call_args'}->{'args'};
    <[base.logs]>->(
        0,           'ondemand start-up of %s zenka not successful [ %s ]',
        $zenka_name, $reason
    );
    while ( my $element = shift <zenki.virtual>->{$v_id}->{'queue'}->@* ) {
        my $cmd_id = $element->{'src_cmd_id'};
        my $src_id = $element->{'source_id'};
        next if not exists $data{'session'}{$src_id};    ##   <--  gone.   ###
        ##  zenka start-up error  ##
        $data{'session'}{$src_id}{'buffer'}{'output'}
            .= <[base.sprint_t]>->( qw| USMP72A |, $cmd_id );
    }
} elsif ( $reply->{'call_args'}->{'args'}
    =~ m|^zenka '$zenka_name' is online \[(\d+)\]$| ) {
    my $target_sid = $LAST_PAREN_MATCH;

    <[base.logs]>->( 'ondemand %s zenka has come online..,', $zenka_name );

    while ( my $element = shift <zenki.virtual>->{$v_id}->{'queue'}->@* ) {
        ##  source is gone, abort sending  ##
        last if not exists $data{'session'}{ $element->{'source_id'} };
        ##  destination gone  ##
        last if not exists $data{'session'}{$target_sid};    ##  unlikely  ##

        ## set up reply route ##
        my $route = <[base.route.add]>->(
            {   'source' => {
                    'sid'    => $element->{'source_id'},
                    'cmd_id' => $element->{'src_cmd_id'}
                },
                'target' => { 'sid' => $target_sid }
            }
        );
        my $target_cmd_id = $route->{'target'}->{'cmd_id'};    ## numerical ##

        ### sending to arrived zenka ###

        if ( not defined $element->{'multiline'} ) {   ##  single cmd line  ##

            ##  preparing the stored command for arrived zenka  ##
            my $output_str = sprintf qw| (%s)%s |, $target_cmd_id,
                $element->{'cmd_str'};

            ## append command arguments ##
            $output_str .= sprintf( ' %s', $element->{'cmd_args'} )
                if defined $element->{'cmd_args'};

            $data{'session'}{$target_sid}{'buffer'}{'output'}
                .= sprintf "%s\n", $output_str;

        } else {    ## multiline command mode ##

            $data{'session'}{$target_sid}{'buffer'}{'output'}
                .= <[base.format.multiline_command]>->(
                $target_cmd_id,    ## numerical ##
                $element->{'cmd_str'}, delete $element->{'multiline'}
                );

        }
    }
} else {
    <[base.s_warn]>->(
        "unexpected notify_online reply syntax ['%s']",
        $reply->{'call_args'}->{'args'}
    );
    while ( my $element = shift <zenki.virtual>->{$v_id}->{'queue'}->@* ) {
        my $src_id = $element->{'source_id'};
        next if not exists $data{'session'}{$src_id};    ##   <--  gone.   ###
        ##  reply processing error  ##
        $data{'session'}{$src_id}{'buffer'}{'output'}
            .= <[base.sprint_t]>->( qw| CKK43MQ |, $element->{'src_cmd_id'} );
    }
}

#,,,,,.,.,.,.,,..,,.,,,,.,.,,,,,,,,.,,,..,.,.,..,,...,...,,,.,,,.,.,.,,,.,,,,,
#TJBPN2XVWMRSUF2SKARC4TDC5SLTZ62OMLIEUQNNWKQ4VHKVGSI4AERVKFB7XBQN5FXL3PNG5KA5G
#\\\|DNFH5H5D7F6H6Z67FHYXIXALMEDILCNBYW2F3DWP3ZMESCS4X2U \ / AMOS7 \ YOURUM ::
#\[7]FUMFINXHPZ2TMTRXQJTJWQ762UEVE5K562MZNYGITOKYWY3ZHCDA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
