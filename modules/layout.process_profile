# >:]

# name = layout.process_profile

my $profile_name = shift;
die "expected valid profile name"
    if not defined $profile_name or !length($profile_name);
die "layout profile $profile_name not found"
    if not exists <layout.config.profiles>->{$profile_name};

<[base.log]>->( 1, "processing layout profile '$profile_name'.." );

if ( defined <layout.config.ticker_agent_type> ) {
    my $ticker_type = <layout.config.ticker_agent_type>;
    foreach my $profile ( keys %{<layout.config.profiles>} ) {
        my $_profile_data = <layout.config.profiles>->{$profile};
        map {
            if ( $_ =~ /^ticker(-sdl|-gtk)?(\[[^\]]+\])?$/ ) {
                my $tile_name = $2 // '';
                my $new_name = "ticker-$ticker_type$tile_name";
                if ( $new_name ne $_ ) {
                    $_profile_data->{$new_name} = delete $_profile_data->{$_};
                    $_profile_data->{$new_name}->{'layer'} //= 100; # <- on top!
                }
            }
        } keys %{ <layout.config.profiles>->{$profile} };
    }
}

<layout.startup.first_profile> //= 1;

my @remove_agents;
my $previous_data;
my $previous_profile = <layout.previous_profile>;
my $profile_data     = <layout.config.profiles>->{$profile_name};
if ( defined $previous_profile ) {
    if ( $previous_profile eq $profile_name ) {
        <[base.log]>->(
            0,
            "current and previous profile are identical, aborting processing.."
        );
        return 0;
    }
    $previous_data = <layout.config.profiles>->{$previous_profile};
    map { push( @remove_agents, $_ ) if not exists $profile_data->{$_} }
        keys( %{$previous_data} );
}

if (<layout.startup.first_profile>) {
    my $kill_count = 0;
    foreach my $profile ( keys %{<layout.config.profiles>} ) {
        my $_profile_data = <layout.config.profiles>->{$profile};
        map {
            my $stop_agents
                = exists $_profile_data->{$_}->{'stop_agents'}
                ? join( ' ', $_profile_data->{$_}->{'stop_agents'}, $_ )
                : $_;
            <[base.proto.nailara.command.send.local]>->(
                {   'command'   => 'core.root.stop_implicit',
                    'call_args' => { 'args' => $stop_agents }
                }
            );
            $kill_count++;
        } keys %{ <layout.config.profiles>->{$profile} };
    }
    <[base.sleep]>->(0.42) if $kill_count;    # XXX: fix!
} else {
    map {
        <[layout.handler.agent_transition]>->(
            {   'action'       => 'stop',
                'profile_name' => $previous_profile,
                'agent_name'   => $_
            }
        );
    } @remove_agents;
}

<layout.coordinates> = {};
<layout.window_ids>  = {};
<layout.subconfig>   = {};
<layout.layers>      = {};

foreach my $agent_name ( keys %{$profile_data} ) {
    next
        if !<layout.startup.first_profile>
        and defined $previous_profile
        and exists $previous_data->{$agent_name}
        and
        cmpStr( $previous_data->{$agent_name}, $profile_data->{$agent_name} )
        == 0;    # agent setup identical (not touching running agent)

    <layout.window_ids>->{$agent_name} //= undef;

    <layout.coordinates>->{$agent_name}
        = <[layout.calculate_coordinates]>->( $profile_data->{$agent_name} );

    <layout.layers>->{$agent_name} = $profile_data->{$agent_name}->{'layer'}
        if defined $profile_data->{$agent_name}->{'layer'}
        and $profile_data->{$agent_name}->{'layer'} =~ /^\-?\d+$/;
    <layout.layers>->{$agent_name} //= 0;

    <layout.subconfig>->{$agent_name} = {};
    ( my $name_plain = $agent_name ) =~ s|\[.+$||;
    if ( defined <layout.mapped_subcfg>->{$name_plain} ) {
        my @scfg_keys = split( / +/, <layout.mapped_subcfg>->{$name_plain} );
        foreach my $sc_key (@scfg_keys) {
            <layout.subconfig>->{$agent_name}->{$sc_key}
                = $profile_data->{$agent_name}->{$sc_key}
                if defined $profile_data->{$agent_name}->{$sc_key};
        }
    }

    <[layout.handler.agent_transition]>->(
        {   'action'       => 'start',
            'profile_name' => $profile_name,
            'agent_name'   => $agent_name
        }
    );
}

<layout.startup.first_profile> = 0;

<[base.proto.nailara.command.send.local]>
    ->( { 'command' => 'core.playlist.update' } );
