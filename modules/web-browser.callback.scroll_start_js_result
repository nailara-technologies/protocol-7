## [:< ##

# name  = web-browser.callback.scroll_start_js_result
# descr = callback invoked from js_call

my $js_result = shift // '';                 # "<scroll_max_Y>:<scroll_pos_Y>"
my $cb_params = shift;
my $reply_id  = $cb_params->{'reply_id'};
my $call_sub  = $cb_params->{'caller'};
my $window    = <web-browser.gtk_obj.window>;

<window.scrolling> //= 0;
<window.scroll.reply_id> = $reply_id;

warn "result string not as expected [$js_result], cannot scroll."
    if $js_result !~ m|^(\-?\d+):(\d+)|;

<window.scroll.max>  = $1 // 0;
<window.scroll.pos>  = $2 // 0;
<window.scroll.stop> = 0;

if ( <window.scroll.pos> >= <window.scroll.max> ) {
    return <[base.callback.cmd_reply]>->(
        $reply_id,
        { 'mode' => qw| true |, 'data' => 'already at end of page' }
    ) if defined $reply_id;

    <[base.log]>->( 2, ": skipping auto-scroll [ end of page ]" );
    <[web-browser.callback.load_finished]>->('no_scroll')
        if $call_sub eq 'web-browser.callback.load_finished';
    return;

} else {
    my $pixels = <window.scroll.max> - <window.scroll.pos>;
    <[base.log]>->( 2, ": starting auto-scrolling.., [ $pixels pixels ]" );
}

<web-browser.timer.slideshow>->cancel
    if exists <web-browser.timer.slideshow>;    # <-- chk.

<web-browser.signal_id.auto_scroll>
    = $window->signal_connect(
    draw => $code{'web-browser.handler.auto_scroll'} );

$window->queue_draw();
<window.scrolling> = 1;

#,,,.,.,,,.,,,..,,..,,,.,,...,,..,,.,,,..,.,,,..,,...,...,.,.,,.,,,..,.,.,,.,,
#W2YJFBA7PGHEBQNVJGPE7WI3IXXO2SLPAOB22GT2KL42YGKJ577LIA3MEUK4LH5O7PEWYGALDQOPY
#\\\|EWCFFERFMBWJJ7EEJQMWUPA3XC7OROOSKD7R663PSTLFSNDSVB3 \ / AMOS7 \ YOURUM ::
#\[7]KFTA2UOK7KWYGAVY7ERKBUXM2KGZECYR7VTCQI2CCGLKJSIRS2CI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
