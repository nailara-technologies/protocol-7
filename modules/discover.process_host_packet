## [:< ##

# name  = discover.process_host_packet

my $packet_payload     = shift;
my $packet_fields_href = shift;

##  target route to 'nodes' zenka  ##
##
my $nodes_update_cmd = <discover.cfg.nodes.host_status_command>;

<discover.resend-host-reqs> //= {};

return ( warn 'HOST packet syntax error [ packet format ] <{C1}>' and undef )
    if $packet_payload !~ m|^HOST\[ (?<hostname>\S+) \] \{\n(?#
                           )(?<payload>(?: {10,81}(?#
                           )[A-Fa-f\d\.:]{5,29}  (?#
                           )(?:(?:[0-9a-f]{2}:){5}[0-9a-f]{2})  (?#
                           )<[\w\.\:]{1,15}>\n)*)(?#
                           ) {10,81}\}\n|;

my $hostname = $+{'hostname'};
my $pkey     = Crypt::Misc::encode_b32r( $packet_fields_href->{'hostkey'} );

my $hostname_L13
    = keys <discover.resend-host-reqs>->%*
    ? <[chk-sum.bmw.L13-str]>->($hostname)
    : undef;

my %payload_id;
my $entry_added = FALSE;    ##  host [re-]appeared ?  ##

my $pkey_L13 = <[chk-sum.bmw.L13-str]>->( $packet_fields_href->{'hostkey'} );

if ( not length $+{'payload'} ) {

    my $entry_id = $pkey_L13;

    $payload_id{$entry_id} = TRUE;    ##  protect from removing  ##

    $entry_added = TRUE if not exists $data{'hosts'}->{$entry_id};

    $data{'hosts'}->{$entry_id} = {
        qw| pkey |               => $packet_fields_href->{'hostkey'},
        qw| host |               => $hostname,
        qw| timestamp |          => $packet_fields_href->{'timestamp'},
        qw| tstamp-adj |         => $packet_fields_href->{'tstamp-adj'},
        qw| time-delta-seconds | =>
            $packet_fields_href->{'time-delta-seconds'}
    };
} else {
    foreach my $line ( split "\n", $+{'payload'} ) {
        next if not length $line;
        return ( warn 'HOST packet error [ address payload line ] <{C1}>'
                and undef )
            if $line !~ m| {13,81}(?<ip_address>[A-Fa-f\d\.:]{5,29})  (?#
                     )(?<hwaddr>(?:[0-9a-f]{2}:){5}[0-9a-f]{2})  (?#
                     )<(?<iface>[\w\d\.:]{1,15})>|;

        my $entry_id = join qw| : |, $pkey_L13,
            <[chk-sum.bmw.L13-str]>->(
            $hostname, $+{'ip_address'}, $+{'hwaddr'}, $+{'iface'},
            );

        $payload_id{$entry_id} = TRUE;    ##  protect from removing  ##

        $entry_added = TRUE if not exists $data{'hosts'}->{$entry_id};

        ## add to list .., ##
        $data{'hosts'}->{$entry_id} = {
            qw| pkey |               => $packet_fields_href->{'hostkey'},
            qw| host |               => $hostname,
            qw| ip_addr |            => $+{'ip_address'},
            qw| hwaddr |             => $+{'hwaddr'},
            qw| iface |              => $+{'iface'},
            qw| timestamp |          => $packet_fields_href->{'timestamp'},
            qw| tstamp-adj |         => $packet_fields_href->{'tstamp-adj'},
            qw| time-delta-seconds | =>
                $packet_fields_href->{'time-delta-seconds'}
        };
    }
}

## clean-up previous entries ##
##
foreach my $id (    ## entries signed with the same host key ##
    grep { not exists $payload_id{$ARG} }
    grep { index( $ARG, $pkey_L13, 0 ) == 0 }
    keys $data{'hosts'}->%*
) {
    delete $data{'hosts'}->{$id};    ## no longer in packet payload ##
}

if ($entry_added) {    ## seperate buffer status change logging ##

    my $log_level  = 1;
    my $log_msg    = sprintf ": host status :  online .: '%s'", $hostname;
    my $time_stamp = <[base.anum_log_time]>->( 5, TRUE );

    <[base.buffer.add_line]>->(
        qw| host-status |,
        join( ' ', $time_stamp, $log_level, $log_msg ), $log_level
    );
}

##  send status change for [all] host to 'nodes' zenka  ##
##
if (    $entry_added
    and defined $nodes_update_cmd
    and <[base.is_defined_recursive]>->(qw| discover.notify-nodes-zenka |)
    and <[base.cfg_bool]>->(<discover.notify-nodes-zenka>) ) {
    <[base.log]>->( 2, "sending host [online] status to 'nodes' zenka .,", );
    <[base.protocol-7.command.send.local]>->(
        {   'command'   => $nodes_update_cmd,
            'call_args' => { 'args' => join( ' ', qw| online |, $hostname ) }
        }
    );
}

##  requested host status updates  ##
##
if ($entry_added    ##  when announce host request [re-]appears  ##
    and defined $hostname_L13
    and exists <discover.host-status-requests>->{$hostname_L13}
) {
    my @send_update_zenki
        = <discover.host-status-requests>->{$hostname_L13}->{'zenki'}->@*;
    if (not defined
        <discover.host-status-requests>->{$hostname_L13}->{'host-key'}
        or $packet_fields_href->{'hostkey'} eq    ## comparing host-keys ##
        <discover.host-status-requests>->{$hostname_L13}->{'host-key'}
        ) {    ## sending host status updates to configured zenki ##
        foreach my $target_zenka (@send_update_zenki) {
            <[base.logs]>->(
                2, "sending host [online] status to '%s' ..,",
                $target_zenka
            );
            <[base.protocol-7.command.send.local]>->(
                {   'command' =>
                        sprintf( qw| cube.%s.host-status |, $target_zenka ),
                    'call_args' =>
                        { 'args' => join ' ', qw| online |, $hostname }
                }
            );
        }
    } elsif (
        defined
        <discover.host-status-requests>->{$hostname_L13}->{'host-key'} ) {
        <[base.s_warn]>->(
            "host key mismatch , clearing status update request%s for '%s'",
            <[base.cnt_s]>->( scalar @send_update_zenki ), $hostname
        );
        foreach my $zenkaname (@send_update_zenki) {
            my $zenka_cfg_path = sprintf qw| notify-reqs/%s.%s |,
                $hostname_L13, $zenkaname;
            <[file.zenka_dir.unlink_file]>->( $zenka_cfg_path, TRUE );
        }
    }
}

## host awareness resend-requests ##
##
if ($entry_added    ##  when announce host request [re-]appears  ##
    and defined $hostname_L13
    and exists <discover.resend-host-reqs>->{$hostname_L13}
    ) {             ##  processing host awareness resend-requests  ##
    if (not defined <discover.resend-host-reqs>->{$hostname_L13}->{'host-key'}
        or $packet_fields_href->{'hostkey'} eq    ## comparing host-keys ##
        <discover.resend-host-reqs>->{$hostname_L13}->{'host-key'}
        ) {    ## reset announce interval ##
        <[base.log]>->( 2, 'resend request matched [ resetting interval ]' );
        <[discover.callback.resend_interval_reset]>->(FALSE);
    } elsif (
        defined <discover.resend-host-reqs>->{$hostname_L13}->{'host-key'} ) {
        <[base.s_warn]>->(
            "host key mismatch , clearing resend-request for '%s'", $hostname
        );
        my $zenka_cfg_path = sprintf qw| resend-reqs/%s |, $hostname_L13;
        <[file.zenka_dir.unlink_file]>->( $zenka_cfg_path, TRUE );
    }
}

#,,..,.,,,,.,,...,,..,,.,,.,.,.,.,,,,,..,,.,.,..,,...,...,,..,...,.,,,,,.,,..,
#L5PHBZNJEL7BW7DCGPZT72ENYG4CLG5SAXPYOAWNSQ3466PZICAGAQE7LFCISAROH4FMVKE43342C
#\\\|KSBLUEBBYA3IAKUYZPZROPZUZ4HF7RM2KKHU2YTX25ZWHH6EJVU \ / AMOS7 \ YOURUM ::
#\[7]7ESTATQH4BG5K6JEMEQJW2RB3JVL3B24OMRNHKGABPOA5SOXCOCA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
