## [:< ##

# name = base.perlmod.load
# descr = use [Module::Load::]load to load perl modules [ see 'autoload' ]

my ( $module_name, @export ) = @ARG;

if ( not defined &Module::Load::load and [caller]->[1] ne __FILE__ ) {
    eval { require Module::Load };
    if ( length $EVAL_ERROR ) {
        warn <[base.str.eval_error]>;
        eval <<~ 'EOT';
            sub Module::Load::load (*;@) {  eval join ' ', qw| use |, @ARG  }
        EOT
    }
    <[base.perlmod.autoload]>->(qw| Module::Load |);
}

<base.perlmod.auto_install> //= FALSE;

##  create [ exports ] registry  ##  [ LLL ]
##
if ( not @export and <[base.perlmod.loaded]>->($module_name) ) {
    <[base.logs]>->( 2, ": skipping already present '%s'..,", $module_name );
    return TRUE;    ## true ##
}

<[base.logs]>->( 2, ": loading perl module '%s'.,", $module_name );

<[base.register_pm_deps]>->($module_name);

eval { Module::Load::load( $module_name, @export ) };

if ( not length $EVAL_ERROR ) {    # success #
    <[base.perlmod.register_loaded_module]>->($module_name);
    return TRUE;                   ## true ##
} elsif ( delete <base.perlmod.silent_error>
    and not <base.perlmod.auto_install> ) {
    return FALSE;                  ##  no error messages [silenced]  ##
}

my $reason = <[base.format_error]>->( $EVAL_ERROR, -1 );

# load error #
<base.perlmod.loaded>->{$module_name} = FALSE;

if ( $reason !~ m|^\S+ locate | ) {
    <[base.logs]>->(
        0, "<< error while loading perl module '%s' >>", $module_name
    );
    die sprintf( ":: [ '%s' ]", $reason );
}

if ( not <base.perlmod.auto_install> ) {
    <[base.logs]>->(
        0, "<< error while loading perl module '%s' >>", $module_name
    );
    <[base.logs]>->( 1, ":: [ '%s' ]", $reason );
    <[base.log]>->(
        2, "  :. << module auto_install is not enabled, doing nothing >>"
    );
    return FALSE;    ##  no success with loading module  ##
}

<[base.logs]>->(
    2, ": << error while loading '%s' [ auto_install enabled ] >>",
    $module_name
);
<[base.logs]>->( 2, ":. [ '%s' ]", $reason );

## auto-install ##
<[base.perlmod.install]>->($module_name);

eval { Module::Load::load( $module_name, @export ) };    ##  trying again  ##

if ( length $EVAL_ERROR ) {
    <[base.s_warn]>->(
        "<< not able to automatically install perl module '%s' >>",
        $module_name
    );
    <[base.perlmod.unregister_loaded_module]>->($module_name);
    return FALSE;    ##  false  ##
} else {
    return TRUE;     ## true ##
}

return TRUE;         ## true ##  [ module loaded ]

#,,,.,.,.,...,...,.,,,...,,,,,,,,,.,.,,,.,,,,,..,,...,...,...,...,...,,.,,,..,
#QM57P3EWS55SRMB5YBUCPE5TXQ46CHYAXOPIWEYCIDMPEFENAI5HZT62FTPTATFARTYID6JMU7WJS
#\\\|PECOLHHXSXT3JXSMTYLPJYL65DJZOBDVZBINEJ26KSZZM26CLWT \ / AMOS7 \ YOURUM ::
#\[7]LVQJENOH4C6OIHCIQ332GCUEK3K5U7NA3KFBU3XWDAF5FDYHCOCY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
