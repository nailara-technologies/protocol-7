## >:] ##

# name  = v7.zenka-instances.get-ids
# descr = matching instance ids for zenki name[s]

my $names = shift // '';
return warn 'zenka name param[s] expected <{C1}>' if not length $names;

my @instance_ids;
my $not_found    = 0;
my $found_set_up = 0;
my $unknown_name;
foreach my $param_str ( split m| +|, $names ) {
    my $zenka_name = $param_str;

    my $zenka_subname;
    my $re_sn = <regex.base.subname>;
    $zenka_subname = ${^CAPTURE}[0] if $zenka_name =~ s|\[($re_sn)\]$||;

    my $zenka_id = <[zenka.get_id]>->($zenka_name);

    if ( defined $zenka_id ) { $found_set_up++ }
    else { $not_found++; $unknown_name //= $zenka_name; next }
    foreach my $iid (<[v7.instance_ids]>) {

        next
            if defined $zenka_subname
            and not exists <v7.zenka.instance>->{$iid}->{'subname'}
            or defined $zenka_subname
            and exists <v7.zenka.instance>->{$iid}->{'subname'}
            and <v7.zenka.instance>->{$iid}->{'subname'} ne $zenka_subname;

        push( @instance_ids, $iid )
            if <v7.zenka.instance>->{$iid}->{'zenka_id'} == $zenka_id;
    }
}

return {
    'ids'          => \@instance_ids,
    'found'        => $found_set_up,
    'not-found'    => $not_found,
    'unknown-name' => $unknown_name
    }
    if not wantarray;

return @instance_ids;    ## list context ##

#,,..,...,,,.,.,,,,.,,.,,,...,..,,,,,,,.,,..,,..,,...,...,.,,,...,,.,,,..,.,,,
#NDH7T5OSOXNRD2UROQF56JBHFAS4KUJ5OWJCB7PECBXK5OQ7BDQX64VXH37YHN4UKMGYUK7J7DGCO
#\\\|RW4ODEQS47BWEHWBDNV55HSV5K7SFKMDAXHKZXEBX3GAJNNKS3L \ / AMOS7 \ YOURUM ::
#\[7]W7X5MHMHR6YNLHRS227CMTGTGQYCSVM64FC6FV6WWHBFZ5J6PEAY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
