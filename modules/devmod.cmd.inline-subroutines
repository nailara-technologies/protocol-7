## [:< ##

# name  = devmod.cmd.inline-subroutines
# param = [pattern]
# descr = return list of inline subroutines

my $pattern  = $call->{'args'};
my $subs_ref = <base.inline_subs.sub-name>;

return {
    'mode' => qw| size |,
    'data' => sprintf(
        "\n.: list of loaded inline-subroutines :.\n\n%s\n\n",
        join(
            '',
            (   map { sprintf ": %s\n", $ARG } '',
                <[base.reverse-sort]>->($subs_ref),
                ''
            )
        )
    )
    }
    if not defined $pattern;

my $pattern_re;
eval { $pattern_re = qr|$pattern| };

if ($EVAL_ERROR) {
    ( my $reason = $EVAL_ERROR ) =~ s| at .+\n$||;
    return {
        'mode' => qw| false |,
        'data' => sprintf "regular expression '%s' is not valid [ %s ]",
        $pattern, $reason
    };
}

my @sub_list = grep {m|$pattern|} <[base.sort]>->($subs_ref);

return {
    'mode' => qw| false |,
    'data' => sprintf( "pattern '%s' matches no inline subs", $pattern )
    }
    if not @sub_list;

return {
    'mode' => qw| size |,
    'data' => sprintf(
        "\n.: inline subroutines matching '%s' :.\n\n%s\n\n",
        $pattern, join( '', map { sprintf ": %s\n", $ARG } '', @sub_list, '' )
    )
    }

#,,..,.,,,,,.,.,,,,,.,.,,,.,,,,.,,.,.,...,.,.,..,,...,...,...,.,,,,..,..,,,,,,
#5TP32I2X4S6L77YEGW5LX6T45T6O5OTALZY42UCX37B4TKQEPCNXATL7BQHSKRRKZD2VBXTYR6R7U
#\\\|TSCVKOJFOZ2XAKG4NBTPIZIWJPXBQZCYNJMM6752AD3J5LN5HRS \ / AMOS7 \ YOURUM ::
#\[7]V6AIZZ3AC6UEE2AXZOEDDHINDAYQIOW2UUUJFGMOA4KMIZAPA6CI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
