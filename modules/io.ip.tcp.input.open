## [:< ##

# name  = io.ip.tcp.input.open

my $l_addr = shift;
my $l_port = shift;

if ( not defined $l_addr ) {
    warn '[ip.tcp] listen address param not defined <{C1}>';
    return undef;
} elsif ( not defined $l_port ) {
    warn '[ip.tcp] listen port not defined <{C1}>';
    return undef;
} elsif ( $l_port < 1024 and $REAL_USER_ID != 0 ) {
    warn '[ip.tcp] ports below 1024 require root priviledges <{C1}>';
    return undef;
}

my $lsock = new IO::Socket::IP(
    LocalAddr => $l_addr,
    LocalPort => $l_port,
    Proto     => qw| tcp |,
    Listen    => 13,
    ReusePort => 1,
    ReuseAddr => 1,
    TimeOut   => 1,
    Blocking  => 0
);
if ( not defined $lsock or !-S $lsock ) {
    <[base.logs]>->(
        0, "cannot allocate %s:%d [ %s ]",
        $l_addr, $l_port, <[base.str.os_err]>
    );
    return undef;
} else {
    $l_addr //= qw| <undefined> |;
    my $status = $lsock->listen();

    if ( $status == -1 ) {
        <[base.logs]>->( 0, 'tcp.server: listen : %s', <[base.str.os_err]> );
        return undef;
    } else {
        <[base.logs]>->( 'TCP server launched [%s:%d]', $l_addr, $l_port );
    }
    if ( defined $data{'handle'}{$lsock} ) {
        <[base.logs]>->(
            0,
            "io.ip.tcp.input.open: handle '%s' "
                . "was not cleaned up. cleaning now.,",
            $lsock
        );
        delete $data{'handle'}{$lsock};
    }

    $data{'handle'}{$lsock}{'mode'} = qw| input  |;
    $data{'handle'}{$lsock}{'link'} = qw| ip.tcp |;

    return $lsock;
}

#,,,.,,..,,,,,.,,,..,,,,.,.,,,.,,,,..,,,,,...,..,,...,...,,.,,..,,.,.,...,,,.,
#FXOR65MT2NSXDHHOILJNX27W4HU3XWGBGRYMKQOH7EX3ABUOLD4RMQT4WB62TOY7JDEADLMOOLJ6Y
#\\\|V2IC5J5F3R3O4SU2HU3XGVP65Q4JNNE4C2OM6RTZ45JUISKQ65J \ / AMOS7 \ YOURUM ::
#\[7]LW375TYA6HM3EURTRTBHDVHZZJJG3W7Y5BJLCHY2KWGNR3EV5MCY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
