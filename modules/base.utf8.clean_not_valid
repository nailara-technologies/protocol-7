## [:< ##

# name  = base.utf8.clean_not_valid

my $s_ref = $ARG[0];
my $l_lvl = $ARG[1] // 2;    ## log level for errors ##
my $c_lvl = $ARG[2] // 0;    ## caller level for reporting ##
$s_ref = \$ARG[0] if not length ref $s_ref;

return FALSE if not utf8::is_utf8( $s_ref->$* );    ## nothing to do here ##

if ( not defined <base.utf8.test_fh> ) {
    open( <base.utf8.test_fh>, qw| > |, File::Spec->devnull() )
        or <[base.s_warn]>->( '<devnull> : %s', <[base.str.os_err]> );
    binmode( <base.utf8.test_fh>, qw| :encoding(UTF-8) | );
}

eval {
    use warnings FATAL => qw| utf8 |;
    say {<base.utf8.test_fh>} $s_ref->$*;
};

if ( length $EVAL_ERROR ) {
    <[base.log]>->(
        $l_lvl,
        join( ' ', ':: not valid UTF-8 ::', <[base.caller]>->($c_lvl) )
    );
    <[base.logs]>->( ++$l_lvl, ':. %s', <[base.str.eval_error]> );

    return <[base.clean_unicode]>->($s_ref);   ## <-- num. characters replaced

} else {
    return FALSE;                              ## no changes ##
}

#,,..,.,.,,,,,.,,,,.,,,.,,.,,,,,,,.,,,,..,,..,..,,...,...,...,..,,,..,.,.,,,.,
#YF7NWCYGGY4FMCKRTQUWJUADVQ7C4AVBHMYGHOUJ3M2RQD2VSZR3MO4GEWWC5BAQS2UOAIPGY4T26
#\\\|6RGVM3O72INBTHW7Q26RJQP6CFFC23LVRBWC2JA6ADAUTEJZD4I \ / AMOS7 \ YOURUM ::
#\[7]T3ANM37NOFMBEXEUSS2HZYAWPTYQNJGMNGO76RWT6ANZW4YBXUBY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
