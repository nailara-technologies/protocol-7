## [:< ##

# name  = crypt.C25519.load_keys_from_secret

my $name                     = shift // '';       ##  key name  ##
my $key_password             = shift;             ##  optional  ##
my $pwd_retry_on_error       = shift // TRUE;     ##  optional  ##
my $test_key_chksum          = shift;             ##  optional  ##
my $also_return_key_password = shift // FALSE;    ##  optional  ##

if ( not length $name ) {
    warn 'expected C25519 key name param <{C1}>';
    return undef;
} elsif ( not <[crypt.C25519.key_exists]>->($name) ) {
    <[base.logs]>->( 0, "key '%s' not found [ loading aborted ]", $name );
    return undef;
} elsif ( <[crypt.C25519.key_is_virtual]>->($name) ) {
    <[base.logs]>->( 0, "key '%s' is virtual [ loading aborted ]", $name );
    return undef;
}

my $key_vars_ref = <[crypt.C25519.key_vars]>->($name);
my $key_dir      = $key_vars_ref->{'key_dir'};
my $key_filename = $key_vars_ref->{'key_filename'};

my $secret_key_file  = $key_filename->{'secret'};
my $public_key_file  = $key_filename->{'public'};
my $private_key_file = $key_filename->{'private'};

if ( not -f $secret_key_file ) {
    <[base.logs]>->( 0, "no .secret file found in key '%s'", $name );
    return undef;
} elsif ( not -r $secret_key_file ) {
    <[base.logs]>->( 0, "no read permission for '%s.secret' file", $name );
    return undef;
}

<[base.logs]>->( "loading key pair from '%s' secret key..,", $name );

my $key_encryption_status    ## check if .secret file is encrypted ##
    = <[crypt.C25519.encrypted_key]>->($secret_key_file);

my $B32_secret_key = <[file.slurp]>->($secret_key_file)->$* // '';

if ( not length $B32_secret_key ) {
    <[base.logs]>->( 0, "cannot load '%s' key data ..,", $name );
    return FALSE;
}
chomp $B32_secret_key;

## decode [ base 32 ] ##
$keys{'C25519'}{$name}{'secret'} = decode_b32r $B32_secret_key;

if ( not defined $keys{'C25519'}{$name}{'secret'} ) {
    <[base.log]>->( 0, "BASE32 decoding error [ '%s' secret key ]" );
    return undef;
}

substr( $keys{'C25519'}{$name}{'secret'}, 0, 2, '' );    ##  strip prefix  ##

if ( length( $keys{'C25519'}{$name}{'secret'} ) != 32 ) {
    <[base.logs]>->(
        0,
        'remaining length of secret key not valid [ %04d BYTES ]',
        length $keys{'C25519'}{$name}{'secret'}
    );
    return undef;
}

if ( $key_encryption_status == TRUE ) {

RE_READ_PWD:
    if ( not defined $key_password ) {
        <[base.perlmod.load]>->('AMOS7::TERM')
            if not <[base.perlmod.loaded]>->('AMOS7::TERM');
        say sprintf qw| %s:%s |, $AMOS7::C{'0'}, $AMOS7::C{'R'};
        if (   -r $public_key_file
            or -r $private_key_file
            or defined $test_key_chksum ) {    ##  can verify  ##
            $key_password = AMOS7::TERM::read_password_single(
                sprintf( "'%s' key decryption password", $name ) );
        } else {    ##  cannot verify \ repeated password  ##
            $key_password = AMOS7::TERM::read_password_repeated(
                sprintf( "'%s' key decryption password", $name ) );
        }
    }

    ## loading for comparison ##
    ##
    my $decoded_pubkey;
    my $decoded_privkey;
    if ( -r $public_key_file ) {    ## public key file ##
        my $encoded_public_key = <[file.slurp]>->($public_key_file)->$* // '';
        chomp $encoded_public_key;
        $decoded_pubkey = Crypt::Misc::decode_b32r($encoded_public_key);
    }
    if ( -r $private_key_file ) {    ##[  private key  ]##
        my $encoded_private_key = <[file.slurp]>->($private_key_file)->$*
            // '';
        chomp $encoded_private_key;
        $decoded_privkey = Crypt::Misc::decode_b32r($encoded_private_key);
        my $key_status = <[crypt.C25519.get_type_from_key_str]>->(
            $decoded_privkey, $decoded_pubkey
        );
        if ( $key_status->{'encrypted'} ) {    ## decrypt [ same password ] ##
            my $decrypted_C25519_sref
                = <[crypt.C25519.decrypt_priv_keystr]>->(
                $decoded_privkey, $key_password, $decoded_pubkey
                );
            $decoded_privkey = $decrypted_C25519_sref->$*;
        }
    }
    ##

    if ( not defined $key_password ) {    ## password input failed ##
        undef $keys{'C25519'}{$name}{'secret'};
        delete $keys{'C25519'}{$name}{'secret'};
        <[base.log]>->( 0, 'cannot decrypt [secret] key.,' );
        return FALSE;
    }

    my $decrypted_C25519_sref = <[crypt.C25519.decrypt_secret_key]>->(
        $keys{'C25519'}{$name}{'secret'},
        $key_password, $decoded_pubkey, $decoded_privkey, $test_key_chksum
    );
    if ( defined $decrypted_C25519_sref and $decrypted_C25519_sref eq FALSE )
    {
        undef $key_password;
        goto RE_READ_PWD if $pwd_retry_on_error;
    }
    if ( ref $decrypted_C25519_sref ne qw| SCALAR | ) {
        <[base.log]>->( 1, ':' );
        <[base.log]>->( 0, ': cannot load secret key ..,' );
        <[base.log]>->( 1, ':' );
        delete $keys{'C25519'}{$name}{'secret'};
        delete $keys{'C25519'}{$name} if not keys $keys{'C25519'}{$name}->%*;
        delete $keys{'C25519'}        if not keys $keys{'C25519'}->%*;
        return FALSE;
    }
    $keys{'C25519'}{$name}{'secret'} = $decrypted_C25519_sref->$*;
}

( $keys{'C25519'}{$name}{'public'}, $keys{'C25519'}{$name}{'private'} )
    = Crypt::Ed25519::generate_keypair( $keys{'C25519'}{$name}{'secret'} );

##  lock key in memory to not never swap it to disk  ##
IO::AIO::aio_mlock( $keys{'C25519'}{$name}{'private'}, 0, 64 );
IO::AIO::aio_mlock( $keys{'C25519'}{$name}{'secret'},  0, 32 );

if ( wantarray and $also_return_key_password ) {
    return ( TRUE, $key_password );    ## return password when requested ##
}

return TRUE;

#,,,,,.,.,...,,..,.,,,,,,,.,,,,,.,...,,..,,,.,..,,...,..,,,,.,,..,,,,,.,.,..,,
#4IOWC2LJHJPZVJDLRTYHMG7U64KSDW65TK7QRV7ZZIFNHPVSVQE45M5BOQP6H56B33SSKVEIAQRQC
#\\\|2JDGVMJ65LUSPISC5M6URNOGLPM5KJLATQUO3H4PIO5QEPXYJ5O \ / AMOS7 \ YOURUM ::
#\[7]6MKPA43VSS2PN6DESLXV4XEKUSUYZRYTJBQTP7XT6MVBB4ZJ3WDY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
