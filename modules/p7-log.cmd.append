## [:< ##

# name  = p7-log.cmd.append
# param = <log-data>
# descr = write a log line to the named log file
# todo  = buffered write [instead of line by line], cleanup log time handling

my $param_str = $call->{'args'};

my ($node_zenka, $instance_id, $buffer_name,
    $log_time,   $log_level,   $log_message
) = split( m| |, $param_str, 6 );

## preventing duplicate entries ## [ repaired meanwhile ]
<p7-log.checksums>                                     //= {};
my $node_checksums = <p7-log.checksums>->{$node_zenka} //= {};
$node_checksums->{$buffer_name}                        //= '';
my $entry_checksum = <[chk-sum.elf.vax-BASE32]>->($param_str);
if ( $node_checksums->{$buffer_name} eq $entry_checksum ) {
    return { 'mode' => qw| false |, 'data' => 'duplicate entry, dropped.' };
} else {
    $node_checksums->{$buffer_name} = $entry_checksum;
}
##

$log_level //= 0;

my $err_msg;
if ( not defined $log_message ) {
    ( my $line_str = $param_str ) =~ s|^$node_zenka $instance_id ||;
    $err_msg = sprintf( 'insufficent parameters [ %s ]', $line_str );
}
$err_msg = 'instance id not numerical'
    if not defined $err_msg and $instance_id !~ m|^\d+$|;
$err_msg = 'expected <buffer-name> parameter'
    if not defined $err_msg and not defined $buffer_name;
$err_msg = 'expected <log-time> parameter'
    if not defined $err_msg and not defined $log_time;
$err_msg = 'numerical <log-level> expected'
    if not defined $err_msg and $log_level !~ m|^\-?\d+$|;

if ( defined $err_msg ) {
    my $node_name = <system.node.name>;
    $node_zenka =~ s|^$node_name\.||;
    ## suppress err log data on demand ##
    <p7-log.disable_err_log_dump> //= FALSE;
    <[base.logs]>->(
        0, "\<%s> ['%s'] %s",
        $instance_id, $node_zenka, $err_msg
    );
    ## log offending line for devmod ###
    <[base.log]>->(
        1, " < usage >  [ <buffer> <time-stamp> <log-level> <mesg> ]"
    );
    <[base.logs]>->( "< request > [ '%s' ]", $param_str );

    if ( <system.verbosity.console> and not <p7-log.disable_err_log_dump> ) {
        <[base.parser.ellipse_center]>->( \$param_str, 74 );
        my $s = ' ' x 76;
        printf " /%s\\ \n > %74s < \n \\%s/ \n", $s, $param_str, $s;
        return { 'mode' => qw| false |, 'data' => $err_msg };
    }
}

# note : log_time is accepted in unix or nailara network time : ntime == default

my $default_mode = qw| ntime-b32 |;
<log.timestamp_mode> //= $default_mode;

my $log_file = join qw| . |, $node_zenka, $buffer_name;

##[  input  ]##
##
if ( <log.timestamp_mode> !~ m,^localtime|ntime-b32|ntime-num|unix, ) {
    <[base.logs]>->(
        0, "configured timestamp mode '%s' not valid",
        <log.timestamp_mode>
    );
    <[base.logs]>->(
        "setting timestamp mode '%s' [ fallback ]",
        $default_mode
    );
    <log.timestamp_mode> = $default_mode;
} elsif ( $log_time !~ m|^[A-Z0-9]+$|
    and $log_time !~ m|^(\d{1,17})(\.\d+)?| )
{    # invalid time value --> setting to current
    $log_time = <[base.ntime]>;    # [LLL] deliver warning _once_ ..,
} elsif ( defined ${^CAPTURE}[0] and length( ${^CAPTURE}[0] ) < 13 )
{    # unix time input value
    $log_time = <[base.ntime]>->($log_time);
}

## output ##
##
if ( <log.timestamp_mode> eq qw| ntime-b32 | ) {   # alphanumeric network time

    $log_time = <[base.ntime.b32]>->($log_time) if $log_time !~ m|[A-Z]|;

} elsif ( <log.timestamp_mode> eq qw| unix | ) {    # output in unix time

    $log_time = <[base.n2u_time]>->( $log_time, TRUE );

} elsif ( <log.timestamp_mode> eq qw| localtime | ) {
    my ( $unix, $secs_fp ) = split '\.',    # human readable time string
        <[base.n2u_time]>->( $log_time, TRUE );
    (   $log_time = join qw| . |,
        <[base.parser.timestamp]>->( qw| time-stamp |, $unix ),
        $secs_fp // 0
    ) =~ s{ }{|};
}

my $write_line = sprintf( "%s %07d %d %s\n",
    $log_time, $instance_id, $log_level, $log_message );

my $msg_len = length $write_line;
( my $success, $err_msg ) = <[p7-log.add_line]>->( $log_file, \$write_line );

# success
return { 'mode' => qw| true |, 'data' => sprintf 'wrote %u bytes', $msg_len }
    if $success;

# error case
<[base.log]>->( 0, $err_msg );
return { 'mode' => qw| false |, 'data' => $err_msg };

#,,.,,.,,,..,,,,,,,,,,...,.,.,,,,,,,,,,,.,.,,,..,,...,...,...,.,,,,.,,,,,,...,
#253O4C6P2U5AL34XLYP3JAJCOQH3JCEFVQ22N4X7VYULOL4GOAN36QYNOTHFDOBPJP7LKRKEUZMSU
#\\\|XU7ZFWUGTE6HBAL3RTRLN4CGIQSPFABHEFYX7XBFXTRQU4K5RQO \ / AMOS7 \ YOURUM ::
#\[7]NWQFJAAULPTNAVUHRCZFHDJQ7WGVO3GI2VTGETPNDRX7GAFBE6DI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
