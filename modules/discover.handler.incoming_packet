## [:< ##

# name = discover.handler.incoming_packet

my $event = shift;
my $fh    = $event->w->fd;

my $log_level = 2;

my $key_name = qw| default |;    ## <-- todo [LLL] ##

<discover.received_packet_count> //= 0;
<discover.buffer.input.mcast>    //= '';
my $packet_buffer_ref = \$data{'discover'}{'buffer'}{'input'}{'mcast'};

my $packet_buffer   = '';
my $read_size       = 64512;     ## 63K read size ##
my $max_buffer_size = 115713;    ## 113K max buffer size ##

if ( my $bytes = <[base.s_read]>->( $fh, $packet_buffer_ref, $read_size ) ) {
    $event->w->now if $bytes == $read_size;    ## more to read? ##
}

my $discover_packet_start_pos = index( $packet_buffer_ref->$*, qw| [:< |, 0 );

RE_CHECK_BUFFER:

if ( length $packet_buffer_ref->$* and $discover_packet_start_pos == -1 ) {
    ##  discarding entire buffer [ no packet start found ]  ##
    <[base.logs]>->(
        $log_level,
        'dropping not recognized buffer content [ %d B ]',
        length $packet_buffer_ref->$*
    );
    $packet_buffer_ref->$* = '';
    return undef;
} elsif ( $discover_packet_start_pos > 0 ) {    ##  cut out prefixing data  ##
    <[base.logs]>->(
        $log_level,
        'removing not recognized prefix data from buffer [ %d B ]',
        $discover_packet_start_pos
    );
    substr $packet_buffer_ref->$*, 0, $discover_packet_start_pos, '';
}

while (
    $packet_buffer_ref->$* =~ m{^\[:<\|[A-Z0-9_\-\.]{3,24}\|[A-Z2-7]{52}\n(?#
        )( {3}[A-Z0-9_\-\.]{1,32}:[A-Z2-7]{103}\n)*(?#  key signatures
        )( {6}[^\n]+\n)+(?#                        packet payload lines
        )[A-Z2-7]{11,15}:[A-Z2-7]{103}\n}    #  timestamp  :  packet signature
    ) {    ##  valid packet payload [complete]  ##
    my $valid_packet_len = length $MATCH;
    <[base.log]>->( 1, 'receiving discover packets.., =)' )
        if not <discover.received_packet_count>;  ## reporting first packet ##
    <[base.logs]>->(
        $log_level, 'processing received discover packet [%04dB]',
        $valid_packet_len
    );
    <discover.received_packet_count>++;
    <[discover.process_incoming_packet]>->(    ##[  removing from buffer  ]##
        substr( $packet_buffer_ref->$*, 0, $valid_packet_len, '' ), $log_level
    );
}

if ( length $packet_buffer_ref->$* ) {
    my $next_packet_startpos = index( $packet_buffer_ref->$*, qw| [:< |, 3 );
    if ( $next_packet_startpos != -1 ) {
        <[base.logs]>->(
            $log_level, 'packet format error, dropping [%dB]',
            $next_packet_startpos
        );
        substr $packet_buffer_ref->$*, 0, $next_packet_startpos, '';
        goto RE_CHECK_BUFFER if length $packet_buffer_ref->$*;
    }
}

#,,.,,.,,,.,.,.,.,.,,,,,.,.,,,,.,,..,,,,.,,,,,..,,...,...,...,,,,,..,,,,.,,,,,
#2YI2M772A4WTHSNLSCH65DBFYGSJ7VBQTWGBUPPK7STCBNXTP636JR64AICDFU2YQKNDHDLHO2DF4
#\\\|Q64C7DR3U3OBPPCMA5ZIIAX5SAKWCY3NUCNOC7VMV72AWAT73IS \ / AMOS7 \ YOURUM ::
#\[7]ZSFJFOYJRNNS4XABECVFILF7KEAUIMZUVF54ID6M5NUENDM3MUAI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
