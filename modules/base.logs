## [:< ##

# name = base.logs
# desc = 'base.log' sprintf wrapper

if ( @ARG < 2 ) {
    my $err_reason_str = 'expecting sprintf template and parameters';
    if (   not <[base.is_defined_recursive]>->(qw| system.zenka.initialized |)
        or not <system.zenka.initialized> ) {
        <[base.logs]>->(
            '%s %s <{NC}>', scalar <[base.caller]>,
            $err_reason_str
        );
        <[base.s_warn]>->( '%s <{C1}>', $err_reason_str );
    }
    return undef;
}

my $param_index = 0;
map {
    if ( not defined $ARG ) {
        my $call_lvl = 0;
        my $subname  = qw| base.logs |;
        if ( [ <[base.caller]>->(1) ]->[0] eq qw| base.s_warn | ) {
            $subname = qw| base.s_warn |;
            $call_lvl++;
        }
        my $warn_string = sprintf '%s parameter %d not defined %s',
            $subname,
            $param_index, scalar <[base.caller]>->($call_lvl);
        <[base.log]>->( 0, $warn_string );
        return undef;
    }
    $param_index++;
} @ARG;

my $log_level    ## log level 1 when parameter omitted ##
    = ( scalar @ARG > 1 and $ARG[0] =~ m|^\d$| )
    ? shift @ARG
    : 1;

my $log_str = eval {
    use warnings FATAL => qw| all |;    ##  catches all warnings  ##
    sprintf( shift @ARG, @ARG );
};

if ( length $EVAL_ERROR ) {    ##  report sprintf warnings  ##
    my $e_msg = <[base.format_error]>->( $EVAL_ERROR, -1 );
    $e_msg =~ s|sprintf|base.logs|;
    warn sprintf( '%s <{C1}>', $e_msg );
}

<[base.log]>->( $log_level, $log_str );

#,,,,,,.,,..,,,.,,.,,,.,,,,,.,,,.,..,,..,,,..,..,,...,...,.,.,.,,,...,.,,,,.,,
#L5EHQHLIOC4DN5YGANA4BEJGSTZ7UJMP74BTSVL2NUDBEUEXGJX5F3YKINWHC4WIWRVJ5NOOLRIU2
#\\\|DHNMURUQDJKXK24B7PTGYFCEJ2S4UOIW2KPEQVXILSXKCGHK7WJ \ / AMOS7 \ YOURUM ::
#\[7]CDKEXM6T2TMIDKN67Y22QLUYDKLJC2SOSNSR46JIMSX7KINWGMCI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
