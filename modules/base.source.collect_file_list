## [:< ##

# name  = base.source.collect_file_list
# param = array[s] or array reference[s] to source files

my @path_parameter = @ARG;    ##  optional  ##

my $exclude_files = { qw| bin/p7c | => TRUE }; ## <-- expand as required., ###

##  work path set-ups and fallbacks  ##
##
my $paths = <sourcecode.path> // <source.path>
    // { work_tree => <system.root_path> };

my $work_tree         = $paths->{'work_tree'};
my $work_path_abs     = abs_path($work_tree);
my $current_zenka_dir = <[base.getcwd]>;

## when sourcecode zenka ##
##
my $error_exit = FALSE;

my @all_files;
my $param_index  = 0;
my $copy_sources = [];

foreach my $path_param (@path_parameter) {
    if ( not length ref $path_param ) {
        push( $copy_sources->@*, split m| +|, $path_param );
    } elsif ( ref $path_param eq qw| ARRAY | ) {
        push( $copy_sources->@*, $path_param->@* );
    } else {
        <[base.s_warn]>->(
            'unexpected ref type [ %s ] encountered [ parameter %d ]',
            ref($param_index), $param_index
        );
    }
    $param_index++;
}

warn 'missing source path [ array or reference to array ] parameter <{C1}>'
    if not scalar $copy_sources->@*;

my @all_dirs = grep {length} grep {defined} map {

    my $rel_path = catfile( $current_zenka_dir, $ARG );  ## relative path ? ##
    $rel_path = File::Spec->canonpath($rel_path);

    my $absolute_path = -e $rel_path ? abs_path($rel_path) : $rel_path;
    $absolute_path //= abs_path( catfile( $work_path_abs, $ARG ) );

    if ( defined $absolute_path and -f $absolute_path ) {    ##  is a file  ##

        push( @all_files, $absolute_path );
        undef;

    } elsif ( defined $absolute_path and -d $absolute_path ) {    ## dir ##

        $absolute_path;    ## add to dirs ##

    } else {    ##  treat as pattern  ##

        if ( !<[file.match_dirs]>->( $work_path_abs, qw| recursive |, $ARG ) )
        {
            <[base.logs]>->( 0, ": no match for pattern %s ..,", $ARG );
            $error_exit = 2 if not $error_exit;
        }
    }
    }
    grep { !m|\*| } grep { !m|^\!| } $copy_sources->@*;

if ($error_exit) {
    <[base.exit]>->(2) if <system.zenka.name> eq qw| sourcecode |;
    warn 'path error <{C1}>';
    return undef;
}

push(    ## enabling [non-recursive] wildcard matches ##
    @all_dirs,
    map {
        ( my $base_path = $ARG ) =~ s|/*\*.*$||;
        ( my $pattern   = $ARG ) =~ s|^[^\*]*||;
        my $absolute_path = catfile( $work_tree, $base_path );
        $absolute_path = abs_path($absolute_path) if -e $absolute_path;
        <[file.match_dirs]>->( $absolute_path, $pattern );
        }
        grep { !m|\*/| }
        grep {m|\*|} $copy_sources->@*
);

push(    ## glob based wildcard matches ##  [ ,../*/ ]
    @all_dirs,
    map {
        ( my $base_path = $ARG ) =~ s|/*\*.*$||;
        ( my $pattern   = $ARG ) =~ s|^[^\*]*||;
        my $absolute_path = catfile( $work_tree, $base_path );
        $absolute_path = abs_path($absolute_path) if -e $absolute_path;
        $absolute_path;
        }
        grep {-d} map {glob}
        grep {m|\*.*/$|} $copy_sources->@*
);

push(    ## glob based wildcard matches ##  [ ,../*/* files ]
    @all_files,
    map {
        ( my $base_path = $ARG ) =~ s|/*\*.*$||;
        ( my $pattern   = $ARG ) =~ s|^[^\*]*||;
        my $absolute_path = catfile( $work_tree, $base_path );
        $absolute_path = abs_path($absolute_path) if -e $absolute_path;
        }
        grep {-f} map {glob}
        grep {m|\*/.*\*$|} $copy_sources->@*
);

map {
    my $source_path = $ARG;
    die "source path '$source_path' does not exist" if not -d $source_path;
    if ( <system.zenka.name> eq qw| sourcecode | and not -w $source_path ) {
        <[base.logs]>->(
            0, "<< missing write permissions for '%s' >>", $source_path
        );
        if ($error_exit) {
            <[base.exit]>->(4) if <system.zenka.name> eq qw| sourcecode |;
            warn 'path error <{C1}>';
            return undef;
        }
    }
} @all_dirs;

foreach my $absolute_path (@all_dirs) {
    <[file.all_files]>->( $absolute_path, \@all_files );
}

my @source_paths
    = grep { $ARG =~ s|^$work_tree/?||; not exists $exclude_files->{$ARG} }
    grep { !m{/\.|~$} } @all_files;

## exclusion patterns [ !..,* ] ##

foreach my $pattern_str ( grep {m|^\!|} $copy_sources->@* ) {
    $pattern_str =~ s|^\!||;
    @source_paths = grep { !m|\Q$pattern_str\E| } @source_paths;
}

@source_paths = uniq <[base.sort]>->(@source_paths);

if ( scalar $copy_sources->@* > @source_paths ) {
    my @report_paths;
NXT_PATH:
    foreach my $chk_path ( $copy_sources->@* ) {
        next if -e $chk_path;
        foreach my $src_path (@source_paths) {
            ##  improve : could have false positives  ##  [ LLL ]
            next NXT_PATH if rindex( $src_path, $chk_path ) != -1;
        }
        push @report_paths, $chk_path;
    }
    foreach my $err_path (@report_paths) {
        <[base.logs]>->( 0, ': no matches : %s', $err_path );
    }
    if ($error_exit) {
        <[base.exit]>->(qw| 0110 |)
            if <system.zenka.name> eq qw| sourcecode |;
        warn 'path error <{C1}>';
        return undef;
    }
}

return @source_paths;

#,,,,,.,.,...,,.,,,,.,...,.,.,...,...,,,,,,..,..,,...,...,.,,,,.,,.,,,,.,,,,,,
#JQ4OJRVDXKQORWCFRDZPLWQS6IVFAPCXPXJHNZEK7TN3TGOGK6TPPT4M6GXVEAC2YWAUF26I3BDJO
#\\\|JAGIZCEWZD46OERTIQH4ZRPIEGICI6JU7OBKBJQ5S7Z3T5QEL22 \ / AMOS7 \ YOURUM ::
#\[7]CKCIX7M3DUU5NNUKGBPKIGUG7NXNQEP4YPCPZBLVIAJ3LHHPKUDY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
