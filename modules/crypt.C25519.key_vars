## [:< ##

# name = crypt.C25519.key_vars

my $key_name = shift;

<crypt.C25519.key_vars_error> //= TRUE;

return <crypt.C25519.key_vars>
    if defined <crypt.C25519.key_vars>
    and (
    not defined $key_name
    or ( defined <crypt.C25519.base_key_name>
        and $key_name eq <crypt.C25519.base_key_name> )
    );

my $cur_usr = $ENV{'USER'} // getpwuid($EUID);
my $key_usr = <crypt.C25519.usr_name> // <system.amos-zenka-user> // $cur_usr;

$key_usr = $cur_usr if $cur_usr ne qw| root | and $cur_usr ne $ENV{'USER'};

( my $uid, my $gid ) = ( getpwnam($key_usr) )[ 2, 3 ];

if ( defined $key_name ) {   ##  setting base key [ when not defined yet ]  ##
    if ( not defined <crypt.C25519.base_key_name>
        and <[crypt.C25519.key_exists]>->($key_name) ) {
        <crypt.C25519.base_key_name> = $key_name;
    }
} else {
    $key_name //= <crypt.C25519.base_key_name>
        // join( qw| . |, $key_usr, qw| base | );
}

my $home_dir = <crypt.C25519.key_usr_home>
    //= <[base.get_homedir]>->($key_usr);

<[base.log]>->( 2, 'no home directory, C25519 initialization aborted .,' )
    and return { qw| usr_name | => $key_usr }
    if not defined $home_dir;

my $key_dir = <crypt.C25519.key_dir>
    //= sprintf( qw| %s/.n/user-keys |, $home_dir );

if ( not -r $key_dir ) {
    my $parent_dir = <[file.last_existing_dir_path]>->($key_dir);
    if ( $parent_dir ne $key_dir and not -r $key_dir ) {
        <[base.s_warn]>->(
            "no read permissions to parent path [ %s ] <{C1}>", $parent_dir
        );
        return undef;
    } elsif ( not -r $key_dir ) {
        <[base.s_warn]>->(
            "no read permission to key dir ['%s'] <{C1}>", $key_dir
        );
        return undef;
    } elsif ( not -d $key_dir ) {
        <[base.s_warn]>->(
            "user key dir does not exist ['%s'] <{C1}>", $key_dir
        );
        return undef;
    }
}

my $key_file_ext;
my $key_filename;
my $key_basepath = catfile( $key_dir, $key_name );

foreach my $type (qw|  secret  private  public  virtual  |) {

    if ( $type eq qw| virtual | ) {

        $key_filename->{$type} = sprintf qw| %s:seed-phrase |, $key_basepath;

    } else {
        $key_file_ext->{$type} = $type;
        $key_filename->{$type} = sprintf( qw| %s.%s |, $key_basepath, $type );
    }
}

my $key_vars_ref = {
    'uid'          => $uid,
    'gid'          => $gid,
    'usr_name'     => $key_usr,
    'usr_home'     => $home_dir,
    'key_dir'      => $key_dir,
    'key_name'     => $key_name,
    'key_basepath' => $key_basepath,
    'key_file_ext' => $key_file_ext,
    'key_filename' => $key_filename
};

<crypt.C25519.key_vars> = $key_vars_ref  ## updating key_vars when base key ##
    if defined <crypt.C25519.base_key_name>
    and <crypt.C25519.base_key_name> eq $key_name;

<crypt.C25519.key_vars_error> = FALSE;

return $key_vars_ref;

#,,..,.,,,..,,,,.,.,,,..,,,,,,.,.,...,,.,,...,..,,...,...,..,,..,,..,,...,,,,,
#EOJUYXBUCOQE5VBA4TMZGEJSUNPIHPTKQNMEV2FATLWYZSGA4BEG4FNJ6HTSZW6UL2S3FKIVHR2D6
#\\\|Z5Q7XNSLNU3657NDZCW3WKXQGQC7ISNFR7BC2GTJKHBVIGB3IIG \ / AMOS7 \ YOURUM ::
#\[7]UN2V6B4M7QMFOCOR2HNKYW2NQZHPBQB6CGJFUNI3MIM6K6UCE2CI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
