# >:]

# name  = power.cmd.on
# descr = switch on a single socket [1..4]
# param = <id> <s-num>

<power.cfg.devices> //= {};
my ( $device_id, $sock_num ) = split( / +/, $$call{'args'} );

return { 'mode' => 'nack', 'data' => 'numerical device id expected' }
    if !length($device_id)
    or $device_id !~ /\d+/;

return {
    'mode' => 'nack',
    'data' => "device '$device_id' does not exist"
    }
    if not exists <power.cfg.devices>->{$device_id};

return { 'mode' => 'nack', 'data' => 'power socket number expected [1..4]' }
    if not defined $sock_num or $sock_num !~ /^[1234]$/;

my $dev = <[power.dev_obj]>->($device_id);

my @set_states = ( SOCK_SKIP, SOCK_SKIP, SOCK_SKIP, SOCK_SKIP );

my $index = $sock_num - 1;
$set_states[$index] = SOCK_ON;

$dev->_set_ctrl(@set_states);

my $new_state = 'E';

if (   $dev->{'stat'}->[$index] == 17
    or $dev->{'stat'}->[$index] == 18
    or $dev->{'stat'}->[$index] == 65 ) {
    $new_state = '1';
} elsif ( $dev->{'stat'}->[$index] == 33
    or $dev->{'stat'}->[$index] == 34
    or $dev->{'stat'}->[$index] == 130 ) {
    $new_state = '0';
}

if ( $dev->{poller}->can_write(0.1) ) {
    $dev->{sock}->send( chr(0x11) );
    $dev->{sock}->close();
}

if ( $new_state ne '1' ) {
    my $err_msg = 'failed to retrieve new socket state';
    $err_msg = 'failed to set socket state to \'ON\'' if $new_state eq '0';
    return { 'mode' => 'NACK', 'data' => $err_msg };
}

return { 'mode' => 'ACK', 'data' => "socket $sock_num switched ON" }
