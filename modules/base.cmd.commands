## [:< ##

# name  = base.cmd.commands
# param = [keyword]
# descr = print available commands + descriptions

my $id      = $call->{'session_id'};
my $user    = $data{'session'}{$id}{'user'};
my $keyword = $call->{'args'};

my @commands;
my @devmod_commands;

my $zenka_name = <system.zenka.name>;

<base.commands.is_devmod> //= {};
map { $ARG =~ s|^devmod\.cmd\.||; <base.commands.is_devmod>->{$ARG} //= 1 }
    grep {m|^devmod.*\.cmd\.|} keys %code;

my $max_len = 0;

## getting list of commands the user [ who sent the request ] has access to
foreach my $cmd ( <[base.reverse-sort]>->(<base.cmd>) ) {

    next if not <[base.has_access]>->( $user, $cmd );

    ##   # command description mode
    ##   return { 'mode' => qw| false |, 'data' => 'not implemented yet... :/' }
    ##       if defined $keyword and exists <base.cmd>->{$keyword};

    # keyword search mode
    next
        if defined $keyword
        and $cmd !~ m|\Q$keyword\E|i
        and <base.commands.cmd>->{$cmd}->{'descr'} !~ m|\Q$keyword\E|i;

    $max_len = length($cmd) if length $cmd > $max_len;
    my $is_devmod_command = <base.commands.is_devmod>->{$cmd} //= 0;
    if   ($is_devmod_command) { push @devmod_commands, $cmd }
    else                      { push @commands,        $cmd }
}

return {
    'mode' => qw| false |,
    'data' => sprintf( "no commands matching '%s' available", $keyword )
    }
    if defined $keyword
    and @commands == 0
    and @devmod_commands == 0;

##[ format and return the command list ]##

$reply->{'data'} = @commands == 0 ? '' : sprintf( "\n%78s\n\n",
    sprintf( '%-43s', sprintf( ".: '%s' zenka commands :.", $zenka_name ) ) );

( my $h_str, my $h_len )
    = <[base.parser.command_list]>->( \@commands, qw| cmd |, );
$reply->{'data'} .= $$h_str;

if (@devmod_commands) {
    $reply->{'data'} .= sprintf(
        "\n %77s\n\n",
        sprintf( '%-43s',
            sprintf( ".: devmod commands in '%s' :.", $zenka_name ) )
    );
    ( $h_str, undef ) = (
        <[base.parser.command_list]>->(
            \@devmod_commands, 'cmd', $h_len - 2
        )
    );
    $reply->{'data'} .= $$h_str;
}

$reply->{'data'} .= "\n";
$reply->{'mode'} = qw| size |;

#,,,,,.,.,,.,,...,.,.,,,,,.,.,.,.,,.,,,..,.,,,..,,...,...,..,,.,,,,.,,,,,,,,,,
#BXGHC73TLBUBCE6AMT4V6H7Q47EBWKDKDXMAYGTS2UN4OGIINWJ4US2NLMLF3IZUK2PULS3MA6D2W
#\\\|JN5FKT5QXZXGF6OXCP6MTPKFCCFXHKVBXTE56LMF7RKE2SBYDTS \ / AMOS7 \ YOURUM ::
#\[7]Y6CU6YFJOXGEABZWTYIJQMHZTIHNANM2MBAO6DU5HDOI6AN5COBA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
