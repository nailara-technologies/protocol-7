## >:] ##

# name  = base.erase_buffer_content
# descr = secure erasure of buffer content, returns number of bytes erased

my $buffer_sref   = shift;    ##  reference to buffer \ scalar to erase  ##
my $padding_bytes = shift;    ##  add additional bytes to length  ##

$padding_bytes //= int( rand(13) ) + 7;    ##  <-- rnd padding  ##

return warn 'expected scalar reference <{C1}>' ## SCALAR reference expected ##
    if ref $buffer_sref ne qw| SCALAR |;

return 0 if not defined $buffer_sref->$*;      ##  buffer was undefined  ##

my $r_cnt    ##  correct length for UTF-8 content  ##
    = utf8::is_utf8($$buffer_sref)
    ? length( Encode::encode( qw| UTF-8 |, $$buffer_sref ) )
    : length( $buffer_sref->$* // '' );

$r_cnt += $padding_bytes;    ##  for masking length when erasing passwords  ##

return 0 if $r_cnt == 0;     ##  return early \ already empty  ##

##  overwrite with entropy to erase \ protect content  ##
substr( $buffer_sref->$*, 0, $r_cnt, <[base.prng.characters]>->($r_cnt) );

$buffer_sref->$* = '';       ## truncate to zulum length ##

return $r_cnt;               ##  return length of overwritten content  ##

#,,,,,..,,.,.,,,.,,,.,,..,...,,..,,,.,,.,,..,,..,,...,...,.,.,..,,,,,,,..,...,
#PFMSFACRVSOL2ZQLQISEDZQ2EMTGYHDUOH6BILNA6FYPWBUUFAV6GPFH5PIVOR3FYPHC5554MHD2M
#\\\|HTKTGRTPRKVTDVOH52VAUFWKK55QTN7BG5GZ7GNPYTYDGJZSV4X \ / AMOS7 \ YOURUM ::
#\[7]432QUGGDVTWCT3MTJG2AP7PRRCDHJNQ2R5J73I2F6KSKYY75SIBQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
