## >:] ##

# name  = base.event.handler.exceptions

my $event   = shift;
my $err_str = shift;

my $log_warning = 1;    ##  disable to not log the error  ##

## want last subroutine stack for correct caller string here ##  [LLL]

my $watcher = $event->w;

return if $err_str eq qw| ? |;    ##  <--  WEIIIRD and redundant ..,

my $ev_desc = 'not named';
$ev_desc = $watcher->desc if $event and $watcher;

my $file;
my $line;
( $file, $line ) = ( ${^CAPTURE}[0] // '', ${^CAPTURE}[1] // '' )
    if $err_str =~ m| at (\S+) line (\d+).*\n$|;

$err_str = <[base.format_error]>->($err_str)
    if defined $code{'base.format_error'};

## alternative handlers registered for filename:line ? ##
my $match_param = "$file:$line";    # <-- expand .., [LLL]
if ( defined $data{'base'}{'warn-match-handler'}{$match_param} ) {
    my $cb_name
        = $data{'base'}{'warn-match-handler'}{$match_param};
    $log_warning = $code{$cb_name}->( $err_str, $match_param, caller )
        if defined $code{$cb_name};
}
##

##  delayed log prevents segmentation faults from base.log recursion  ##
##
if ($log_warning) {
    my $caller_str = sprintf '[%s:%d]', $file, $line;
    $err_str .= sprintf( ' %s', $caller_str )
        if index( $err_str, $caller_str, 0 ) == -1;
    $err_str    ##  avoiding redundancy with caller description  ##
        .= $file ne $ev_desc ? sprintf( ' [EV:%s]', $ev_desc ) : ' [EVENT]';
    <[base.log-delayed]>->( 0, $err_str );
}

return
       if not $watcher
    or !$log_warning
    or <system.verbosity.console> < 2 and <system.verbosity.zenka_buffer> < 2;

## detailed event parameters [ debug log levels ]
##
my @attr_names = <[base.sort]>->( $watcher->attributes );
my $lvl        = 2;
my $mlen       = 0;
map { $mlen = length($ARG) if length($ARG) > $mlen } @attr_names;

<[base.log-delayed]>->( $lvl, ".:[ event ]:." );

foreach my $akey (@attr_names) {
    my $val = $watcher->$akey // '<undef>';
    next if $akey eq qw| debug | and !length($val);
    <[base.log-delayed]>
        ->( $lvl, sprintf( ": %${mlen}s : %s", $akey, $val ) );
}

say STDERR <[base.format_error]>->( $EVAL_ERROR, 1 ) if length $EVAL_ERROR;

#,,,.,,..,.,.,,.,,.,,,,,,,.,,,,,,,.,.,..,,.,.,..,,...,...,...,...,,..,,..,,,.,
#MKPVQHFISJ5FMYOXFPJ2H4Q62W33LFH4SKVY4BRZH2DBLSATOSMN6LLODD2KEGIHMACRCEG6XUPQU
#\\\|6BL3XEHLG55Q7HEBVMGHANYQEVGYD7RA6CKOJFOKLEFXJFUWR6L \ / AMOS7 \ YOURUM ::
#\[7]A75RFYJ2UT4NQQYND6VY3AVV6RW3AITDAJVBJAW2KK7MUXZP72DY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
