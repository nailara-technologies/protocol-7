# >:]

# name = pdf.html.base.download_file
# todo = use .last_modified to skip redundant downloads

my $file_url  = shift;
my $cache_dir = <pdf.html.cache_dir>;

die "expected URL parameter"  if not defined $file_url;
die "invalid URL '$file_url'" if $file_url !~ m|^https?://.+|;
die "cache directory '$cache_dir' does not exist" if !-d $cache_dir;

my $ua = LWPx::ParanoidAgent->new;
$ua->whitelisted_hosts( sub { return 1 } );
$ua->timeout(10);    # XXX: make configurable!

my $url_hash = <[digest.sha1]>->($file_url);

my $target_dir = "$cache_dir/$url_hash";

if ( -d $target_dir and !-f $target_dir . '/.complete' ) {
    my $errors;
    <[base.log]>->(
        1,
        "incomplete download found, " . "removing download dir '$url_hash'.."
    );
    remove_tree( $target_dir, { error => \$errors } );
    for my $err (@$errors) {
        my ( $file, $message ) = %$err;
        if ( $file eq '' ) {
            <[base.log]>->( 0, "remove_tree($target_dir): $message" );
        } else {
            <[base.log]>->( 0, "remove_tree: $message [$file]" );
        }
    }
    die "failed to remove '$target_dir'" if @$errors;
}

if ( !-d $target_dir ) {
    <[base.log]>->( 2, "creating html dir '$url_hash'.." );
    make_path($target_dir) or die "make_path($target_dir): $!";
}

my $head_res       = $ua->head($file_url);
my $content_type   = $head_res->{'_headers'}->{'content-type'};
my $content_length = $head_res->{'_headers'}->{'content-length'}; # XXX: use ...
if ( $content_type =~ m|/pdf$| ) {
    <[base.log]>->( 2, "found pdf file ($content_length bytes)" );
} else {
    die "didn't receive expected (pdf) content type for $file_url";
}

( my $target_path = "$target_dir/pdf.download" ) =~ s|//|/|g;

my $response = $ua->get( $file_url, ':content_file' => $target_path );

my $status_code    = $response->{'_rc'};
my $status_message = $response->{'_msg'};
my $last_modified  = $response->{'_headers'}->{'last-modified'};

if ( $status_code ne '200' ) {
    <[base.log]>->(
        0, "failed to download '$file_url' [$status_code $status_message]"
    );

    # XXX: cleanup
    return undef;
} else {
    <[file.put]>->( "$target_dir/.last_modified", "$last_modified\n" )
        if defined $last_modified;
    <[file.write_timestamp]>->("$target_dir/.last_used");
    my $touch_file = "$target_dir/.complete";
    open( my $touch_fh, ">$touch_file" ) or die "$touch_file: $!";
    close($touch_fh);

    return $target_path;
}
