## [:< ##

# name  = base.init_modules
# descr = executes 'pre_init', 'init_code' and 'post_init' routines
# todo  = track moved namespaces for agument list as well

my @module_names = map { split m| +| } @ARG;

my %skip_list;
my $success = 5;    ## true ##
delete <base.modules.moved_to>;
<base.init_modules.sub_list> = [];
foreach my $init_mode (qw|  pre_init  init_code  post_init  |) {
    if (@module_names) {
        @{<base.init_modules.sub_list>} = ();
        foreach my $name_pattern (@module_names) {
            push(
                @{<base.init_modules.sub_list>},
                grep {m|^\Q$name_pattern\E(\..+)?$|} <[base.sort]>->( \%code )
            );
        }
    } else {
        my @sorted_subroutines = <[base.sort]>->( \%code );
        @{<base.init_modules.sub_list>}    ## <-- 'base' routines first ..,
            = grep {m|^base\.|} @sorted_subroutines;
        push(
            @{<base.init_modules.sub_list>},    ## <-- then other subroutines.
            grep { !m|^base\.| } @sorted_subroutines
        );
    }
    foreach my $sub_name ( <base.init_modules.sub_list>->@* ) {
        next if not defined $sub_name or exists $skip_list{$sub_name};
        if ( $sub_name =~ m|^(.+)\.$init_mode$| ) {
            my $module_name = $LAST_PAREN_MATCH;
            my $real_m_name = $module_name;
            $real_m_name = <base.modules.internal_name>->{$module_name}
                if exists <base.modules.internal_name>
                and exists <base.modules.internal_name>->{$module_name};
            ( my $init_txt = $init_mode ) =~ s|_|-|g;
            $init_txt =~ s|-code||;
            my $level      = $module_name ne qw| base | ? 2 : 1;
            my $zenka_type = <system.zenka.type> // '';
            $level = 1
                if $module_name eq $zenka_type
                or $module_name eq <system.zenka.name>;

            <[base.logs]>->(
                $level,       "running '%s' %s code.,",
                $module_name, $init_txt
            );
            my $reinit = 0;

            if (not defined
                <base.modules.initialized>->{$real_m_name}->{$init_mode} ) {
                <base.modules.initialized>->{$real_m_name}->{$init_mode} = 0;
            } else {
                $reinit = 1;
            }
            if ( defined $code{$sub_name} ) {
                my $moved_already = 0;
                $moved_already = 1
                    if defined <base.modules.moved_to>
                    and defined <base.modules.moved_to>->{$module_name};

                # [LLL] include module version[s] in argument list ?
                my $return_code
                    = eval { $code{$sub_name}->( $reinit, $real_m_name ) };

                if (length $EVAL_ERROR    ## transitioning to 5 for success ##
                    or not defined $return_code
                    or $return_code ne qw| 5 | and $return_code ne qw| 0 |
                ) {
                    my $err_msg = <[base.format_error]>->($EVAL_ERROR);
                    <[base.logs]>->( 0, ": '%s", $err_msg )
                        if length $err_msg;
                    $success = 0;
                    <[base.logs]>->(
                        0,
                        ": module '%s'-init not successful [ %s != [0|5] ]",
                        $module_name, $init_mode
                    );
                } else {
                    <base.modules.initialized>
                        ->{$real_m_name}->{$init_mode}++;
                    if (    !$moved_already
                        and exists <base.modules.moved_to>
                        and exists <base.modules.moved_to>->{$module_name} ) {
                        my $new_module
                            = <base.modules.moved_to>->{$module_name};
                        ( my $new_sub_name = $sub_name )
                            =~ s|^$module_name|$new_module|;
                        $skip_list{$new_sub_name} = 1;
                    }
                }
            } else {
                $success = 0;
                <[base.logs]>->(
                    0,
                    ": module '%s' init not successful"
                        . " [ %s undefined or broken ]",
                    $module_name,
                    $sub_name
                );
            }
        }
    }
}
undef <base.init_modules>;
return $success;

#,,,,,.,,,..,,,,,,,,,,,..,,..,,..,,..,,,,,...,..,,...,...,,.,,,.,,,,.,...,,.,,
#4WOFKICH3XJ77PABD6NC2MDIMVRAAV65RQLDRATZNVLYUX3QMJZWAB7EYKO6VLC227TZKQDLRSYPC
#\\\|LDOATWYFNPW4B5OVGTGTOJJ244RG5ASEX3TCXJJNHSN5AJNFX7R \ / AMOS7 \ YOURUM ::
#\[7]SSCENVR77VXXKV56IPZBZFNWIZV7O5FKXZ2D4AGKIU2FMOGQZ4AA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
