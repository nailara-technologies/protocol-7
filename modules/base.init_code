## [:< ##

# name  = base.init_code
# descr = initializing base module

<zenka.init_return> //= 0;    ## init-done status code ##

<[base.perlmod.autoload]>->('Safe');
<[base.perlmod.autoload]>->('Event');
<[base.perlmod.autoload]>->('IO::AIO');
<[base.perlmod.load]>->('Math::BigInt');
<[base.perlmod.autoload]>->('Time::Seconds');

<[base.perlmod.load]>->( 'Clone',         qw| clone | );
<[base.perlmod.load]>->( 'Hash::Flatten', qw| flatten unflatten | );

<[base.perlmod.load]>->( 'Time::Local',   qw| timegm_nocheck | );
<[base.perlmod.load]>->( 'BSD::Resource', qw | getrlimit setrlimit | );

use Const::Fast;    ##  does not work with Module::Load::[auto]load  ##
<[base.perlmod.register_loaded_module]>->('Const::Fast');

<[base.perlmod.load]>->(
    'POSIX', qw| strftime uname getcwd setsid sys_wait_h WNOHANG |
);

##[ AMOS MODULE ]#############################################################

<[base.perlmod.autoload]>->('AMOS7::Assert::Truth');   ##  exports is_true  ##

##############################################################################

<[base.perlmod.load]>->(
    'Scalar::Util', qw <
        blessed dualvar isdual readonly refaddr reftype tainted
        weaken isweak isvstring looks_like_number set_prototype
    >
);

## installing cryptographically safe fork version ##
##
no warnings qw| once redefine |;
map { eval "no warnings $ARG" } qw| once redefine |;
*CORE::GLOBAL::fork = sub { return $code{'base.fork'}->(@ARG) };
use warnings qw| once redefine |;
##

## init some variables ##
##
<zenka.shutdown> //= FALSE;

$data{'devmod'} //= {};
## reducing devmod [ verbosity >= 2 ] log output ###
##
<devmod.sig_int_dump> = FALSE; ## dump %data state on SIGINT in log level 2 ##

*main::dump_var = $code{'base.devmod.dump_var'};

## skipping p7-log.append commands in log level 2 devmod output ##
<devmod.skip_log_msg> = TRUE;

## skipping p7-zenka heartbeat [zenka-status] requests and responses ##
<devmod.skip_p7_heartbeat> = TRUE;
##
$data{'system'}{'process_start'} = {
    'time'  => <[base.time]>->(5),
    'pname' => $PROGRAM_NAME,
    'euid'  => $EUID,
    'egid'  => $EGID,
    'pid'   => $PID,
    'uid'   => $UID,
    'gid'   => $GID,
    }
    if not exists $data{'system'}{'process_start'};

# maximizing open files limit
my ( $of_cur, $of_max ) = getrlimit( BSD::Resource::RLIMIT_NOFILE() );
if ( $of_cur != $of_max ) {
    <[base.logs]>->(
        2,       ': open files limit increased [%u-->%u]',
        $of_cur, $of_max
    );
    setrlimit( BSD::Resource::RLIMIT_NOFILE(), $of_max, $of_max )
        or <[base.s_warn]>->(
        'setrlimit <%u> failed [ %s ]',
        $of_max, <[base.str.os_err]>
        );
}
$data{'system'}{'limits'}{'ofile'}
    = [ getrlimit( BSD::Resource::RLIMIT_NOFILE() ) ]->[1];

$data{'system'}{'host'} = {
    qw|    os    | => { qw| name | => $OSNAME },
    qw| hostname | => hostname,
    qw| timezone | => <[base.timezone]>
};

# LLL: + uname -r, uname -m [?]

# flush / init regex cache
$data{'regex'} = { qw| base | => <[base.regex]> };

# init / reset lists
$data{'list'} //= {};

<list.users> = {
    'var'     => qw| data |,
    'key'     => qw| user |,
    'sub_key' => qw| session |,
    'mask'    => '<key>:user connected_since session:sessions',
    'align'   => { 'session' => 'center' },
    'filters' => {
        'session'         => qw| base.parser.element_count |,
        'connected_since' => qw| base.parser.timestamp |
    },
    'descr' => 'connected users'
};
<list.sessions> = {
    'var'      => qw| data |,
    'key'      => qw| session |,
    'sort_key' => 'num:start_time',
    'mask'     => '<key>:usid protocol link:type mode '
        . 'user:uname start_time:since',
    'align' => {
        'user'       => 'center-2',
        'protocol'   => 'center-1',
        'link'       => 'center-2',
        'mode'       => 'center-2',
        'start_time' => 'right'
    },
    'filters' => {
        'start_time'       => qw| base.parser.duration |,
        'start_time_param' => 2    ## time float precision ##
    },
    'descr' => 'registered / connected sessions'
};
<list.buffers> = {
    'var'   => qw|  data  |,
    'key'   => qw| buffer |,
    'mask'  => '<key>:name data:lines size:bytes max_size:of_bytes',
    'align' => {
        'data'     => qw| right-5 |,
        'size'     => qw| right-5 |,
        'max_size' => qw| right-3 |
    },
    'filters' => {
        'data'     => qw| base.parser.element_count |,
        'max_size' => qw| base.parser.size_str |
    },
    'descr' => 'available log \ data buffers'
};

# 'verify-instance' command not required in local 'cube' zenka
if (    defined <system.zenka.type>
    and <system.zenka.type> eq qw| cube |
    and <system.zenka.name> eq qw| cube | ) {
    <[base.disable_command]>->('verify-instance');
    <zenki.virtual> //= {};
    my $key_ref = \$data{'zenki'}->{'virtual'};
    <base.element>->{$key_ref}->{'max_count'} //= 4097;    # LLL: --> config.,
    <list.virtual> = {
        'var'   => qw| data |,
        'key'   => qw| zenki.virtual |,
        'mask'  => '<key>:id name type status session',
        'align' => {
            'name'    => 'left',
            'type'    => 'center-2',
            'status'  => 'center-2',
            'session' => 'center-1'
        },
        'filters' => {
            'status'  => qw| base.parser.ondemand_status |,
            'session' => qw| base.parser.ondemand_session |
        },
        'descr' => 'virtual zenka list'
    };

    <base.commands.cmd.src-age.descr> =~ s|installed ||;

} else {    # remove some commands for non-cube type zenki
    map { <[base.disable_command]>->($ARG) } ( qw[
            time exit ntime clear bmw-L13 term-all
            last-sid epoch_v7 timestamp ntime-dec
            localtime epoch-num session-key amos-chksum
            when-present set-client-key ondemand-zenka
            get-public-key get-session-sig
            get-session-key clear-zenka-key
        ]
    );

    <base.commands.cmd.src-age.param> = "['date'] "; #<-- disable second param

    if ( <system.zenka.name> ne qw| universal| ) {

        <[base.hide_list]>->(qw| sessions |);
        <[base.disable_command]>->(qw| whoami |);

        # LLL: needs 'has_clients' flag
        <[base.disable_command]>->(qw| present |)
            if <system.zenka.name> ne qw| weather |;
    }

    <[base.hide_list]>->(qw| users |);
}

##  registering signal handlers [ incl. ignored ]  ##
##
<[base.init_zenka.install_signal_handlers]>;

## initializing session list ###
##
if ( ref( $data{'session'} ) ne qw| HASH | ) { $data{'session'} = {} }
##
<[base.list.init]>->(
    {   qw| name |     => qw| sessions |,
        'key_ref'      => \$data{'session'},
        'max_elements' => <limits.client_sessions>
    }
);

## updating cache time based to change timestamp ##
##
<[base.logs]>->(
    2,
    ': setting prefix cache update interval to %d s..,',
    <base.cfg.interval.prefix_cache_init> //= 422   ## 7 minutes, 2 seconds ##
);
<base.timer.prefix_cache> //= <[event.add_timer]>->(
    {   'after'    => <base.cfg.interval.prefix_cache_init>,
        'interval' => <base.cfg.interval.prefix_cache_init>,
        'repeat'   => TRUE,
        'handler'  => qw| base.cache.refaddr-prefix.init |
    }
);
##

##                          ##
##  command access control  ##
##                          ##

<[base.parser.access_conf]>;

## command aliases with source zenka name prefixes ###
if ( defined <setup.aliases> ) {
    if ( defined <setup.aliases.source_zenka> ) {
        foreach
            my $alias_cmd ( split( m|\s+|, <setup.aliases.source_zenka> ) ) {
            $data{'alias'}{$alias_cmd}
                = sprintf( '%s SOURCE_ZENKA', $alias_cmd );
        }
    }
    map { $data{'alias'}{$ARG} = sprintf '%s SOURCE_ZENKA SOURCE_SID', $ARG }
        split( m|\s+|, <setup.aliases.source_zenka_sid> )
        if defined <setup.aliases.source_zenka_sid>;
}

## called after receiving cube session id ##
<base.callback_hooks.async_online> //= [];

## setting up command [argument] filter hooks ##
<base.filter_hooks.command.heart.send> = qw| base.handler.heart |;
<base.filter_hooks.command.heart.recv> = qw| base.handler.heart_ack_reply |;
## \ implement permission filter hooks [ LLL ]

return 0;

#,,,,,..,,,.,,,,.,..,,,..,,,,,,,,,,,.,,,,,..,,..,,...,...,.,.,,.,,,..,.,.,,..,
#77BXDETPBUCBA5763NPJFRWZYVZBW2AYUVUEM3TFIJTSCIOIBLTLFWYORQUA62XAP4WMXPJST4HJY
#\\\|XZVW7IPN4X46MUZZV26EMWDE77IELCLGP3NLZFCKO67U535UDS3 \ / AMOS7 \ YOURUM ::
#\[7]ERBV73UVJ26H3IUWICHG25PCFXMNGWEPZKSLMREQ5ZB65ECAN6BI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
