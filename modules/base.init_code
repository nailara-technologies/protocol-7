# >:]

# name       = base.init_code
# descr      = initialize the base module

use POSIX;

# init some vars

$data{'system'}{'process_start'} = {
    'time'  => <[base.time]>->(5),
    'pid'   => $$,
    'pname' => $0,
    'uid'   => $<,
    'euid'  => $>,
    'gid'   => $(,
    'egid'  => $)
    }
    if not exists $data{'system'}{'process_start'};

$data{'system'}{'host'} = {
    'os'       => { 'name' => $^O },
    'hostname' => hostname,
    'timezone' => <[base.timezone]>
};

# XXX: todo: + uname -r, uname -m (?)

# flush / init regex cache
$data{'regex'} = { 'base' => <[base.regex]> };

# init / reset lists
$data{'list'} = {
    'users' => {
        'var'     => 'data',
        'key'     => 'user',
        'sub_key' => 'session',
        'mask'    => '<key>:user connected_since session:sessions',
        'align'   => { 'session' => 'center' },
        'filters' => {
            'session'         => 'base.parser.element_count',
            'connected_since' => 'base.parser.timestamp'
        },
        'descr' => 'connected users'
    },
    'sessions' => {
        'var'   => 'data',
        'key'   => 'session',
        'mask'  => '<key>:id proto mode user start_time:since',
        'align' => { 'user' => 'center-2', 'start_time' => 'right' },
        'filters' => { 'start_time' => 'base.parser.duration' },
        'descr'   => 'registered sessions'
    },
    'buffers' => {
        'var'   => 'data',
        'key'   => 'buffer',
        'mask'  => '<key>:name data:lines size:stored_bytes max_size',
        'align' => {
            'data'     => 'center-1',
            'size'     => 'center-1',
            'max_size' => 'center'
        },
        'filters' => {
            'data'     => 'base.parser.element_count',
            'max_size' => 'base.parser.size_str'
        },
        'descr' => 'available buffers'
    }
};

# 'verify_instance' command not required in core type agents (for now)
if ( exists <system.agent.type> and <system.agent.type> eq 'core' ) {
    <[base.disable_command]>->('verify_instance');
} else {    # remove some commands for non-core type agents
    map { <[base.disable_command]>->($_) } (
        'online', 'session_key', 'whoami', 'slay',
        'exit',   'clear',       'time',   'timezone'
    );
}

# initialize signal handlers
undef %SIG;

<[event.add_signal]>->( { 'signal' => 'INT',  'handler' => 'base.sig_int' } );
<[event.add_signal]>->( { 'signal' => 'TERM', 'handler' => 'base.sig_term' } );
<[event.add_signal]>->( { 'signal' => 'HUP',  'handler' => 'base.sig_hup' } );
<[event.add_signal]>->( { 'signal' => 'USR1', 'handler' => 'base.sig_usr1' } );
<[event.add_signal]>->( { 'signal' => 'USR2', 'handler' => 'base.sig_usr2' } );
<[event.add_signal]>->( { 'signal' => 'ABRT', 'handler' => 'base.sig_abrt' } );

#<[event.add_signal]>->( { 'signal' => 'CHLD', 'handler' => 'base.sig_chld' } );

$SIG{__WARN__} = $SIG{__WARN__} = $code{'base.sig_warn'};

# initialize session list

if ( ref( $data{'session'} ) ne 'HASH' ) { $data{'session'} = {} }

<[base.list.init]>->(
    {   'name'         => 'sessions',
        'key_ref'      => \$data{'session'},
        'max_elements' => $data{'limit'}{'max'}{'sessions'}
    }
);

<[base.parser.access_conf]>;

# command aliases with source agent name prefixes
if (    exists $data{'setup'}
    and exists <setup.aliases>
    and defined <setup.aliases.source_agent> ) {
    my @alias_command_list = split /\s+/, <setup.aliases.source_agent>;
    foreach my $alias_cmd (@alias_command_list) {
        $data{'alias'}{$alias_cmd} = "$alias_cmd SOURCE_AGENT";
    }
}

return 0;
