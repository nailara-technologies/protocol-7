# >:]

# name  = root.init_code
# descr = initializes root module

use Proc::ProcessTable;

<system.agent.type> = 'root';

<root.timeout.kill_list> //= 2;

<root.agent.notify_online> //= {};

<root.cfg_data.spawn_config> //= [];

map { <[base.disable_command]>->($_) } qw(
    verify_instance
    switch_user
    get_subname
);

<[root.load_spawn_config]>->(<load.spawn_config>)
    if defined <load.spawn_config>;

<[config.json.import_file]>->('root.spawn_config.json');

map { <[root.init_spawn_config]>->($_) }
    @{ clone(<root.cfg_data.spawn_config>) };

use Data::Dumper qw(Dumper);
$Data::Dumper::Sortkeys = 1;

print Dumper(<root.spawn_config.globals>) if <system.verbosity> > 1;

<[event.add_signal]>
    ->( { 'signal' => 'CHLD', 'handler' => 'root.handler.sig_chld' } );

<[root.load_agent_patterns]>;
<[root.init_agent_patterns]>;

delete <list.users>;

<list.agents> = {
    'var'   => 'data',
    'key'   => 'root.agent.instance',
    'descr' => 'agent instances',
    'mask'  => '<key>:instance job_id agent_name:name agent_id status',
    'align' => {
        'agent_id'   => 'right-5',
        'agent_name' => 'left+1',
        'instance'   => 'left+1',
        'job_id'     => 'right-4',
        'status'     => 'center-1'
    }
};

<list.subnames> = {
    'var'   => 'data',
    'key'   => 'root.agent.instance',
    'descr' => 'optional agent subnames',
    'mask'  => '<key>:instance status agent_name:agent subname',
    'align' => {
        'instance'   => 'left+1',
        'status'     => 'center-2',
        'agent_name' => 'right-2',
        'subname'    => 'left+1',
    }
};

<list.processes> = {
    'var'   => 'data',
    'key'   => 'root.agent.instance',
    'descr' => 'process IDs and children',
    'mask' =>
        '<key>:instance agent_name:agent <key>:process <key>:process_children',
    'align' => {
        'instance'         => 'left+1',
        'agent_name'       => 'left+1',
        'process'          => 'left',
        'process_children' => 'left',
    },
    'filters' => {
        'process'          => 'root.parser.process_id',
        'process_children' => 'root.parser.children'
    }
};

<list.dependencies> = {
    'var'   => 'data',
    'key'   => 'dependency.object',
    'descr' => 'agent dependency status',
    'mask'  => 'agent_name <key>:depends_on_agents <key>:status',
    'align' => {
        'agent_name'        => 'center',
        'depends_on_agents' => 'center-5',
        'status'            => 'center-3'
    },
    'filters' => {
        'depends_on_agents' => 'root.parser.dependency_chain',
        'status'            => 'root.parser.dependency_status'
    }
};

return 0;
