## >:] ##

# name = tile-groups.process-tile-group

my $tile_group_name = shift;

return <[base.log]>->(
    0, 'process-tile-group : no tile group name parameter defined'
) if not length( $tile_group_name // '' );

return
    <[base.logs]>->( 0, "no tile group '%s' in set up.,", $tile_group_name )
    if not defined <tile-groups.setup.tile-groups>->{$tile_group_name};

<[base.logs]>->( 1, "processing tile group '%s'.,", $tile_group_name );

if ( defined <tile-groups.setup.ticker_zenka_type> ) {
    my $ticker_type = <tile-groups.setup.ticker_zenka_type>;
    foreach
        my $tile_groups ( <[base.sort]>->(<tile-groups.setup.tile-groups>) ) {

        my $_tile_groups_data
            = <tile-groups.setup.tile-groups>->{$tile_groups};

        map {  # ticker-sdl probably won't work anymore until it was updated.,
            if ( $ARG =~ m{^ticker(-sdl|-gtk)?(\[[^\]]+\])?$} ) {

                my $tile_name = ${^CAPTURE}[1] // '';

                my $new_name = sprintf qw| ticker-%s%s |, $ticker_type,
                    $tile_name;

                $_tile_groups_data->{$new_name}
                    = delete $_tile_groups_data->{$ARG}
                    if $new_name ne $ARG;

                ## on top. ##
                $_tile_groups_data->{$new_name}->{'layer'} //= 100;
            }

            # SETTING OVERLAY DEFAULT LAYER VALUE [1000] [ if undefined ]

            $_tile_groups_data->{$ARG}->{'layer'} //= 1000
                if $tile_groups =~ m|^overlay_|;

        } keys <tile-groups.setup.tile-groups>->{$tile_groups}->%*;
    }
}

my @remove_zenki;
my $previous_data;
my $previous_tile_groups = <tile-groups.previous_tile_groups>;
my $tile_groups_data = <tile-groups.setup.tile-groups>->{$tile_group_name};
if ( defined $previous_tile_groups ) {
    if ( $previous_tile_groups eq $tile_group_name ) {
        <[base.log]>->(
            0, 'current and previous tile group identical, processing ended.,'
        );
        return 0;
    }
    $previous_data = <tile-groups.setup.tile-groups>->{$previous_tile_groups};
    map { push @remove_zenki, $ARG if not exists $tile_groups_data->{$ARG} }
        <[base.reverse-sort]>->($previous_data);
}

<tile-groups.transition.status> //= {};

if (<tile-groups.startup.initializing>) {
    my $zenka_stop_cnt = 0;
    foreach
        my $tile_groups ( <[base.sort]>->(<tile-groups.setup.tile-groups>) ) {
        my $_tile_groups_data
            = <tile-groups.setup.tile-groups>->{$tile_groups};
        ###
        foreach my $stop_zenka (
            <[base.reverse-sort]>->(
                <tile-groups.setup.tile-groups>->{$tile_groups}
            )
        ) {
            <tile-groups.transition.status.zenki.stop>->{$stop_zenka}
                = $previous_tile_groups // $tile_group_name;
        }
        ###
        map {
            my $stop_zenki
                = defined $_tile_groups_data->{$ARG}->{'stop_zenki'}
                ? join( ' ', $_tile_groups_data->{$ARG}->{'stop_zenki'},
                $ARG )
                : $ARG;
            <[base.protocol-7.command.send.local]>->(
                {   'command'   => qw| cube.v7.stop_implicit |,
                    'call_args' => { 'args' => $stop_zenki }
                }
            );
            $zenka_stop_cnt++;
            } <[base.reverse-sort]>
            ->( <tile-groups.setup.tile-groups>->{$tile_groups} );
    }
} else {
    map {
        <tile-groups.transition.status.zenki.stop>->{$ARG}
            = $previous_tile_groups // $tile_group_name;
    } @remove_zenki;
}

<tile-groups.window_ids> //= {};
<tile-groups.coordinates> = {};
<tile-groups.subconfig>   = {};
<tile-groups.layers>      = {};
<tile-groups.tiles>       = {};

foreach my $zenka_name ( <[base.sort]>->($tile_groups_data) ) {

    <tile-groups.coordinates>->{$zenka_name}
        = <[tile-groups.calculate_coordinates]>
        ->( $tile_groups_data->{$zenka_name} );

    <tile-groups.layers>->{$zenka_name}
        = $tile_groups_data->{$zenka_name}->{'layer'}
        if defined $tile_groups_data->{$zenka_name}->{'layer'}
        and $tile_groups_data->{$zenka_name}->{'layer'} =~ m|^\-?\d+$|;
    <tile-groups.layers>->{$zenka_name} //= 0;

    <tile-groups.subconfig>->{$zenka_name} = {};
    ( my $name_plain = $zenka_name ) =~ s|\[.+$||;
    if ( defined <tile-groups.mapped_subcfg>->{$name_plain} ) {
        my @scfg_keys
            = split( m| +|, <tile-groups.mapped_subcfg>->{$name_plain} );
        foreach my $sc_key (@scfg_keys) {
            <tile-groups.subconfig>->{$zenka_name}->{$sc_key}
                = $tile_groups_data->{$zenka_name}->{$sc_key}
                if defined $tile_groups_data->{$zenka_name}->{$sc_key};
        }
    }

    next    ## zenka set-up identical [ not touching running zenka ] ##
        if not <tile-groups.startup.initializing>
        and defined $previous_tile_groups
        and defined $previous_data->{$zenka_name}
        and cmpStr( $previous_data->{$zenka_name},
        $tile_groups_data->{$zenka_name} ) == 0;

    <tile-groups.window_ids>->{$zenka_name} //= undef;
    <tile-groups.transition.status.zenki.start>->{$zenka_name}
        = $tile_group_name;
}

map {
    my $tile_name = '';
    my $name_copy = my $zenka_name = $ARG;
    $tile_name = $1 if $zenka_name =~ s|\[([^\]]+)\]$||;
    if ( length $tile_name ) {
        <tile-groups.tiles>->{$tile_name}->{'zenka'} = $zenka_name;
        my %pos_match;
        my $pos_hint_str     = '';
        my $coords           = <tile-groups.coordinates>->{$name_copy};
        my $border_tolerance = 2;
        if (    $coords->{'left'} <= $border_tolerance
            and $coords->{'top'} <= $border_tolerance
            and $coords->{'right'} >= <x11.screen.width> - $border_tolerance
            and $coords->{'bottom'}
            >= <x11.screen.height> - $border_tolerance ) {
            $pos_hint_str = qw| fullscreen |;
        } else {
            foreach my $border_name ( keys $coords->%* ) {
                my $coord_val = $coords->{$border_name};
                my $h_w       = sprintf qw| %.0f |, <x11.screen.width> / 2;
                my $h_h       = sprintf qw| %.0f |, <x11.screen.height> / 2;
                $pos_match{$border_name} = 5    ## true ##
                    if ( $border_name eq 'top' and $coord_val < $h_h * 0.8 )
                    or ( $border_name eq 'left'  and $coord_val < $h_w * 0.8 )
                    or ( $border_name eq 'right' and $coord_val > $h_w * 1.2 )
                    or
                    ( $border_name eq 'bottom' and $coord_val > $h_h * 1.2 );
            }
            if ( scalar keys %pos_match == 4 ) {

                %pos_match = ( qw| center | => 5 );    ## true ##

            } elsif ( exists $pos_match{'top'}
                and exists $pos_match{'bottom'} ) {

                delete $pos_match{'top'};
                delete $pos_match{'bottom'};

            } elsif ( exists $pos_match{'left'}
                and exists $pos_match{'right'} ) {

                delete $pos_match{'left'};
                delete $pos_match{'right'};
            }
            $pos_hint_str = join( qw| - |, <[base.sort]>->( \%pos_match ) );
        }
        <tile-groups.tiles>->{$tile_name}->{'pos_hint'} = $pos_hint_str;
    }
} <[base.sort]>->( <tile-groups.setup.tile-groups>->{$tile_group_name} );
<list.tiles> = {
    'var'      => qw| data |,
    'key'      => qw| tile-groups.tiles |,
    'mask'     => '<key>:tile_name zenka pos_hint',
    'sort_key' => qw| pos_hint |,
    'descr' => sprintf( 'configured tiles in group "%s"', $tile_group_name )
};

if ( defined <tile-groups.tiles_visible_file> ) {
    ( my $parent_dir = <tile-groups.tiles_visible_file> ) =~ s|/([^/]*)$||;
    my $file_name = $LAST_PAREN_MATCH;
    if ( not length $parent_dir or -d $parent_dir ) {
        <[base.logs]>->(
            ":. writing to '%s'.,",
            <tile-groups.tiles_visible_file>
        );
        <[file.put]>->(
            <tile-groups.tiles_visible_file>,
            join( ', ', <[base.sort]>->(<tile-groups.tiles>) ) . "\n"
        );
    } else {
        <[base.logs]>->( 0, "<< ! >> '%s' not found << ! >>", $parent_dir );
        <[base.logs]>->( " : not creating '%s'", $file_name );
    }
}

## [if enabled] monitor tile activity          ##
## [by average color] restart zenka on timeout ##
##
if (<tile-groups.watch_tiles.poll_tile_color>) {

    ##  default  ##
    my $start_interval = <tile-groups.watch_tiles.poll_int_start> //= 42;

    <[base.log]>->( 1, '<< tile activity monitoring is enabled >>' );

    if (<tile-groups.watch_tiles.comparison_mode>) {
        <[base.log]>->(
            1, ' : fetching X-11 background color., [ bgcol-mode ]'
        );
        <[base.protocol-7.command.send.local]>->(
            {   'command' => qw| cube.X-11.bg_color |,
                'reply'   =>
                    { 'handler' => qw| tile-groups.handler.bg_color_reply | }
            }
        );
    }

    <[base.log]>->( 1, ' : setting up \\ updating tile activity watchers.,' );
    my $timers = <tile-groups.timer.poll_tile_color> //= {};
    foreach my $poll_timer ( keys $timers->%* ) {
        $timers->{$poll_timer}->cancel if $timers->{$poll_timer}->is_active;
    }

    foreach my $tile_name ( <[base.sort]>->(<tile-groups.tiles>) ) {

        my $interval_secs = sprintf( qw| %.2f |,
            $start_interval + rand( $start_interval * 0.13 ) );

        $timers->{$tile_name} = <[event.add_timer]>->(
            {   'after'    => $start_interval,
                'interval' => $interval_secs,
                'repeat'   => 1,
                'handler'  => qw| tile-groups.callback.poll_tile_color |,
                'data'     => {
                    'tile_name'        => $tile_name,
                    'current_interval' => $interval_secs
                }
            }
        );
    }
}
#
###

<tile-groups.startup.initializing> = 0;    ##  false  ##

<[base.protocol-7.command.send.local]>
    ->( { 'command' => qw| cube.content.update | } );

<[tile-groups.handler.transition]>;

#,,.,,,.,,..,,.,.,,.,,,,,,,,.,,..,,.,,.,.,,.,,..,,...,..,,.,,,,..,..,,.,.,.,,,
#B3IXQPHD3WIX4I6D4MW3DW22FW5FDTU634WADMZCOHDEYJKJ4B2ZYU7XMJEUMX7C4JIP6AZAGT4DK
#\\\|WZCBGOGI5D2DYGFPPC2EAHCF64G3NX23SBQ3RMBW35MLR3HUG6J \ / AMOS7 \ YOURUM ::
#\[7]J6CVOFIEYBYRXITQEY7J5VLWXNM6YA5WKGA5RBTZ2AUV6Y7NM6AY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
