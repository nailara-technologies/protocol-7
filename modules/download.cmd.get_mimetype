# >:]

# name  = download.cmd.get_mimetype
# param = <url>
# descr = return reported mime-type for given url

my $content_type;
my $url = shift->{'args'} // '';

return { 'mode' => 'nack', 'data' => 'url parameter expected' }
    if !length($url);

<download.http.request_timeout> //= 3;

my $uagent = LWPx::ParanoidAgent->new;

$uagent->whitelisted_hosts( sub { return 1 } );
$uagent->protocols_allowed( [ 'http', 'https' ] );
$uagent->timeout(<download.http.request_timeout>);
$uagent->agent("Mozilla/5.0");
$uagent->cookie_jar( {} );

return { 'mode' => 'nack', 'data' => 'url parameter expected' }
    if not defined $url
    or !length($url)
    or $url !~ m|^http[s]?://|;

<[base.log]>->( 2, "checking content type for '$url'" );

my $method   = 'HEAD';
my $response = $uagent->head($url);

if ( $response->status_line =~ /^(4\d{2}|5\d{2})/ ) {
    <[base.log]>->( 2, "HEAD failed for '$url', trying GET request.." );
    $uagent->max_size(0);
    $method   = 'GET';
    $response = $uagent->get($url);
}

if ( $response->is_success ) {
    $content_type = $response->{'_headers'}->{'content-type'};
    $content_type //= 'unknown';
} else {
    my $err_reason = $response->status_line;
    return { 'mode' => 'nack', 'data' => $err_reason };
}
my $mode = $content_type eq 'unknown' ? 'nack' : 'ack';
return { 'mode' => $mode, 'data' => $content_type };
