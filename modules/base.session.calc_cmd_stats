## [:< ##

# name  = base.session.calc_cmd_stats

my $id         = shift;
my $buffer_ref = shift;

return undef if not defined $id or not exists $data{'session'}{$id};
if ( ref($buffer_ref) ne qw| SCALAR | and ref($buffer_ref) eq qw| REF | ) {
    warn '<buffer_ref> is not a scalar reference';
    return undef;
}

my $protocol_stats;    ##  protocol wide  ##
if ( defined $data{'session'}{$id}{'protocol'} ) {
    my $protocol = $data{'session'}{$id}{'protocol'};
    $protocol_stats = $data{'protocol'}{$protocol}{'statistics'}
        //= { 'read-iterations' => 0 };
}

##  calculate and store average command line length  ##
if ( $data{'session'}{$id}{'read-mode'} eq qw| linewise |
    and ( my $endline_pos = index( $$buffer_ref, "\n" ) ) >= 0 ) {

    my $history_max_size = 13;
    my $stats_ref        = $data{'session'}{$id}{'command'} //= {
        'commands-total'     => 0,
        'recent_lengths'     => [],
        'average-length'     => $endline_pos,
        'read-iteration-avg' => 0
    };
    $stats_ref->{'commands-total'}++;
    push( @{ $stats_ref->{'recent_lengths'} }, $endline_pos );
    if ( $stats_ref->{'commands-total'} < $history_max_size
        or scalar @{ $stats_ref->{'recent_lengths'} } >= $history_max_size ) {

        my $count_values = @{ $stats_ref->{'recent_lengths'} };

        ##  update average  ##
        my $current_length_value = <[base.balanced-average]>->(
            \$stats_ref->{'average-length'},
            @{ $stats_ref->{'recent_lengths'} }
        );
        ##  reset history  ##
        $stats_ref->{'recent_lengths'} = [];

        ##  update protocol average  ##
        <[base.balanced-average]>->(
            \$protocol_stats->{'average-command-line-length'},
            $current_length_value
        ) if defined $protocol_stats;

        ##  track file handle reads per cmd  ##
        <[base.balanced-average]>->(
            \$stats_ref->{'read-iteration-avg'},
            $protocol_stats->{'read-iterations'}
                / $protocol_stats->{'line-reads'}
        ) if $protocol_stats->{'line-reads'};
        map { $protocol_stats->{$ARG} = 0 } qw| line-reads read-iterations |;

        ##  return current value  ##
        return $current_length_value;
    }
} else {
    return undef;    ##  not in read-mode 'linewise'  ##
}

#,,,,,,,.,,..,.,.,,,.,,..,.,.,,..,,,.,.,.,.,,,..,,...,.,,,..,,...,.,,,,..,,,,,
#VMXSG6G3BUMJOB7INH2NQQJJTNAM55LNZO5HBEQ2JSPZ3HASPCE37HXBXBZP6VAFSNZO36WU2MTRE
#\\\|K4MS7UYBSUB4YJRGKL2LI4R3NETCAKYXIHZ6NPSKBW54FRMKBMQ \ / AMOS7 \ YOURUM ::
#\[7]7CJ6U5GLHMF22OGUYA3JJDLHGDWHNQEXIB6EM5QMWVNIBSEHVGAA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
