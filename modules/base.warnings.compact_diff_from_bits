## >:] ##

# name  = base.warnings.compact_diff_from_bits

my $warnings_check_bits = shift;

if ( not defined $warnings_check_bits ) {
    warn 'expected warnings check bits input <{C1}>';
    return undef;
}

my $type_chosen_href            = {};
my $comparison_NONE_enabled     = $warnings::NONE;
my $comparison_bits_ALL_enabled = warnings::bits('all');

## extract warnings state from check bits ##
##
my $input_warnings_state
    = <[base.warnings.from_bitmask]>->($warnings_check_bits);

## seen from 'all' ##
##
my $warnings_state_ALL_enabled
    = <[base.warnings.from_bitmask]>->($comparison_bits_ALL_enabled);

## seen from 'none' ##
##
my $warnings_state_NONE_enabled
    = <[base.warnings.from_bitmask]>->($comparison_NONE_enabled);

foreach my $type (qw| fatal normal |) {

    my $type_str = $type eq qw| fatal | ? uc($type) : '';

    my $state_diff = {};

    $state_diff->{'from_NONE'} = <[base.diff.hash_keys]>->(
        $warnings_state_NONE_enabled->{$type},
        $input_warnings_state->{$type}
    );

    $state_diff->{'from_ALL'} = <[base.diff.hash_keys]>->(
        $warnings_state_ALL_enabled->{$type},
        $input_warnings_state->{$type}
    );

    ### here still correct ###
    ##
    ## say '< from none > --> ', Dumper( $state_diff->{'from_ALL'} );
    ## say ' < from all > --> ',Dumper( $state_diff->{'from_NONE'} );

    ##  comparing sizes and choosing diff perspective  ##

    my $statediff_size = {};

    $statediff_size->{'from_ALL'} = scalar keys $state_diff->{'from_ALL'}->%*;
    $statediff_size->{'from_NONE'}
        = scalar keys $state_diff->{'from_NONE'}->%*;

    my $chosen_result_ref;

    if ( $statediff_size->{'from_NONE'} == 0 ) {
        $chosen_result_ref = $state_diff->{'from_ALL'};
    } elsif ( $statediff_size->{'from_ALL'} == 0 ) {
        $chosen_result_ref = $state_diff->{'from_NONE'};
    } elsif ( $statediff_size->{'from_NONE'} < $statediff_size->{'from_ALL'} )
    {
        $chosen_result_ref = $state_diff->{'from_NONE'};
    } else {
        $chosen_result_ref = $state_diff->{'from_ALL'};
    }

## compacting, selecting best result ##

    my $result_copy = clone($chosen_result_ref);
    my $zeroed = <[base.warnings.compact_statehash]>->( $result_copy, 0 );

    if ( scalar( keys $zeroed->%* ) == 0 ) {  ##  no [zeroed] results left  ##
        $type_chosen_href->{$type}
            = <[base.warnings.compact_statehash]>->($chosen_result_ref);
    } else {    ##  zeroed results left, using it  ##
        $type_chosen_href->{$type} = $zeroed;
    }
}

## commapsing reduntant normal categories when fatal are enabled ##
##
if ( defined $type_chosen_href->{'fatal'}->{'all'} ) {
    map { delete $type_chosen_href->{'normal'}->{$ARG} }
        keys $type_chosen_href->{'normal'}->%*;
} else {
    foreach my $category ( keys $type_chosen_href->{'fatal'}->%* ) {
        delete $type_chosen_href->{'normal'}->{$category}
            if defined $type_chosen_href->{'fatal'}->{$category}
            and defined $type_chosen_href->{'normal'}->{$category}
            and $type_chosen_href->{'fatal'}->{$category}
            == $type_chosen_href->{'normal'}->{$category};
    }
}

## missing enabled all when disabled some ..,
#
# say Dumper($type_chosen_href);

return $type_chosen_href;

#,,,.,,,,,,,,,,,,,...,,.,,.,,,.,.,.,,,...,,,,,..,,...,...,,..,,..,,..,,.,,,.,,
#YT6ERYGXZDANR4RKO2WVW5LUFVNPE7WV7ZUAW64GARQBI773EHMRW7YEENHBK3MU3MXXC5URPMWOY
#\\\|DCZJPQ3UTUADBFMSAVD4POMH66GQJ4SW5GK3CLDK34KOJJBUK4F \ / AMOS7 \ YOURUM ::
#\[7]6ASC2AWH4KZWBCTLDES2E4J7RJWWGR5PBZE3JBA6SVGUXWA2GYDI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
