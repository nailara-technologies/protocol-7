## [:< ##

# name  = devmod.cmd.permission-setup
# descr = return formatted access config section
# param = [name_pattern]

my $param_str = $$call{'args'} // '';
my $reply_str = '';
my $param_re;

eval { $param_re = qr|$param_str|i };
if ( defined $EVAL_ERROR ) {
    $EVAL_ERROR =~ s| at .+\n?$||;
    $EVAL_ERROR =~ s|;| \\\\ |g;
}
return {
    'mode' => qw| false |,
    'data' => "input pattern regex error [ $EVAL_ERROR ] escape the pattern ?"
    }
    if $EVAL_ERROR or not defined $param_re;

if ( length($param_str) ) {
    $reply_str .= "\n#\n# ";
    $reply_str .= ' ' x 7;
    $reply_str .= ".: access permission setup"
        . " matching '$param_str' pattern :.\n#\n";
}

my $usr_len = 0;
map {
    $usr_len = length($ARG)
        if length($ARG) > $usr_len
        and ( $ARG =~ $param_re or <access.cmd.usr>->{$ARG} =~ $param_re )
    }
    keys %{<access.cmd.usr>};
$usr_len += 15;

my $match_count = 0;
my $max_width   = 77;
foreach my $user (
    <[base.reverse-sort]>->(
        sort {
            split( m| +|, <access.cmd.usr>->{$a} ) <=>
                split( m| +|, <access.cmd.usr>->{$b} )
        } <[base.reverse-sort]>->(<access.cmd.usr>)
    )
) {
    next if $user !~ $param_re and <access.cmd.usr>->{$user} !~ $param_re;
    $match_count++;

    my $next_usr = sprintf( "\n  %${usr_len}s  =  ", "access.cmd.usr.$user" );

    my $left = length($next_usr) - 1;

    <[base.conf-wrap]>->(
        $left, $max_width, " \\\n", \$next_usr, split m| +|,
        <access.cmd.usr>->{$user}
    );

    $reply_str .= $next_usr;
}

return {
    'mode' => qw| false |,
    'data' => "no match for '$param_str' pattern"
    }
    if !$match_count;

return { 'mode' => qw| size |, 'data' => $reply_str }

#,,.,,..,,.,,,,,.,,,,,.,.,..,,.,.,...,,.,,,,,,..,,...,...,..,,,,,,,,,,,.,,,.,,
#LZSPYCKVLLARUSXSGYH76FTBJGTW6BQ5XUSYU23HZG244QKET7F5SLOER2FR3XRN43BPI6PWADNK2
#\\\|D747FTZQG6TEPBEY33XUONDRRLU6LA34PJNNH54Y46JLULHVPCA \ / AMOS7 \ YOURUM ::
#\[7]VVVZOHBHAPX3XD5SXSOWR5RCS3Z4BMYNQNHUYE74XELD5VWOIUDI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
