## [:< ##

# name  = base.chk-sum.elf.inline
# descr = calculate AMOS-13 ELF-7 checksum value [ numerical and strings ]

my $input_ref = \'';    ##   empty   ##
my $start_sum = 0;      ## new input ##

## ANOS-13-ELF SETTINGS ##
##
my $elf_mode           = 7;             ## elf hash setting :   4        ##
my $shift_bits         = 13;            ## elf hash setting :  24        ##
my $overflow_threshold = 0XFE000000;    ## elf hash setting : 0XF0000000 ##
##
####

state $caller_level = [caller]->[1] eq qw| base.chk-sum.elf |
    ? qw| <{C2}> |                      ##  reporting warnings  ##
    : qw| <{C1}> |;

if ( ref( $ARG[0] ) eq qw| SCALAR | ) {

    $input_ref = shift;

    ##  start checksum  ##
    warn 'start chksum param undefined ' . $caller_level and return undef
        if @ARG and not defined $ARG[0];
    $start_sum = shift if @ARG and $ARG[0] =~ m{^(0+|\d{7,9})$};

    ##  elf mode  ##
    warn 'elf mode param is undef ' . $caller_level and return undef
        if @ARG and not defined $ARG[0];
    $elf_mode = shift if @ARG and $ARG[0] =~ m|^\d{1,2}$| and $ARG[0] <= 64;

    ##  shift-bits  ##
    warn 'shift bits param undefined ' . $caller_level and return undef
        if @ARG and not defined $ARG[0];
    $shift_bits = shift if @ARG and $ARG[0] =~ m|^\d{1,2}$| and $ARG[0] <= 64;

    ##  overflow shift threshold  ##
    if ( @ARG and not defined $ARG[0] ) {
        warn join( ' ', 'undefined overflow threshold param', $caller_level );
        return undef;
    }
    $overflow_threshold = shift if @ARG and $ARG[0] <= 4294967295;  #[ 32bit ]

    while (@ARG) {    ##  sanity check  ##
        <[base.s_warn]>->(
            join( ' ',
                'option [%s] not expected, redundant mode parameter?',
                $caller_level ),
            shift @ARG
        );
    }
} elsif ( @ARG and not length ref $ARG[0] ) {  ## string input \ no mode ., ##
    $input_ref = \$ARG[0];
}

## parameters ##
## < input-data >, < start-csum >, < elf-mode >, [ shift-bits ], [shift-thrh.]

return AMOS7::CHKSUM::ELF::elf_chksum(
    $$input_ref, $start_sum, $elf_mode,    ##  <--  make optional  ##  [LLL]
    $shift_bits, $overflow_threshold
);

#,,,,,.,.,,,,,.,.,.,,,,.,,,,,,,,.,,.,,,.,,,.,,..,,...,...,,.,,.,.,,..,.,.,,,,,
#DKFKWSV7GIGDJIQ6NPKZUSUDTAV3QO5EZ3ONP2B7DMQAOLELWE7CHXP7E4SQ2P6DP2CF2M3AHSRPM
#\\\|RKDPS65XXN7O5O7WQQ2IIH2K4LGRYPMORY7ODVJ7A6KDWXO5JUI \ / AMOS7 \ YOURUM ::
#\[7]PRI5WBALEA6IVZN5OEJT4YHZRW3QLXN2SKNKBSPWUW4NCPW7JWBA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
