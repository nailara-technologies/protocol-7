## [:< ##

# name  = base.parser.splice_in_data

my $data_carrier_ref = shift;
my $payload_data_ref = shift;

my $carrier_data_bit_length = 8 * length $data_carrier_ref->$*;
my $payloaddata_bitlen      = 8 * length $payload_data_ref->$*;

my $offset_limit
    = int( $carrier_data_bit_length * 0.7 - $payloaddata_bitlen * 2 );

my $bit_offset = sprintf qw| %u |,    ## carrier start offset ##
    <base.prng.fortuna>->double( 0 + $offset_limit );

if (not <[base.vec.offset_write]>->(
        $data_carrier_ref, $payload_data_ref, $bit_offset, 0, 2
    )
) {
    warn 'error during payload splicing <{C1}>';
    return undef;
}

my $offset_comp_int_param = pack qw| w |, $bit_offset;
my $comp_int_bitlength    = 8 * length $offset_comp_int_param;

## place offset parameter at end of entropy block ##
##
my $carrier_bit_offset = $carrier_data_bit_length - $comp_int_bitlength;
if (not <[base.vec.offset_write]>->(
        $data_carrier_ref, \$offset_comp_int_param, $carrier_bit_offset
    )
) {
    warn 'error while splicing offset param <{C1}>';
    return undef;
}

return $data_carrier_ref;    ##  contains spliced in payload now  ##

#,,,,,,.,,,,.,,..,,,.,,,,,,.,,,.,,,,,,,..,..,,..,,...,...,..,,,,,,,,.,.,.,,..,
#7ATOQBBHZI22ZPR3YZFWZ77Z4LXKGYF6PIM7DJ2NMIU2BYSBG7EH4OSU62DQR3RPYRUXOX3MPWGIM
#\\\|6NEP7DTO4RRYFA3GIW74VKCX7BFXWNINH22C75LQWT7YEKDVGV4 \ / AMOS7 \ YOURUM ::
#\[7]64BQ7BUZK2OAOAOCCKZS5XAH3N5LH5SJV6QDCMAQE5AVK6HR3ICY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
