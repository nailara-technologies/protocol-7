# >:]

# name = browser.base.fork_instances

use Socket;

my $instance_count = shift || 1;
( my $session_id ) = keys( %{<user.core.session>} );

if ( $instance_count > 2 ) {
    <[base.log]>->(
        0, "more than two windows aren't supported yet! resetting..."
    );
    $instance_count = 2;
}

<browser.window_count> = $instance_count;

<browser.pipe> = { 'child' => {}, 'parent' => {} };

my $am_parent = 0;
for my $index ( 1 .. $instance_count ) {
    <[base.log]>->( 1, "forking browser instance #$index.." );

    socketpair(
        my $child_pipe,
        my $parent_pipe,
        AF_UNIX, SOCK_STREAM, PF_UNSPEC
    ) || die "can't create socketpair! [$!]";

    <browser.child.pid>->{$index} = fork;
    if ( !<browser.child.pid>->{$index} ) {    # child
        $am_parent = 0;
        delete <browser.pipe.child> if exists <browser.pipe.child>;
        <browser.pipe.parent>->{$index} = $parent_pipe;
        my $sn_str
            = defined <system.agent.subname>
            ? <system.agent.subname> . '-'
            : '';
        <system.agent.name> =~ s/\s*$/[${sn_str}window-$index]/;
        close($child_pipe);
        my $process_name = "browser-${sn_str}window";
        $process_name .= '-' . $index if $instance_count > 1;
        $0 = $process_name;
        <log.file.system.retry_timer>->cancel
            if exists <log.file.system.retry_timer>;
        $data{'session'}{$session_id}{'shutdown'} = 1;

        $data{'handle'}{$parent_pipe}{'mode'} = 'out';

        my $id = <[base.session.init]>->(
            $parent_pipe, 'nailara', 'client', 'parent'
        );

        $data{'session'}{$id}{'input'}{'handler'} = 'base.handler.command';

        $ENV{'DISPLAY'} = <x11.display>;

        <[base.load_modules]>->('browser.gtk2');
        <[base.init_modules]>->('browser.gtk2');

        <[browser.gtk2.init_window]>->( $index, <browser.geometry> );

        last;
    } else {    # parent
        $am_parent = 1;
        delete <browser.pipe.parent> if exists <browser.pipe.parent>;
        <browser.pipe.child>->{$index} = $child_pipe;
    }
}

if ($am_parent) {
    my $load_modules = 'digest.sha browser.parent';
    <[base.load_modules]>->($load_modules);
    <[base.init_modules]>->( split / /, $load_modules );

    for my $index ( 1 .. $instance_count ) {
        my $child_pipe = <browser.pipe.child>->{$index};

        $data{'handle'}{$child_pipe}{'mode'} = 'out';
        my $id = <[base.session.init]>->(
            $child_pipe, 'nailara', 'client', "window-$index"
        );
        $data{'session'}{$id}{'input'}{'handler'} = 'base.handler.command';

        my $sn_str
            = defined <system.agent.subname>
            ? '[' . <system.agent.subname> . ']'
            : '';

        while ( not defined <browser.window.id>->{$index} ) { # XXX: max_retries
            <[base.sleep]>->(0.1);
            <browser.window.id>->{$index}
                = <[base.x11.get_window_id]>->(
                "browser${sn_str}-$index-" . <browser.child.pid>->{$index} );
        }

        #        <[base.proto.nailara.command.send.local]>->(
        #            {   'command'   => "browser.window-$index.fade_in",
        #                'call_args' => { },
        #                'reply'     => { 'handler' => 'dev.null' }
        #            }
        #        );

        <[base.proto.nailara.command.send.local]>->(
            {   'command'   => "core.xserver.lower_window",
                'call_args' => { 'args' => <browser.window.id>->{$index} },
                'reply'     => { 'handler' => 'dev.null' }
            }
        );

    #        <[base.proto.nailara.command.send.local]>->(
    #            {   'command'   => "core.xserver.lower_window",
    #                'call_args' => { 'args' => <browser.window.id>->{$index} },
    #                'reply'     => { 'handler' => 'dev.null' }
    #            }
    #        );

    }
    <[base.get_session_id]>;

    if (<browser.slideshow.autostart>) {
        <[base.log]>->( 1, 'url slideshow autostart is enabled!' );
        <[browser.parent.cmd.fetch_url_list]>;
    }

}
