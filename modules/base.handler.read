## [:< ##

# name  = base.handler.read
# descr = session input handler

my $event = shift;

my $id = $event->w->data;
my $fd = $event->w->fd;

if (   not defined $id
    or not defined $data{'session'}{$id}
    or defined $data{'session'}{$id}
    and (  $data{'session'}{$id}{'shutdown'} // FALSE
        or $data{'session'}{$id}{'flush_shutdown'} // FALSE )
) {
    $event->w->cancel;    ## removing from event management ##
    $id //= qw| --- |;    ## <-- !!! session p7-log ?                  [LLL]
    my $type = defined $data{'session'}{$id} ? qw| removed | : qw| closing |;
    if ( $type ne qw| closing | or not $fd->eof ) {
        <[base.logs]>->( '[%d] handler of %s session called.', $id, $type );
        return undef;
    }
}

my $session     = $data{'session'}{$id};
my $handle_href = $data{'handle'}{ $session->{'handle'} };

if ( not fileno $session->{'handle'} ) {    ##  filehandle gone ?  ##
    $session->{'fh-last-read-error'} = TRUE;
    $session->{'last-bytes-read'}    = 0;
    $session->{'flush_shutdown'}     = TRUE;
    $event->w->cancel;
    return 2;
}

my $return_code = 2;                        ##  set to disconnecting  ##

my $protocol = $session->{'protocol'};

if ( $session->{'read-mode'} eq qw| binary | ) {    ##  binary protocol  ##

    $session->{'fh-last-read-error'} = FALSE;

    my $bfs       = length( $session->{'buffer'}->{'input'} ) // 0;
    my $size_left = $data{'size'}->{'buffer'}->{'input'} - $bfs;

    my $bytecount = <[base.s_read]>->(
        $session->{'handle'}, \$session->{'buffer'}->{'input'}, $size_left
    );
    if ( $bytecount > 0 ) {
        $session->{'fh-last-read-error'} = FALSE;
        $handle_href->{'bytes'}->{'in'} += $bytecount;
        $return_code = 1;

    } elsif ( $bytecount < 0 ) {    ##  client is gone \ error  ##
        $session->{'fh-last-read-error'} = TRUE;
    }

    ##  read-mode : bytewise   ##
    ##
} elsif ( $session->{'read-mode'} eq qw| bytewise | ) {

    $return_code = <[net.read_bytewise]>->($id);    ##  read known size  ##

} else {    ##  read-mode : linewise  ##

    $return_code = <[net.read_proto_line]>->($id);    ##  read one line  ##
}

if ( $return_code > 1 ) {    ##  disconnect  ##
    $session->{'last-bytes-read'} = 0;
    $session->{'flush_shutdown'}  = TRUE;
    $event->w->cancel;
} else {

    if ( $session->{'read-mode'} eq qw| bytewise | ) {

        $session->{'bytes-to-read'} -= $session->{'last-bytes-read'};

        if ( $session->{'bytes-to-read'} <= 0 ) {    ##  switching back  ##
            $session->{'read-mode'} = qw| linewise |;

            $session->{'bytes-to-read'} = 0          ## to be sure.., ##
                if $session->{'bytes-to-read'} < 0;
        }
    }

    my $bfs       = length( $session->{'buffer'}->{'input'} ) // 0;
    my $size_left = $data{'size'}->{'buffer'}->{'input'} - $bfs;

    ##  pause session input when no size left or target not reading  ##

    if ( $size_left > 0 ) {

        $event->w->start;    ##  restarting : still space in buffer  ##
        $handle_href->{'paused'} = FALSE;

    } else {    ##  set timeout ? ##  [LLL]

        $handle_href->{'paused'}         = TRUE;
        $handle_href->{'paused-watcher'} = $event->w;

        <[base.log]>->( 2, 'input handler paused [ buffer full ]' );
    }
}

return $return_code; ##  2 : disconnect | 1 : more to read | 0 : completed  ##

#,,..,..,,,,,,..,,,..,,,,,.,,,..,,.,.,.,.,,.,,..,,...,...,..,,,..,.,,,,.,,.,,,
#TKLETZ2YAPXKXHMJ7EBG2U4RHGLEDY6HEAFBG6CNHJRNLWXUVMEZS62R7LERY427MEYRDOQROYJSW
#\\\|PYD5D6LX5JX5R4DKQA7MEP6FGOEA2QV72FFTAUUUFI73G6JJ4H5 \ / AMOS7 \ YOURUM ::
#\[7]66MV4YFO7IAZJMQASITQOHC7ALJFVRZ3RCZPQFVRMIJ5UEF5OCAY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
