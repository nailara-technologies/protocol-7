## [:< ##

# name = mpv.callback.check_parent_dirs

my $check_path = shift;

if ( !-d $check_path ) {
    <[base.log]>->(
        0, "check_parent_dirs: path '$check_path' does not exist"
    );
    return;
}

my @dir_tree;
my @cleanup_dirs;
my $cleaned_total = 0;
check_again:

@dir_tree = <[base.reverse-sort]>
    ->( <[file.all_dirs]>->( $check_path, 'recursive' ) );

@cleanup_dirs = ();
foreach my $check_dir (@dir_tree) {
    opendir( my $dir_fh, $check_dir ) or die "$check_dir : \l$OS_ERROR";
    my @dir_content = readdir($dir_fh);
    push( @cleanup_dirs, $check_dir ) if scalar(@dir_content) == 2;
    closedir($dir_fh);
}

my $cleanup_count = 0;
map {
    if   ( rmdir($ARG) ) { $cleanup_count++ }
    else                 { warn "rmdir($ARG) : \l$OS_ERROR" }
} @cleanup_dirs;
$cleaned_total += $cleanup_count;
goto check_again if $cleanup_count;

my $ies = $cleaned_total == 1 ? 'y' : 'ies';
<[base.log]>->( 1, "removed $cleaned_total empty director$ies.," )
    if $cleaned_total;

return $cleaned_total;

#,,,,,.,.,..,,..,,,,,,,..,...,,,,,,.,,..,,,,.,..,,...,...,.,.,,,.,...,...,,.,,
#S6ME5K6ULVDLV3MTU7OVS56TOX7FWYORZM7OWI7OIU2YLA4JAODLZB7POAHOQJXI3NHHWLAB3DWKW
#\\\|J53NVDFGAV73MI7ARVUOPEIXBUNCO53CPWK6KAMCGZW22CCDA4A \ / AMOS7 \ YOURUM ::
#\[7]2NVPEM2ZI2RVDXVYXG2PK4UDUKK5GWCTBMUDSAF65K4ETUOSVYBA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
