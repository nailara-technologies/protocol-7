## [:< ##

# name  = keys.console.duplicate
# param = <key> <dest>
# descr = copy [clone] a key to specified name

( my $cp_from, my $cp_to ) = split m| +|, shift // '', 2;

if ( not defined $cp_from or not defined $cp_to ) {
    say "\n  << expected <from> and <to> parameters >>\n";
    <[base.exit]>->(qw| 0110 |);
} elsif ( not <[crypt.C25519.validate_keyname]>->($cp_from) ) {
    say "\n  <<  source key name is not valid  >>\n";
    <[base.exit]>->(qw| 0113 |);
} elsif ( not <[crypt.C25519.validate_keyname]>->($cp_to) ) {
    say "\n  <<  target key name is not valid  >>\n";
    <[base.exit]>->(qw| 0113 |);
} elsif ( $cp_from eq $cp_to ) {
    say "\n  <<  specified keys identical  >>\n";
    <[base.exit]>->(qw| 0113 |);
}

return say sprintf "\n  << src key %s not found >>\n", $cp_from
    if not <[crypt.C25519.key_exists]>->($cp_from);
return say sprintf "\n  << dst key name '%s' exists already >>\n", $cp_to
    if <[crypt.C25519.key_exists]>->($cp_to);

my $key_vars_from_ref   = <[crypt.C25519.key_vars]>->($cp_from);
my $key_vars_to_key_ref = <[crypt.C25519.key_vars]>->($cp_to);

<[base.exit]>->( qw| 0110 |, 'key dir not writable to', 0 )
    if not -w $key_vars_to_key_ref->{'key_dir'};

foreach my $type ( <[base.sort]>->( $key_vars_from_ref->{'key_filename'} ) ) {
    my $src_file_abs = $key_vars_from_ref->{'key_filename'}->{$type};
    my $dst_file_abs = $key_vars_to_key_ref->{'key_filename'}->{$type};
    <[base.exit]>->(
        qw| 0110 |, sprintf( 'not defined %s key filename', $type ), 0
    ) if not defined $src_file_abs;
    next if not -e $src_file_abs;
    if ( not -r $src_file_abs ) {
        <[base.logs]>->( 0, ': have no read access : %s', $src_file_abs );
        <[base.exit]>->( qw| 0110 |, ':,  no files copied  ,:', 0 );
    }
    <[base.exit]>->(
        qw| 0110 |, sprintf( 'destination %s exists', $dst_file_abs ), 0
    ) if -e $dst_file_abs;
}

my @dst_files_abs;
<[base.log]>->( 1, ':' );
foreach my $type ( <[base.sort]>->( $key_vars_from_ref->{'key_filename'} ) ) {
    next if not -e $key_vars_from_ref->{'key_filename'}->{$type};
    my $src_file_abs = $key_vars_from_ref->{'key_filename'}->{$type};
    my $dst_file_abs = $key_vars_to_key_ref->{'key_filename'}->{$type};
    ( my $srcfile_rel  = $src_file_abs ) =~ s|^.*/||;
    ( my $dst_file_rel = $dst_file_abs ) =~ s|^.*/||;
    <[base.logs]>->(
        ": copying '%s' --> '%s' ..,",
        $srcfile_rel, $dst_file_rel
    );
    push @dst_files_abs, $dst_file_abs;    ##  cp preserves file perms  ##
    if (   not File::Copy::cp( $src_file_abs, $dst_file_abs )
        or not -f $dst_file_abs
        or File::stat::stat($src_file_abs)->size
        != File::stat::stat($dst_file_abs)->size ) {
        <[base.logs]>->(
            0,             ': file copy failed : %s [ %s ]',
            $dst_file_abs, <[base.str.os_err]>
        );
        ## removing destination on error ##
        while ( my $unlink_dstfile = shift @dst_files_abs ) {
            unlink($unlink_dstfile) if -f $unlink_dstfile;
        }
        last;
    }
}
<[base.log]>->( 1, ':' );
<[base.log]>->( 1, ':,' );

my $copy_count = scalar @dst_files_abs;

if ( $copy_count == 0 or not <[crypt.C25519.key_exists]>->($cp_to) ) {
    <[base.exit]>->(
        qw| 0110 |, '<<  no files were copied with success  >>', 0
    );
}

say sprintf( "\n  ::  successfully copied %d file%s  ::\n",
    $copy_count, <[base.cnt_s]>->($copy_count) );

<[base.exit]>;

#,,,,,,.,,...,,,,,..,,...,,..,,,,,.,.,.,,,..,,..,,...,...,,.,,,,.,,,,,,.,,,.,,
#XLT6J3UVKQ6DWIVMSABBOLXI2UBIXDPXG6DGZOBLQ3THOQ45SMLBEKKONFPR7NUPVROJZZ6VJONCW
#\\\|BP4NFZAT2AMFD772VIHFA4FLLMYEH4NC5YXFFOW34U4GHQZ4PMF \ / AMOS7 \ YOURUM ::
#\[7]HRITCUJM2J5WPIBLLM2OARIMUVRB3DJIGKFDN5RB7AZFTEBVHIDI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
