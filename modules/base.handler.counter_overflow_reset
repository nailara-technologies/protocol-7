## [:< ##

# name  = base.handler.counter_overflow_reset
# descr = reset value when specified bit is set [ value range : <n>-1 bit ]

my $event = shift;

if ( ref $event->w ne qw| Event::var | ) {
    warn 'expected event watcher of type var';
    return undef;
}

my $value_ref    = $event->w->var;
my $overflow_bit = $event->w->data;

my $callback_cref;    ## optional callback ##
my $cb_params;

if ( ref $value_ref ne qw| SCALAR | ) {
    warn 'event var param does not contain scalar ref';
    return undef;
} elsif ( ref $overflow_bit eq qw| HASH | ) {
    my $callback_param_ref = $overflow_bit;
    undef $overflow_bit;

    $callback_cref = $callback_param_ref->{'callback'}
        if ref $callback_param_ref->{'callback'} eq qw| CODE |;

    $cb_params = $callback_param_ref->{'callback-params'}
        if exists $callback_param_ref->{'callback-params'};

    $overflow_bit = $callback_param_ref->{'overflow-bit'}
        if exists $callback_param_ref->{'overflow-bit'};
}

$overflow_bit //= 63;

if (defined $overflow_bit
    and (  $overflow_bit !~ m|^\d{1,2}$|
        or $overflow_bit < 1
        or $overflow_bit > 64 )
) {
    warn 'event data expected to contain numerical overflow bit [1..64]';
    return undef;
}

##  invoke callback when present  ##
##
$callback_cref->( $cb_params // $value_ref->$* ) if defined $callback_cref;

##  reset at overflow limit  ##
#
if ( 0 == index sprintf( qw| %0*b |, $overflow_bit, $value_ref->$* ), 1, 0 ) {
    $event->w->stop;     ##  pause for modification  ##
    $value_ref->$* = 0;
    $event->w->start;    ##  restarting watcher  ##
}
#
##

#,,.,,,.,,.,.,,..,,,,,...,,,,,...,,..,,.,,...,..,,...,...,,,,,,,,,,,.,,.,,.,.,
#R525SHDTDRRXJYE6I57PYROENEUSMWUEZHVHBWDTGA7W5O5PNYLQLO3TZGJPOABKAQXJGXNZ6R22E
#\\\|AOY5BMX5RIN4MHXTYTOCBV5FZMTMGPQWQLANDRLAJTB2CQWRJTP \ / AMOS7 \ YOURUM ::
#\[7]UPOCMPZRTHQMI7ELX25Y2M3XNHMWEW4AYK5BED6RGMKNSBS5XADQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
