## >:] ##

# name  = base.perlmods.blacklist_collision_index

my $param_str = shift // '';

my $b32_re = <regex.base.base_32>;

if ( not length $param_str ) {
    warn 'expected checksum collision index parameter <{C1}>';
    return undef;
} elsif ( $param_str =~ m|^\d{1,8}$| ) {

    my $enc_numerical = 99999999 - $param_str;

    return Crypt::Misc::encode_b32r( pack qw| w |, $enc_numerical );

} elsif ( $param_str =~ m|$b32_re{7}| ) {

    ##  range ends with V7 [ 99221759 == 778240 ] ##
    ##
    if ( index( $param_str, qw| V7 |, 0 ) != 0 ) {
        warn 'submitted string is not a valid encoded collision index <{C1}>';
        return undef;
    }

    my $decoded = Crypt::Misc::decode_b32r($param_str);

    if ( not defined $decoded ) {
        warn 'input param not valid [ BASE32 ] <{C1}>';
        return undef;
    } else {

        my $numerical_decoded = eval { unpack qw| w |, $decoded };

        if ( not defined $decoded ) {
            warn 'input param encoding not valid [ comp integer ] <{C1}>';
            return undef;
        } else {

            return 99999999 - $numerical_decoded;
        }
    }
} else {
    warn 'input param not valid [ not recognized format ] <{C1}>';
    return undef;
}

#,,,,,,,.,..,,.,,,..,,,..,,..,..,,.,.,,.,,..,,..,,...,...,...,,..,.,.,,.,,,,.,
#ZHNA7BQDVHZ7X6OP5TLC6NGK3ZO4OZWH52EASNTDYRKBNJB2XGQKIHG5SQDKP6VVMKAM742DQSZ2S
#\\\|EBHE4FU2ABOKYRYGHOBDXSXP7FVBJ2OILNQCON7KNOXEAJUHEEV \ / AMOS7 \ YOURUM ::
#\[7]VFWHVWGKCDIVECNR5MUTY3QQJQP2FMTRBLC5DFRLH5PVTZLJKECY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
