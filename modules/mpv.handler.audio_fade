## [:< ##

# name  = mpv.handler.audio_fade

my $event = shift->w;

my $target_volume = <mpv.audio_fade.target>;
<mpv.audio_fade.start_vol> //= <mpv.current.volume>;

if ( not defined <mpv.time.fade_volume> ) {
    <[base.log]>->( 2, 'fade-in started..,' );
    <mpv.time.fade_volume>   = <[base.time]>->(3);
    <mpv.volume.fade_factor> = 0;
}

my $delta_t = sprintf qw| %.3f |, <[base.time]>->(3) - <mpv.time.fade_volume>;

# adjusting fade speed based on volume difference
$delta_t *= ( 1 - ( ( abs(<mpv.audio_fade.delta_vol>) * 0.2347 ) / 100 ) );

<mpv.volume.fade_factor> += <[mpv.volume.calc_incr]>->($delta_t);
<mpv.volume.fade_factor> = 1 if <mpv.volume.fade_factor> > 1;
<mpv.audio_fade.last_set> //= '';

my $new_volume = sprintf( qw| %.3f |,
          <mpv.audio_fade.start_vol>
        + <mpv.audio_fade.delta_vol> * <mpv.volume.fade_factor> );

if ( $new_volume ne <mpv.audio_fade.last_set> ) {
    <[base.logs]>->( 2, '< FADE > volume == %.3f%%', $new_volume );
    <[mpv.send_command]>->( qw|  set_property  volume  |, $new_volume );
    <mpv.audio_fade.last_set> = $new_volume;
}

if ( <mpv.volume.fade_factor> == 1 ) {
    delete <mpv.time.fade_volume>;
    my $vol_str = sprintf( '%.2f', $target_volume );
    $vol_str =~ s|(\.[^0])0$|$1|g;
    $vol_str =~ s|\.00$||g;
    map {
        <[base.callback.cmd_reply]>->(
            $ARG,
            {   'mode' => qw| true |,
                'data' => sprintf 'volume fade complete [%s%%]',
                $vol_str
            }
        ) if defined $ARG;
    } <mpv.audio_fade.reply_ids>->@*;
    delete <mpv.audio_fade.reply_ids>;
    delete <mpv.audio_fade>;
    $event->cancel;
}

#,,..,.,,,,.,,...,...,..,,,,.,,..,.,,,..,,.,,,..,,...,...,...,,,.,,,.,,,.,.,,,
#CATZTUI4LLUSSSEY247U7TPIRFOAZG3FTE6SSBOWNVTWEM4TWD2XIM4TBLJN6LMIU3B4XHKUNFNW4
#\\\|PFO764OVEDR4R77NJGO7GX3YBKXNGOW76FME66XR2UXYK52H7EZ \ / AMOS7 \ YOURUM ::
#\[7]5BQDZ3FJ67OSMRCKH4ESVBDANNUKYUUEOESJNAOFCLJYRFQ7HECI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
