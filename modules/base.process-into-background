## >:] ##

# name  = base.process-into-background

<[base.log]>->( 1, 'backgrounding current process ..,' );

chdir qw| / | or die "cannot chdir to / : \l$OS_ERROR";
open STDIN, '/dev/null'
    or die "cannot open /dev/null for reading : \l$OS_ERROR";
open STDOUT, '>/dev/null'
    or die "cannot open /dev/null for writing : \l$OS_ERROR";
defined( my $pid = fork ) or die "cannot fork : \l$OS_ERROR";
exit if $pid;
POSIX::setsid() or die "setsid() not successful : \l$OS_ERROR";
open STDERR, qw| >&STDOUT | or die "cannot dup stdout : \l$OS_ERROR";

## making base.s_read() and base.s_write() work after fork ., ##
IO::AIO::reinit();

# if($pid=fork){exit($pid)}
# else
# {
#     close(STDIN);
#    close(STDOUT);
#    close(STDERR);
#
# }

#,,..,...,,,,,.,,,.,.,,,.,,,.,,..,...,,,,,,,.,..,,...,...,...,...,.,,,,,.,,,.,
#7K443WXICYJIAWPKGNRKPSIMD6PAKWZ3JMSIT4KA26RRLQTMYWP5L6SMXQ7IWSQIH3UDZPCUHYAHY
#\\\|2YKRHECP2QIKVHZ7EFAFPT4JGQNDK7EUYIL3KWWR3YSOPAVJWKL \ / AMOS7 \ YOURUM ::
#\[7]QIKHLH4WQNMOYHYDDGD2IIYECM4J4RAQMRO32B6LFX2SWNMHKAAY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
