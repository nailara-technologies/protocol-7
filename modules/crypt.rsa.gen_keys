# >:]

# name       = crypt.rsa.gen_keys

my $key_size = $data{'crypt'}{'rsa'}{'default_keysize'};
my $max_keys = 23542;

&{ $code{'base.log'} }( 1, "generating rsa keys ($key_size bit)..." );

my $key_id =
  &{ $code{'base.gen_id'} }( "data{'crypt'}{'rsa'}{'key'}", $max_keys );
$data{'auth'}{'rsa'}{'key'}{'current'}{'id'} = $key_id;

my $rsa = Crypt::OpenSSL::RSA->generate_key($key_size);

if ( defined $rsa ) {
    $rsa->use_pkcs1_oaep_padding();

    $data{'crypt'}{'rsa'}{'key'}{$key_id} = {
        'private' => $rsa->get_private_key_string(),
        'public'  => $rsa->get_public_key_x509_string()
    };
    my $key = $data{'crypt'}{'rsa'}{'key'}{$key_id};

    &{ $code{'base.log'} }( 1, "checking new keys.." );

    if ( $rsa->check_key() ) {
        $key->{'obj'}        = $rsa;
        $key->{'size'}       = $rsa->size() * 8;
        $key->{'block_size'} = $rsa->size();
        $key->{'type'}       = 'rsa';
        $key->{'encoding'}   = 'X509';
        $key->{'public'}{'fingerprint'} =
          sha1_hex( $key{'rsa'}{$key_id}{'public'} );
        &{ $code{'base.log'} }( 1,
            ": validated as " . $key->{'public'}{'fingerprint'} );
        return $key_id;

    } else {
        &{ $code{'base.log'} }( 0, ': error: generated key is invalid!' );
    }
} else {
    &{ $code{'base.log'} }( 0, ": auth.rsa: failed to initialize rsa object [$!]" );
}

return undef;
