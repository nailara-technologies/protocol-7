# >:]

# name = root.agent.instance.stop

my $instance_id = shift;

if ( exists <agent.instance.shutdown>->{$instance_id} ) {
    <[base.log]>->(
        1, "instance $instance_id already shutting down, skipping stop command!"
    );
    return;
}

my $instance = <root.agent.instance>->{$instance_id};

die "instance.stop: instance id $instance_id does not exist!"
    if not defined $instance;

my $agent_name = $instance->{'agent_name'};
my $job_id     = $instance->{'job_id'};

<[base.log]>->( 1, "shutting down instance $instance_id ($agent_name)..." );

<agent.instance.shutdown>->{$instance_id} = <[base.time]>->(5);

$instance->{'status_timer'}->cancel  if exists $instance->{'status_timer'};
$instance->{'timeout_timer'}->cancel if exists $instance->{'timeout_timer'};
delete <callback.session.close_last> if $instance->{'is_core'};

if ( defined $instance->{'process'}->{'id'} ) {

    my %child;    # XXX: create and use 'update_children' callback!
    map { $child{$_} = 1 } (
        keys( %{ $instance->{'process'}->{'child'} } ),
        @{  <[root.process.get_children]>->( $instance->{'process'}->{'id'} )
        }
    );
    my @children = sort keys %child;

    <[base.log]>->(
        1, ": TERMinating instance pid " . $instance->{'process'}->{'id'}
    );
    my @kill_list;
    kill( 'TERM', $instance->{'process'}->{'id'} );
    push( @kill_list, $instance->{'process'}->{'id'} );
    delete <root.child>->{ $instance->{'process'}->{'id'} };
    my $ren = scalar @children == 1 ? '' : 'ren :';
    if (@children) {
        <[base.log]>->(
            1, ": TERMinating instance child$ren " . join( ', ', @children )
        );
        kill( 'TERM', @children );
        push( @kill_list, @children );
        map { delete <root.child>->{$_} if exists <root.child>->{$_} }
            @children;
    }

    <[event.add_timer]>->(
        {   'after'   => <root.timeout.kill_list>,
            'handler' => 'root.handler.process_kill_list',
            'data'    => \@kill_list
        }
    );

}

<[jobqueue.remove_job]>->($job_id);

# undef $agent_instance->{'output_buffer'}; # -> done in output_handler
