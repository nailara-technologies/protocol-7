## [:< ##

# name  = base.cmd.localtime
# param = [unix|ntime[-b32]]
# descr = return local date string [ host timezone ]
# todo  = clean up ambiguous variable names, split \ extract functionality

my $calc_val = $call->{'args'} // <[base.time]>;
my $exp_precision;
my $ntime_decoded;
my $explicit_unix  = FALSE;
my $explicit_ntime = FALSE;

$exp_precision = ${^CAPTURE}[1]
    if index( $calc_val, qw| 0+ |, 0 ) != 0
    and $calc_val =~ s|(*plb:.)(\+(\d+))$||;

state $b32_re //= <regex.base.base_32>;

## V7 epoch time input ##
##
if (   $calc_val =~ m|^(\d{1,6}(\.\d{1,13})?)$| and $calc_val <= 385279
    or $calc_val =~ m|^<(V7($b32_re){5})[;:]{4}>$|
    or $calc_val =~ m|^(V7($b32_re){5})$| ) {

    ## decode to ntime ##
    $calc_val
        = <[base.ntime.epoch_to_ntime]>->( ${^CAPTURE}[0], $exp_precision );
    $ntime_decoded  = $calc_val;
    $explicit_ntime = TRUE;        ## true ##

} elsif ( index( $calc_val, qw| 0+ |, 0 ) == 0 ) {    ##  unix time  ##
    substr( $calc_val, 0, 2, '' );    ## remove unix time prefix ##
    $explicit_unix = TRUE;            ## true ##

} elsif ( $calc_val =~ m|^\d+(\.\d+)?$| and $calc_val > 2147483648 )
{    ## Jan 19 04:14:07 2038 + 1s ##
    $explicit_ntime = TRUE;    ## true ##
}

if (    $calc_val !~ m|^\d+(\.\d+)?$|
    and $calc_val !~ m|^$b32_re$| ) {
    return {
        'mode' => qw| false |,
        'data' => 'format not valid [ character[s] in input not recognized ]'
    };
}

my $calc_val_copy = $calc_val;

## ntime base32 case ##
if (    not $explicit_unix
    and not $explicit_ntime
    and defined $call->{'args'}
    and $call->{'args'} =~ m|[A..Z]|
    and length($calc_val) >= 10 ) {
    eval { $ntime_decoded = Crypt::Misc::decode_b32r($calc_val) };
    return {
        'mode' => qw| false |,
        'data' => 'encoded network time not valid [ BASE decoding error ]'
        }
        if not defined $ntime_decoded or length $EVAL_ERROR;
}    ##  check if unix on decoding error \ switch  ##  [ LLL ]

if ( defined $ntime_decoded and not $explicit_ntime ) {
    return {
        'mode' => qw| false |,
        'data' => 'decoded value not valid [ expected compressed integer ]'
        }
        if not <[base.comp-int.is_valid]>->($ntime_decoded);

    ## contains network time with arbitary precision
    my @nt_val = unpack( qw| w* |, $ntime_decoded );
    $nt_val[1] =~ s|^7|| if @nt_val == 2;    ## <-- saves 0 prefixes
    $calc_val = join( qw| . |, @nt_val );    ## needs error handling
}

$calc_val = $calc_val_copy    # <<[?]>> deal with false positives <<[?]>>
    if not $explicit_unix
    and $calc_val_copy =~ m,$b32_re,
    and ( not defined $calc_val or $EVAL_ERROR );

return {
    'mode' => qw| false |,
    'data' => 'submitted parameter string is not valid'
    }
    if length $EVAL_ERROR
    or not defined $calc_val
    or $calc_val !~ m|^\d{1,17}(\.\d{1,20})?$|;

$calc_val = <[base.n2u_time]>->( $calc_val, $exp_precision )
    if $explicit_ntime
    or not $explicit_unix
    and length( int $calc_val ) >= 13;    # <-- nailara network time

return {
    'mode' => qw| false |,
    'data' => 'V7 ntime decoding not successful'
    }
    if not defined $calc_val;

my $subseconds = $calc_val =~ s|(\.\d+)$|| ? ${^CAPTURE}[0] : undef;

return {
    'mode' => qw| false |,
    'data' => 'queried value is out of range'
    }
    if $calc_val > 67767976233316804;

my $ltime_str = scalar localtime $calc_val;

##  swapping time \ year value  ##
$ltime_str =~ s| (\d\d:\d\d:\d\d) (\d{4})$| $2 $1|;

##  adding sub second precision string  ##
$ltime_str .= sprintf( ' [ +0%s ]', $subseconds ) if defined $subseconds;

return {
    'mode' => qw| false |,
    'data' => 'unix_time value is too high'
    }
    if not defined $ltime_str or not length $ltime_str;

return {
    'mode' => qw| true |,
    'data' => $ltime_str
    }

#,,,,,.,,,,..,,.,,,.,,,,.,...,,,,,..,,,.,,.,,,..,,...,..,,..,,,,,,,,,,.,.,..,,
#NPX3JLDMFLHFBANHSXCV63LDBJQSUGHE7KYQQJGRX4TP3V5FI57HCQWYIDPNCIUGSDWHRZG3JCBUO
#\\\|465QIFN2NVMBVM24NUN4IYGMYXSOY2E5JVIA6CMY6UVPI3KYNMW \ / AMOS7 \ YOURUM ::
#\[7]MP4SVBV2LVNHFCMZX4QLHBBDDOETUIBEGZLMLE7YHPRMOF6LJWDY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
