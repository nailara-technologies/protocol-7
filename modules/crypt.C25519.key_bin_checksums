## [:< ##

# name  = crypt.C25519.key_bin_checksums
# descr = returns harmonized checksums that are true combined and seperate

my @key_strings_binary = <[base.reverse-sort]>->(@ARG);

if ( @key_strings_binary == 0 ) {
    warn 'expected binary key string parameter[s] <{C1}>';
    return undef;
} elsif ( @key_strings_binary > 2 ) {
    warn 'unexpected parameter[s] <{C1}>';
    return undef;
}

my $priv_key_encr = FALSE;

foreach my $key_bin (@key_strings_binary) {
    my $key_len = length $key_bin;

    $priv_key_encr = TRUE and next    #[ encrypted ]#
        if $key_len == 9 and $key_bin eq qw| [enc-key] |;

    if ( $key_len != 32 and $key_len != 64 and $key_len != 97 ) {
        <[base.s_warn]>->(            ##  97 : virtual  ##
            'supplied key str len %d is not valid [32|64|97]', $key_len
        );
        return undef;
    }
}

##  single encrypted private key case  ##
return qw| <::encrypted::> | if $priv_key_encr and @key_strings_binary == 1;

my $checksum_template         = qw| <:%s:> |;
my $pubkey_str_truth_template = qw| <:%s:>,:%s: |;

## expanding template for encrypted priv key case [consistency] ##
$pubkey_str_truth_template .= qw| ,<::[enc-key]::%s:>,::[enc-key]::%s: |;

my $priv_key_truth_template = qw|<:%%s:>,:%%s:,<:%%s:%s:>,%%s:%s,:%%s:%s:|;

my @checksums;

if ( @key_strings_binary == 1 ) {    ##  single key checksum  ##

    if ( length $key_strings_binary[0] != 97 ) {

        ##  incr. template validation timeout  ##
        AMOS7::TEMPLATE::template_timeout(47);

        my $single_key_amos_csum = <[chk-sum.amos.truth_template_chksum]>->(
            $pubkey_str_truth_template, \shift @key_strings_binary
        );
        push @checksums, $single_key_amos_csum;

    } else {    ##  virtual key  ##
        $pubkey_str_truth_template = join ',', qw[
            <:%s:> :%s: <:virtual::%s:> :virtual::%s:
        ];

        AMOS7::TEMPLATE::template_timeout(13);    ## shorter timeout ##

        my $pubkey_chksum = <[chk-sum.amos.truth_template_chksum]>->(
            $pubkey_str_truth_template, \shift @key_strings_binary
        );
        push @checksums, qw| virtual: |, $pubkey_chksum;  #[stub file chksum]#
    }

} elsif ($priv_key_encr) {    ##  encrypted private key [pubkey] chksum  ##

    AMOS7::TEMPLATE::template_timeout(47);

    my $pubkey_chksum = <[chk-sum.amos.truth_template_chksum]>->(
        $pubkey_str_truth_template, \shift @key_strings_binary
    );
    push @checksums, qw| :[enc-key]: |, $pubkey_chksum;

} else {    ## combined key checksum ##

    AMOS7::TEMPLATE::template_timeout(47);    ## public key sum first ##

    my $pubkey_chksum = <[chk-sum.amos.truth_template_chksum]>->(
        $pubkey_str_truth_template, $key_strings_binary[1]
    );

    AMOS7::TEMPLATE::template_timeout(63);   ## private key sum harmonizing ##

    my $privkey_amos_chksum = <[chk-sum.amos.truth_template_chksum]>->(
        sprintf( $priv_key_truth_template, ($pubkey_chksum) x 3 ),
        $key_strings_binary[0]
    );

    ##  storing calc results  ##
    push @checksums, $privkey_amos_chksum, $pubkey_chksum;
}

## resetting validation timeout ##
AMOS7::TEMPLATE::reset_temp_valid_timeout();

##  key chksum template  ##
##
return sprintf $checksum_template, join( qw| : |, @checksums );

#,,,,,...,...,.,,,...,.,.,.,,,...,,..,...,.,.,..,,...,...,...,,,.,...,.,.,...,
#2JCGDD5WSD335JUXOWGLDUUDJQIRR56FBZUDTXHP6Y64DRDBAUGARCARD4F5P3X25Y6FWRFQKOJTM
#\\\|S4XYTRAWZWJJPSMLFWQ5YMQGGZ5DDL25LMUXW6AZST46NPEJZXD \ / AMOS7 \ YOURUM ::
#\[7]QDCDA4RWKPF2LK55EYSU7SULJSXCHOW7IN5TNDDVLGVOGEWGJWAY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
