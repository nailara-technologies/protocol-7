## [:< ##

# name    = base.cmd.term-all
# descr   = close all sessions of specified user
# param   = <user|sid> [message]

my $re = <regex.base>;

return {
    'mode' => qw| false |,
    'data' => 'expected username or session id parameter'
    }
    if not defined $call->{'args'};

my $call_sid      = $call->{'session_id'};
my $call_username = $data{'session'}{$call_sid}{'user'};

if ( $call->{'args'} =~ m{^($re->{usr_str}|$re->{sid_str})( +(.+))?$} ) {
    my $param      = ${^CAPTURE}[0];
    my $term_msg   = ${^CAPTURE}[2] || 'session terminated';
    my $killed     = 0;
    my $killed_own = FALSE;

    if ( $param =~ m|\s| ) {
        ( $param, $term_msg ) = split( m|\s+|, $param, 2 );
    }

    if (exists $data{'user'}{$param}{'session'}
        or ( exists $data{'session'}{$param}
            and $data{'session'}{$param}{'mode'} ne qw| server | )
    ) {
        my $msg_string = $term_msg;

        my $uname
            = $param =~ m|^\d+$| ? $data{'session'}{$param}{'user'} : $param;

        if ( $param =~ m|^\d+$| ) {
            <[base.logs]>->(
                "[%d] closing '%s' session %u",
                $call_sid, $uname, $param
            );
        } else {
            <[base.logs]>->(
                "[%d] closing all '%s' sessions",
                $call_sid, $param
            );
        }
        foreach my $term_sid ( <[base.sort-num]>->( $data{'session'} ) ) {

            my $term_user_string = $data{'session'}{$term_sid}{'user'};
            next if $term_user_string eq qw| ----- |;

            if ( $param =~ m|^\d+$| ) {    ##  param is a session id  ##
                next if $param != $term_sid;
            } else {                       ##  param is a username  ##
                next if $term_user_string ne $param;
            }

            if (   $term_user_string eq $call_username
                or $term_sid == $call_sid ) {
                $killed_own++;
                if ( $term_sid == $call_sid ) {
                    $msg_string = '..terminated your own session..,';
                }
            }

            <[base.session.shutdown]>->( $term_sid, $msg_string );

            <[base.logs]>->(
                0,      ': terminating %s session [ id : %d ]',
                $uname, $term_sid
            );

            $killed++;
        }
        my $reply_string = sprintf( '%d session%s terminated',
            $killed, <[base.cnt_s]>->($killed) );
        <[base.logs]>->( 0, ':., %s', $reply_string ) if $killed;
        my $yours_str
            = $killed == $killed_own ? 'all yours' : 'yours included';
        $reply_string .= sprintf( ', %s', $yours_str ) if $killed_own;
        $reply_string = $msg_string if $killed_own and $killed == 1;
        return {
            'mode' => $killed_own ? qw| term | : qw| true |,
            'data' => $reply_string
        };
    } else {
        my $u_str    = $param =~ m|^\d+$| ? qw| session | : qw| user |;
        my $fail_msg = sprintf 'no such %s found [%s]', $u_str, $param;
        if ( exists $data{'session'}{$param}
            and $data{'session'}{$param}{'mode'} eq qw| server | ) {
            $fail_msg = 'will not destroy server mode sessions >:[';
            <[base.logs]>->(
                0,
                "[%d] rejected 'term-all' command on server-mode session ..,",
                $call_sid
            );
            <[base.log]>->(
                1,
                ': use zenka config and reload '
                    . 'to shut down server sessions..,'
            );
        }
        return { 'mode' => qw| false |, 'data' => $fail_msg };
    }
} else {
    ( my $term_usr = $call->{'args'} ) =~ s| .+$||;
    return {
        'mode' => qw| false |,
        'data' =>
            sprintf( '%s is not a neither a valid username nor a session id',
            $term_usr )
    };
}

#,,.,,,,,,,,,,..,,,..,,,.,.,.,.,,,,,,,,,,,.,.,..,,...,...,,.,,...,,,.,,,,,.,,,
#LBXPXBZQGH66UGKXA5767ORTLFGL7NUVWUQAW7XSRIT6IV65S4GPGXQ2TSEHXDQDTRUVXB2NUXXW6
#\\\|MLPNAMJF7D6PLVCL7BINQ2GY2RSY7ZVWXJP3ENMPXPOKA4U6YW2 \ / AMOS7 \ YOURUM ::
#\[7]CG7EC7C5BWPE75BSMAB7EOW6RXZBDIUMDWRC6HJC3X4N46LES4BA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
