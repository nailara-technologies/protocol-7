## [:< ##

# name  = base.file.zenka_dir.unlink_file
# descr = removing file entry from zenka write directory

my $filepath_rel      = shift // '';  ##[ relative path to [ unlink ] file ]##
my $silent_if_missing = shift // FALSE;    ##  optional  ##

my $proto_7_user           = <system.amos-zenka-user>;  ##[  <-- def. usr  ]##
my $current_zenka_username = <system.zenka-user.current> // $proto_7_user;

my $global_config_path    = FALSE;
my $zenkaname_path_prefix = TRUE;

$global_config_path = TRUE if $filepath_rel =~ s|^cfg-dir:||;  ##  /etc/.., ##

$zenkaname_path_prefix = FALSE    ## /etc/<zenka> ? ##
    if $global_config_path and $filepath_rel !~ s|<zenka>/||;

if (   not length $filepath_rel
    or index( $filepath_rel, qw| / |,  0 ) == 0
    or index( $filepath_rel, qw| .. |, 0 ) != -1 ) {
    warn 'expected [relative] output path <{C1}>';
    return undef;
}

my $zenka_dir_href = <system.path.zenka-dirs>;

my $zenka_write_dir = $global_config_path
    ? $zenka_dir_href->{'etc_P7'}     ##[  /etc/protocol-7/  ]##
    : $zenka_dir_href->{'run_p7'};    ##[  /var/run/protocol-7  ]##

if ($zenkaname_path_prefix) {    ## use zenka subdirectory ? ##
    my $zenkaname = <system.zenka.name>;
    $zenka_write_dir = catfile $zenka_write_dir, $zenkaname;
}

if ( not -d $zenka_write_dir ) {    ##  creating directory if missing  ##
    <[base.s_warn]>->(
        'temporary zenka output directory not found [ %s ]',
        $zenka_write_dir
    );
    return undef;
} elsif ( not -w $zenka_write_dir ) {
    <[base.s_warn]>->(
        'no write permission to zenka output directory [ %s ]',
        $zenka_write_dir
    );
    return undef;
}

##  zenka work directory  ##
$data{$zenkaname}{'path'}{'output_dir'} //= $zenka_write_dir;

my $file_abs_path = catfile( $zenka_write_dir, $filepath_rel );

if ( not -f $file_abs_path ) {
    <[base.s_warn]>->( 'file not found [ %s ] <{C1}>', $file_abs_path )
        if not $silent_if_missing;
    return undef;
} elsif ( -d $file_abs_path ) {
    <[base.s_warn]>->(
        'file path is existing directory [ %s ] <{C1}>',
        $file_abs_path
    );
    return undef;
}

if ( not unlink($file_abs_path) or -e $file_abs_path ) {   ## removing file ##
    <[base.s_warn]>->(
        'unlink[ %s ] : %s',
        $filepath_rel, <[base.str.os_err]> // 'still exists'
    );
    return undef;
}

return $file_abs_path;    ##  return [ absolute ] path of file removed  ##

#,,,.,,,.,..,,..,,,.,,..,,...,.,.,.,.,,..,.,.,..,,...,...,...,,,,,..,,,,.,.,,,
#OD7D5ZFS5N3ICVOHF2Y35JKR3MBF6NGMMFDJIMLT3JNUMYQBLKSYP4Z6OITDCTUSPVY3BOBED63KE
#\\\|55A5RJYWAPZK6BS5PVYEX5URQHFWT2GWBVSXAD4OPO5BHX3Y666 \ / AMOS7 \ YOURUM ::
#\[7]B7RAIGWN5ROBTJHQHS6AIGZ475Y43DXKJQWAUSTSYBJGKE5A4WBA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
