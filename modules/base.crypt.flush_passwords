## [:< ##

# name  = base.crypt.flush_passwords
# descr = erases all passwords / pwd hashes in memory

return if not exists <auth.setup.usr> and ref(<auth.setup.usr>) ne qw| HASH |;

<[base.log]>->( 0, 'flushing passwords from memory.,' );

foreach my $key ( <[base.reverse-sort]>->(<auth.setup.usr>) ) {
    <[base.erase_buffer_content]>->(
        \$data{'auth'}{'setup'}{'usr'}{$key},
        int( rand(13) ) + 7    ##  <-- additional bytes as padding  ##
    );
    <auth.setup.usr>->{$key} = undef;
    delete <auth.setup.usr>->{$key};
}
<auth.setup.usr> = {};

#,,.,,,.,,,.,,,..,,,,,..,,,..,..,,...,.,.,.,.,..,,...,...,..,,..,,,..,,,,,...,
#A5ENBCGRSGY2FIWVICS3S3B6JEOFPXXHGOEJLXVF3DR5WN6LKNOX74MQGDL2V67AZIL6I4WQLG7CI
#\\\|FBDYQDBXGB5ZZQF62GE7T2PFNKKWG6ZG6PPOQQGYMYSV7UM74VA \ / AMOS7 \ YOURUM ::
#\[7]G6LNCUKFMHQBVEDIG6YBK3N4NK467XUFC2HVDT22WZQ7QZBA26CA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
