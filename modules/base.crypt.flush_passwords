## [:< ##

# name  = base.crypt.flush_passwords
# descr = erases all passwords / pwd hashes in memory

return if not exists <auth.setup.usr> and ref(<auth.setup.usr>) ne qw| HASH |;

<[base.log]>->( 0, 'flushing passwords from memory.,' );

foreach my $key ( <[base.reverse-sort]>->(<auth.setup.usr>) ) {
    <[base.erase_buffer_content]>->(
        \$data{'auth'}{'setup'}{'usr'}{$key},
        int( rand(13) ) + 7    ##  <-- additional bytes as padding  ##
    );
    <auth.setup.usr>->{$key} = undef;
    delete <auth.setup.usr>->{$key};
}
<auth.setup.usr> = {};

#,,.,,,.,,,.,,,..,,,,,..,,,..,..,,...,.,.,.,.,..,,...,...,,,,,...,,..,...,..,,
#6JVYCKYM2BQUDMZRVCHUQSHWI7I2FBIVCHXKQ4MQR7DERWH5YZKGX32757ETZEF3K7QZVHD52UDSU
#\\\|CGPV3IN65Y55KNKMSJM4JIVCZ36Z27TYKKYIW27O3O2LM5VSAJJ \ / AMOS7 \ YOURUM ::
#\[7]MICQCNUMLW6F45TWPKWCQKRPYAT75IMKVTUUDXXOTWBR7VJXOIAY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
