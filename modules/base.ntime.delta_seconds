## [:< ##

# name  = base.ntime.delta_seconds

my $ntime_start = shift // '';
my $ntime_end   = shift;

my $base_regex = <regex.base.base_32>;
my $time_regex = qr|^$base_regex$|;

warn 'expected valid network time value <{C1}>' and return undef
    if $ntime_start !~ m|^\d+(\.\d+)?$| and $ntime_start !~ $time_regex;
warn 'end time value is not valid <{C1}>'
    and return undef
    if defined $ntime_end
    and $ntime_end !~ m|^\d+(\.\d+)?$|
    and $ntime_end !~ $time_regex;

if ( $ntime_start !~ m|^\d+(\.\d+)?$| ) {
    my $decoded = <[base.ntime_BASE32_to_numerical]>->($ntime_start);
    if ( not defined $decoded ) {
        <[base.s_warn]>->(
            'network time [ BASE32 ] decoding error [ %s ] <{C1}>',
            $ntime_start
        );
        return undef;
    } else {
        $ntime_start = $decoded;
    }
}

my $precision = 0;
if ( defined $ntime_end ) { ## end time given ##
    if ( $ntime_end !~ m|^\d+(\.\d+)?$| ) {
        my $decoded = <[base.ntime_BASE32_to_numerical]>->($ntime_end);
        if ( not defined $decoded ) {
            <[base.s_warn]>->(
                'network time [ BASE32 ] decoding error [ %s ] <{C1}>',
                $ntime_end
            );
            return undef;
        } else {
            $ntime_end = $decoded;
        }
    }
} else { ## end time is current time ##
    my $precision = defined $LAST_PAREN_MATCH ? length($LAST_PAREN_MATCH) : 0;
    $ntime_end = <[base.ntime]>->($precision);
}
my $delta_secs = ( $ntime_end - $ntime_start ) / 4200;

$precision += 3;
return sprintf( qw| %.*f |, $precision, $delta_secs );

#,,,,,,,,,.,.,,,.,...,,,,,.,.,..,,,..,.,.,,,.,..,,...,...,.,.,..,,.,,,..,,..,,
#AEKSZA3TMUL5UEWFLACKVPCPGQPML6KGPWAIWNEUCS575HA2YV2ZROC3I6NLMVSEXQ2CZCWVH6TF4
#\\\|TJXISU2P4UXCEE2ZL33PX7QLNJ52VASUGH4KGROGWWWWB7EVHPM \ / AMOS7 \ YOURUM ::
#\[7]ZOD52I7RVIXF3FJYK3C2Y3N47JZPEFIHJUBMAAUQDBQTGEQKAQBQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
