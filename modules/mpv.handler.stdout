# >:]

# name  = mpv.handler.stdout
# descr = reads and processes stdout output from mpv process

my $event     = shift->w;
my $read_fh   = $event->fd;
my $process   = $event->data;
my $pid       = $process->{'pid'};
my $whitelist = $process->{'log_whitelist'} || [];

<mpv.output.buffer>     //= '';
<mpv.output.parse_mode> //= '';
<mpv.output.reply_data> //= [];

if (sysread( $read_fh, <mpv.output.buffer>, 4096, length(<mpv.output.buffer>) )
    == 0    # ( filehandle has an exception )
    ) {
    $event->cancel;
    close($read_fh);
    <[base.log]>->( 1, "mpv-process [PID:$pid] output filehandle closed." );
    kill( 9, $pid );    # making sure it's really gone
    <[base.log]>->( 0, "mpv-process died unexpectedly!" );
    <[base.log]>->( 1, "shutting down " . <system.agent.name> . "-agent!" );
    CORE::exit(2);
}

while ( <mpv.output.buffer> =~ s|^([^\n]*)\n||s ) {
    my $output_line = $1;
    $output_line =~ s/\r//sg;
    next if !length($output_line);

    # 'show_playlist' command
    if ( <mpv.output.parse_mode> eq 'playlist' ) {
        if ( $output_line eq '</playlist>' ) {
            <mpv.output.parse_mode> = '';
            my $reply_id = shift @{<mpv.reply_ids>};
            my @reply_lines;
            my $reply_data = '';
            while ( my $line = shift @{<mpv.output.reply_data>} ) {
                if ( $line =~ /^> (.+) <$/ ) { push( @reply_lines, ":. $1" ) }
                else { push( @reply_lines, ":  $line" ) }
            }
            $reply_data = join( "\n", @reply_lines ) . "\n" if @reply_lines;
            <[base.callback.cmd_reply]>->(
                $reply_id,
                {   'mode' => 'raw',
                    'data' => $reply_data
                }
            );
            last;
        } else {
            push( @{<mpv.output.reply_data>}, $output_line );
        }
    } elsif ( $output_line eq '<playlist>' ) {
        <mpv.output.parse_mode> = 'playlist';
    }

    # log remaining output
    if ( <mpv.output.parse_mode> eq '' ) {
        my $log_level = 0;
        for my $pattern ( @{$whitelist} ) {
            if ( $output_line =~ /$pattern/ ) {
                $log_level = 2;
                last;
            }
        }
        <[base.log]>->( $log_level, "< mpv > " . $output_line );
    }
}
