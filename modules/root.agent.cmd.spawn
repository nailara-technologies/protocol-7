# >:]

# name  = root.agent.cmd.spawn
# param = <name>
# descr = spawn specified agent
# todo  = needs error handling!

my $agent_name = $$call{'args'};

return { 'mode' => 'nack', 'data' => 'agent name expected' }
    if not defined $agent_name or !length($agent_name);

return { 'mode' => 'nack', 'data' => 'agent is explicitly disabled in config!' }
    if <[agent.is_disabled]>->($agent_name);

my $agent_config = <root.spawn_config.agents.config>->{$agent_name};

my $agent_id;
foreach my $id ( keys %{<root.agent.setup>} ) {
    $agent_id = $id if <root.agent.setup>->{$id}->{'name'} eq $agent_name;
}
$agent_id = <[agent.setup.add]>->( { 'name' => $agent_name } )
    if not defined $agent_id;

my $obj_id = <[agent.get_object_id]>->($agent_id);
$obj_id = <[dependency.add_object]>->(
    {   'type'       => 'agent',
        'agent_id'   => $agent_id,
        'agent_name' => $agent_name,
    }
) if not defined $obj_id;

my $target_queue = <[dependency.ok]>->($obj_id) ? 'queued' : 'depending';
my $instance_count = $agent_config->{'spawn'}->{'instances'} || 1;
delete $agent_config->{'spawn'} if !keys %{ $agent_config->{'spawn'} };

my $job_id = <[jobqueue.add_job]>->(
    {   'object_id'       => $obj_id,
        'job_callback'    => 'agent.spawn',
        'callback_params' => $agent_name,
        'target_queue'    => $target_queue
    }
);

return { 'mode' => 'ack', 'data' => "agent_id: $agent_id job_id: $job_id" }
