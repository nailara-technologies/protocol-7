## [:< ##

# name = ticker-gtk.callback.draw

my ( $widget, $context, $ref_status ) = @ARG;

<ticker-gtk.status.initialized> //= FALSE;
<ticker-gtk.last_time>          //= <[base.time]>->(8);

##

my $alpha_fg      = <ticker-gtk.alpha.fg> / 100;
my $outline_alpha = <ticker-gtk.alpha.outline> / 100;

##

<ticker-gtk.draw.x_pos> //= <x11.window.width> + 64;    # <- LLL: calc.

my $window = <ticker-gtk.obj.window>;

#if ( <ticker-gtk.status.initialized> and $window->get_property('visible')
#    or not <ticker-gtk.animation_started> and not <ticker-gtk.paused> ) {
#    <ticker-gtk.obj.window>->queue_draw();
#}

if (<ticker-gtk.status.initialized>
    and (  not $window->get_property('visible')
        or not <ticker-gtk.animation_started> )
) {

    if ( not <ticker-gtk.is-iconified>++ ) {
        <[base.log]>->( 1, 'iconifying window..,' );
        <ticker-gtk.obj.window>->iconify;
    }
    ## investigate the need for this ., event loop ? ## [LLL]
    Glib::Timeout->add(
        4200,
        sub {
            if ( not <ticker-gtk.animation_started> ) {

                <[base.log]>->(
                    1, 'no ticker content received yet, waiting ..,'
                ) if <ticker-gtk.count.logged-no-content>++ == 0;

                <[ticker-gtk.callback.draw]>->(
                    $widget, $context, $ref_status
                );
            }
            return FALSE;
        }
    );
    return TRUE;
}

<ticker-gtk.obj.window>->queue_draw() if not <ticker-gtk.paused>;

<ticker-gtk.obj.context> = $context;

if ( not defined <ticker-gtk.speed> ) {
    <ticker-gtk.speed> //= <ticker-gtk.default_speed> // 7; # internal default
    <[base.logs]>->(
        'ticker scroll speed undefined [using default : %s]',
        <ticker-gtk.speed>
    );
} else {
    <ticker-gtk.speed_logged> //= FALSE;
    <ticker-gtk.speed> = 5  if <ticker-gtk.speed> < 5;
    <ticker-gtk.speed> = 42 if <ticker-gtk.speed> > 42;
    <[base.logs]>->(
        'initializing with ticker scroll speed = %s',
        <ticker-gtk.speed>
    ) if not <ticker-gtk.speed_logged>++;
}

<ticker-gtk.slowdown.percent> = 0
    if <ticker-gtk.slowdown.percent> < 0
    or <ticker-gtk.slowdown.percent> > 100;

if (   not $window->is_composited
    or not <ticker-gtk.use_transparency> ) {
    $context->set_source_rgb( <ticker-gtk.bg-color>->@* );
    $context->paint;
} else {
    my $screen = $window->get_screen();
    my $rgba   = $screen->get_rgba_visual();    # [LLL] auto-update ?
    if ( not $rgba ) {
        <ticker-gtk.use_transparency> = FALSE;
    } elsif ( <ticker-gtk.use_transparency>
        and ref <ticker-gtk.bg-color> eq qw| ARRAY | ) {
        $window->set_visual($rgba);
        $context->set_source_rgba( <ticker-gtk.bg-color>->@*,
            ( 100 - <ticker-gtk.alpha.bg> ) / 100 );
        $context->set_operator('source');
        $context->paint;
        $context->set_operator('over');
    } elsif (<ticker-gtk.use_transparency>) {
        warn 'ticker-gtk.bg-color not defined';
    }
}

my $speed       = <ticker-gtk.speed> // 13;
my $draw_shadow = $speed > 16 ? FALSE : TRUE;

# LLL: initialization part needs to be rewritten ..
if ( not <ticker-gtk.status.initialized> ) {

    <[base.log]>->( 1, 'calculating required font size .,' );
    my $new_font_size = 0;
    my $shadow_height = $draw_shadow ? 2 : 0;
    while ( (

            $context->font_extents->{'height'}

            ## $context->font_extents->{'ascent'} +
            ##  $context->font_extents->{'descent'}

        ) < <x11.window.height> - $shadow_height
    ) {
        $new_font_size++;
        $context->set_font_size($new_font_size);
    }
    <ticker-gtk.font.size> = $new_font_size - 1;
    $context->set_font_size(<ticker-gtk.font.size>);
    <[base.logs]>->(
        'initialized window [font.size=%s]',
        <ticker-gtk.font.size>
    );
    <ticker-gtk.status.initialized> = TRUE;

    <[base.async.get_session_id]>;    # agent status -> 'online'

    return FALSE;
}

$context->set_font_face(<ticker-gtk.font.face>);
$context->set_font_size(<ticker-gtk.font.size>);

my $txt = <ticker-gtk.content.txt> // '';

my $width = $context->text_extents($txt)->{'width'};

<ticker-gtk.draw.skipped> //= 0;

my $content_substr
    = <[ticker-gtk.content_substring]>->(<ticker-gtk.draw.x_pos>);

my $x_skipped = $content_substr->[0] // 0;

<ticker-gtk.draw.skipped_offset> //= 0;

my $x_offset = sprintf( qw| %.0f |,
    <ticker-gtk.draw.x_pos> + $x_skipped - <ticker-gtk.draw.skipped_offset> );

<ticker-gtk.font.y-offset> //= 0;

my $y_offset    ##  requires better calculation method  ##  [LLL]
    = <ticker-gtk.font.y-offset> + $context->font_extents->{'height'}
    - $context->font_extents->{'descent'};

if ($draw_shadow) {
    $context->move_to( $x_offset + 2, $y_offset + 2 );
    if (<ticker-gtk.use_transparency>) {
        $context->set_source_rgba( 0, 0, 0, 0.13 );
    } else {
        $context->set_source_rgb( 0.87, 0.87, 0.87 );
    }
    $context->show_text( $content_substr->[1] );
}

if (<ticker-gtk.cfg.draw_outline>) {

    if ( not <[base.cfg_bool]>->(<ticker-gtk.cfg.rotate_outline_col>) ) {
        ##  single outline color  ##
        if (<ticker-gtk.use_transparency>) {
            $context->set_source_rgba( <ticker-gtk.ol_col>->@*,
                $outline_alpha );
        } else {
            $context->set_source_rgb( <ticker-gtk.ol_col>->@* );
        }
        foreach my $o_y ( -1 .. +1 ) {
            foreach my $o_x ( -1 .. +1 ) {
                next if $o_x == 0 and $o_y == 0 or $o_x != 0 and $o_y != 0;
                $context->move_to( $x_offset + $o_x, $y_offset + $o_y );
                $context->show_text( $content_substr->[1] );
            }
        }
    } else {    ##  four outline colors [ rotating hue ]  ##

        my @outline_col_ref = <[ticker-gtk.cfg.font.calc_outline_col]>;

        foreach my $o_y ( -1 .. +1 ) {
            foreach my $o_x ( -1 .. +1 ) {
                next if $o_x == 0 and $o_y == 0 or $o_x != 0 and $o_y != 0;

                my $outline_col_rgb = shift @outline_col_ref;
                if (<ticker-gtk.use_transparency>) {
                    $context->set_source_rgba( $outline_col_rgb->@*,
                        $outline_alpha );
                } else {
                    $context->set_source_rgb( $outline_col_rgb->@* );
                }

                $context->move_to( $x_offset + $o_x, $y_offset + $o_y );
                $context->show_text( $content_substr->[1] );
            }
        }

    }
}

$context->move_to( $x_offset, $y_offset );

if (<ticker-gtk.use_transparency>) {
    $context->set_source_rgba(
        <ticker-gtk.font.color>->[0], <ticker-gtk.font.color>->[1],
        <ticker-gtk.font.color>->[2], $alpha_fg
    );
} else {
    $context->set_source_rgb( <ticker-gtk.font.color>->@* );
}

$context->show_text( $content_substr->[1] );

my $delta_t = <[base.time]>->(8) - <ticker-gtk.last_time>;

if ( not <ticker-gtk.paused> ) {

    if (<ticker-gtk.auto_speed_mode>) {    # LLL
        my $adjust  = 0;
        my $sl_diff = 0;
        if ( <ticker-gtk.slowdown.percent>
            != <ticker-gtk.slowdown.percent_target> ) {
            $adjust = sprintf(
                qw| %.4f |,
                (         <ticker-gtk.slowdown.percent_target>
                        - <ticker-gtk.slowdown.percent>
                ) / 842
            );
            <ticker-gtk.slowdown.percent>
                = sprintf qw| %.4f |,
                <ticker-gtk.slowdown.percent> + $adjust;

            $sl_diff = abs(
                sprintf qw| %.4f |,
                <ticker-gtk.slowdown.percent_target>
                    - <ticker-gtk.slowdown.percent>
            );
            <ticker-gtk.slowdown.percent>
                = <ticker-gtk.slowdown.percent_target>
                if $sl_diff <= 0.05;
        }
        #
        $speed -= ( $speed - 5 ) * ( <ticker-gtk.slowdown.percent> / 100 );
    }

    my $ppsec = 1.42 * $speed**1.86;

    my $fps_delay = ( 1 / $ppsec ) - $delta_t;

    if ( $fps_delay > 0 ) {
        <[base.sleep]>->($fps_delay);
        $delta_t = <[base.time]>->(8) - <ticker-gtk.last_time>;
    }

    <ticker-gtk.draw.x_pos> -= $ppsec * $delta_t;

    if ( <ticker-gtk.draw.x_pos>
        <= -<ticker-gtk.content.current.txt_map>->{'total_width'} ) {

        <ticker-gtk.draw.x_pos>
            = <ticker-gtk.content.current.txt_map>->{'space_width'};

        <ticker-gtk.last_substr> = [];
        <ticker-gtk.switch_at_seq>-- if <ticker-gtk.switch_at_seq>;

        <ticker-gtk.content.current.txt_map>
            = delete <ticker-gtk.content.queued.txt_map>
            if exists <ticker-gtk.content.queued.txt_map>
            and not <ticker-gtk.switch_at_seq>;

        delete <ticker-gtk.switch_at_seq> if not <ticker-gtk.switch_at_seq>;
    }

}

if (<ticker-gtk.animation_started>) {
    if ( not <ticker-gtk.paused> ) {
        $widget->queue_draw();
    } else {
        Glib::Timeout->add(
            457,
            sub {
                <ticker-gtk.obj.window>->queue_draw();
                return FALSE;
            }
        );
    }
}

<ticker-gtk.draw.fps>  = sprintf qw| %.2f |, 1 / $delta_t;
<ticker-gtk.last_time> = <[base.time]>->(8);

return TRUE;

#,,..,,,,,..,,,,,,...,,,.,,..,.,.,...,,.,,..,,.,.,...,.,.,,..,,..,.,,,.,.,...,
#OH7LO2W5RPBDTG6ALBCRBP6HTPZ3GLHB527QJ5RAED6GT465ZFTEJXFX7JFBTZ6QCYHVB3LUQZKFA
#\\\|LEZ342MYRHNVMSUSACVG5EN2WJKIMTMENELMQU6JDBARECVGBAU \ / AMOS7 \ YOURUM ::
#\[7]L5ZPZSGFAEQBNLCVSX7MZ77WTP4FFXYITDYYX3ZWGD6UP62SEGAI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
