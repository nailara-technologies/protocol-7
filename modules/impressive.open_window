# >:]

# name = impressive.open_window

my $bg_color    = <impressive.cfg.background_color>;
my $trans_delay = <impressive.cfg.transition_delay>;
my $temp_dir    = <impressive.path.impressive_tmp>;
my $tmp_bin     = "$temp_dir/impressive.$$";
my $light_mode  = <impressive.cfg.light_mode>;

$light_mode = 0 if $light_mode ne '1' and $light_mode ne '2';

## replace border (frame) color ##

$bg_color = '#000000'
    if <impressive.cfg.black_on_fullscreen> and not defined <x11.geometry>;
<[impressive.parse_bin]>->( { 'bg_col' => <impressive.cfg.background_color> } );

my $mode_name = $light_mode     ? 'light' : 'normal';
my $lvl       = $light_mode < 2 ? ''      : ' level 2';

<[base.log]>->(
    1,
    sprintf( "preparing impressive %s in < $mode_name > mode$lvl",
        <impressive.version> )
);

## select transitions ##

my @transitions;
if ( $light_mode == 1 ) {
    @transitions = ('Crossfade');
} elsif ( $light_mode == 2 ) {
    @transitions = ('None');
} else {
    my $trans_list_output = qx($tmp_bin -l 2>/dev/null);
    foreach my $trans_line ( split( /\n/, $trans_list_output ) ) {
        next if $trans_line =~ /^[^ \*]/;
        $trans_line =~ s|..([^ ]+) .+$|$1|;
        push( @transitions, $trans_line ) if $trans_line !~ /fade|none|cloud/i;
    }
}
<[base.log]>->( 0, "[!] failed to obtain transition list, using defaults [!]" )
    if !@transitions;
my @rnd_trans;
while (@transitions) {
    my $rnd_index = sprintf( "%.0f", rand(@transitions) );
    push( @rnd_trans, shift(@transitions) ) if @transitions == 1;
    next if not exists $transitions[$rnd_index];
    push( @rnd_trans, delete $transitions[$rnd_index] );
}
my $translist_str = join( ',', @rnd_trans );

my $rnd_trans = 1111 + int( rand(2222) );
$rnd_trans += 2222 if $light_mode;
$trans_delay += sprintf( "%.0f", 4 + rand(4) ) if $light_mode >= 2;

## prepare parameter list ##

if ( defined <x11.geometry> and <x11.geometry> =~ /^(\d+)x(\d+)/i ) { # min size
    ( my $width, my $height ) = ( $1, $2 );
    if ( $width < 320 ) {
        <[base.log]>->(
            0, "<!> configured window width $1 is too small -> forcing 320!"
        );
        <x11.geometry> =~ s/^$1x/320x/i;
    }
    if ( $height < 200 ) {
        <[base.log]>->(
            0, "<!> configured window height $2 is too small -> forcing 200!"
        );
        <x11.geometry> =~ s/x$2/x200/i;
    }
}

my @exec_params = defined <x11.geometry> ? ( '-f', '-g' . <x11.geometry> ) : ();
push( @exec_params, '--transition', $translist_str ) if length($translist_str);
push( @exec_params,
    '--auto',       $trans_delay,
    '--transtime',  $rnd_trans,
    '--fade',       '--wrap',
    '--bind',       'clearall',
    '--mousedelay', '1',
    '--nologo',     '--scale',
    '--cursor',     <impressive.gfx.cursor_png>,
    @{<impressive.current_playlist>} );

## start up impressive window ##

$ENV{'DISPLAY'} = <x11.display>;

<impressive.pid> = open3( <impressive.in_fh>, <impressive.out_fh>,
    <impressive.err_fh>, $tmp_bin, @exec_params );

if (<impressive.pid>) {    # waiting for python interpreter to read $tmp_bin ..
    my $bits = '';
    vec( $bits, fileno(<impressive.out_fh>), 1 ) = 1;
    select( $bits, undef, undef, undef );
}
unlink($tmp_bin) or warn "failed to delete '$tmp_bin' [$!]";

if ( opendir( my $tdir_fh, $temp_dir ) ) {
    my @t_files = grep { !/^\./ } ( readdir($tdir_fh) );
    if ( !@t_files ) {
        <[base.log]>->( 1, "removing temp dir '$temp_dir'.." );
        rmdir($temp_dir) or warn "failed to remove directory '$temp_dir': $!";
    }
} else {
    warn "failed to open directory '$temp_dir': $!";
}

## wait for it ##

if ( not defined <[base.x11.wait_for_window]> or !<impressive.pid> ) {
    <[base.log]>->( 0, "[!] failed to start impressive [$!]" );
    <[base.log]>->( 1, " : aborting agent startup .." );
    exit(1);
} else {
    <[base.log]>->( 1, ": impressive process spawned [PID=<impressive.pid>]" );
    <[base.sleep]>->(1.42);    # XXX: quckfix for restart race condition
    <[base.x11.assign_window]>->(<x11.id>);
}

## register output watcher ##

<impressive.watcher.output> = <[event.add_io]>->(
    {   'fd'      => <impressive.out_fh>,
        'handler' => 'base.handler.child_output.simple',
        'data'    => {
            'bin'           => 'impressive',
            'pid'           => <impressive.pid>,
            'log_whitelist' => [
                qr/^welcome to impressive/i,
                qr/^background rendering finished/i,
                qr/opengl (software )?renderer/i,
                qr/likely be too slow/i,
                qr/^\[INIT\]/,
                'XIO:  fatal IO error (0|11)',
                'after \d+ requests'
            ],
            'callback_patterns' =>
                { qr/^\[INIT\]/ => 'impressive.callback.delayed_lsp_stop' }
        }
    }
);

<[event.add_timer]>->(
    {   'after'   => 7.7,
        'handler' => 'impressive.callback.stop_loadsplash'    # failsafe only #
    }
) if <impressive.parser.init_tag_failed>;
