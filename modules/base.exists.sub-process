## >:] ##

# name  = base.exists.sub-process
# descr = return true when a child process of current zenka with <PID> exists

my $check_pid = shift // '';
<[base.s_warn]>->( "'%s' not a valid child pid <{C1}>", $check_pid )
    and return 0
    if $check_pid !~ m|^\d+$|
    or abs($check_pid) < 2;

my $return_code = 0;    ##  setting up for no matches  ##

##  first collecting all [other] pids  ##
while ( my $end_pid = waitpid( 0, WNOHANG() ) > 0 ) {
    ## this is to not mess up CHILD_ERROR for SIGCHLD handler ##
    <base.process.waitpid_collected>->{$end_pid} = $CHILD_ERROR;
}

my $wait_pid = waitpid( $check_pid, WNOHANG() );

$return_code = 5 if $wait_pid == 0;    ##  true,  exists  ##

return $return_code;

#,,,.,,..,,.,,,,.,.,.,..,,,,,,,..,,.,,,..,.,.,..,,...,...,.,,,,..,...,..,,.,,,
#MBZFUSFEHNNVX3PDSG52M47ZLVJN6BUJ5V6FBPPY2KKJT2JOBEMA4DVK5BZ76H7G2BQCKYEHA4QHU
#\\\|ZRSPQZXFT7EVEWGBJOCOYR3X4QVDEGWWIRMAKZRI2LPBVUCWHDO \ / AMOS7 \ YOURUM ::
#\[7]VNHJZ42E3TJ6AKJIOE66LXH7LXYOJ2YVPTDI6TW7DU7URH3PI2DA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
