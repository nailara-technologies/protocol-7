## [:< ##

# name = base.s_read
# desc = utf8 safe sysread replacement [ with optional fh_offset parameter ]
# note = buffer parameter expects passing by reference

my $read_fh    = $ARG[0];
my $buffer_ref = $ARG[1];
my $read_len   = $ARG[2];
my $fh_offset  = $ARG[3];

warn 'filehandle not defined <{C1}>' and return undef if not defined $read_fh;
warn 'buffer ref not present <{C1}>' and return undef
    if ref $buffer_ref ne qw| SCALAR |;

## no more dataoffset parameter because of UTF-8 decoding ##

## for comparison ##
#
## sysread FILEHANDLE,SCALAR,LENGTH,OFFSET
## sysread FILEHANDLE,SCALAR,LENGTH
#
## aio_read  $fh, $offset, $length, $data, $dataoffset, $callback->($retval)

my $b_read;
IO::AIO::aio_read( $read_fh, $fh_offset, $read_len, my $r_buff //= '',
    0, sub { $b_read = $ARG[0] // -1 } );

##  wait until read request has been completed  ##
while ( not defined $b_read ) { IO::AIO::poll() }

if ( $b_read > 0 ) {
    utf8::decode($r_buff);
    $b_read = length($r_buff);    ##  adjust for decoding  ##
    $buffer_ref->$* .= $r_buff;
}

return $b_read;                   ## [ returns -1 on error ] ##

#,,..,.,,,,.,,,..,,,.,...,...,.,.,,,,,.,,,,.,,..,,...,..,,.,.,,,.,.,.,,..,.,.,
#TQKHG3TI2O6S3HDC6MFOQHVLYOIG2LBOIFEZ6RKFYBJPNPI2BSNO3YANH45PE2GD6WWWCKSDIKRRS
#\\\|O32DXHF55JMY2C6B7VDJF4AADCIBYXPT7NKHOJP2QCH2FBVRO6C \ / AMOS7 \ YOURUM ::
#\[7]TRZC7JZUJLPIMPQV65DRMAXQG4FM7YQGFMTIRUZ2CVZTU6MQLCDQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
