## >:] ##

# name  = cube.cmd.select
# param = <user|sid>
# descr = append id or name to base command path

my $param      = $ARG[0]->{'args'} // '';
my $usr_sid    = $ARG[0]->{'session_id'};
my $source_usr = $data{'session'}{$usr_sid}{'user'};

return {
    'mode' => qw| false |,
    'data' => 'parameter syntax not valid [ user \ zenka \ sid ] .,'
    }
    if $param  !~ <regex.base.usr>
    and $param !~ <regex.base.sid>
    and $param !~ <regex.base.usr_subn>;

my $target_subname;
my $found      = 0;              ##  counting matches  ##
my $regex      = <regex.base>;
my $target_usr = $param;
my $append_str = $param;
if ( $param =~ $regex->{sid} and exists $data{'session'}{$param} ) {   # <sid>
    $found = 1 if exists $data{'session'}{$param};    ##  sid match  ##
} elsif ( $param =~ m|($regex->{usr_str})\[($regex->{subname})\]$| )
{    # usr[sn]
    my $match_sid;
    $target_usr     = ${^CAPTURE}[0];
    $target_subname = ${^CAPTURE}[1];
    map {
                $match_sid = $ARG
            and $found++
            if $data{'session'}{$ARG}{'user'} eq $target_usr
            and defined $data{'session'}{$ARG}{'subname'}
            and $data{'session'}{$ARG}{'subname'} eq $target_subname
        }
        keys $data{'session'}->%*;
    return {
        'mode' => qw| false |,
        'data' => 'multiple parameters are not supported yet'
        }
        if $found > 1;
    $append_str = $match_sid;
} else {    # <username>
    map { $found++ if $data{'session'}{$ARG}{'user'} eq $param }
        keys $data{'session'}->%*;
}

return {
    'mode' => qw| false |,
    'data' => $param =~ m|^\d+$|
    ? sprintf( '%d is no active session', $param )
    : sprintf( 'no %s user is present',   $target_usr )
    }
    if not $found
    or not <[base.has_access]>->( $source_usr, $target_usr );

my @base_path
    = ( defined $data{'session'}{$usr_sid}{'base_path'}
        and length $data{'session'}{$usr_sid}{'base_path'} )
    ? ( $data{'session'}{$usr_sid}{'base_path'}, $append_str )
    : ($append_str);

$data{'session'}{$usr_sid}{'base_path'} = join qw| . |, @base_path;

my $bp_str = $data{'session'}{$usr_sid}{'base_path'};
<[base.logs]>->( '[%u] <-- session base-path <-- %s', $usr_sid, $bp_str );

return {
    'mode' => qw| true |,
    'data' => sprintf(
        "base_path now '%s', 'unselect' or "
            . "'..' to reset,'..<cmd>' for parent",
        $bp_str
    )
};

#,,,.,,.,,,,.,,,,,,,.,.,.,.,.,,,,,.,,,.,.,,..,..,,...,...,...,..,,,.,,.,,,,,,,
#74LTUNCDFCEYH6ABG5ATJBHG7X2MZ5FCZEALNFZJXD3VUSAQBJIJAWZ7RCWLMOCWMWVNXZNNJ2T3G
#\\\|JOTZNTMC3ZYII7TI5ATBN5GTF4HXYZM3M3STWGI6FQJM3LIL726 \ / AMOS7 \ YOURUM ::
#\[7]KDQLQAFWSQ5PARPTVQGPXFRRXVUGPND6EAY2AIOBRPZHKMN6MCCA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
