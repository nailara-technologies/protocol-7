## [:< ##

# name  = base.referenced_subroutines.clear_from_disk

state $clean_found = TRUE;        ## for later ##
return -1 if not $clean_found;    ## keep them ##

my $report_not_cleared_names = qw| yes |;

my $removed = 0;
return $removed
    if ref <base.subroutines.referenced> ne qw| HASH |
    or not keys <base.subroutines.referenced>->%*;

my $log_level = 2;                ## verbose reporting to log buffer ##

<[base.log]>->( $log_level, 'cleaning up referenced subroutine hash ..,' );

map {
    ++$removed                    ## remove all found present in modules/  ##
        and delete <base.subroutines.referenced>->{$ARG}
        if defined <[base.chk_p7c_path]>->( sprintf qw| modules/%s |, $ARG )

} uniq <[base.sort]>->(<base.subroutines.referenced>);

<[base.logs]>->(
    $log_level,
    ': removed %s entr%s [ subroutine file%s found ] ..,',
    $removed,
    <[base.cnt_s]>->( $removed, qw| ies y | ),
    <[base.cnt_s]>->($removed)
);

my @remaining_files = <[base.sort]>->(<base.subroutines.referenced>);

if ( @remaining_files == 0 ) {
    <[base.log]>->( $log_level, ': : done. no remaining subroutine names.' );
    <[base.clean_hashref]>->(<base.subroutines>);
    delete $data{'base'}{'subroutines'}
        if not keys <base.subroutines>->%*;
    return $removed;    ## return number or cleared entries ##
} else {
    <[base.logs]>->(
        $log_level,
        ': :. %d entr%s remaining .,', scalar @remaining_files,
        <[base.cnt_s]>->( scalar @remaining_files, qw| ies y | ),

    );
}

<[base.log]>->(
    $log_level, ': checking for swap_subs statements in module init files..,'
);

my @swap_params;
my $source_dir = <system.code_path>;
my %module_checked;

$removed = 0;    ##  reset file counter  ##

foreach my $file ( <[file.match_files]>->( $source_dir, @remaining_files ) ) {
    ( my $fname_rel = $file ) =~ s|^.*/||;
    my $module_name = $LAST_PAREN_MATCH if $fname_rel =~ m|^([^\.]+)\.|;
    next
        if not defined $module_name
        or defined $module_checked{$module_name};

    $module_checked{$module_name} = 5;    ## true ##

    ## collect replacement statements ##
    my $swap_subs_href = <[file.get_swapped_subs_pairs]>->($module_name);
    @swap_params = each $swap_subs_href->%*;
    next if not @swap_params;

    foreach my $remaining_file (@remaining_files) {
        next
            if
            index( $remaining_file, sprintf( qw| %s. |, $swap_params[1] ), 0 )
            == -1;
        my $source_filename = $remaining_file;

        ## full match, remove entry from list ##
        delete <base.subroutines.referenced>->{$remaining_file}
            and ++$removed
            if $source_filename =~ s|^$swap_params[1]\.|$swap_params[0]\.|
            and defined <[base.chk_p7c_path]>->(    ## file exists ##
            sprintf qw| modules/%s |,
            $source_filename
            );
    }
}

<[base.logs]>->(
    $log_level,
    ': : removed %s entr%s [ subroutine file%s found ] ..,',
    $removed,
    <[base.cnt_s]>->( $removed, qw| ies y | ),
    <[base.cnt_s]>->($removed)
);

@remaining_files = <[base.sort]>->(<base.subroutines.referenced>); ## updating

if ( @remaining_files == 0 ) {
    <[base.log]>->( $log_level, ': : done. no remaining subroutine names.' );
    <[base.clean_hashref]>->(<base.subroutines>);
    delete $data{'base'}{'subroutines'}
        if not keys <base.subroutines>->%*;
    return $removed;    ## return number or cleared entries ##
} else {
    <[base.logs]>->(
        $log_level,
        ': . :. %d entr%s remaining .,', scalar @remaining_files,
        <[base.cnt_s]>->( scalar @remaining_files, qw| ies y | ),

    );
}

#                                          #
##  REPORTING  NOT  DEFINED  SUBROUTINES  ##
#                                          #

if ( $clean_found and <[base.cfg_bool]>->($report_not_cleared_names) ) {
    my $r_cnt    = scalar @remaining_files;
    my $s_str    = <[base.cnt_s]>->($r_cnt);
    my $subs_ref = <base.subroutines.referenced>;

    <buffer.compile-errors.max_size> //= 42 * 1024;
    <[base.buffer.add_line]>->( qw| compile-errors |, '' );

    my @l_msg_ref;    ##  { log_level => .., log_msg => .., }  ##

    push @l_msg_ref,
        {
        qw| log_level | => 0,
        qw|  log_msg  | => sprintf(
            ':: found call%s to %d non-existing subroutine%s :',
            $s_str, $r_cnt, $s_str
        )
        };

    push @l_msg_ref, { qw| log_level | => 0, qw| log_msg | => qw| : | };

    foreach my $file (@remaining_files) {

        push @l_msg_ref,
            {
            qw| log_level | => 0,
            qw|  log_msg  | => sprintf( ": undefined routine :. '%s'", $file )
            };

        my $found_in = ': :. found in .: ';
        foreach my $line ( <[base.sort]>->( $subs_ref->{$file} ) ) {

            if ( not keys $subs_ref->{$file}->{$line}->%* ) {
                <[base.logs]>->(
                    0,     ': empty hashref entry [ %s : %d ]',
                    $file, $line
                );
                next;
            }

            $found_in .= ', ' if length $found_in;
            $found_in .= sprintf '%s [ line %d ]',
                [ <[base.sort]>->( $subs_ref->{$file}->{$line} ) ]->[0],
                $line;
        }
        map {
            push @l_msg_ref, { qw| log_msg | => $ARG, qw| log_level | => 1 }
        } ( qw| : |, $found_in, qw| : | );
    }

    push @l_msg_ref, { qw| log_level | => 0, qw| log_msg | => qw| :. | };

    foreach my $msg_ref (@l_msg_ref) {
        <[base.log]>->( $msg_ref->{'log_level'}, $msg_ref->{'log_msg'} );
        <[base.buffer.add_line]>->( 'compile-errors', $msg_ref->{'log_msg'} );
    }
    <[base.buffer.add_line]>->( qw| compile-errors |, '' );

}

return $removed;    ## return number or cleared entries ##

#,,.,,,,.,.,,,..,,...,...,...,,,,,.,.,..,,..,,.,.,...,..,,...,,.,,,,,,,..,.,,,
#75B4BYVNY2KJXUZ2YKMMUTGMXGGK3KODAHMBKWAXDCASOH6IQ42GEOQBXRGJIU747X4RAFSEN2NI6
#\\\|C7ZXLXXZDKNATJJXOEHTIVRJK4VDGRGJH6SRL5W4NVW5R2DSN3A \ / AMOS7 \ YOURUM ::
#\[7]7Y6JMUIKJ6TH3H4MGEHUDIMA6DRAJ57GADK4CKQQZE3B52X7HOAQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
