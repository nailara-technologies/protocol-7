## [:< ##

# name = crypt.C25519.gen_keys

my $key_name_param      = shift;    ##  optional  ##
my $key_seed_passphrase = shift;    ##  optional  ##
my $secret_key          = shift;    ##  optional  ##

my $harmoic_public_keys = TRUE;     ##  public key truth requirement  ##

my $key_vars_ref = <[crypt.C25519.key_vars]>->($key_name_param);
my $name         = $key_vars_ref->{'key_name'};

$keys{'C25519'} //= {};

if ( defined $secret_key and length($secret_key) != 32 ) {
    warn 'secret key must be 32 bytes long';
    return undef;
} elsif ( defined $secret_key and defined $key_seed_passphrase ) {
    warn 'seed-passphrase and secret-key parameters are mutually exclusive';
    return undef;
} elsif ( exists $keys{'C25519'}->{$name} ) {
    <[base.s_warn]>->(
        "a C25519 key with name '%s' is already loaded [ skipped ]", $name
    );
    return FALSE;
}

<[base.logs]>->( 2, "generating '%s' C25519 key pair ..,", $name );

if (defined $secret_key    ##  'global-root' key  ##
    and $secret_key eq qw| 00000000000000000000000000000000 |
    ) {                    ##  filling in known values for speed-up  ##

    my $public_key = Crypt::Misc::decode_b32r join '', qw[
        DOSAOW3XZHR7WPWN4FONV5JCD4
        6BANZ6MI7XWDQ665RWNMFPOE3Q
    ];
    my $private_key = Crypt::Misc::decode_b32r join '', qw[
        TC3NCKDIFYUAW5FTETF
        IFJV243UKH5YXJYDALP
        6VF24ZJD5NRFCIKTWAR
        53FF4ZAKXCKT4JLNGW5
        JBIEQHMVAOT7EISVAFT
        R2YJEMSA
    ];
    $keys{'C25519'}{$name} = {
        qw| secret |      => $secret_key,
        qw| public |      => $public_key,
        qw| private |     => $private_key,
        qw| checksum |    => qw| <:VAESDLQ:22HJMWY:> |,
        qw| time-loaded | => <[base.ntime.b32]>->( 1, TRUE )
    };

    goto SKIP_GENERATING;
}
##

$secret_key //= AMOS7::13::key_32( \$key_seed_passphrase, \$name )
    if defined $key_seed_passphrase;    ##  using entropy of key name  ##

if ( defined $key_seed_passphrase and not length( $secret_key // '' ) ) {
    warn 'error while derriving secret key from passphrase <{C1}>';
    return undef;
}

##  or create from random input [ Crypt::PRNG::Fortuna ]  ##
##
$secret_key //= <[base.prng.bytes]>->(32); ##  when no passphrase supplied  ##

my $TRUE = $harmoic_public_keys ? FALSE : TRUE;  ##  need truth assertion?  ##

my ( $public_key, $private_key );

while ( not $TRUE ) {    ##  harmonic [ true ] public keys  ##
    <[event.once]>->(0.007);
    $public_key = Crypt::Ed25519::eddsa_public_key($secret_key);

    $TRUE = TRUE         ## true ##
        if AMOS7::Assert::Truth::is_true( \$public_key, FALSE, TRUE )
        and AMOS7::Assert::Truth::is_true( \encode_b32r($public_key),
        FALSE, TRUE );

    if ( not $TRUE and not defined $key_seed_passphrase ) {

        $secret_key = <[base.prng.bytes]>->(32);    ##  re-generate seed  ##

    } elsif ( not $TRUE ) {

        my $altered_key_entropy   ##  regen secret key based on user input  ##
            = sprintf( qw| %s.:%s |, $key_seed_passphrase, $secret_key );

        $secret_key = AMOS7::13::key_32( \$altered_key_entropy, \$name );
    }
}

( $public_key, $private_key ) = Crypt::Ed25519::generate_keypair($secret_key);

$keys{'C25519'}->{$name} = {
    qw| public |      => $public_key,
    qw| secret |      => $secret_key,     ##[  32B secret key  ]##
    qw| private |     => $private_key,    ##[  C25519 private key  ]##
    qw| time-loaded | => <[base.ntime.b32]>->( 1, TRUE )
};

##  already filled in at start  ##
##
SKIP_GENERATING:

##  lock key in memory to not never swap it to disk  ##
IO::AIO::aio_mlock( $keys{'C25519'}{$name}{'private'}, 0, 64 );
IO::AIO::aio_mlock( $keys{'C25519'}{$name}{'secret'},  0, 32 )
    if defined $keys{'C25519'}{$name}{'secret'};

return ( $keys{'C25519'}->{$name}, $name );    ##[ success ]##

#,,,.,,.,,,,.,..,,..,,..,,..,,,,.,,,.,,,,,,,,,..,,...,...,.,.,,.,,.,.,.,,,,.,,
#75GH2POCVREBNZTH6YN5SAU5BCMNIFZUNHD5BNFTNLY6OC352OWEBYKPV5LHIKS5LAZBGBC3VDXTW
#\\\|7CHVUWIGWAPYNEMU7E4IPKRZEQTZLD3YQJJIHL7DS3O25PVNW2P \ / AMOS7 \ YOURUM ::
#\[7]527S6I2MIZ6FDPNMHNDSJFWKIYDGMY6UOEV2T6HKBSPUIIBQBMAI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
