## [:< ##

# name = crypt.C25519.gen_keys

my $secret_key;
my $key_name_param      = shift;    ##  optional  ##
my $key_seed_passphrase = shift;    ##  optional  ##

my $key_vars_ref = <[crypt.C25519.key_vars]>->($key_name_param);
my $name         = $key_vars_ref->{'key_name'};

$keys{'C25519'} //= {};

if ( exists $keys{'C25519'}->{$name} ) {
    <[base.s_warn]>->(
        "a C25519 key with name '%s' is already loaded [ skipped ]", $name
    );
    return FALSE;
}

<[base.logs]>->( 2, "generating '%s' C25519 key pair ..,", $name );

$secret_key = AMOS7::13::key_32( \$key_seed_passphrase, \$name )
    if defined $key_seed_passphrase;    ##  using entropy of key name  ##

if ( defined $key_seed_passphrase and not length( $secret_key // '' ) ) {
    warn 'error while derriving secret key from passphrase <{C1}>';
    return undef;
}

##  or create from random input [ Crypt::PRNG::Fortuna ]  ##
##
$secret_key //= <[base.prng.bytes]>->(32); ##  when no passphrase supplied  ##

my $TRUE = FALSE;                          ##  false  ##
my ( $public_key, $private_key );

while ( not $TRUE ) {
    <[event.once]>->(0.007);
    $public_key = Crypt::Ed25519::eddsa_public_key($secret_key);

    $TRUE = TRUE    ## true ##
        if AMOS7::Assert::Truth::is_true( \$public_key, FALSE, TRUE )
        and AMOS7::Assert::Truth::is_true( \encode_b32r($public_key),
        FALSE, TRUE );

    $TRUE = FALSE    ##  additional requirements if seed entropy given  ##
        if $TRUE
        and defined $key_seed_passphrase
        and (
        not AMOS7::Assert::Truth::is_true( \$secret_key, FALSE, TRUE )
        or not AMOS7::Assert::Truth::is_true(
            \unpack( qw| B* |, $secret_key ),
            FALSE, TRUE
        )
        );

    if ( not $TRUE and not defined $key_seed_passphrase ) {

        $secret_key = <[base.prng.bytes]>->(32);    ##  re-generate seed  ##

    } elsif ( not $TRUE ) {

        my $altered_key_entropy   ##  regen secret key based on user input  ##
            = sprintf( qw| %s.:%s |, $key_seed_passphrase, $secret_key );

        $secret_key = AMOS7::13::key_32( \$altered_key_entropy, \$name );
    }
}

( $public_key, $private_key ) = Crypt::Ed25519::generate_keypair($secret_key);

$keys{'C25519'}{$name} = {
    'name'       => $name,
    'public'     => $public_key,
    'private'    => $private_key,    ##[  C25519 private key  ]##
    'secret_key' => defined $key_seed_passphrase ? undef : $secret_key
};    ##  source entropy only when not passphrase  ##

##  lock key in memory to not never swap it to disk  ##
IO::AIO::aio_mlock( $keys{'C25519'}{$name}{'private'},    0, 64 );
IO::AIO::aio_mlock( $keys{'C25519'}{$name}{'secret_key'}, 0, 32 )
    if defined $keys{'C25519'}{$name}{'secret_key'};

return ( $keys{'C25519'}->{$name}, $name );    ##[ success ]##

#,,,.,,..,,,.,,,,,...,...,.,,,.,.,.,.,.,,,,..,..,,...,...,..,,...,.,.,.,.,.,.,
#XNKV3H2PLNDNYZIBSBZ2VFMBBKSNG6ADL7XGTIYY6YCZJAJYXNQE63D4RUFYRQP5FSSPHXMHPE5ZG
#\\\|X5LPSTOOYBO3YVEB3YVEVELNRENR4NYYDPSWXCTNQZ5DWX7DPPA \ / AMOS7 \ YOURUM ::
#\[7]IEKPKFRL4YYXYZKSZUCA3VEAC27VRITUZDRKCFPTT7MCXF5SXWBQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
