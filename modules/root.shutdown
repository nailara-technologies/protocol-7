# >:]

# name  = root.shutdown
# descr = shut down root agent with optional failure message

my $reason = shift // '';
my $exit_code = length($reason) ? 1 : $?;
my $log_level = length($reason) ? 0 : 1;
my $child_count   = keys %{<root.child>};
my $kill_timeout  = <system.kill_timeout> || 3;    # floating seconds
my $abort_timeout = 1;

map { $child_count += scalar @{ <[root.process.get_children]>->($_) } }
    keys %{<root.child>};

while ( ( waitpid( -1, WNOHANG ) ) > 0 ) {
    $child_count--;
}

my $ren = $child_count == 1 ? ' process' : 'ren';
$reason = "$child_count child$ren" if !length($reason) and $child_count;
my $reason_txt = length($reason) ? " ( $reason )" : '';

<[base.log]>->( $log_level, "root agent shutdown" . $reason_txt );

<[base.log]>->( 1, ": terminating child$ren :." )
    if $child_count and <system.verbosity> == 1;

my $t_res = 3;
foreach my $pid ( sort keys %{<root.child>} ) {
    my $i_id = <root.child>->{$pid}->{'instance_id'};
    my $instance_str = $i_id ? " ( instance $i_id )" : '';

    my @children = @{ <[root.process.get_children]>->($pid) };

    if ( kill( 15, $pid ) ) {
        <[base.log]>->( 2, ": <TERM> process $pid" . $instance_str );
        <root.child>->{$pid}->{'term_sent'} = <[base.time]>->($t_res);
        my $ren = scalar @children == 1 ? '' : 'ren :';
        <[base.log]>->( 1, ": <TERM> child$ren " . join( ', ', @children ) )
            if @children;
        kill( 15, @children );
    } else {
        delete <root.child>->{$pid};
    }
}

while ( keys %{<root.child>} ) {
    foreach my $pid ( sort keys %{<root.child>} ) {
        my $delta_t
            = <[base.time]>->($t_res) - <root.child>->{$pid}->{'term_sent'};
        if ( $delta_t >= ( $kill_timeout + $abort_timeout ) ) {
            <[base.log]>->( 0, "ABORT TIMEOUT during process shutdown!" );
            exit(1);
        } elsif ( $delta_t >= $kill_timeout
            and not exists <root.child>->{$pid}->{'kill_sent'} ) {
            my @children;
            my $proc_table = new Proc::ProcessTable;
            foreach my $proc ( @{ $proc_table->table } ) {
                push( @children, $proc->{'pid'} )
                    if $proc->{'ppid'} == $pid;
            }
            <[base.log]>->( 1, ": <KILL> process $pid" );
            kill( 9, $pid );    # XXX: 15 + timeout
            my $ren = scalar @children == 1 ? '' : 'ren :';
            <[base.log]>->( 1, ": <KILL> child$ren " . join( ', ', @children ) )
                if @children;
            kill( 9, @children );
            <root.child>->{$pid}->{'kill_sent'} = 1;
        }
    }
    while ( ( my $w_pid = waitpid( -1, WNOHANG ) ) > 0 ) {
        delete <root.child>->{$w_pid};
    }
    <[base.sleep]>->(0.042);
}

<[base.log]>->( 1, ": done." );
exit($exit_code);
