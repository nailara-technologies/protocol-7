## [:< ##

# name  = X-11.background.chksum-cache.reload_from_file

my $cache_filename = <X-11.path.chksum_cache_name>;
return undef if not defined $cache_filename;

my $cache_file_path_abs = sprintf qw| %s/%s/%s |,
    <system.path.zenka-dirs.var_P7>, <system.zenka.name>,
    $cache_filename;

return undef if not -f $cache_file_path_abs;

<[base.log]>->( 2, ': loading image path chksum cache from disk..,' );

my $cache_content_scalar_ref = <[file.zenka_dir.load]>->($cache_filename);
if ( ref $cache_content_scalar_ref ne qw| SCALAR | ) {
    warn 'bg-image filename chsum cache reload failed <{C1}>';
    return undef;
}

my $amos7_checksum_cache = {};

chomp $cache_content_scalar_ref;

foreach my $line ( split "\n", $cache_content_scalar_ref->$* ) {
    if ( $line !~ m|^([A-Z2-7]{7}):(/.+)$| ) {
        warn 'error in filename chsum cache format <{C1}>';
        return undef;
    } else {
        $amos7_checksum_cache->{ ${^CAPTURE}[0] } = ${^CAPTURE}[1];
    }
}

<[base.logs]>->(
    2,
    ': :. chksum cache loaded, %03d entries .,',
    scalar $amos7_checksum_cache->%*
);

<X-11.cache.bg-images.amos-path-csum> = $amos7_checksum_cache;

<[X-11.bg-image.clean-up-cache]>;    ##[ removing non-existing entries ]##

return TRUE;

#,,,.,...,,.,,.,.,..,,,.,,,,,,..,,.,,,,,.,..,,.,.,...,...,..,,.,.,,,,,.,.,.,.,
#5FFYNORSE43LN6PV3QFVJCBJMELJLFZ3VWUE5RONZGN6XK3WU6UM6Y4VUXGXY5WCITEW5UZ2TBAYK
#\\\|Q5YYWIDNWV356CZGFNAPREQDL4NBWFWL2EH4GRNTAMV6VKUMADO \ / AMOS7 \ YOURUM ::
#\[7]NWUO2NW2EF2HFK4UXQPG6ARLLANTCJT5OB7CX2TWQTT5ZP5XAEAQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
