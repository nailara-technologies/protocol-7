## [:< ##

# name  = base.chk-sum.elf.vax-BASE32.true
# descr = return next true BASE32 encoded elf hash value [ VAX num ]

my $input_string = join( ' ', @ARG );    ## combines words to sentence ##

my $elf_checksum;
my $encoded_string;
my $B32_elf_checksum;

my $max_rounds = 31;    ##  limiting calulation iterations  ##

$elf_checksum   = <[chk-sum.elf]>->($input_string);
$encoded_string = encode_b32r( pack qw| V |, $elf_checksum );

my $template = qw| %s::%s::%s |;

my $calc_input
    = sprintf( $template, $encoded_string, $input_string, $elf_checksum );

RECALC:

$elf_checksum     = <[chk-sum.elf]>->($calc_input);
$encoded_string   = encode_b32r( pack qw| V |, $elf_checksum );
$B32_elf_checksum = <[chk-sum.elf]>->($encoded_string);

if (
    (      not AMOS7::Assert::Truth::calc_true($elf_checksum)
        or not AMOS7::Assert::Truth::calc_true($B32_elf_checksum)
    )
    and $max_rounds--
    ) {    ## ..230769.., == false ..,

    ## change input with entropy from previous result ##
    $elf_checksum = sprintf qw| %09d |,
        $elf_checksum ^ <[chk-sum.elf]>->($calc_input);

    $calc_input = sprintf $template, $encoded_string, $input_string,
        $elf_checksum;

    goto RECALC;
}

return $encoded_string;

#,,.,,,,,,,.,,.,,,..,,,,.,,,,,,..,...,,.,,,,,,..,,...,..,,.,,,,.,,,.,,,,,,,,.,
#YSSBNUZ4OMMJM2CCMSEYYIPVY76P2KRH4JET7XME5E62N7LK25FTFKF2AXTJNDOUIKO74USJKWM6Q
#\\\|VSJA4TM35KMCO27JHVJGT2TWWCYY5IJEMD5DKNFZG7KZYMRDOM3 \ / AMOS7 \ YOURUM ::
#\[7]745A6TUJRLPBI4ZHXIGXWF36PFJBK6Y4TAUL3BWHWAHMBUC56MDY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
