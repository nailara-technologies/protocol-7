## [:< ##

# name  = v7.post_init
# descr = starts configured zenki

my $module_reinitialization = shift;

my $tmp_dir_owner = <system.amos-zenka-user>;
<v7.dirpath.tmp_paths> //= qw| /var/run/.7/v7/tmp_paths |;

<[file.make_path]>->( <v7.dirpath.tmp_paths>, 0775, $tmp_dir_owner );

<[v7.cleanup_temp_files]> if not $module_reinitialization;

if ( ref <v7.start_setup.zenki.startup.start_order> ne qw| ARRAY |
    or <v7.start_setup.zenki.startup.start_order>->@* == 0 ) {
    <[base.log]>->( 0, ':. no zenki to start found, giving up..,' );
    <[v7.teardown]>;    ## abort start-up ##
}

my $zenka_config = <v7.start_setup.zenki.config> // {};
my @all_zenki    = <[base.sort]>->($zenka_config);
my @start_zenki  = <v7.start_setup.zenki.startup.start_order>->@*;

## start_order needs dependency type sort order [ currently base.sort ] ##

#### say Dumper( \@start_zenki ); <[base.exit]>;

my $prev_all   = <v7.init_state.all_zenki>   //= [];
my $prev_start = <v7.init_state.start_zenki> //= [];

<v7.zenki.available> = {};    # <-- ::: reset on reload :::

## locate zenka config files and extract descriptions ##

my @found_zenki = <[v7.available_zenki]>;

(   <v7.zenki.found_types.no_start_cfg> = [],
    <v7.zenki.found_types.no_cfg_file> = []
) = <[base.diff_array]>->( \@all_zenki, \@found_zenki );

# prepare configured zenka startup sequence
my ( $added_start_ref, $removed_start_ref )
    = <[base.diff_array]>->( $prev_start, \@start_zenki );
my ( $added_all_ref, $removed_all_ref )
    = <[base.diff_array]>->( $prev_all, \@all_zenki );

<v7.init_state.all_zenki>   = \@all_zenki;
<v7.init_state.start_zenki> = \@start_zenki;

## requires time based decrease --> implement ##
# <[v7.calc_prefix_lengths]>->( qw| v7 cube |, @start_zenki );

<[v7.calc_prefix_lengths]>->(qw| v7 cube |);    # <-- running, not start

if ( @{$added_all_ref} ) {
    <[v7.set_up_zenka_dependencies]>->( @{$added_all_ref} );
    <[v7.set_up_ondemand_zenki]>->( @{$added_all_ref} );
}

map { <[base.clean_hashref]>->( $zenka_config->{$ARG} ) } @all_zenki;

if (    exists <system.subs_loaded.devmod>
    and <system.subs_loaded.devmod> > 1
    and <system.verbosity.console> > 4 ) {
    ( my $devmod_str = Dumper($zenka_config) ) =~ s{^.{7}|;$}{  }mg;
    print "\n < v7.start_setup.zenki.config >\n\n$devmod_str\n";
}

map { <[v7.autostart_zenki]>->($ARG) if !<[v7.start_count]>->($ARG) }
    $added_start_ref->@*;

print Dumper( $data{'jobqueue'} )
    if exists <system.subs_loaded.devmod>
    and <system.subs_loaded.devmod> > 1
    and <system.verbosity.console> > 4;

0;

#,,.,,.,,,.,,,,.,,,,,,,..,,.,,...,.,,,.,,,,..,..,,...,...,,..,.,,,.,,,,,.,.,,,
#D7N2BV345TG3BDPR5R3K36GT6GPBEIEK5Q4D3FDQJEOU4BJ4PGAKVFQTA5KCGZDSNYZVIK7HISYRQ
#\\\|YMV77YTGJMU355US57GQ66FPZLDODK6LCEUL2WRDDHKMXNQBVWO \ / AMOS7 \ YOURUM ::
#\[7]EWJOI3TE634N7SMK3K4WXDV5HHGPDZRCDJG7L34CUSV5UV35Y4AY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
