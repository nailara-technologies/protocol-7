## >:] ##

# name = crypt.C25519.write_keys

my $key_vars = <[crypt.C25519.key_vars]>->(shift); # <-- <key_name> [optional]
my $key_password = shift;                          ##  optional  ##

my $uid          = $key_vars->{'uid'};
my $gid          = $key_vars->{'gid'};
my $key_usr      = $key_vars->{'usr_name'};
my $usr_hdir     = $key_vars->{'usr_home'};
my $key_name     = $key_vars->{'key_name'};
my $key_basepath = $key_vars->{'key_basepath'};

foreach my $keyfile_extension (qw|  public  secret  |) {
    my $file_name = join( qw| . |, $key_basepath, $keyfile_extension );
    next if not -f $file_name;
    $file_name =~ s|^.*\/||;

    say sprintf "%s :", $AMOS7::C{'0'}
        if <system.zenka.name> eq qw| keys |
        and not <system.verbosity.console>;

    <[base.logs]>->( 0, 'key %s exists.', $file_name );
    <[base.log]>->( 0, ':.. cannot not overwrite it.' );
    return 0;
}

my @keys_binary;
my $keywrite_status = 5;    ## true ##
foreach my $type (qw|  private  public  |) {

    my $keyfile_extension
        = $type eq qw| private | ? qw| secret | : qw| public |;

    my $file_name = join( qw| . |, $key_basepath, $keyfile_extension );
    my $tmp_fname = join( qw| . |, $file_name,    $PID, <[base.ntime.b32]> );
    open( my $key_fh, qw|>|, $tmp_fname ) or die "\l$OS_ERROR [ $tmp_fname ]";
    if ( $type eq qw| public | ) {
        chmod( 0640, $tmp_fname ) or die "< chmod 0640 > \l$OS_ERROR";
    } else {
        chmod( 0600, $tmp_fname ) or die "< chmod 0600 > \l$OS_ERROR";
    }

    my $key_bin_str = $keys{'C25519'}{$key_name}{$type};

    push @keys_binary, $key_bin_str if wantarray;  ##  for checksums below  ##

    ##[  encrypting key before write  ]##
    ##
    if ( $type eq qw|  private  | and defined $key_password ) {

        my $enc_key = AMOS7::13::key_32( \$key_password );

        if ( not defined $enc_key or not length $enc_key ) {
            warn 'error during file enc key derivation <{C1}>';
            return undef;
        }
        my $status
            = AMOS7::Twofish::key_init( $enc_key, qw| encryption C25519 | );

        if ( not defined $status or not $status ) {
            warn 'error during file encryption key initialization <{C1}>';
            return undef;
        }
        my $enc_C25519_sref
            = AMOS7::Twofish::encrypt( qw| C25519 |, \$key_bin_str );

        if (   not defined $enc_C25519_sref
            or ref $enc_C25519_sref ne qw| SCALAR |
            or not length $enc_C25519_sref->$* ) {
            warn 'key encryption error <{C1}>';
            return undef;
        }

        my $key_str_b32    ##  marking as encrypted key  ##
            = encode_b32r( sprintf qw| .:%s |, $enc_C25519_sref->$* );
        if ( not defined $key_str_b32 or not length $key_str_b32 ) {
            warn 'error during C25519 key encoding [BASE32] <{C1}>';
            return undef;
        }

        ##  encrypted key has '.:' prefix [ binary ]  ##
        ##
        print {$key_fh} $key_str_b32;    ##[  has no linefeed  ]##

    } elsif ( $type eq qw|  private  | ) {
        my $key_str_b32 = encode_b32r( sprintf qw| U:%s |, $key_bin_str );
        if ( not defined $key_str_b32 or not length $key_str_b32 ) {
            warn 'error during C25519 key encoding [BASE32] <{C1}>';
            return undef;
        }

        ##  unencrypted key has 'U:' prefix [ binary ]  ##
        ##
        print {$key_fh} $key_str_b32;    ##[  has no linefeed  ]##

    } else {    ##[ public key has a linefeed  ]##
        print {$key_fh} sprintf "%s\n", encode_b32r($key_bin_str);
    }

    close($key_fh)                   or die "\l$OS_ERROR [ $file_name ]";
    rename( $tmp_fname, $file_name ) or die "\l$OS_ERROR [ $file_name ]";
    chown( $uid, $gid, $file_name )  or warn "\l$OS_ERROR [ $file_name ]";

    $keywrite_status = 0 if not -f $file_name;    ##  false  ##

    <[base.logs]>->( ": %s", $file_name );
}

if (wantarray) {    ##  return key[s] checksum in list context  ##

    my $key_checksum = <[crypt.C25519.key_checksums]>->(@keys_binary);
    return ( $keywrite_status, $key_checksum );

} else {
    return $keywrite_status;
}

#,,,.,..,,,..,,..,,,,,.,,,.,,,,,.,,,.,.,.,.,,,..,,...,...,,.,,,..,.,,,.,.,,,,,
#OOEQ4NAQWJBUZV3DPARVOVPUWOUWIA5ZFJ7VNQ5SZGX7QMHVLK3K534OBENQOMMJ7OS2TPTTAJA2G
#\\\|HU6HS5TLJ22VTJDF6CPTW7AP7CPU2NU5BQB5L42FYNTZXDHVVD5 \ / AMOS7 \ YOURUM ::
#\[7]JVRXABED5Z7TMXTHIZES2KGI2DUE6CMCA3RX3MJTGWEDA4A4M2AA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
