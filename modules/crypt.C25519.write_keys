## >:] ##

# name = crypt.C25519.write_keys

my $key_vars = <[crypt.C25519.key_vars]>->(shift); # <-- <key_name> [optional]

my $uid          = $key_vars->{'uid'};
my $gid          = $key_vars->{'gid'};
my $key_usr      = $key_vars->{'usr_name'};
my $usr_hdir     = $key_vars->{'usr_home'};
my $key_name     = $key_vars->{'key_name'};
my $key_basepath = $key_vars->{'key_basepath'};

foreach my $type (qw|  public  secret  |) {
    my $file_name = join( qw| . |, $key_basepath, $type );
    next if not -f $file_name;
    $file_name =~ s|^.*\/||;
    <[base.log]>->( 0, "<< ! >> key file '$file_name' exists .," );
    <[base.log]>->( 0, "   :..  not overwriting .," );
    return 0;
}
foreach my $type (qw|  secret  public  |) {
    my $file_name = join( '.', $key_basepath, $type );
    my $tmp_fname = join( '.', $file_name,    $PID, <[base.ntime.b32]> );
    open( my $key_fh, '>', "$tmp_fname" ) or die "\l$OS_ERROR [ $tmp_fname ]";
    if ( $type eq 'public' ) {
        chmod( 0640, $tmp_fname ) or die "< chmod 0640 > \l$OS_ERROR";
    } else {
        chmod( 0600, $tmp_fname ) or die "< chmod 0600 > \l$OS_ERROR";
    }
    my $key_str_b32 = encode_b32r( $keys{'C25519'}{$key_name}{$type} );
    printf( {$key_fh} "%s\n", $key_str_b32 );
    close($key_fh);
    rename( "$tmp_fname", $file_name ) or die "\l$OS_ERROR [ $file_name ]";
    chown( $uid, $gid, $file_name )    or warn "\l$OS_ERROR [ $file_name ]";

    <[base.log]>->( 1, ": $file_name" );
}
return 1;

#,,..,.,,,,,,,..,,.,.,,,.,.,.,.,,,..,,,..,.,,,..,,...,..,,..,,..,,,,,,..,,,,.,
#RMBEJ2YP3QL7KVBOKN26IXSCQHQQ3GXM26QFYQPUOYDTTP6ZAJUZOEBAGUZHCNDF7J4U7AWRVVPNA
#\\\|UZOPRCI57VHDR36PYUWCHG5T7SVHX4XHBXMQCQA527BTGJEAJTZ \ / AMOS7 \ YOURUM ::
#\[7]WGVUEAUFRON7PCUQ6BRUSQIVUN73DZLN7U5H45IH6KGA2AOZWCBI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
