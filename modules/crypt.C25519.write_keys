## >:] ##

# name  = crypt.C25519.write_keys
# descr = write keys to disk and encrypt or erase from mem [default]

my $name_param   = shift;            ##  optional  ##
my $key_password = shift;            ##  optional  ##
my $erase_keys   = shift // TRUE;    ##  set to FALSE to keep keys loaded  ##

my $key_vars_ref = <[crypt.C25519.key_vars]>->($name_param);

my $uid          = $key_vars_ref->{'uid'};
my $gid          = $key_vars_ref->{'gid'};
my $key_usr      = $key_vars_ref->{'usr_name'};
my $usr_hdir     = $key_vars_ref->{'usr_home'};
my $name         = $key_vars_ref->{'key_name'};
my $key_basepath = $key_vars_ref->{'key_basepath'};

foreach my $keyfile_extension (qw|  public  secret  |) {
    my $file_name = join( qw| . |, $key_basepath, $keyfile_extension );
    next if not -f $file_name;
    $file_name =~ s|^.*\/||;

    say sprintf "%s :", $AMOS7::C{'0'}
        if <system.zenka.name> eq qw| keys |
        and not <system.verbosity.console>;

    <[base.logs]>->( 0, 'key %s exists.', $file_name );
    <[base.log]>->( 0, ':.. cannot not overwrite it.' );
    return FALSE;
}

my @keys_binary;
my $pubkey_L13_sum;
my $priv_key_L13_sum;
my $keywrite_status = TRUE;
foreach my $type (qw|  private  public  |) {

    my $keyfile_extension
        = $type eq qw| private | ? qw| secret | : qw| public |;

    my $file_name = join( qw| . |, $key_basepath, $keyfile_extension );
    my $tmp_fname = join( qw| . |, $file_name,    $PID, <[base.ntime.b32]> );
    open( my $key_fh, qw|>|, $tmp_fname ) or die "\l$OS_ERROR [ $tmp_fname ]";
    if ( $type eq qw| public | ) {
        chmod( 0640, $tmp_fname ) or die "< chmod 0640 > \l$OS_ERROR";
    } else {
        chmod( 0600, $tmp_fname ) or die "< chmod 0600 > \l$OS_ERROR";
    }

    my $key_bin_str = $keys{'C25519'}->{$name}->{$type};

    if ( not defined $key_bin_str or not length $key_bin_str ) {
        <[base.s_warn]>->(
            '%s key [ %s ] is not defined \ empty <{C1}>',
            $type, $name
        );
        return undef;
    }

    push @keys_binary, $key_bin_str if wantarray;  ##  for checksums below  ##

    ##[  encrypting key before write  ]##
    ##
    if ( $type eq qw|  private  | and defined $key_password ) {

        my $enc_key = AMOS7::13::key_32( \$key_password );

        if ( not defined $enc_key or not length $enc_key ) {
            warn 'error during file enc key derivation <{C1}>';
            return undef;
        }
        my $status
            = AMOS7::Twofish::key_init( $enc_key, qw| encryption C25519 | );

        if ( not defined $status or not $status ) {
            warn 'error during file encryption key initialization <{C1}>';
            return undef;
        }
        my $enc_C25519_sref
            = AMOS7::Twofish::encrypt( qw| C25519 |, \$key_bin_str );

        if (   not defined $enc_C25519_sref
            or ref $enc_C25519_sref ne qw| SCALAR |
            or not length $enc_C25519_sref->$* ) {
            warn 'key encryption error <{C1}>';
            return undef;
        }

        my $key_str_b32    ##  marking as encrypted key  ##
            = encode_b32r sprintf qw| .:%s |, $enc_C25519_sref->$*;
        if ( not defined $key_str_b32 or not length $key_str_b32 ) {
            warn 'error during C25519 key encoding [BASE32] <{C1}>';
            return undef;
        }

        ##  encrypted key has '.:' prefix [ binary ]  ##
        ##
        print {$key_fh} sprintf "%s\n", $key_str_b32;

        ##  no cache chksum entries for encrypted key pairs  ##

    } elsif ( $type eq qw|  private  | ) {

        my $key_str_b32 = encode_b32r sprintf qw| U:%s |, $key_bin_str;

        if ( not defined $key_str_b32 or not length $key_str_b32 ) {
            warn 'error during C25519 key encoding [BASE32] <{C1}>';
            return undef;
        }

        ##  unencrypted key has 'U:' prefix [ binary ]  ##
        ##
        print {$key_fh} sprintf "%s\n", $key_str_b32;

        $priv_key_L13_sum = <[chk-sum.bmw.L13-str]>->($key_str_b32);

    } else {
        my $key_str_b32 = encode_b32r $key_bin_str;
        print {$key_fh} sprintf "%s\n", $key_str_b32;

        $pubkey_L13_sum = <[chk-sum.bmw.L13-str]>->($key_str_b32);
    }

    close($key_fh)                   or die "\l$OS_ERROR [ $file_name ]";
    rename( $tmp_fname, $file_name ) or die "\l$OS_ERROR [ $file_name ]";
    chown( $uid, $gid, $file_name )  or warn "\l$OS_ERROR [ $file_name ]";

    $keywrite_status = FALSE if not -f $file_name;    ##  false  ##

    <[base.logs]>->( ": %s", $file_name );
}

if (wantarray) {    ##  return key[s] checksum in list context  ##

    my $key_checksum = <[crypt.C25519.key_checksums]>->(@keys_binary);

    if ( not defined $key_password ) {    ##  when not encrypted  ##

        ##  adding chksum cache entries  ##
        <[crypt.C25519.chksum_cache.add]>->(    ##  for private key  ##
            $priv_key_L13_sum, $key_checksum
        ) if defined $priv_key_L13_sum;

        <[crypt.C25519.chksum_cache.add]>->( $pubkey_L13_sum, $key_checksum )
            if defined $pubkey_L13_sum;         ##  for pub-key  ##

        ##  adding binary key str chksum entry  ##
        foreach my $key_str (@keys_binary) {
            <[crypt.C25519.chksum_cache.add]>->(
                <[chk-sum.bmw.str-b32.L13]>->($key_str),
                $key_checksum
            );
        }
    }

    ##  erase keys from memory  ##
    ##
    if ($erase_keys) {
        <[crypt.C25519.del_keys_hash_entry]>->( $name, TRUE );  ##[ silent ]##
    }

    ##[  return status and key chksum  ]##
    return ( $keywrite_status, $key_checksum );

} else {

    ##  erase keys from memory  ##
    ##
    if ($erase_keys) {
        <[crypt.C25519.del_keys_hash_entry]>->( $name, TRUE );  ##[ silent ]##
    }

    return $keywrite_status;    ## return write success status ##
}

#,,,.,,,.,,,.,,,.,,,.,...,..,,,,.,...,...,,,,,..,,...,...,...,,,,,.,,,,,,,,.,,
#5MVLUBZT54IMHYLKIHEYSOO5LG57FYDVQTRTIL425WEHNIV3BBP76CXNKCDZCBIHNXVX6O33WJK6G
#\\\|IVERPS7PHLZN4U5RY6LYFUP5DXIMBIYU2WENWK6QNRR4IEVPMD7 \ / AMOS7 \ YOURUM ::
#\[7]GWZ5X4KUJVRMVJQS64WDAFTKW53FIJZUW4Q73FXN3EDDP3YXBOAQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
