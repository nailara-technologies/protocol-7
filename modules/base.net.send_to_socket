## >:] ##

# name  = base.net.send_to_socket
# descr = write data to client
# args  = filehandle, data [string]

my $send_fh      = shift;
my $payload_sref = $ARG[0];    ##  not shifted for referencing  ##

if ( not defined $send_fh ) {
    warn 'send_fh param not defined <{C1}>';
    return undef;
} elsif ( not defined $payload_sref ) {
    warn 'payload param not defined <{C1}>';
    return undef;
} elsif ( not length ref $payload_sref ) {
    $payload_sref = \shift;    ## scalar reference to argument ##
}

if ( fileno $send_fh ) {

    my $cid = ( defined $data{'handle'}->{$send_fh}
            and defined $data{'handle'}->{$send_fh}->{'cid'} )
        ##  has client session entry  ##
        ? $data{'handle'}->{$send_fh}->{'cid'}
        ##  fh without session  ##
        : undef;

    my $size_written = -1;
    if (    defined $data{'handle'}->{$send_fh}
        and defined $cid    ## has session ##
        and <[base.is_defined_recursive]>->(
            sprintf qw| session.%d.output.handler |, $cid
        )
    ) {
        my $output_handler_cb
            = $data{'session'}->{$cid}->{'output'}->{'handler'};

        if ( defined $code{$output_handler_cb} ) {

            ##  check if write was complete [ blocking ]  ##  [ LLL ]
            ###
            $size_written = <[base.s_write]>->(
                $send_fh, $code{$output_handler_cb}->( $payload_sref->$* )
            );

        } else {
            <[base.logs]>->(
                0, "[%s] output handler '%s' is not defined", $send_fh
            );
            $data{'session'}->{$cid}->{'output'}->{'handler'} = undef;
            <[base.session.shutdown]>->( $cid, 'filter chain error' );
            return 2;
        }
    } else {    ##  write directly  ##

        ##  check if write was complete [ blocking ]  ##  [ LLL ]
        ###
        $size_written = <[base.s_write]>->( $send_fh, $payload_sref );
    }

    if ( $size_written > 0 ) {

        if ( defined $cid ) {
            $data{'session'}->{$cid}->{'bytes'}->{'in'} += $size_written;
        }
        $data{'handle'}->{$send_fh}->{'bytes'}->{'in'} += $size_written;

    } elsif ( $size_written == 0 ) {    ## nothing written \ fh buffer full ##
        <[base.s_warn]>->(
            '[%s] remote not ready to write to, please make write async !!!',
            scalar( $cid // $send_fh )
        );

        $data{'session'}->{$cid}->{'flush_shutdown'} = 5 if defined $cid;

        eval { $send_fh->close() };    ##  forcing an exception  ##
        return 2;

    } else {    ##  write error \ recipient fh gone. ##
        <[base.s_warn]>->(
            'write error in base.net.send_to_socket on %s <{C1}>', $send_fh
        );
        if ( defined $cid ) {
            $data{'session'}->{$cid}->{'shutdown'} = 5;    ## true ##
        } else {
            eval { $send_fh->close() }    ##  forcing an exception  ##
        }
        return 2;
    }
    return 0;
} else {
    <[base.logs]>->( 0, '[%s] cannot send to socket', $send_fh );
    return 2;
}

#,,,,,,,,,,,,,,..,,,.,.,.,.,.,,,,,,..,,..,,..,..,,...,..,,..,,,,.,.,.,..,,,.,,
#R7TW3HSCTF3V43MQA72T3SNAGQMQSFPPWFO2V2CIHQ2TYNOGZB6KSIBXPXO2SDTPEGXHUO3ANMFPO
#\\\|WGY5HHWWBCDMKZIFJI32CJRXEWGQP3IINWXBTV7LV6SUAJ4FRNW \ / AMOS7 \ YOURUM ::
#\[7]RFFSFHYJEDUOBCQ7UCIK6SYMA5SOGJ3ZKDCYEU3KBUK4ENZTGKDI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
