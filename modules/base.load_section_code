## [:< ##

# name  = base.load_section_code
# args  = [target_hashref ,] <file_name> [,<file_name> [, <file_name>..]]
# descr = load one or more 'section' code files, return array ref to structure
# todo  = make more generic ( use recursion, allow arbitrary section syntax )
# note: the way comments are stripped currently doesn't allow #'s in values!

my $conf_path = <system.conf_path>;
my $code_data = [];
$code_data = shift @ARGV if ref $ARGV[0] eq qw| ARRAY |;
my @code_files      = @ARG;   ## file list data will be appended to $code_data
my @match_filenames = <[file.match_files]>->(
    $conf_path, map { sprintf qw| %s$ |, $ARG } @code_files
);
if ( @match_filenames == 0 ) {
    warn 'no cfg file names match <{C1}>';
    return undef;
}
foreach my $filename (@match_filenames) {
    my @cfg_lines;
    <[file.slurp]>->( $filename, \@cfg_lines );
    if ( @cfg_lines == 0 ) {
        <[base.logs]>->( 0, "cannot load config-file '%s'", $filename );
        return undef;
    }
    my $line_num = 0;
    $filename =~ s|^.*/||g;
    my ( $section_ref, $sub_section_ref );
    my ( $section, $sub_section, $sub_sub_section, $data_ref );
    foreach my $line (@cfg_lines) {
        $line_num++;
        $line =~ s,(#.*|[ \t]*)+$,,g;
        $line =~ s|^[ \t]+||;
        next if $line eq '';
        if ( $line =~ m|^\.: *([^:]*\S) *:\.$| ) {
            $section = $LAST_PAREN_MATCH;
            ( $sub_section, $sub_section_ref, $sub_sub_section )
                = ( undef, undef, undef );
            if ( !<[base.code_section_exists]>->( $section, $code_data ) ) {
                $data_ref = [];
                push @$code_data, { $section => $data_ref };
            } else {
                $data_ref
                    = <[base.code_section_ref]>->( $code_data, $section );
            }
            $section_ref = $data_ref;
        } elsif ( $line =~ m|^- *(.+)$| ) {
            $sub_section     = $LAST_PAREN_MATCH;
            $sub_sub_section = undef;
            die "no parent section defined for sub-section '$sub_section' "
                . "(file '$filename' line $line_num)"
                if not defined $section;
            if ( !<[base.code_section_exists]>->( $sub_section, $data_ref ) )
            {
                my $new_data_ref = [];
                push @$section_ref, { $sub_section => $new_data_ref };
                $data_ref = $new_data_ref;
            } else {
                $data_ref = <[base.code_section_ref]>->(
                    $code_data, $section, $sub_section
                );
            }
            $sub_section_ref = $data_ref;
        } elsif ( $line =~ m|^: *([^:]*\S) *:$| ) {
            $sub_sub_section = $LAST_PAREN_MATCH;
            die "parent section missing for sub-sub-section"
                . " '$sub_sub_section' (file '$filename' line $line_num)"
                if not defined $section;
            die "no parent sub-section defined for sub-sub-section"
                . " '$sub_sub_section' (file '$filename' line $line_num)"
                if not defined $sub_section;
            if (not
                <[base.code_section_exists]>->( $sub_sub_section, $data_ref )
            ) {
                my $new_data_ref = [];
                push @$sub_section_ref, { $sub_sub_section => $new_data_ref };
                $data_ref = $new_data_ref;
            } else {
                $data_ref = <[base.code_section_ref]>->(
                    $code_data, $section, $sub_section, $sub_sub_section
                );
            }
        } else {
            push $data_ref->@*, $line;
        }
    }
}
return $code_data;

#,,.,,..,,,,,,,,,,.,,,...,,..,..,,,..,...,..,,..,,...,...,..,,,,.,,..,,..,...,
#HPWP4HL3PKGT623LEQDQPRSUVJ5RPIOFQKBLNAN3U2K37WMKY4B75QNH2RTHPT4BCBHTBS5QCXUEO
#\\\|2V7VGZBIFXZ53FDS2KOS5T772TT7NFQGRMBTAWMX34DVTJ2676K \ / AMOS7 \ YOURUM ::
#\[7]NL3Y6ZBEURVPGQ2IVIF3MFFHPZPIBKCCUTPF7KZTM43EW2KW22DA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
