## [:< ##

# name   = base.parser.access_conf
# descr  = compile and store command regex masks
# return = 0 : no errors, <n> : syntax error count

<[base.log]>->( 2, ': compiling command permission masks..,' );

my $user_re = <regex.base.usr_str>;
my $cmdp_re = <regex.base.cmdrp>;
my $errors  = 0;

my $log_permission_masks = <system.access.log-permission-masks> //= 1;
my $warn_level = 1;    ## <-- log level for enabled wildcard pattern masks
##::[ should be disabled for network command security ]::::::::::::::::::.
#                                                                      :::
#   when wildcards allowed, placing a command file on disk would make  :::
#   it available to the network : expanding the zenka capabilities .., :::
#                                                                      :::
<system.access.wildcards.allow> //= 0;    #                            :::
my $wildcard_permissions_allowed          #                            :::
    = <[base.cfg_bool]>->(<system.access.wildcards.allow>);    #       :::
## :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

## [ LLL ] create command registry in module initialization code ..,

<[base.log]>->( $warn_level, '<< wildcard access pattern configured >>' )
    if $wildcard_permissions_allowed;

my $access_regex_log = {};
my $disallowed_match = {};
my $disallowed_count = 0;

my $user_processed = {};
foreach my $user ( <[base.reverse-sort]>->(<access.cmd.usr>) ) {
    my $access_cfg_mask = <access.cmd.usr>->{$user};
    my @regex_mask;
    my $pos = 0;

    my $config_user = $user;    ## copy for later ##

    ## $user is passed through when not a template, undef on errors ##
    if ( not defined( $user = <[base.access.special-user-map]>->($user) ) ) {
        $errors++;
        goto SKIP_COMPILATION;
    }

    if ( $user !~ m,^$user_re*$|^\*$, ) {
        <[base.logs]>->(
            0, "not valid character in user name '%s', access mask dropped.,",
            $user
        );
        $errors++;
        goto SKIP_COMPILATION;
    } else {
        my $patterns_removed = 0;

        my @split_mask = <[base.reverse-sort]>
            ->( uniq split( m|[ \t]+|, $access_cfg_mask ) );

        my @patterns_kept;
        foreach my $cmd (@split_mask) {
            my $unchanged_pattern = $cmd;
            ## prepare command regex mask ##
            if ( $cmd =~ m|$cmdp_re^\*]| ) {
                <[base.logs]>->(
                    0,
                    'not valid character in command regex mask'
                        . ' [ user \'%s\' pos %d ]',
                    $user,
                    $pos
                );
                $errors = 1;
            } else {

                $cmd =~ s|[\[\]]|\\$MATCH|g;
                $cmd =~ s|\.|\\\.|g;
                $cmd =~ s|\^|\\^|g;

                ## check for disallowed pattern syntax ##
                if ( not $wildcard_permissions_allowed ) {
                    my $disallowed = qr{(^\.\*\*|\*\*|\*|\%)};
                    while ( $cmd =~ s{\S*$disallowed\S*}{}gx ) {
                        $disallowed_match->{$user}->{$MATCH}++;
                        $disallowed_count++;
                        $patterns_removed++;
                        $errors++;
                    }
                } else {
                    $cmd =~ s|^\.\*\*,[^\.\\^]|%|;
                    $cmd =~ s|\*\*|.+|g;
                    $cmd =~ s|^\.\*|[^\\\.\\^][^\\.]%|;
                    $cmd =~ s|\*|[^\\.]+|g;
                    $cmd =~ s|\%|*|g;
                }
                next if not length($cmd);
                push( @patterns_kept, $unchanged_pattern );

                ## strict match from here ##
                my $completed_re = sprintf( '^%s$', $cmd );

                my $cmd_regex = <[base.eval.comp_regex]>->($completed_re);

                if ( defined $cmd_regex ) {
                    push( @regex_mask, $cmd_regex );
                } else {
                    <[base.logs]>->(
                        0,
                        'syntax error in command regex mask'
                            . " [ user '%s' pos '%s' ]",
                        $user,
                        $pos
                    );
                    $errors++;
                }
                $pos++;
            }
        }

        ## recreate permission configuration when filtered [ wildcards ] ##
        if ($patterns_removed) {
            if (@patterns_kept) {
                <access.cmd.usr>->{$config_user} = join ' ', @patterns_kept;
            } else {
                delete <access.cmd.usr>->{$config_user}    ## cleaning up ##
            }
        }
        ##

        goto SKIP_COMPILATION if not exists <access.cmd.usr>->{$config_user};

        my $regex_mask_str = join( '|', @regex_mask ) // '';

        ## log command regex BASE32 encoded ## ### #### ##### ############# ##

        my $log_str_encoded = encode_b32r($regex_mask_str);
        my @encoded_wrap;
        my $wrap_width = 8;
        while ( length($log_str_encoded) ) {
            my $segment_str = substr( $log_str_encoded, 0, $wrap_width, '' );
            my $seg_len     = length($segment_str);
            $segment_str .= qw| A | x ( 8 - $seg_len ) if $seg_len < 8;
            push( @encoded_wrap, $segment_str );
        }

        my $user_differs = $user ne $config_user ? " \t<-- $config_user" : '';
        my $mask_log_str = sprintf "\n,: %s :.%s\n:\n", $user, $user_differs;
        while (@encoded_wrap) {
            my $add_segments = 5;
            $mask_log_str .= ':  ';
            while ( @encoded_wrap and $add_segments-- ) {
                $mask_log_str .= shift @encoded_wrap;
            }
            $mask_log_str .= "\n";
            $mask_log_str .= ":.\n" if @encoded_wrap == 0;
        }
        $access_regex_log->{$user} = $mask_log_str;

        ## ################################################################ ##

        ## skip cleaned permissions ##
        goto SKIP_COMPILATION if not length($regex_mask_str);

        my $comp_reg_res = <[base.eval.comp_regex]>->($regex_mask_str);

        if ( defined $comp_reg_res ) {
            <access.cmd.regex.usr>->{$user} = $comp_reg_res;

        } else {
            <[base.logs]>->(
                0,
                "error in command regex mask [ user '%s' ]"
                    . ' ., access mask dropped.',
                $user
            );
            $errors++;
        }
    }
SKIP_COMPILATION:
}

## report matched disallowed access patterns ##
#
if ($disallowed_count) {
    map { <[base.log]>->( 0, $ARG ) } (
        sprintf( '::[ disallowed command access pattern wildcard%s ]:.',
            <[base.cnt_s]>->($disallowed_count) ),
        ':'
    );

    my $pm_len = <[base.max-len.val-hash-keys]>->($disallowed_match);

    foreach my $user ( <[base.reverse-sort]>->($disallowed_match) ) {
        map {
            <[base.logs]>->(
                0, ":   removed   :   %*s   .:.  '%s'",
                ,  $pm_len, $ARG, $user
            )
        } <[base.sort]>->( $disallowed_match->{$user} );
    }
    <[base.log]>->( 0, ':.' );
}

return $errors if not keys $access_regex_log->%*;

### logging [remaining] permission mask regex ###
foreach my $user ( <[base.reverse-sort]>->($access_regex_log) ) {
    my $log_level = 2;    ## create security log buffer ? ##          [LLL]
    map {
        <[base.log]>->(
            $log_level, length($ARG) ? sprintf( '   %s', $ARG ) : qw| :A: |
        )
        }
        split( "\n", $access_regex_log->{$user} );
}

return $errors;

#,,..,,..,.,.,.,.,.,,,...,,,.,,,,,,,,,...,...,..,,...,..,,...,..,,...,.,,,..,,
#HTU3MMDUU37RQS6ELKLNIXVTBCJYLEQLT5M52BNBGZFTYAJDBWIAAHQ5DK2Q7UC7B4X23F7OLQUIA
#\\\|64AGMOU3I24XAZQY774ISAHOQBPFPI3ROQZQNUGNGDRWFIWRNJB \ / AMOS7 \ YOURUM ::
#\[7]4YQCUBTBZP5XIVR4TE7EQC7NWW567ULYCU5KPIZORF6RXYWUHCAQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
