# >:]

# name = root.agent.spawn
# descr = spawn nailara agent and add it to process maintenance table

my $job_id     = $_[0]->{'job_id'};
my $agent_name = $_[0]->{'params'};
my ( $pid, $r_fh, $w_fh, $e_fh );

my $agent_id = <[agent.get_id]>->($agent_name);

# reuse instance id or create new one if none exists
my $instance_id = <jobqueue.joblist.by_id>->{$job_id}->{'instance_id'};
$instance_id //= <[agent.instance.add]>->($agent_id);
<jobqueue.joblist.by_id>->{$job_id}->{'instance_id'} //= $instance_id;

<root.agent.instance>->{$instance_id}->{'job_id'} = $job_id;

die "no agent name supplied" if not defined $agent_name;
<[base.log]>->( 1, "spawning '$agent_name' agent ..." );

my $nailara_bin = <system.start.exec_name>;
my @exec_args   = ();                         # XXX: agent mode...
push( @exec_args, '-' . 'v' x <system.verbosity> ) if <system.verbosity>;

eval {
    $pid = open3( $r_fh, $w_fh, $e_fh, $nailara_bin, $agent_name, @exec_args );
};

if ( not defined $pid ) {
    my $err_msg = $@ || <$e_fh>;
    <[base.log]>->( 0, "failed to spawn agent '$agent_name' [$err_msg]" );
    return undef;
}

<[event.add_io]>->(
    {   'fd'      => $w_fh,
        'handler' => 'root.handler.agent_output',
        'data'    => $instance_id
    }
);
<[event.add_io]>->(
    {   'fd'      => $e_fh,
        'handler' => 'root.handler.agent_output',
        'data'    => $instance_id
    }
) if defined $e_fh;

<[base.log]>->( 1, "agent '$agent_name' spawned! [pid:$pid]" );

<root.agent.instance>->{$instance_id}->{'process'} = {
    'id'   => $pid,
    'r_fh' => $r_fh,
    'w_fh' => $w_fh
};

<[agent.change_status]>->( $instance_id, 'starting' );
