## >:] ##

# name  = base.data-keys.get_checksum

my $data_keyname = shift // '';
my $href         = shift // *data{HASH};

if ( length $data_keyname
    and not [ <[base.validate.data_key_syntax]>->($data_keyname) ]->[0] ) {
    <[base.s_warn]>->( "data key syntax is not valid ['%s']", $data_keyname );
    return undef;
} elsif ( ref $href ne qw| HASH | ) {
    warn 'second parameter not a hash reference <{C1}>';
    return undef;
}

my $key_href;

if    ( not length $data_keyname ) { $key_href = $href }
elsif ( not defined( $key_href = <[base.resolve_key]>->($data_keyname) ) ) {
    <[base.s_warn]>
        ->( "key '%s' does not \\ no longer exist", $data_keyname );
    return undef;
}

if ( not length $key_href->{'r-type'} ) {    ##  SCALAR reference [ data ]  ##
    my $parent_href = $key_href->{'key-href'};
    my $entry_key   = $key_href->{'last-key'};
    my $data_s_ref  = \$parent_href->{$entry_key};

    ##  using scalar ref  ##
    return <[base.parser.harmonized_reference]>->($data_s_ref);

} else {    ##  is a reference itself  ##
    return <[base.parser.harmonized_reference]>->( $key_href->{'r-data'} );
}

#,,,,,.,,,..,,.,,,...,...,..,,,,.,..,,...,...,..,,...,...,...,,,.,,,,,,.,,...,
#XDETVAWIIY4HTXF5HZIV5PY55YIZQ3FF7PAXJHGRRD7XKQNFTOCJJAC2VKIDX2GUSXKNLFQG5SYT6
#\\\|SJUMXZZFHR254JA24PNCBKNT3STNTMVBKSVQBWXLWWD4WHLGXEG \ / AMOS7 \ YOURUM ::
#\[7]PGKXTX3UPDL5AECUM7TR674SH3LVXX32UJANKRYFNTSKYGWL6GBA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
