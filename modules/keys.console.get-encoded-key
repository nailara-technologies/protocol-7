## >:] ##

# name  = keys.console.get-encoded-key
# param = <name>
# descr = show encoded key string opt.: [private|public]

my $name = shift;
return print "\n  << expected <key_name> parameter >>\n\n"
    if not defined $name;
my $type;
( $name, $type ) = split m| +|, $name if index( $name, ' ' ) != -1;

return printf "\n  << key with name '%s' not found >>\n\n", $name
    if not <[crypt.C25519.key_exists]>->($name);

my $key_vars_ref = <[crypt.C25519.key_vars]>->($name);
my $maxlen
    = [ minmax map {length} keys $key_vars_ref->{'key_filename'}->%* ]->[1];

if ( defined $type and my $file = $key_vars_ref->{'key_filename'}->{$type} ) {
    my $key_file_ref = <[file.slurp]>->($file);
    chomp( $key_file_ref->$* );
    return say $key_file_ref->$*;
} elsif ( defined $type ) {
    print "\n  <<  type parameter not understood  >>\n\n";
    say '  [ key types ]';
    say '  :';
    foreach my $type ( <[base.sort]>->( $key_vars_ref->{'key_filename'} ) ) {
        say sprintf "  :  %-*s  :", $maxlen, $type;
    }
    say '  :';
} else {
    foreach my $type ( <[base.sort]>->( $key_vars_ref->{'key_filename'} ) ) {
        my $file         = $key_vars_ref->{'key_filename'}->{$type};
        my $key_file_ref = <[file.slurp]>->($file);
        chomp( $key_file_ref->$* );
        say '';
        say sprintf ':. %-*s .: %s ::', $maxlen, $type, $key_file_ref->$*;
    }
    say '';
}

#,,,,,..,,,.,,.,.,,,,,,,.,.,,,..,,,.,,,.,,,,.,..,,...,..,,,..,,..,,..,,.,,.,.,
#CYYAFWJLS7VXLVIXNSB2EWPRFSGETSNIFS2R26AISEQ6ZB4E5QYMFGJLVU7UXMUECCSPMUDBGUT2E
#\\\|BLE3A6RS5NPK2SJJTSAWN3IPKPSPK6JEMWFPNSWYZBOCEGGLP6G \ / AMOS7 \ YOURUM ::
#\[7]KGZCOJIGCNTLU4B34SDXHRV7FCA43GUQBARY56JIFNXL7TOEZODQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
