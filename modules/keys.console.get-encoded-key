## [:< ##

# name  = keys.console.get-encoded-key
# param = <name>
# descr = show encoded key string opt.: [private|public]

my $name = shift;

if ( not defined $name ) {
    say "\n  << expected <key_name> parameter >>\n";
    <[base.exit]>->(qw| 0110 |);
}

my $type;
( $name, $type ) = split m| +|, $name if index( $name, ' ' ) != -1;

if ( not <[crypt.C25519.key_exists]>->($name) ) {
    say sprintf "\n  << key with name '%s' not found >>\n", $name;
    <[base.exit]>->(qw| 0110 |);
}

my $key_vars_ref = <[crypt.C25519.key_vars]>->($name);

my $maxlen = [
    minmax map {length}
        grep   { -e $key_vars_ref->{'key_filename'}->{$ARG} }
        keys $key_vars_ref->{'key_filename'}->%*
]->[1];

if ( defined $type and my $file = $key_vars_ref->{'key_filename'}->{$type} ) {
    my $key_file_ref = <[file.slurp]>->($file);
    chomp $key_file_ref->$*;
    return say $key_file_ref->$*;
} elsif ( defined $type ) {
    print "\n  <<  type parameter not understood  >>\n\n";
    say '  [ key types ]';
    say '  :';
    foreach my $type ( <[base.sort]>->( $key_vars_ref->{'key_filename'} ) ) {
        say sprintf "  :  %-*s  :", $maxlen, $type;
    }
    say '  :';
} else {
    foreach my $type ( <[base.sort]>->( $key_vars_ref->{'key_filename'} ) ) {
        my $file = $key_vars_ref->{'key_filename'}->{$type};
        next if not -e $file;    ## only existing types ##
        my $key_file_ref = <[file.slurp]>->($file);
        chomp $key_file_ref->$*;
        say '';

        ## no sprintf template for virtual keys ##
        ##
        if ( $type eq qw| virtual | ) {
            say $key_file_ref->$*;
            next;
        }

        say sprintf ':. %-*s .: %s ::', $maxlen, $type, $key_file_ref->$*;
    }
    say '';
}

#,,..,,..,,,.,,,,,,,.,.,,,.,.,.,.,...,..,,,,,,..,,...,..,,.,,,.,,,,..,,..,,,.,
#5DEASON2UK7WMA5OYGTUIHOWR6OX342DD2COPIWJRSJKYJABGX3XAW2RO6ZPABN72WAYPV5TN76LC
#\\\|YKE5V65KB7T2CNWJOQI7V3OVESRGKWVZHX7WVR4BALGWV5KZE6U \ / AMOS7 \ YOURUM ::
#\[7]OVA6U4FCKCU4YQNM7UISUMRXN33VEPXLV5256RWS2ENIL62GPWCA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
