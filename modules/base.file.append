## [:< ##

# name  = base.file.append
# descr = appending to a file in :raw mode [ creates if missing ]

my $write_file_path = shift // '';
my @file_content    = @ARG;

my $fh;
if ( not length $write_file_path ) {
    warn 'expected filename <{C1}>';
    return undef;
} elsif ( not open( $fh, qw| >> |, $write_file_path ) ) {
    <[base.s_warn]>->(
        "cannot open '%s' for writing [ %s ] <{C1}>",
        $write_file_path, <[base.str.os_err]>
    );
    return undef;
}

binmode( $fh, qw| :raw | )
    or <[base.s_warn]>->(
    'binmode : %s <{C1}>',
    $write_file_path, <[base.str.os_err]>
    );

if ( @file_content > 1 ) {
    print {$fh} @file_content;
} elsif ( @file_content and ref $file_content[0] eq qw| ARRAY | ) {
    print {$fh} $file_content[0]->@*;
} elsif ( @file_content and ref $file_content[0] eq qw| SCALAR | ) {
    print {$fh} $file_content[0]->$*;
} elsif ( @file_content and defined $file_content[0] ) {
    print {$fh} $file_content[0];
} else {
    warn 'file content parameter is undefined <{C1}>';
}

if ( not close $fh ) {
    <[base.s_warn]>->(
        'close [ %s ] : %s <{C1}>',
        $write_file_path, <[base.str.os_err]>
    );
    return undef;
}

return TRUE;    ## true ##

#,,,,,.,,,,.,,,,.,.,.,,..,..,,,.,,.,,,,.,,,,,,..,,...,...,,,,,,.,,,..,,.,,...,
#RW4KV74XEPGF252BPAEDKZVFM4SAPT6GZHKDY5FCWRMQNOKR7K7Z7MCZJ2HZGBI23SARFFMEGE3VU
#\\\|7Y2YKZR7O2XQWVAXRNGQCLO5T3TSFC2IIDPRJUSPSCMFKNWWN2E \ / AMOS7 \ YOURUM ::
#\[7]IB4U32ILUTL3JMWIHTFHK7BZY63IBRUJNY56W2LLXBCPWHXPZKAA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
