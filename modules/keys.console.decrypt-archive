## >:] ##

# name  = keys.console.decrypt-archive
# param = [src]
# descr = decrypt and import archived user keys

my $src_path_abs = shift;

if ( defined $src_path_abs ) {
    my $archive_path_directory = last_existing_directory($src_path_abs);
    if (   -d $src_path_abs and not -r $src_path_abs
        or -d $archive_path_directory and not -r $archive_path_directory ) {
        <[base.exit]>->(
            qw| 0110 |, 'no read permissions for parent directory', 0
        );
    } elsif ( not -e $src_path_abs ) {
        <[base.exit]>->(
            qw| 0110 |, 'given archive file path does not exist', 0
        );
    } elsif ( -d $src_path_abs ) {
        $src_path_abs
            = <[keys.select_archive_path]>->( qw| :load: |, $src_path_abs );

    } elsif ( -e $src_path_abs and not -r $src_path_abs ) {
        <[base.exit]>->( qw| 0110 |, 'archive file not readable', 0 );
    }
} else {
    $src_path_abs = <[keys.select_archive_path]>->(qw| :load: |);
}
if ( not defined $src_path_abs ) {
    <[base.log]>->( 0, '..' );
    <[base.log]>->( 0, ' :' );
    <[base.exit]>->( qw| 0110 |, ' :, no archive file selected', 0 );
}
( my $archive_name = $src_path_abs ) =~ s|^.*/||;

##  requesting archive encryption password  ##
##
my $pwd_title  = sprintf "archive '%s'", $archive_name;
my $pwd_prompt = 'archive dec password';

my $decryption_pwd
    = AMOS7::TERM::read_password_repeated( $pwd_prompt, $pwd_title );

if ( not defined $decryption_pwd ) {
    <[base.log]>->( 0, '..' );
    <[base.log]>->( 0, ' :' );
    <[base.exit]>->( qw| 0110 |, ' :, key archive decryption aborted.,', 0 );
}

my $read_user_keys    ##  load hash ref with filenames and keys  ##
    = <[keys.read_key_archive]>->( $src_path_abs, $decryption_pwd );

<[base.exit]>->( qw| 0110 |, 'error during archive reading', 0 )
    if ref $read_user_keys ne qw| HASH |
    or not my $archive_key_count = keys $read_user_keys->%*;

my $errors = FALSE;
foreach my $file ( <[base.sort]>->($read_user_keys) ) {
    my $file_size = length $read_user_keys->{$file};
    if ( not $file_size ) {
        $errors++;
        <[base.logs]>->(
            0, ": extracted key '%s' not defined \\ empty", $file
        );
    } elsif ( not exists <crypt.C25519.keys.sizetype>->{$file_size} ) {
        $errors++;
        <[base.logs]>->(
            0,     ": extracted '%s' size [%d] not valid",
            $file, $file_size
        );
    } elsif ( index( $file, qw| / | ) != -1 ) {
        $errors++;
        <[base.logs]>->(
            0, ": extracted '%s' filename not valid [slashes]", $file
        );
    }
}
<[base.exit]>->( qw| 0110 |, ':. aborted file extraction due to errors', 0 )
    if $errors;

my $key_dir = <[crypt.C25519.key_vars]>->{'key_dir'};

my @collision_keys;
my @not_yet_present_keys;
my $key_name_collisions = 0;
my $identical_key_count = 0;
foreach my $extracted_filename ( <[base.sort]>->($read_user_keys) ) {
    if ( not <[crypt.C25519.key_exists]>->($extracted_filename) ) {
        push @not_yet_present_keys, $extracted_filename;
        next;
    }
    my $disk_key_ref    ##  compare contents directly  ##
        = <[file.slurp]>->(
        catfile( $key_dir, $extracted_filename ),
        undef, qw| :raw |
        );
    if ( ref $disk_key_ref ne qw| SCALAR | or not length $disk_key_ref->$* ) {
        <[base.logs]>->(
            0, ":: cannot read key file '%s' for comparison",
            $extracted_filename
        );
        $key_name_collisions++;    ##  counting as name collision  ##
        push @collision_keys, $extracted_filename;
    } else {
        if ( $read_user_keys->{$extracted_filename} eq $disk_key_ref->$* ) {
            $identical_key_count++;
            <[base.logs]>
                ->( ':. already on disk .: %s', $extracted_filename );
        } else {
            $key_name_collisions++;
            push @collision_keys, $extracted_filename;
        }
    }
}

if ( $identical_key_count == $archive_key_count ) {
    my %C = %AMOS7::C;
    return    ## nothing left to do here ##
        say sprintf ":\n: %sall%s %d %s%sarchived keys "
        . "are present and%s identical %s%s%s=)%s\n:",
        $C{'T'}, $C{'b'}, $archive_key_count, $C{'R'}, $C{'T'}, $C{'b'},
        $C{'R'}, $C{'T'}, $C{'B'},
        $C{'R'};

} elsif ( @not_yet_present_keys == $archive_key_count ) {
    <[base.logs]>->(
        '.: none of the %d key files are on disk yet .,',
        $archive_key_count
    );
} elsif ($key_name_collisions) {
    <[base.logs]>->(
        0,
        '.: %d key-file%s name collision%s on disk ..,',
        $key_name_collisions,
        <[base.cnt_s]>->( $key_name_collisions, 's have', ' has' ),
        <[base.cnt_s]>->($key_name_collisions)
    );
}

my %key_files;    ##  making sure it is empty  ##

my $write_success_count = 0;
if (@not_yet_present_keys) {
    <[base.log]>->( 1, 'extracting not present keyfiles ..,' );
    foreach my $extracted_filename (@not_yet_present_keys) {
        my ( $name, $type )    ##  extract name and type from filename  ##
            = <[crypt.C25519.key_name_and_type]>->($extracted_filename);

        my $encoded_keystr = $read_user_keys->{$extracted_filename};

        ##  storing extracted key data  ##
        $key_files{$extracted_filename} = $encoded_keystr;
    }
    ##  writing C25519 key-files to .n/user-keys dir  ##
    foreach my $file ( <[base.sort]>->( \%key_files ) ) {
        my $target_path = catfile( $key_dir, $file );
        <[base.logs]>->( ':. writing file to disk .: %s', $file );
        <[file.put_bin]>->( $target_path, $key_files{$file} )
            or <[base.logs]>->(
            0,                   ': write [ %s ] %s',
            <[base.str.os_err]>, $target_path
            );
        $write_success_count++ if -f $target_path and not -z $target_path;
    }
}

<system.verbosity.console>++ if not <system.verbosity.console>;

my $ntime_stamp_suffix = sprintf qw| .archive.%s |, <[base.ntime.b32]>->(13);
<[base.logs]>->( 2, ': selected timestamp %s', $ntime_stamp_suffix );
if (@collision_keys) {
    <[base.log]>->( 1, 'extracting colliding keys under different name..,' );
    foreach my $extracted_filename (@collision_keys) {
        my ( $name, $type )    ##  extract name and type from filename  ##
            = <[crypt.C25519.key_name_and_type]>->($extracted_filename);

        my $encoded_keystr = $read_user_keys->{$extracted_filename};

        <[base.exit]>->(
            qw| 0110 |,
            '[ regex error : unexpected name pattern ] '
                . $extracted_filename,
            0
            )
            if $extracted_filename
            !~ s|(*plb:^\Q$name\E)\.|$ntime_stamp_suffix.|;

        ##  storing extracted key data  ##
        $key_files{$extracted_filename} = $encoded_keystr;
    }
    ##  writing C25519 key-files to .n/user-keys dir  ##
    foreach my $file ( <[base.sort]>->( \%key_files ) ) {
        my $target_path = catfile( $key_dir, $file );
        <[base.logs]>->( ':. writing file to disk .: %s', $file );
        <[file.put_bin]>->( $target_path, $key_files{$file} )
            or <[base.logs]>->(
            0,                   ': write [ %s ] %s',
            <[base.str.os_err]>, $target_path
            );
        $write_success_count++ if -f $target_path and not -z $target_path;
    }
}

return say sprintf "\n  ::[  wrote %d archived key file%s to disk. =)  ]::\n",
    $write_success_count, <[base.cnt_s]>->($write_success_count),
    if $write_success_count;

#,,,.,.,.,.,.,...,,,,,,,.,,,,,.,.,..,,.,.,,.,,..,,...,...,.,,,,,,,...,.,.,.,,,
#BJN2R7EHRLE77LIGAH2ZKJXMIH4YGN656PJQE4U4F2L6DBAL5M74THEYUYIB4TEX6WGJ3S222YRTE
#\\\|52FZACU6XSHKKIMSJM7NNLSAOL5TQAJDDXUWDFGV67IXII6RFDG \ / AMOS7 \ YOURUM ::
#\[7]ATNUVADTT3T24YRDCCQQJSC4J3BWRZ4PVOSI5BUSRLMK6AJY6ACI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
