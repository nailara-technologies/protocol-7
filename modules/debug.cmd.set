## >:] ##

# name  = debug.cmd.set
# param = <key> <value>
# descr = set value in internal 'data' hash
# todo  = improve \ expand error handling

my ( $set_keystring, $value_content )
    = split( m| |, $call->{'args'} // '', 2 );

$value_content =~ s|^'(.*)'$|$LAST_PAREN_MATCH|;   ##  quoted value syntax  ##

return { 'mode' => qw| false |, 'data' => 'expected key param' }
    if not defined $set_keystring or not length $set_keystring;

my @result = <[base.validate.data_key_syntax]>->($set_keystring);
return { 'mode' => qw| false |, 'data' => $result[1] } if not $result[0];

return { 'mode' => qw| false |, 'data' => 'no value supplied' }
    if not defined $value_content;

my $setkey_init = 0;
my $cid         = $$call{'session_id'};

my $set_keystring_ref = <[base.resolve_key]>->($set_keystring);

if ( not defined $set_keystring_ref or length $set_keystring_ref->{'r-type'} )
{    ##  overriding if other ref type was present  ##
    $setkey_init       = <[base.set_key]>->( $set_keystring, $value_content );
    $set_keystring_ref = <[base.resolve_key]>->($set_keystring);
}

if ( defined $set_keystring_ref and length $set_keystring_ref ) {
    if ($setkey_init) {

        $set_keystring_ref->{'r-data'} = $value_content; ##  set new value  ##

        <[base.logs]>->(
            "[%d] set key : initialized [ %s = '%s']",
            $cid, $set_keystring, $value_content
        );
        $reply = { 'mode' => qw| true |, 'data' => qw| set | };

    } elsif ( $set_keystring_ref->{'r-data'} eq $value_content ) {

        <[base.logs]>->(
            "[%d] set key : no change : values identical [ %s = '%s']",
            $cid, $set_keystring, $value_content
        );
        $reply = {
            'mode' => qw| false |,
            'data' => 'no change : values identical'
        };

    } else {
        $set_keystring_ref->{'r-data'} = $value_content;  ##  change value  ##
        <[base.logs]>->(
            "[%d] set key : data value updated [ %s = '%s']",
            $cid, $set_keystring, $value_content
        );
        $reply = { 'mode' => qw| true |, 'data' => qw| updated | };
    }
} else {
    <[base.logs]>->(
        0,    "[%d] set key : cannot assign value [ %s = '%s']",
        $cid, $set_keystring, $value_content
    );
    $reply = { 'mode' => qw| false |, 'data' => 'not able to assign value' };
}

#,,.,,.,,,.,,,,,.,,,.,.,,,,,.,...,,.,,,..,,,,,..,,...,...,...,...,..,,...,.,.,
#VOKV5WMSOPCEQRE3DZBBPQ5SSEPNNBHLKIMPUC4OL36TOO3W4BVFB4C2DTOEBOJDLBT7OGENZCFMA
#\\\|AW334OSYQYNTO4O7SRD4O2SNGCXEHFTZI2VVMAUSHDQEP6EZX6S \ / AMOS7 \ YOURUM ::
#\[7]5LXPG27EENN3GQFWJFTZ5XCNQLS67IVB654XVSDSFL4EMDLVIIBA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
