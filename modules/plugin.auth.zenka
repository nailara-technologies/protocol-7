## [:< ##

# name  = plugin.auth.zenka
# descr = perform 'zenka' type authentication initiated \ enabled by v7 zenka

my $event  = shift;
my $id     = $event->w->data;
my $re     = <regex.base>;
my $input  = \$data{'session'}{$id}{'buffer'}{'input'};
my $output = \$data{'session'}{$id}{'buffer'}{'output'};

## allow ? ##
my $enabled_link_modes = { qw| unix | => TRUE, qw| ip.tcp | => TRUE };

my $link_type = $data{'handle'}{ $data{'session'}{$id}{'handle'} }{'link'};

if (   <[plugin.auth.zenka.no-keys-defined]>
    or not exists $enabled_link_modes->{$link_type}
    or not $enabled_link_modes->{$link_type} ) {
    if ( $data{'session'}{$id}{'last-bytes-read'} ) {
        my $id_len = length($id);
        my $l      = $link_type eq qw| unix | ? 0 : 0;
        <[base.logs]>->( $l, "[%d] cannot authenticate zenka session", $id );
        $l++ if $l > 0;
        <[base.logs]>->(
            $l,
            ':,. zenka user not expected [ %s ] .,:',
            <[plugin.auth.zenka.no-keys-defined]>
            ? 'no keys'
            : 'disabled link type'
        );
        my $keyless_user
            = $input->$* =~ m{^($re->{usr_str}|$re->{usr_subn_str}) }
            ? $LAST_PAREN_MATCH
            : undef;
        <[base.logs]>->(
            $l,
            ":., attempted: %-24s ,.:",
            sprintf( "\"%s\"", $keyless_user )
        ) if defined $keyless_user;
        $output->$* .= "AUTH_ERROR `>:|\n";
    }
    return 2;
}

if ( $input->$* =~ s{^($re->{usr_str}|$re->{usr_subn_str}) (\S+)\n}{} ) {
    my ( $user, $key_hash ) = ( my $auth_name = $1, blake2b_384_b64($2) );
    my $subname = $user =~ s|\[($re->{subname})\]$|| ? $1 : '';

    if ( defined $keys{'auth'}{'zenka'}->{$user} ) {

        if ( $key_hash eq $keys{'auth'}{'zenka'}{$user} ) {

            if ( length($subname) ) {
                $data{'session'}{$id}{'subname'} = $subname;
                $data{'user'}{$user}{'subname'}{$subname}++;
            }

            delete $keys{'auth'}{'zenka'}{$user};
            $output->$* .= "AUTH_TRUE =)\n";

            if (<[base.is_defined_recursive]>->(
                    sprintf qw| user.%s.input-priority |, $user
                )
                ) {    ##  setting custom input handler priorities  ##
                my $input_prio = $data{'user'}->{$user}->{'input-priority'};
                $data{'session'}->{$id}->{'input_prio'} = $input_prio;
                $data{'session'}->{$id}->{'watcher'}->{'input_handler'}
                    ->{'prio'} = $input_prio;
            }

            ## <[net.update.client_conf]>->($id);

            <[base.logs]>->(
                "[%u] zenka '%s' session authorized.",
                $id, $auth_name
            );
            return ( 0, $user );
        } else {
            <[base.logs]>->(
                0,   "[%u] '%s' [zenka] access denied [ key ]",
                $id, $auth_name
            );
            $output->$* .= "AUTH_ERROR `>:|\n";
            return 1;
        }
    } else {
        <[base.logs]>->(
            0,   "[%u] '%s' [zenka] access denied [ usr ]",
            $id, $auth_name
        );
        $output->$* .= "AUTH_ERROR `>:|\n";
        return 1;
    }
} else {
    <[base.log]>->(
        0, "[$id] authentication protocol mismatch [ zenka ] `:|"
    );
    $output->$* .= ">:[\n";
    return 1;
}

#,,,,,.,,,...,,.,,.,,,...,..,,,,.,..,,..,,.,,,..,,...,...,..,,.,,,.,.,,..,,..,
#FKR34T53KEYJ6LBRJCUO4MZ4MVAWC4VQONEAPQWDR4QVVLDYAIK34RAOYZIXFYGIWWK3D6TYDGUWI
#\\\|T2P6EFD7ABOLXOFEVQXAE4B3OFPKGBNWACEIKSLUMLY5YYX6ZAD \ / AMOS7 \ YOURUM ::
#\[7]WJ7IYLRZ6VQE4CXL5EQRE4G7COGJFMPK5DMW3I76KLBVFN5XTYBQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
