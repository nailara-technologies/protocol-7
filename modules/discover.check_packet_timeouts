## [:< ##

# name  = discover.check_packet_timeouts

## timeout check value increased for network latency ##
##
my $host_timeout_delay = <discover.cfg.timeout_delay> //= 2.4;
my $packet_timeout     = <discover.announce_interval.maximum>;
$packet_timeout += $host_timeout_delay;   ## accounting for network latency ##

my $log_level = 2;    ## <-- reporting timeouts loglevel ##

##  target route to 'nodes' zenka  ##
##
my $nodes_update_cmd = <discover.cfg.nodes.host_status_command>;

my @next_host_timeout;

foreach my $id ( keys $data{'hosts'}->%* ) {
    my $host           = $data{'hosts'}->{$id}->{'host'};
    my $timestamp_adj  = $data{'hosts'}->{$id}->{'tstamp-adj'};
    my $time_delta_now = <[base.ntime.delta_seconds]>->($timestamp_adj);
    my $host_pkey      = $data{'hosts'}->{$id}->{'pkey'};

    if ( $time_delta_now >= $packet_timeout ) {    ##[  host timeout  ]##
        <[base.logs]>->(
            $log_level, "host '%s' [ %s ] timed out.",
            $host,      $data{'hosts'}->{$id}->{'ip_addr'}
        );

        my $timeout_log_level = 0; ## seperate buffer status change logging ##
        my $log_msg    = sprintf ": host status : offline .: '%s'", $host;
        my $time_stamp = <[base.anum_log_time]>->( 5, TRUE );

        <[base.buffer.add_line]>->(
            qw| host-status |,
            join( ' ', $time_stamp, $timeout_log_level, $log_msg ), $log_level
        );

        delete $data{'hosts'}->{$id};    ##  removing timed out entry  ##

        ##  send status change for [all] host to 'nodes' zenka  ##
        ##
        if (defined $nodes_update_cmd
            and <[base.is_defined_recursive]>->(
                qw| discover.notify-nodes-zenka |)
            and <[base.cfg_bool]>->(<discover.notify-nodes-zenka>)
        ) {
            <[base.log]>->(
                2, "sending host [timeout] status to 'nodes' zenka..,",
            );
            <[base.protocol-7.command.send.local]>->(
                {   'command'   => $nodes_update_cmd,
                    'call_args' =>
                        { 'args' => join( ' ', qw| offline |, $host ) }
                }
            );
        }

        ##  requested host status updates  ##
        ##
        my $hostname_L13 = <[chk-sum.bmw.L13-str]>->($host);
        if ( exists <discover.host-status-requests>->{$hostname_L13} ) {
            my @send_update_zenki
                = <discover.host-status-requests>
                ->{$hostname_L13}->{'zenki'}->@*;
            if (not defined
                <discover.host-status-requests>->{$hostname_L13}->{'host-key'}
                or $host_pkey eq    ## comparing host-keys ##
                <discover.host-status-requests>->{$hostname_L13}->{'host-key'}
                ) {    ## sending host status updates to configured zenki ##
                foreach my $target_zenka (@send_update_zenki) {
                    <[base.logs]>->(
                        2, "sending host [timeout] status to '%s' ..,",
                        $target_zenka
                    );
                    <[base.protocol-7.command.send.local]>->(
                        {   'command' => sprintf( qw| cube.%s.host-status |,
                                $target_zenka ),
                            'call_args' => {
                                'args' => join( ' ', qw| offline |, $host )
                            }
                        }
                    );
                }
            } elsif (
                defined
                <discover.host-status-requests>->{$hostname_L13}->{'host-key'}
            ) {
                <[base.s_warn]>->(
                    "host key mismatch , clearing "
                        . " status update request%s for '%s'",
                    <[base.cnt_s]>->( scalar @send_update_zenki ),
                    $host
                );
                delete <discover.host-status-requests>->{$hostname_L13};
                ## also clear configuration from disk ##
                foreach my $zenkaname (@send_update_zenki) {
                    my $zenka_cfg_path = sprintf qw| notify-reqs/%s.%s |,
                        $hostname_L13, $zenkaname;
                    <[file.zenka_dir.unlink_file]>->( $zenka_cfg_path, TRUE );
                }
            }
        }
        ##

    } else {    ## collect values for setting tiners ##
        unshift @next_host_timeout, $packet_timeout - $time_delta_now;
    }
}

if (<[base.is_defined_recursive]>->(
        qw| discover.timer.check_host_list_timeout |)
    ) {    ##  stopping any previous timer  ##
    <discover.timer.check_host_list_timeout>->cancel
        if <discover.timer.check_host_list_timeout>->is_active;
}

return if not @next_host_timeout;    ##  no new timer required  ##

## get shortest timeout value ##
my $next_timeout_in = sprintf qw| %.3f |, [ minmax @next_host_timeout ]->[0];

<discover.timer.check_host_list_timeout>  ##  call to self at next timeout  ##
    = <[event.add_timer]>->(
    { 'after' => $next_timeout_in, 'repeat' => FALSE, 'handler' => __FILE__ }
    ) if @next_host_timeout;

#,,.,,..,,.,.,.,.,.,,,,.,,..,,,,.,,,,,,,,,...,..,,...,...,,..,,..,...,.,.,..,,
#L63SAHUL4F2JRXAVIG5R3EYE3WPFOSZB6Y72T5JCHATSYIBCPOY2ZH4VEQROQLCUO5DGENKKSUKI6
#\\\|H3ZG3L5CEDCKNHYSD6L76ELLFF24KLOSANB57WQSATLPWJBFMH2 \ / AMOS7 \ YOURUM ::
#\[7]ADNYO3X2VJDB4HE6RQRA7KAOHMAQYFB4OTUTJDJ5KMP5WG3R2EAA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
