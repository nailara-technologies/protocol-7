## >:] ##

# name  = v7.init_code
# descr = initializes root module

<[base.perlmod.load]>->('IO::Handle');
<[base.perlmod.load]>->('IO::Select');
<[base.perlmod.autoload]>->('Proc::ProcessTable');
<[base.perlmod.load]>->( 'Clone',               qw| clone | );
<[base.perlmod.load]>->( 'IPC::Open3',          qw| open3 | );
<[base.perlmod.load]>->( 'Crypt::Misc',         qw| encode_b32r | );
<[base.perlmod.load]>->( 'Hash::Merge::Simple', qw| merge | );

<system.path.perl_bin> //= <[base.get_path.perl_exec]>;

<system.zenka.type> = qw| v7 |;

<v7.timeout.kill_list>       //= 2;
<v7.timeout.verify_instance> //= 13;

<v7.zenka.notify_online>    //= {};
<v7.zenka.manually_stopped> //= {};

<v7.cfg_data.start_setup> = [];    ##  <--  << RESETTING >>   ##

<v7.host-reboot.enabled>        //= 1;
<v7.host-reboot.term_delay>     //= 1.3787;
<v7.system-poweroff.enabled>    //= 1;
<v7.system-poweroff.term_delay> //= 1.3787;

<system.acfg_path> = join( qw| / |, <system.conf_path>, qw| zenki | );

## instance id cache with automatic clean-up ##
<v7.process.instance_cache>  //= {};
<v7.watchers.instance_cache> //= <[event.add_var]>->(
    {   'var'     => \$data{'v7'}{'process'}{'instance_cache'},
        'poll'    => qw| r |,    ## cache reset after 5s without access ##
        'prio'    => 4,
        'repeat'  => 1,
        'handler' => qw| v7.callback.cleanup_instance_cache |,
        'desc'    => 'instance_cache auto clean-up'
    }
);
##

map { <[base.disable_command]>->($ARG) } qw[
    subname
    switch-user
    verify-instance
];

##  INCREASE INSTANCE VERIFICATION TIMEOUT WHEN LOG OUTPUT HAS HIGH LOAD  ##
if ( <system.verbosity.console> > 1 ) {
    my $verbosity_factor = 5.447 * ( <system.verbosity.console> - 1 );
    <v7.timeout.verify_instance> *= $verbosity_factor;
    <[base.logs]>->(
        1,
        ': increased instance-verification timeout to %.3f s [ verbosity ]',
        <v7.timeout.verify_instance>
    );
}
##

<v7.gcc_bin> = qw| /usr/bin/gcc |;
<v7.cfg.install_bin_p7c> //= $UID == 0 ? qw| yes | : qw| no |; ## when root ##
<v7.cfg.p7c_bin_path>    //= qw| /usr/local/bin/p7c |;

## gcc \ p7c ##
<v7.gcc_bin> = <[base.required_bin_path]>->('gcc');
if ( !-x <v7.gcc_bin> ) {
    <v7.gcc_bin> = undef;
    <[base.log]>->( 0, "<< 'gcc' binary not found >>" )
        if <[base.cfg_bool]>->(<v7.cfg.install_bin_p7c>);
} elsif ( <[base.cfg_bool]>->(<v7.cfg.install_bin_p7c>)
    and not <[v7.bin_p7c_is_current]> ) {
    <[v7.compile_bin_p7c]>;
}
## modprobe ##
<v7.modprobe_bin> = <[base.required_bin_path]>->(qw| modprobe |);
if ( !-x <v7.modprobe_bin> ) {
    <v7.modprobe_bin> = undef;
    <[base.log]>->( 0, "<< 'modprobe' binary not found >>" );
}
## rmmod ##
<v7.rmmod_bin> = <[base.required_bin_path]>->(qw| rmmod |);
if ( !-x <v7.rmmod_bin> ) {
    <v7.rmmod_bin> = undef;
    <[base.log]>->( 0, "<< 'rmmod' binary not found >>" );
}

# single named file based startup configuration ##
<[v7.load_start_setup]>->(<load.start_setup>)
    if defined <load.start_setup>;

## zenka dir based startup configs #
<[v7.load_zenka_startup_cfgs]>;

## json based config import ## replace with YAML based, generic version  [LLL]
<[set-up.json.import_file]>->(qw| v7.start_setup.json |)
    if defined $code{'set-up.json.import_file'}; ##  <-- when not disabled  ##

map { <[v7.init_start_setup]>->($ARG) } @{ clone(<v7.cfg_data.start_setup>) };

if (    exists <system.subs_loaded.devmod>
    and <system.subs_loaded.devmod> > 1
    and <system.verbosity.console> > 4 ) {

    <[base.perlmod.autoload]>->(qw| Data::Dumper |);
    $Data::Dumper::Sortkeys = 1;

    ( my $devmod_str = Dumper(<v7.start_setup.globals>) ) =~ s'^.{7}';$,  'mg;
    say "\n < v7.start_setup.globals >\n\n$devmod_str";
}

<[event.add_signal]>
    ->( { 'signal' => qw| CHLD |, 'handler' => qw| v7.handler.sig_chld | } );

<[v7.load_zenka_output_patterns]>;
<[v7.init_zenka_output_patterns]>;    # ->(1); ## <-- devmod to stdout  ##

delete <list.users>;

<list.zenki> = {
    qw| var |   => qw| data |,
    qw| key |   => qw| v7.zenka.instance |,
    qw| descr | => 'currently running \\ managed zenka instances',
    qw| mask |  => '<key>:instance job_id zenka_name:name zenka_id status',
    qw| align | => {
        qw| zenka_id |   => qw| right-5 |,
        qw| zenka_name | => qw| left+1 |,
        qw| instance |   => qw| left+1 |,
        qw| job_id |     => qw| right-4 |,
        qw| status |     => qw| center-1 |
    }
};

<list.available> = {
    qw| var |   => qw| data |,
    qw| key |   => qw| v7.zenki.available |,
    qw| descr | => 'available zenki \\ descriptions',
    qw| mask |  => '<key>:zenka_name short_desc:zenka_short_decription',
    qw| align | => {
        qw| zenka_name |  => qw| right-3 |,
        qw| description | => qw| left |
    }
};

<list.children> = {
    qw| var |   => qw| data |,
    qw| key |   => qw| v7.zenka.instance |,
    qw| descr | => 'PIDs of zenki and their children',
    qw| mask |  => join( '',
        '<key>:instance zenka_name:zenka ',
        '<key>:process <key>:process_children' ),
    qw| align | => {
        qw| instance |         => qw| left+1 |,
        qw| zenka_name |       => qw| left+1 |,
        qw| process |          => qw| left |,
        qw| process_children | => qw| left |
    },
    qw| filters | => {
        qw| process |          => qw| v7.parser.process_id |,
        qw| process_children | => qw| v7.parser.children |
    }
};

<list.subnames> = {
    qw| var |   => qw| data |,
    qw| key |   => qw| v7.zenka.instance |,
    qw| descr | => "'subnames' of registered zenki [ when available ]",
    qw| mask |  => '<key>:instance status zenka_name:zenka subname',
    qw| align | => {
        qw| instance |   => qw| left+1 |,
        qw| status |     => qw| center-2 |,
        qw| zenka_name | => qw| right-2 |,
        qw| subname |    => qw| left+1 |
    }
};

<list.manual> = {
    qw| var |   => qw| data |,
    qw| key |   => qw| v7.zenka.manually_stopped |,
    qw| descr | => "zenki marked as 'manually stopped'",
    qw| mask |  => '<key>:zenka_name <key>:stopped_at',
    qw| align | => {
        qw| zenka_name | => qw| left+1 |,
        qw| stopped_at | => qw| left |
    },
    qw| filters | =>
        { qw| stopped_at | => qw| v7.parser.manually_stopped_tstamp | }
};

<list.dependency> = {
    qw| var |      => qw| data |,
    qw| key |      => qw| dependency.object |,
    qw| sort_key | => qw| zenka_name |,
    qw| descr |    => 'current zenka dependency status',
    qw| mask |     => 'zenka_name <key>:depends_on_zenki <key>:status',
    qw| align |    => {
        qw| zenka_name |       => qw| center |,
        qw| depends_on_zenki | => qw| center-5 |,
        qw| status |           => qw| left |
    },
    qw| filters | => {
        qw| depends_on_zenki | => qw| v7.parser.dependency_chain |,
        qw| status |           => qw| v7.parser.dependency_status |
    }
};

return 0;

#,,..,,,,,.,.,,,.,..,,..,,..,,.,,,,,,,.,,,.,.,..,,...,...,,.,,,,,,,,,,..,,...,
#EFYUWPPQ3JQF5IYTAR3NA5LHAEJVX4XPNJPCSTQ6YZEBICCWRFQXHF4JMULJJV76GPHS5QLOZCOIS
#\\\|MZZOEGYKLGGONDFRECES4O4XNNLNCCRBL7Q75JLNWJPKQQ7NVW4 \ / AMOS7 \ YOURUM ::
#\[7]3MUCL3TTFC6H4URKGLUFAVPKXJDIDO6CMNBBHNWAVTTEU2KJVYBA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
