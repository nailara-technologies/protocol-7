# >:]

# name  = base.log
# descr = generate a log entry
# args  = log_level log_msg [log_buffer]

my $call = \$_[0];

my ( $log_level, $log_msg, $log_buffer ) = ( $_[0], $_[1], $_[2] );

$log_level = 0 if not defined $log_level or $log_level !~ /^\d+$/;
$log_msg = 'LOGMESSAGE UNDEFINED'
    if not defined $log_msg or !length($log_msg);
if ( not defined $log_buffer or $log_buffer eq '' ) { $log_buffer = 'system' }

$log_msg =~ s/\r/\\r/g;
$log_msg =~ s/\n/\\n/g;
$log_msg =~ s/\0/\\0/g;
$log_msg =~ s/\e/\\e/g;

$log_msg = "call to unknown subroutine while executing '$1'!"
    if $log_msg
    =~ /\$code{'([^\']*)'}.+Can't use string \(""\) as a subroutine/;

my $log_txt;

if ( $log_level > 0 ) {
    $log_txt = " :$data{'system'}{'node'}{'name'}"
        . ".$data{'system'}{'agent'}{'name'} $log_msg\n";
}
else {
    $log_txt
        = " :$data{'system'}{'node'}{'name'}"
        . ".$data{'system'}{'agent'}{'name'}"
        . " $ANSI{bold}$log_msg$ANSI{normal}\n";
}

my $log_stamp = join( ' ', $code{'base.time'}->(5), $log_level, $log_msg );

if (    defined $data{'system'}{'internal_verbosity'}
    and defined $log_level <= $data{'system'}{'internal_verbosity'} )
{
    $code{'base.buffer.add_line'}->( $log_buffer, $log_stamp );
}

if ( $log_level <= $data{'system'}{'verbosity'} ) {
    print $log_txt;

    # // testing ;) //

    #    $log_msg =~ s/\[[^\]]+\]//;

    #    $code{'base.proto.nailara.command.send.local'}->(
    #        {
    #            'command' => "say.text $log_msg",
    #            'reply' => { 'handler' => 'dev.null' }
    #        }
    #    );

}

