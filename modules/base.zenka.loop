## >:] ##

# name  = base.zenka.loop

my $ev_loop_timeout = shift;    ## loop duration [secs] \ not updated ##

<zenka.init_return> //= 0;      ## init-done status code ##

if ( <zenka.init_return> == 0 ) {    ## init-done not called yet ##
    ## declare initialization completed ##
    if ( <[base.init-done]> <= 0 ) {
        <[base.log]>->(
            0, 'init-done not successful, skipping zenka event-loop..,'
        );
        return <zenka.init_return> = -1;
    }
}

if ( <system.zenka.type> eq qw| cube | ) {
    <[base.session.check_remaining]>;    ## check if has server session ##
    <[base.log]>->( 1, ':. ready to process connections..,' );
}

##  output prompt line in background mode and still open STDOUT  ##
print "\n :. "
    if <system.zenka.name> eq qw| cube |    ### use log idle timer ### [ LLL ]
    and
    <[base.is_defined_recursive]>->(qw| system.background.redirect_output |)
    and not <system.background.redirect_output>;

if ( defined $ev_loop_timeout ) {

    ## loop for exactly <timeout> seconds ##
    <[event.loop]>->($ev_loop_timeout);

} else {
    <[event.loop]>;    ## loop forever [ or unloop was called ] ##
}

return <zenka.init_return> = 5;

#,,,,,,.,,,.,,,,,,,,,,.,,,,.,,.,.,,,.,,.,,...,..,,...,...,,.,,.,.,,..,,,,,,,,,
#DRWHEE4MCNNLCB66LEPM76BVDRJ6YXKPTSHLPGIPUBHK2UW5YRBNNLQCLNZSI6SJCCPMD72BONZWS
#\\\|DJI6AZXEEBPGDB3VHPSKUYKQJP5GXLXIVXAQGFN6JK3AN26MDLX \ / AMOS7 \ YOURUM ::
#\[7]BGIXJXOATOECMWPNV2NVHSUR5NGHAMACMFXDTPXV6WUVV4NUBMBI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
