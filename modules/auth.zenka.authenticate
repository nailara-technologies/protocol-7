## [:< ##

# name  = auth.zenka.authenticate
# descr = authenticate to cube in zenka mode
# note  : zenka name can now contain subnames

my ( $backend_socket, $zenka, $key_str ) = @ARG;

if ( not defined $backend_socket ) {
    warn 'socket param undefined, cannot authenticate [ zenka ] <{C1}>';
    return undef;
} elsif (
    not <[base.is_defined_recursive]>->(qw| protocol.protocol-7.connect |) ) {
    warn 'protocol.protocol-7 module not loaded,'
        . ' cannot authenticate [ zenka ] <{C1}>';
    return undef;
}

my $re_proto_banner = <protocol.protocol-7.regex.protocol-version>;

if ( not defined $re_proto_banner
    or index( ref $re_proto_banner, qw| Regexp | ) == -1 ) {
    warn 'protocol banner regexp not defined, cannot authenticate <{C1}>';
    return undef;
}

my $protocol_messages = <protocol.protocol-7.connect>;
my $protocol_banner   = $protocol_messages->{'banner'};
my $proto_msg_timeout = $protocol_messages->{'timeout'};

my $link_mode_str = qw| zenka |;

$link_mode_str = lc $LAST_PAREN_MATCH
    if ref($backend_socket) =~ m|^IO::Socket::(\S+)$|;

if ( defined $key_str
    or %keys
    and exists $keys{'zenka'}{'session_key'}
    and defined $keys{'zenka'}{'session_key'}
    and length $keys{'zenka'}{'session_key'} ) {
    $key_str //= $keys{'zenka'}{'session_key'};

    if (   not defined $backend_socket
        or not -S $backend_socket
        or not $backend_socket->connected ) {
        <[base.log]>->(
            0, 'auth.zenka : cannot authenticate [ have no valid socket ]'
        );
        return undef;
    }

    my $read_len
        = [ minmax( map {length} $protocol_banner, $proto_msg_timeout ) ]
        ->[1];
    my $bytes_read
        = <[base.s_read]>->( $backend_socket, \my $banner_string, $read_len )
        // 0;

    if ( $bytes_read > 0 ) {
        if ( $banner_string =~ $re_proto_banner ) {
            <[base.log]>->( 2, '[*] Protocol 7 banner detected.,' );

            my $protocol_7_version = $LAST_PAREN_MATCH;
            $data{'handle'}{$backend_socket}{'P7_version'}
                = $protocol_7_version;    ## linking version with handle ##

            <[base.logs]>->(
                2, '[v] protocol 7 version %s .,',
                $protocol_7_version
            );

        } elsif ( $banner_string eq $proto_msg_timeout ) {
            <[base.log]>->( 2, '[#] authentication timeout :|' );
            return undef;
        } else {
            <[base.logs]>->(
                0,
                '[#] protocol mismatch [ no valid connection banner \ %s ]',
                $link_mode_str
            );
            return undef;
        }
    } else {
        <[base.logs]>->(
            0, 'auth.zenka : [#] network error [ nothing read on %s ]',
            $link_mode_str
        );
        return undef;
    }

    <[protocol.protocol-7.auth.select-method]>->( $backend_socket, qw|zenka| )
        or return undef;

    <[base.logs]>->(
        2,      "[<] authenticating as '%s'., [%s]",
        $zenka, $link_mode_str
    );
    <[base.net.send_to_socket]>->(
        $backend_socket, sprintf( "%s %s\n", $zenka, $key_str )
    );

    if ( exists $keys{'zenka'}{'session_key'} ) {    ## secure key erasure ##

        my $rand_len = length( $keys{'zenka'}{'session_key'} );
        substr( $keys{'zenka'}{'session_key'},
            0, $rand_len, <[base.prng.characters]>->($rand_len) );
        $keys{'zenka'}{'session_key'}
            .= <[base.prng.characters]>->( 8 + int( rand(11) ) );
        delete $keys{'zenka'}{'session_key'};

        <[base.clean_hashref]>->( \%keys ); ##  remove empty href elements  ##
    }

    return <[auth.zenka.process_auth_reply]>->($backend_socket);

} else {
    <[base.log]>
        ->( 0, 'session_key not set, authentication not possible..,' );
    return undef;
}

#,,.,,,..,.,,,...,,,,,.,.,,..,,.,,,,.,,.,,...,..,,...,...,..,,,.,,,,.,,,.,,,.,
#PZJUCDQZ25RF23GTOYRE5L3ZH4OA74CVLQPFV6QBUGXCRPJDJVD5B4CXMVY3U7IKIXBQYYEBIGTG4
#\\\|VJR7B32GNUSDSQKHYN3UY4SPFGPBXHBZU6NQ5FIWIZD7AFFI4SR \ / AMOS7 \ YOURUM ::
#\[7]YGLDIKLDH2TY3KMNE44K7PM2XBGJQDTROLMJWC6LXZXHVCLZB4CI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
