## >:] ##

# name  = auth.zenka.authenticate
# descr = authenticate to cube in zenka mode
# note  : zenka name can now contain subnames

my ( $backend_socket, $zenka, $key_str ) = @ARG;

if ( not defined $backend_socket ) {
    warn 'socket param undefined, cannot authenticate [ zenka ] <{C1}>';
    return undef;
}

my $protocol_messages = <protocol.protocol-7.connect>;
my $protocol_banner   = $protocol_messages->{'banner'};
my $proto_msg_timeout = $protocol_messages->{'timeout'};

my $link_mode_str = qw| zenka |;
$link_mode_str = lc($LAST_PAREN_MATCH)
    if ref($backend_socket) =~ m|^IO::Socket::(\S+)$|;

if ( defined $key_str
    or %keys
    and exists $keys{'zenka'}{'session_key'}
    and $keys{'zenka'}{'session_key'} ne '' ) {
    $key_str //= $keys{'zenka'}{'session_key'};
    my $banner_string;
    my ( $m_len, $read_len )
        = minmax( map {length} $protocol_banner, $proto_msg_timeout );
    my $bytes_read
        = <[base.s_read]>->( $backend_socket, \$banner_string, $read_len )
        // 0;
    if ( $bytes_read > 0 ) {
        if ( $banner_string eq $protocol_banner ) {
            <[base.log]>->( 2, '[*] Protocol 7 banner detected.,' );
        } elsif ( $banner_string eq $proto_msg_timeout ) {
            <[base.log]>->( 2, '[#] authentication timeout :|' );
            return undef;
        } else {
            <[base.logs]>->(
                0,
                '[#] protocol mismatch [ no valid connection banner \ %s ]',
                $link_mode_str
            );
            return undef;
        }
    } else {
        <[base.logs]>->(
            0, 'auth.zenka : [#] network error [ nothing read on %s ]',
            $link_mode_str
        );
        return undef;
    }

    <[protocol.protocol-7.auth.select-method]>->( $backend_socket, qw|zenka| )
        or return undef;

    <[base.logs]>->(
        2,      "[<] authenticating as '%s'., [%s]",
        $zenka, $link_mode_str
    );
    <[base.net.send_to_socket]>->(
        $backend_socket, sprintf( "%s %s\n", $zenka, $key_str )
    );

    if ( exists $keys{'zenka'}{'session_key'} ) {    ## secure key erasure ##

        my $rand_len = length( $keys{'zenka'}{'session_key'} );
        substr( $keys{'zenka'}{'session_key'},
            0, $rand_len, <[base.prng.characters]>->($rand_len) );
        $keys{'zenka'}{'session_key'}
            .= <[base.prng.characters]>->( 8 + int( rand(11) ) );
        delete $keys{'zenka'}{'session_key'};

        <[base.clean_hashref]>->( \%keys ); ##  remove empty href elements  ##
    }

    return <[auth.zenka.process_auth_reply]>->($backend_socket);

} else {
    <[base.log]>
        ->( 0, 'session_key not set, authentication not possible..,' );
    return undef;
}

#,,..,,,,,,,.,.,,,,.,,.,,,,..,.,,,,.,,..,,,,,,..,,...,..,,.,,,,..,.,.,,,,,..,,
#5Z6AA7ICYKVZ5OXCDCEAJJ3UUT4AK6HIYLY3QU7RMM3UVGPDVXCXIEVWLV2AQWR7AJGERP3TKRPIK
#\\\|I2M7FULYFZOMQCT5DOUDTNI3LKBHHRXH6YZGCVHMKALE4PZUO6Z \ / AMOS7 \ YOURUM ::
#\[7]55AN7VZKZEDU3NOGDNHLVI5MN2UQW5SNPOO7RNECRND2OWHSJUBI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
