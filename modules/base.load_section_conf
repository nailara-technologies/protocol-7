## [:< ##

# name  = base.load_section_conf
# args  = [<target_hashref>,] <file_name_pattern(s)>
# descr = load one or more 'section' config files, return hash_ref to values
# note: the way comments are stripped currently doesn't allow #'s in values!

my $conf_path   = <system.conf_path>;
my $config_data = {};

$config_data = shift if @ARG and ref( $ARG[0] ) eq qw| HASH |;

## config directory supplied ##
$conf_path = shift if @ARG > 1 and -d $ARG[0];

my @cfg_files = @ARG;

return warn 'expected configuration file parameter[s] <{C1}>'
    if @cfg_files == 0
    or @ARG == 1 and -d $ARG[0];

my $match_count = 0;
my $lines_count = 0;
foreach my $file_path (
    <[file.match_files]>->(
        $conf_path, map { sprintf qw| %s$ |, $ARG } @cfg_files
    )
) {

    ( my $file_name = $file_path ) =~ s|^.*/||g;
    <[base.logs]>->( 2, ": loading section config '%s'.,", $file_name );

    my @cfg_lines;

    <[file.slurp]>->( $file_path, \@cfg_lines );
    if ( !@cfg_lines ) {
        <[base.logs]>->(
            0, ": cannot load section config file '%s'", $file_name
        );
        return undef;
    } else {
        $match_count++;
        $lines_count += scalar @cfg_lines;
    }

    my $line_num = 0;
    my ( $section, $sub_section, $sub_sub_section );
    foreach my $line (@cfg_lines) {
        $line_num++;
        $line =~ s{(#.*|\s*)+$}{}g;
        $line =~ s|^\s+||;
        next if $line eq '';
        if ( $line =~ m|^\.:\s*([\w_\-\.]+)\s*:\.$| ) {
            $section         = $LAST_PAREN_MATCH;
            $sub_section     = undef;
            $sub_sub_section = undef;
        } elsif ( $line =~ m|^-\s*([\w_\-\.]+)$| ) {
            $sub_section     = $LAST_PAREN_MATCH;
            $sub_sub_section = undef;
        } elsif ( $line =~ m|^:\s*([\w\[\]_\-\.]+)\s*:$| ) {
            $sub_sub_section = $LAST_PAREN_MATCH;
        } else {
            if ( $line =~ m|^([\w\.\-_]+)\s*=\s*(.+)+$| ) {
                if (    defined $section
                    and defined $sub_section
                    and defined $sub_sub_section ) {
                    $config_data->{$section}{$sub_section}{$sub_sub_section}
                        {$1} = $2;
                } elsif ( defined $section and defined $sub_section ) {
                    $config_data->{$section}{$sub_section}{$1} = $2;
                } elsif ( defined $section ) {
                    $config_data->{$section}{$1} = $2;
                } else {
                    <[base.logs]>->(
                        0, "%s: no section defined for '%s' [ line %d ]",
                        $file_name, $line, $line_num
                    );
                }
            } else {
                <[base.logs]>->(
                    0, "syntax error in '%s' at line %d ['%s']",
                    $file_name, $line_num, $line
                );
            }
        }
    }
}

if ( $match_count == 0 ) {
    <[base.log]>->( 0, ': no configuration file loaded or found .,' );
    <[base.logs]>->( 2, ": : conf-path : '%s' :.", $conf_path );
    map { <[base.logs]>->( 2, ": : :.. '%s'", $ARG ); } @cfg_files;
} else {
    <[base.logs]>->(
        2,            ": %d file%s loaded, %d config line%s.,",
        $match_count, <[base.cnt_s]>->($match_count),
        $lines_count, <[base.cnt_s]>->($lines_count)
    );
}

return $config_data;

#,,,.,,..,.,.,,,,,..,,,,.,.,,,..,,,,,,,,.,,,,,..,,...,...,..,,..,,.,,,,.,,...,
#R7OQI6AAGKLK32MFOGJTHSENDUSSLCJSZCTDIXMHUN7ZGAAYQCOYI5RFUA4DZGPYNN3CGKFNFHLL2
#\\\|KV4UI5V6TWWD3ICN4QOW2FTOLNB4VUYAI2NFYXHS2D3CH3UIOP3 \ / AMOS7 \ YOURUM ::
#\[7]SQKGPRQ6J522HW6C5DVJYE2QPFHZIRFX2FD5ZH55ELVQKNFS4YBA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
