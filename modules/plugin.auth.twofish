## >:] ##

# name   = plugin.auth.twofish
# return = <user_name> [success] | undef [error]

my $id = $_[0]->w->data;
my $re = <regex.base>;

my $input  = \$data{'session'}{$id}{'buffer'}{'input'};
my $output = \$data{'session'}{$id}{'buffer'}{'output'};

my $auth_versn = '0000000';    ### <-- AUTH VERSION ####
my $auth_state = $data{'session'}{$id}{'c25519'} //= {};
my $key_name   = <system.zenka.name>;

if ( $input->$* =~ s|^get-version\n|| )
{    ##  return authentication protocol version  ##
    $output->$* .= sprintf( "TRUE %s\n", $auth_versn );
    return 1;    ## <-- keep connected ##
}
if ( $input->$* =~ s{^get-(srv-(key)|key-(sig|ver))\n}{} ) {
    my $cmd_type = $1;
    my $rep_type = $2 // $3;
    $rep_type = 'sig' if $cmd_type eq 'key-ver';
    if (not defined $keys{'C25519'}{'session'}{$key_name}{"$rep_type-reply"} )
    {
        $output->$* .= "FALSE not available `:|\n";
        return 2;    # <-- terminate [ error state ]

    } elsif ( $cmd_type eq 'srv-key' ) {   ## returns current session p.key ##
        $output->$* .= sprintf( "TRUE %s\n",
            $keys{'C25519'}{'session'}{$key_name}{'key-reply'} );
    } elsif ( $cmd_type eq 'key-sig' ) {   ## returns session key signature ##
        $output->$* .= sprintf( "TRUE %s\n",
            $keys{'C25519'}{'session'}{$key_name}{'sig-reply'} );
    } elsif ( $cmd_type eq 'key-ver' ) {  ## return key and version chk-sum ##
        $output->$* .= sprintf(
            "TRUE %s\n",
            <[chk-sum.bmw.L13_str]>->(
                sprintf( '%s.[%d]',
                    $keys{'C25519'}{'session'}{$key_name}{'sig-reply'},
                    $auth_versn )
            )
        );
    }
    return 1;                             # <-- keeping connection state

} elsif ( $input->$* =~ s|^set-key ($re->{usr_str}) (\S+)( (\S+))?\n|| ) {
    $auth_state->{'peer_name'}          = $1;
    $auth_state->{'peer_pubkey'}        = $2;
    $auth_state->{'peer_net_signature'} = $3;    # optional in 'anon-usr' case

    ## search and check signature [ when provided ] ##
    my $has_net_sig = defined $auth_state->{'peer_net_signature'} ? 1 : 0;

    return 1;                                    ## <-- keep connected ##

} elsif ( $input->$* =~ m|\n| ) {
    $output->$* .= ">:[\n";
    <[base.log]>->( 0, "[$id] authentication protocol mismatch [ twofish ]" );
    return 2;                                    # <-- terminate
} else {
    return 1;                                    ## <-- keep connected ##
}

#,,..,,,.,.,.,...,,,.,..,,...,,,.,,,.,.,,,,.,,..,,...,...,,.,,,,.,,.,,,..,,..,
#VVOYDPIDU2GZ4I4QKRGZAODUSVKE2PU5BNPHCTGCCA4OYP6HJKGYVU225ZON3HHI4ZPHDMZDXY3WK
#\\\|5WUF4KQREOTQQKZS5FLEGXLIFRHHOHPYJOOEMALXB4EMPWVHEKP \ / AMOS7 \ YOURUM ::
#\[7]HDC3VXSUXAD7VGQBCEJRK6D5ENUN6ERFOQHZ2H7IHSKFK4JGYEBQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
