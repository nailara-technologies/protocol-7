## [:< ##

# name  = keys.write_key_archive_file

my $target_path_abs       = shift // '';
my $enc_pwd               = shift // '';
my $overwriting_requested = shift // FALSE;

if ( not length $target_path_abs ) {
    warn 'expected target archive file path parameter <{C1}>';
    return undef;
} elsif ( not length $enc_pwd ) {
    warn 'expected archive encryption password <{C1}>';
    return undef;
} elsif ( -d $target_path_abs ) {
    <[base.s_warn]>->(
        'target path is a directory [ %s ] <{C1}>',
        $target_path_abs
    );
    return undef;
} elsif ( not $overwriting_requested and -e $target_path_abs ) {
    <[base.s_warn]>->(
        'target archive file already exists [ %s ] <{C1}>',
        $target_path_abs
    );
    return undef;
}    ## check dir perms

my $padding_block_size = <keys.size.archive_block>;  ##  13 K initial size  ##

##  preparing archive payload data  ##
##
my $key_archive_ref = <[keys.pack_format.user_key_archive]>;
if ( ref $key_archive_ref ne qw| SCALAR | ) {
    warn 'cannot pack archive <{C1}>';
    return undef;
}

##  adjusting file size if required  ##
##
while ( ( 3 * length $key_archive_ref->$* ) > $padding_block_size ) {
    $padding_block_size *= 3;
}

##  generating file [ padding ] entropy block  ##
##
my $entropy_block_ref = AMOS7::13::gen_entropy_string($padding_block_size);

##  inserting payload at randomized offset  ##
##
if (qw| SCALAR | ne ref    ##  updates data in-place  ##
    <[base.parser.splice_in_data]>->( $entropy_block_ref, $key_archive_ref )
) {
    warn 'error encountered while splicing in payload data <{C1}>';
    return undef;
}

##  initialize enc key from password string  ##
##
my $enc_key = AMOS7::13::key_32( \$enc_pwd );

if ( not defined $enc_key or not length $enc_key ) {
    warn 'error during file enc key derivation <{C1}>';
    return undef;
}
my $status = AMOS7::Twofish::key_init( $enc_key, qw| encryption C25519 | );

if ( not defined $status or not $status ) {
    warn 'error during file encryption key initialization <{C1}>';
    return undef;
}

##  encrypt file data  ##
##
my $enc_C25519_sref
    = AMOS7::Twofish::encrypt( qw| C25519 |, $entropy_block_ref );

if (   not defined $enc_C25519_sref
    or ref $enc_C25519_sref ne qw| SCALAR |
    or not length $enc_C25519_sref->$* ) {
    warn 'encryption error <{C1}>';
    return undef;
}

if ( $overwriting_requested and -e $target_path_abs ) {
    <[base.logs]>->(
        1, 'shredding existing archive file [ as requested ] ..,'
    );
    if ( -x qw| /usr/bin/shred | ) {
        system( qw| /usr/bin/shred -fzu --random-source=/dev/urandom -n 42 |,
            $target_path_abs ) == 0
            or <[base.logs]>->(
            0,                   ': shred file : %s : %s',
            <[base.str.os_err]>, $target_path_abs
            );
    }
    if ( -e $target_path_abs ) {
        unlink($target_path_abs)
            or <[base.logs]>->(
            0,                   ': unlink : %s : %s',
            <[base.str.os_err]>, $target_path_abs
            );
    }
}

##  write key archive file to disk  ##
##
return <[file.put_bin]>->( $target_path_abs, $enc_C25519_sref->$* );

#,,.,,..,,.,,,,,,,..,,,.,,,,.,..,,.,,,.,,,..,,.,.,...,...,.,.,.,,,,,.,..,,,,,,
#YWFWNFGMDLWKYM544LH2M3J4YPFBZKSM5G5IIUEIHQ2VTYESDXPMIOUBKJCRG2ZMLDV66RWGSKE7U
#\\\|SQUHX4BVEW5U32ADDKE7QZNMJHY36TYU6ADXDBKQTN72XV66FFX \ / AMOS7 \ YOURUM ::
#\[7]RHANBC3IUL6CELXKZSNTOC2JTSKM2V7HLVEIMVK2CQPDYBSKU4CY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
