## >:] ##

# name  = base.file.read_timestamped

my $file_name = shift;
my $ext_param = shift // '';
warn 'expected file name parameter <{C1}>' and return undef
    if not defined $file_name;

my $unlink_file = $ext_param eq 'unlink' ? 1 : 0;

my $time_regex = <regex.base.base_32>;

my $file_path;
if ( $file_name =~ m|/| ) {
    $file_path = $file_name;
} else {
    my $zenka_name = <system.zenka.name>;
    my $zenka_path = "/var/run/protocol-7/$zenka_name";
    <[base.log]>->( 2, ": not present :: ['$file_name']" ) and return undef
        if !-d $zenka_path;
    $file_path = catfile( $zenka_path, $file_name );
}

<[base.log]>->( 2, ": not present :: ['$file_name']" ) and return undef
    if !-e $file_path;

my $file_content = ${ <[file.slurp]>->($file_path) };

warn "cannot read '$file_path' [ \l$OS_ERROR ]" and return undef
    if not defined $file_content;
warn "timestamped file '$file_path' was empty" and return undef
    if not length($file_content);

my ( $network_time, $value );
if ( $file_content =~ m|^($time_regex)(\s+(.+)\s?)?\n| ) {
    $network_time = $1;
    $value        = $3;
} else {
    warn "invalid syntax in '$file_path'";
    return undef;
}

if ($unlink_file) {
    if ( !-o $file_path or !-w $file_path ) {
        warn "not unlinking '$file_path' [ ownership \ permission ] {C1}";
    } else {
        unlink($file_path) or warn "cannot unlink '$file_path' {C1}";
    }
}

return ( $network_time, $value );

#,,..,.,.,..,,,.,,,..,,..,...,.,.,.,.,,..,.,.,..,,...,...,.,,,,..,,,,,,.,,...,
#UR44VN3AJB52N2XAI3BAJ4KI2JSK2WR3GVKTBEHM24CC4K4YBZNJ5T6QFAMSNZ4FWV5KSRM76NRFK
#\\\|C5YT33G4JNYC3ZYBYWINHAY2H4R6ASMP2ZVQYRAEPTAHIGYPSDX \ / AMOS7 \ YOURUM ::
#\[7]4W3HWX6NOZOPGTIFNE44B3SVX2L5IFDWGCK37REDAC7ESXZC5EDI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
