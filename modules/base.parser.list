## >:] ##

# name  = base.parser.list
# descr = returns a parsed list table according to supplied specification mask
# todo  = fix alignment [width] bug. [<key>:ex0 and ex0:ex1 cases]
#         :     apparenly accumulative offset as result of 'align'

(   my $h_name, my $h_key,    my $sub_key, my $display_keys,
    my $align,  my $defaults, my $filters, my $sort_key
    )
    = map { $ARG[0]->{$ARG} }
    qw|  var  key  sub_key  mask  align  defaults  filters  sort_key  |;

my $list_error = sprintf "\n\n%67s\n\n\n",
    'error in list definition  [  details have been logged  ]';

my %max_len;
my $data_ref;
my $spacing      = 4;
my $table_string = "\n";

warn "invalid variable name '$h_name' <{C1}>" and return $list_error
    if $h_name !~ m|^[a-z][\w_]*$|i;

if ( $h_key !~ m|\.| ) {
    no strict 'refs';
    $data_ref = ${$h_name}{$h_key};
    use strict 'refs';
} elsif ( $h_key =~ m|^\w[\w\.\-]+\w$| ) {
    $h_key =~ s|\.|'}{'|go;
    no strict 'refs';
    eval "\$data_ref = \${'$h_name'}{'$h_key'}";
    use strict 'refs';
    die $EVAL_ERROR if $EVAL_ERROR;
} else {
    die "invalid list key syntax in '$h_key'";
}

warn "parser.list: data reference '\$$h_name' not defined <{C1}>"
    and return $list_error
    if not defined $data_ref;

# .: preparation :.
my $table_width = 0;
foreach my $key_name ( @{$display_keys} ) {
    my $index        = 0;
    my $key_name_str = $key_name;
    my $key_orig_str = $key_name;
    if ( $key_name_str =~ s|^<key>:|| ) {
        $index        = 1;
        $key_orig_str = $key_name_str;
    } else {
        $key_name_str =~ s|^([^:]+):([^:]+)$|$2|;
        $key_orig_str = $1 if defined $1;
    }
    $max_len{$key_name} = length($key_name_str) + $spacing + 3;
    foreach my $key_val ( keys(%$data_ref) ) {
        next
            if defined $sub_key
            and not exists $data_ref->{$key_val}->{$sub_key}; # only requested
        my $value_str = $key_val;
        if ( !$index ) {
            $value_str = $data_ref->{$key_val}->{$key_orig_str};
        }
        $value_str //= '';
        my $filtered_val
            = <[base.call_filter]>->( $filters, $key_orig_str, $value_str );
        $max_len{$key_name} = length($filtered_val) + 4
            if length($filtered_val) > $max_len{$key_name} - 3;
    }
    $table_width += $max_len{$key_name};
}

# .: header :.
foreach my $key_name ( @{$display_keys} ) {
    my $key_name_str = $key_name;
    $key_name_str =~ s|^<key>:||;
    $key_name_str =~ s|^[^:]+:([^:]+)$|$1|;
    $key_name_str =~ s|_| |g;
    my $len = length($key_name_str) + $spacing;
    $table_string
        .= pack( "A$max_len{$key_name}", " : " . $key_name_str . " :." );
}
$table_string =~ s| +$||;
my $last_d_key = $$display_keys[ scalar @{$display_keys} - 1 ];
$max_len{$last_d_key} -= 2;
$table_width-- if $table_width >= 80;
my $sub_line  .= '-' x $table_width;
$table_string .= "\n$sub_line\n";

my @sorted_keys = <[base.reverse-sort]>->($data_ref);

# .: custom sorting :.

if ( defined $sort_key ) {
    my $sort_type = $sort_key =~ s|^([^:]+):|| ? $1 : qw| reverse-len-alpha |;

    if ( $sort_type eq 'alpha-len' ) {  ## length-ascending \ reverse-alpha ##
        @sorted_keys
            = <[base.reverse-sort.key-name]>->( $sort_key, $data_ref );
    } elsif ( $sort_type eq qw| alpha | ) {
        eval { @sorted_keys = sort keys( %{$data_ref} ); };
    } elsif ( $sort_type eq qw| num | ) {
        eval {
            @sorted_keys = grep {m|.|} sort {
                ( $data_ref->{$a}->{$sort_key} // 0 )
                    <=> ( $data_ref->{$b}->{$sort_key} // 0 )
                }
                keys %{$data_ref};
        };
    } elsif ( $sort_type eq qw| reverse-num | ) {
        eval {
            @sorted_keys = sort {
                $data_ref->{$b}->{$sort_key} <=> $data_ref->{$a}->{$sort_key}
                }
                keys %{$data_ref};
        };
    } elsif ( $sort_type eq qw| reverse-len-alpha | )
    {    ##  [ base sort order ]  length-descending \ reverse-alpha ##
        @sorted_keys
            = <[base.reverse-sort.key-name]>->( $sort_key, $data_ref );
    } else {
        warn "unknown sort_type '$sort_type'";
    }
}

warn "custom sort failed [$EVAL_ERROR]" if defined $sort_key and $EVAL_ERROR;

##  .: data :.  ##

foreach my $key_val (@sorted_keys) {
    next if exists $data{'lists_hidden'}{$key_val};
    next
        if defined $sub_key
        and not defined $data_ref->{$key_val}->{$sub_key}
        ;    ## only requested ##

    foreach my $key_name ( @{$display_keys} ) {
        my $key_name_str = $key_name;
        if ( $key_name_str =~ s|^<key>:|| ) {
            $table_string .= '  '
                . <[base.parser.align]>->(
                $align->{$key_name_str} || qw| left |,
                <[base.call_filter]>->( $filters, $key_name_str, $key_val ),
                $max_len{$key_name} - 1
                ) . ' ';    # <-- LLL: remove ' '!
        } else {
            my $len = $max_len{$key_name};
            $key_name_str =~ s|:.+$||;
            my $value = $data_ref->{$key_val}->{$key_name_str};
            my $val_default
                = defined $defaults->{$key_name_str}
                ? $defaults->{$key_name_str}
                : '';
            $val_default =~ s|<key>|$key_val|;
            $value = $val_default if !length($value);
            $value
                = <[base.call_filter]>->( $filters, $key_name_str, $value );
            $table_string .= <[base.parser.align]>->(
                $align->{$key_name_str} || qw| left |,
                $value, $len - 1
            ) . ' ';
        }
    }
    $table_string =~ s| +$||;
    $table_string .= "\n";
}

return $table_string . "\n";

#,,..,...,,.,,,.,,..,,..,,,.,,,,.,.,.,.,.,,,.,..,,...,...,,,.,,,.,,,.,,,.,...,
#W3DX3TU6OK4TQDWS7PB3GY4GW6XSZPZSEK4CBVZ6U63MKXDVVMGKGBUPQB5OM3AAZLR3XNT6ZGAYI
#\\\|NO6H4WU7MGUYF4IWVLVOLISD6HAF2WSLUKEQ5POCLTAVMBYIJ5Q \ / AMOS7 \ YOURUM ::
#\[7]OAVYZOZW3N56E6GL4Q6AVDC5PUVAIZFIGWUETZVRNJCGTJ2IG2AI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
