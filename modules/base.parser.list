# >:]

# name  = base.parser.list
# descr = returns a parsed list table according to supplied specification mask
# todo  = fix alignment (width) bug! (<key>:foo and foo:bar cases)

our ( $h_name, $h_key, $sub_key, $display_keys, $align, $filters )
    = map { $_[0]->{$_} } qw| var key sub_key mask align filters |;

my %max_len;
my $data_ref;
my $spacing      = 4;
my $table_string = "\n";
die "invalid variable name '$h_name'" if $h_name !~ /^[a-z][\w_]*$/i;
if ( $h_key !~ /\./ ) {
    no strict 'refs';
    $data_ref = ${$h_name}{$h_key};
    use strict 'refs';
} elsif ( $h_key =~ /^\w[\w\.]+\w$/ ) {
    $h_key =~ s|\.|'}{'|go;
    no strict 'refs';
    eval "\$data_ref = \${'$h_name'}{'$h_key'}";
    use strict 'refs';
    die $@ if $@;
} else {
    die "invalid list key syntax in '$h_key'";
}

# .: preparation :.
my $table_width = 0;
foreach my $key_name ( @{$display_keys} ) {
    my $index        = 0;
    my $key_name_str = $key_name;
    my $key_orig_str = $key_name;
    if ( $key_name_str =~ s/^<key>:// ) {
        $index        = 1;
        $key_orig_str = $key_name_str;
    } else {
        $key_name_str =~ s/^([^:]+):([^:]+)$/$2/;
        $key_orig_str = $1 if defined $1;
    }
    $max_len{$key_name} = length($key_name_str) + $spacing + 3;
    foreach my $key_val ( keys(%$data_ref) ) {
        next
            if defined $sub_key
            and not exists $data_ref->{$key_val}->{$sub_key};   # only requested
        my $value_str = $key_val;
        if ( !$index ) {
            $value_str = $data_ref->{$key_val}->{$key_orig_str};
        }
        $value_str //= '';
        my $filtered_val
            = <[base.call_filter]>->( $filters, $key_orig_str, $value_str );
        $max_len{$key_name} = length($filtered_val) + 3
            if length($filtered_val) > $max_len{$key_name} - 3;
    }
    $table_width += $max_len{$key_name};
}

# .: header :.
foreach my $key_name ( @{$display_keys} ) {
    my $key_name_str = $key_name;
    $key_name_str =~ s/^<key>://;
    $key_name_str =~ s/^[^:]+:([^:]+)$/$1/;
    $key_name_str =~ s/_/ /g;
    my $len = length($key_name_str) + $spacing;
    $table_string
        .= pack( "A$max_len{$key_name}", " : " . $key_name_str . " :." );
}
my $last_d_key = $$display_keys[ scalar @{$display_keys} - 1 ];
$max_len{$last_d_key} -= 2;
my $sub_line  .= '-' x $table_width;
$table_string .= "\n$sub_line\n";

# .: data :.
foreach
    my $key_val ( sort { length $a <=> length $b } sort keys( %{$data_ref} ) ) {
    next
        if defined $sub_key
        and not exists $data_ref->{$key_val}->{$sub_key};  # show only requested
    foreach my $key_name ( @{$display_keys} ) {
        my $key_name_str = $key_name;
        if ( $key_name_str =~ s/^<key>:// ) {
            $table_string .= '  '
                . <[base.parser.align]>->(
                $align->{$key_name_str} || 'left',
                <[base.call_filter]>->( $filters, $key_name_str, $key_val ),
                $max_len{$key_name} - 1
                ) . ' ';
        } else {
            my $len = $max_len{$key_name};
            $key_name_str =~ s|:.+$||;
            my $value = $data_ref->{$key_val}->{$key_name_str};
            $value //= '';
            $value = <[base.call_filter]>->( $filters, $key_name_str, $value );
            $table_string .= <[base.parser.align]>->(
                $align->{$key_name_str} || 'left',
                $value, $len - 1
            ) . ' ';
        }
    }
    $table_string .= "\n";
}
$table_string .= "\n";
return $table_string;
