# >:]

# name  = base.parser.list
# descr = returns a parsed list table according to supplied specification mask

my ( $h_name, $h_key, $sub_key, $display_keys )
    = map { $_[0]->{$_} } ( 'var', 'key', 'sub_key', 'mask' );

my %alias;
my %str_len;
my $spacing  = 4;
my $out_data = "\n";
my @shown_entries;

foreach my $genit ( 0 .. 1 ) {

    # .: header :.
    my $sub_line;
    foreach my $_key ( @{$display_keys} ) {
        if ( $_key =~ s/^([^\:]+)\:// ) { $alias{$_key} = $1; }
        if ($genit) {
            my $len = int( $str_len{$_key} + $spacing );
            ( my $_key_str = $_key ) =~ s/_/ /g;
            $out_data .= pack( "A$len", " : " . $_key_str . " :." );
            $sub_line .= '-' x $len;
        } else {
            $str_len{$_key} = length($_key) + 4;
        }
    }
    $out_data .= "\n$sub_line\n" if $genit;

    # .: data :.
    my $loop_count = 0;
    no strict 'refs';    # /o\
    foreach my $new_key ( keys( %{ ${$h_name}{$h_key} } ) ) {

        next
            if defined $sub_key
            and not exists ${$h_name}{$h_key}{$new_key}->{$sub_key};

        if ( ++$loop_count == 1 ) {
            use strict 'refs';    # \o/
        }
        foreach my $__key ( @{$display_keys} ) {
            my $len = "A" . int( $str_len{$__key} + $spacing );
            if ( $genit and defined $alias{$__key} ) {
                $out_data .= '  ' . pack( $len, $new_key );

            }
            foreach my $_new_key ( keys( %{ ${$h_name}{$h_key}{$new_key} } ) ) {
                my $_val;
                if ( not defined $alias{$__key} and $_new_key eq $__key ) {
                    $_val = ${$h_name}{$h_key}{$new_key}{$_new_key};
                    if ($genit) { $out_data .= pack( $len, $_val ) }
                    elsif ( length($_val) > $str_len{$__key} ) {
                        $str_len{$__key} = length($_val);
                    }
                } elsif ( defined $alias{$__key} ) {
                    if ( ( length($_val) || 0 ) > $str_len{$__key} ) {
                        $str_len{$__key} = length($_val);
                    }
                    if ( length( $alias{$__key} ) + 2 > $str_len{$__key} ) {
                        $str_len{$__key} = length( $alias{$__key} ) + 2;
                    }
                }
            }
        }
        if ($genit) { $out_data .= "\n" }
    }
}
$out_data =~ s#\n\s+\n+|\s+\n#\n#g;
$out_data .= "\n";
return $out_data;
