# >:]

# name  = base.parser.list
# descr = returns a parsed list table according to supplied specification mask

our ( $h_name, $h_key, $sub_key, $display_keys, $filters )
    = map { $_[0]->{$_} } qw| var key sub_key mask filters |;

my %max_len;
my $spacing  = 4;
my $out_data = "\n";
no strict 'refs';
my $data_ref = ${$h_name}{$h_key};
use strict 'refs';

# .: preparation :.
my $table_width = 0;
foreach my $key_name ( @{$display_keys} ) {
    my $index        = 0;
    my $key_name_str = $key_name;
    if ( $key_name_str =~ s/^([^\:]+)\:// ) { $index = 1 }
    $max_len{$key_name} = length($key_name_str) + $spacing + 3;
    foreach my $key_val ( keys(%$data_ref) ) {
        next
            if defined $sub_key
            and not exists $data_ref->{$key_val}->{$sub_key};   # only requested
        my $value_str = $key_val;
        $value_str = $data_ref->{$key_val}->{$key_name} || '' if !$index;
        my $f_val = $code{'base.call_filter'}
            ->( $filters, $key_name_str, $value_str );
        $max_len{$key_name} = length($f_val) + $spacing
            if length($f_val) > $max_len{$key_name} - $spacing;
    }
    $table_width += $max_len{$key_name};
}

# .: header :.
foreach my $key_name ( @{$display_keys} ) {
    my $key_name_str = $key_name;
    $key_name_str =~ s/^([^\:]+)\://;
    $key_name_str =~ s/_/ /g;
    my $len = length($key_name_str) + $spacing;
    $out_data .= pack( "A$max_len{$key_name}", " : " . $key_name_str . " :." );
}
my $sub_line .= '-' x $table_width;
$out_data .= "\n$sub_line\n";

# .: data :.
foreach
    my $key_val ( sort { length $a <=> length $b } sort keys( %{$data_ref} ) ) {
    next
        if defined $sub_key
        and not exists $data_ref->{$key_val}->{$sub_key};  # show only requested
    foreach my $key_name ( @{$display_keys} ) {
        my $key_name_str = $key_name;
        if ( $key_name_str =~ s/^([^\:]+)\:// ) {
            $out_data .= '  '
                . pack( "A$max_len{$key_name}",
                $code{'base.call_filter'}->( $filters, $key_name_str, $key_val )
                );
        } else {
            my $value = $data_ref->{$key_val}->{$key_name} || '';
            $out_data .= pack( "A$max_len{$key_name}",
                $code{'base.call_filter'}->( $filters, $key_name, $value ) );
        }
    }
    $out_data .= "\n";
}
$out_data .= "\n";
return $out_data;
