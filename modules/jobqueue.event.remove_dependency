# >:]

# name  = jobqueue.event.remove_dependency
# descr = takes a job dependency out of the list (removes watcher on last one)

my ($job_id, $dependency_job_ids) = (shift, join(' ',@_));
die "no job id specified" if not defined $job_id;
die "no dependency job id[s] specified" if not defined $dependency_job_ids;

<watcher.dependencies> = {} if not exists <watcher.dependencies>;
my $watchers = <watcher.dependencies>;

die "no watcher for job '$job_id' dependencies installed"
  if not exists $watchers->{$job_id};

<jobqueue.dependencies.job_id> = {}
  if not exists <jobqueue.dependencies.job_id>;
my $status = <jobqueue.dependencies.job_id>;

die "for job '$job_id' no dependencies are registered"
  if not exists $status->{$job_id};

$dependency_job_ids =~ s/^\s+|\s+$//g;
my %remove_dependencies = map { $_ => 1 } split(/\s+/, $dependency_job_ids);

my $deleted = 0;
my %new_dependencies = map { my $dependency = $_;
  if ( $dependency !~ /^\d+$/ ) {
    [base.log:0,"invalid dependency for job '$job_id' \[$dependency\]"];
    next;
  } elsif(exists $remove_dependencies{$dependency}) {
    $deleted++;
  } else {
    $dependency => 1
  }
} split(/\s+/, $dependency_job_ids);

my $dependency_string = join(' ', keys(%new_dependencies));

if (!$deleted) {
  [base.log:0,"remove_dependency: job '$job_id' had no"
    ." dependencies matching '$dependency_job_ids'"];
  return;
}

$status->{$job_id} = $dependency_string;

if(not defined $status->{$job_id} or length($status->{$job_id}) <= 1) {
  delete $status->{$job_id} if exists $status->{$job_id};
  if (exists $watchers->{$job_id}) {
    $watchers->{$job_id}->now;
    $watchers->{$job_id}->cancel;
    delete $watchers->{$job_id};
  }
}
