# >:]

# name = browser.parent.handler.url_list_reply
# todo = implement continuous playback in case current file is in playlist!

my $width;
my $reply = shift;

if ( $reply->{'cmd'} eq 'NACK' ) {
    <[base.log]>->( 0, "failed to fetch url list!" );
    return;
}

if ( $reply->{'call_args'}->{'args'} == 0 ) {
    <[base.log]>->( 0, "received empty url list!" );
    return;
}

my @url_list = split( "\n", $reply->{'data'} );

my $entry_count = scalar @url_list;

foreach my $url (@url_list) {
    my $url_txt = substr( $url, 0, 52 );
    $url_txt .= '...' if length($url_txt) < length($url);
    <[base.log]>->( 1, ": - $url_txt" );
}
<[base.log]>->( 1, ": $entry_count entries received" );

@{<browser.url.list_reply>} = @url_list;

my $index = 0;
foreach my $entry (@url_list) {
    if ( $entry !~ /\.pdf$/i ) {
        push( @{<browser.url.list>}, $entry );
    } else {
        if ( not defined $width ) {
            $width = $1 if <x11.geometry> =~ /^(\d+)x/;
            die "failed to obtain browser window width" if not defined $width;
        }
        <[base.proto.nailara.command.send.local]>->(
            {   'command'   => "core.pdf2html.get_url",
                'call_args' => { 'args' => "$entry $width" },
                'reply'     => {
                    'handler' => 'browser.parent.handler.pdf2html_reply',
                    'params'  => { 'index' => $index }
                }
            }
        );

    }
    $index++;
}

if (    @{<browser.url.list>}
    and <browser.slideshow.autostart>
    and !<browser.slideshow.running> ) {
    <[base.log]>->( 1, ": starting slideshow.." );
    <[browser.parent.cmd.slideshow_start]>;
}
