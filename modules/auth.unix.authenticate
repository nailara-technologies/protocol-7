## [:< ##

# name  = auth.unix.authenticate
# descr = unix domain socket client
# todo  = implement client side authentication timeout

## use\create protocol module registry for enabled\loaded nethods ##     [LLL]
return warn "module 'protocol.protocol-7' not loaded <{C1}>"
    if not <[base.is_defined_recursive]>->(qw| protocol.protocol-7.connect |);

my ( $backend_socket, $user ) = @ARG;

my $answer;
my $banner_string;

my $re_proto_banner = <protocol.protocol-7.regex.protocol-version>;

if ( not defined $re_proto_banner
    or index( ref $re_proto_banner, qw| Regexp | ) == -1 ) {
    warn 'protocol banner regexp not defined, cannot authenticate <{C1}>';
    return undef;
}

my $protocol_messages = <protocol.protocol-7.connect>;
my $protocol_banner   = $protocol_messages->{'banner'};
my $proto_msg_timeout = $protocol_messages->{'timeout'};

if (   not defined $backend_socket
    or not -S $backend_socket
    or not $backend_socket->connected ) {
    <[base.log]>->(
        0, 'auth.unix : cannot authenticate [ have no valid socket ]'
    );
    return undef;
}

my $read_len
    = [ minmax( map {length} $protocol_banner, $proto_msg_timeout ) ]->[1];
my $bytes_read
    = <[base.s_read]>->( $backend_socket, \my $banner_string, $read_len )
    // 0;

if ( $bytes_read > 0 ) {
    if ( $banner_string =~ $re_proto_banner ) {
        <[base.log]>->( 2, '[*] Protocol 7 banner detected.,' );

        my $protocol_7_version = $LAST_PAREN_MATCH;
        $data{'handle'}{$backend_socket}{'P7_version'}
            = $protocol_7_version;    ## linking version with handle ##

        <[base.logs]>->(
            2, '[v] protocol 7 version %s .,',
            $protocol_7_version
        );

    } elsif ( $banner_string eq $proto_msg_timeout ) {
        <[base.log]>->( 2, '[#] authentication timeout :|' );
        return undef;
    } else {
        <[base.log]>->( 0, '[#] protocol error [ no valid banner : unix ]' );
        return undef;
    }
} else {
    <[base.log]>->( 0, 'auth.unix : [#] network error [ nothing received ]' );
    return undef;
}

<[protocol.protocol-7.auth.select-method]>->( $backend_socket, qw| unix | )
    or return undef;

##  registering session as $user  ##
<[base.net.send_to_socket]>->(
    $backend_socket, sprintf( "auth %s\n", $user )
);

return <[auth.zenka.process_auth_reply]>->($backend_socket);

#,,..,...,.,,,...,,..,...,.,,,,,.,.,,,,..,,..,..,,...,...,...,..,,...,,.,,.,.,
#YOMDC3CMBMMOJMAAL6EXSZAOSSJF3JUGCP7OR7SFTI3BMMB2UTFOND4UJAYFDJUIRYG5KCR6ID3HC
#\\\|W4CFULYIOCWVRNVRHNIMX6ONOJKXQVZDTOR6W55XOPU7NNZSMM3 \ / AMOS7 \ YOURUM ::
#\[7]UTSI7DYMPRYLGCMRVQUIMG2D654GH3HG7KNNI7AYLQA6B2SXK2DY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
