## >:] ##

# name  = keys.console.dec-key
# param = <key-name>
# descr = convert a key file to unencrypted

my $key_name = shift;

return print "\n  << expected <key_name> parameter >>\n\n"
    if not defined $key_name;

my $key_status = <[crypt.C25519.encrypted_key]>->($key_name);

if ( $key_status < 0 ) {
    my $err_reason_str;
    if ( $key_status == -1 ) {
        $err_reason_str = sprintf "only public key named '%s' found",
            $key_name;
    } elsif ( $key_status == -2 ) {
        $err_reason_str = sprintf 'user-key %s not found', $key_name;
    } elsif ( $key_status == -3 ) {
        $err_reason_str = 'error reading private keyfile';
    } elsif ( $key_status == -4 ) {
        $err_reason_str = 'not a valid key format';
    } elsif ( $key_status == -5 ) {
        $err_reason_str = 'key is virtual [ seed-phrase generated ]';
    } else {
        $err_reason_str = 'undefined error';
    }
    return printf "\n  << %s >>\n\n", $err_reason_str;
    <[base.exit]>->(qw| 0110 |);
} elsif ( $key_status == 0 ) {
    return printf "\n  ::  '%s' private key is already unencrypted  ::\n\n",
        $key_name;
}

my $key_filenames = <[crypt.C25519.key_vars]>->($key_name)->{'key_filename'};

foreach my $type (qw|  private  public  |) {
    if ( not -w $key_filenames->{$type} ) {
        <[base.logs]>->(
            0,
            'no write permissions : %s',
            $key_filenames->{$type}
        );
        goto ABORT_KEY_DECRYPT;
    }
}

my $load_success = <[crypt.C25519.load_keypair]>->( $key_name, undef, TRUE );

if ( not defined $load_success ) {
    warn 'cannot load key files <{NC}>';
    goto ABORT_KEY_DECRYPT;
} elsif ( not $load_success ) {
    goto ABORT_KEY_DECRYPT;
}

my $backup_file_names;
ANOTHER_FILE_TIMESTAMP:
my $tstamp = <[base.ntime.b32]>->( 5, TRUE ) // '';
<[base.exit]>->( qw| 0110 |, 'cannot acquire timestamp' )
    if not length $tstamp;
foreach my $type (qw|  private  public  |) {
    if (   not defined $key_filenames->{$type}
        or not -f $key_filenames->{$type} ) {
        <[base.s_warn]>->(
            'error while acquiring %s key filename <{C1}>', $type
        );
        goto ABORT_KEY_DECRYPT;
    }
    $backup_file_names->{$type} = sprintf qw| %s.renaming.%s |,
        $key_filenames->{$type}, $tstamp;
    goto ANOTHER_FILE_TIMESTAMP if -e $backup_file_names->{$type};
}

foreach my $type (qw|  private  public  |) {

    if ( not rename( $key_filenames->{$type}, $backup_file_names->{$type} ) )
    {
        <[base.logs]>->(
            0,
            'cannot create key backup file %s --> %s [ %s ]',
            $key_filenames->{$type},
            $backup_file_names->{$type},
            <[base.str.os_err]>
        );
        if ( $type eq qw| public | ) {    ##  restore first file  ##
            rename(
                $backup_file_names->{'private'},
                $key_filenames->{'private'}
                )
                or <[base.s_warn]>->(
                '%s [ while restore of %s ]',
                $key_filenames->{'private'}
                );
        }
    }
}

( my $keywrite_status, my $key_checksum )
    = <[crypt.C25519.write_keys]>->($key_name);

if ( defined $keywrite_status and $keywrite_status == 5 ) {
    <[base.log]>->( 1, 'write was successful, removing backup files..,' );

    foreach my $type (qw|  private  public  |) {
        if ( not unlink( $backup_file_names->{$type} ) ) {
            <[base.s_warn]>->(
                '%s : while unlinking key file backup : %s',
                <[base.str.os_err]>, $backup_file_names->{$type}
            );
        }
    }

    <[crypt.C25519.clear_chksums]>;    ##  cleaning key chksum cache  ##

    printf( "::[  success : private key %s %s now unencrypted  ]::\n\n",
        $key_name, $key_checksum );

    <[base.exit]>->(qw| 00000 |);
} else {
    <[base.log]>
        ->( 0, 'write was not successful, restoring backup files..,' );
    foreach my $type (qw|  private  public  |) {
        if (not
            rename( $backup_file_names->{$type}, $key_filenames->{$type} ) ) {
            <[base.logs]>->(
                0,
                'cannot move back key backup file : %s --> %s [ %s ]',
                $backup_file_names->{$type},
                $key_filenames->{$type},
                <[base.str.os_err]>
            );
        }
    }
}

ABORT_KEY_DECRYPT:
<[base.exit]>->( qw| 0110 |, ':, no changes.', 0 );

#,,,.,..,,,.,,,,.,...,,,,,.,.,,.,,..,,.,.,,,.,.,.,...,...,.,.,,.,,..,,,..,...,
#2KC4534P7MPJ2CVDFBMUPTRCZ67VYFISPLRV3EGSYWUSESGU4FLRCCOPXD3552HS7BA4E26VG7EUA
#\\\|ODRPAWIADHMROJX2MQTPS333OZIJE3GTJUOPEUXDKL4KU3DIAXZ \ / AMOS7 \ YOURUM ::
#\[7]UBB3VPQRATXTTWB3JDJKYXQXXDXJGYGB2XGCXW5X7EET2XNCP2BI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
