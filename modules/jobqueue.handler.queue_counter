# >:]

# name = jobqueue.handler.queue_counter

my ( $queue_name, $counter_ref ) = @{ $_[0]->w->data };
<jobqueue.counter.last> //= {};
<jobqueue.counter.last>->{$queue_name} //= 0;

return if $$counter_ref == 0;

[base.log: 0, "queue_name: '$queue_name', count: $$counter_ref last: "
        . <jobqueue.counter.last>->{$queue_name} ];

if ( $queue_name eq 'queued' ) {
    my ( $job_id, $job_data ) = [jobqueue.get_next_job:$queue_name];
print "[jobqueue.depending] > ".Dumper(<jobqueue.depending>);
#exit;
    return if not defined $job_id;
    if (    exists <jobqueue.depending>
        and exists <jobqueue.depending>->{$job_id}
        and defined <jobqueue.depending>->{$job_id}
        and length( <jobqueue.depending>->{$job_id} ) )
    {
        [jobqueue.register_dependency:$job_id,
            <jobqueue.depending>->{$job_id}];
        [jobqueue.move_job: $job_id, 'depending'];
        [base.log: 1, "moved job '$job_id' into dependency queue"];
    }
    else {
        [jobqueue.exec_job:$job_id];
        $code{'jobqueue.move_job'}->( $job_id, 'running' );
    }
}
elsif ($queue_name eq 'failed') {
    (my $job_id, my $job_data) = $code{'jobqueue.get_next_job'}->($queue_name);
#    my $return_code = $code{'jobqueue.exec_job'}->($job_id);
    $code{'jobqueue.move_job'}->( $job_id, 'queued' );
}

<jobqueue.counter.last>->{$queue_name} = $$counter_ref;
