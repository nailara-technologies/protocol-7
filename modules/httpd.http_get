# >:]

# name = httpd.http_get

my $id        = shift;
my $session   = $data{'session'}{$id};
my $http_host = <[httpd.determine_host]>->($id);

return <[httpd.error_page]>->( $id, 400 ) if not defined $http_host;  # bad req.

my $request     = $session->{'http'}->{'request'};
my $response    = $session->{'response'};
my $headers     = $request->{'headers'};
my $req_host    = $request->{'host'};
my $http_uri    = $request->{'uri'};
my $link_target = <httpd.cfg.hostnames>->{$http_host}
    if exists <httpd.cfg.hostnames>->{$http_host};

if (    $link_target =~ /^\d{3}$/
    and -l <httpd.site_dir> . '/' . $http_host
    and !-e <httpd.site_dir> . '/' . $link_target ) {    # special codes

    $session->{'watcher'}->{'input_handler'}->cancel;
    if ( $link_target ne '000' ) {    # n > 000 == HTTP error codes
        <[base.log]>->(
            1, "[$id] status '$link_target' for requested host '$req_host'"
        );
        $session->{'buffer'}->{'output'}
            .= <[httpd.error_page]>->( $id, $link_target );
        $session->{'flush_close'} = 1;
    } else {
        <[base.log]>->( 1, "[$id] (000) dropping host request '$req_host'" );
        $session->{'close'} = 1;
    }
    return 2;
}

$session->{'http'}{'request'}{'matched_host'} = $http_host;

if ( exists $headers->{'range'} ) {

    # print 'headers{range} : ' . Dumper( $headers->{'range'} );

    my $bad_req = 0;
    my $max_len = 1024;
    if ( length( $headers->{'range'} ) > $max_len ) {
        $bad_req = 1;
    } else {
        $headers->{'range'} =~ s| +||g;
    }
    $bad_req = 1 if $headers->{'range'} !~ s|^bytes=||;
    my $range_reg = qr/(\d+-\d+|-\d+|\d+-)/;
    return <[httpd.error_page]>->( $id, 400 )    # Bad Request
        if $bad_req
        or $headers->{'range'} !~ /^$range_reg(,$range_reg)*$/;
}

my $file_path;

# ...

if ( defined $http_host and defined $link_target ) {
    <[base.log]>->(
        1,
        sprintf( "[$id] matched Host '%s' -> '$http_host'",
            $session->{'http'}{'request'}{'host'} )
    ) if $http_host ne $session->{'http'}{'request'}{'host'};

    my $base_dir = <httpd.cfg.hostnames>->{$http_host};
    $file_path = "$base_dir$http_uri";
    $file_path =~ s|/$||;
    if ( -d $file_path ) {    # XXX: support !html index
        $file_path .= '/index.html' if -f $file_path . '/index.html';
    }
    if ( -f $file_path ) {
        my @stat         = stat($file_path);
        my $content_size = $stat[7];
        my @byte_ranges;
        goto skip_range
            if not exists $headers->{'range'}
            or not defined $headers->{'range'};
        $response->{'params'}->{'Content-Range'} = "bytes */$content_size";
        foreach my $range_str ( split /,/, $headers->{'range'} ) {
            my ( $start, $end );
            ( $start, $end ) = ( $1, $2 ) if $range_str =~ /^(\d+)-(\d+)$/;
            ( $start, $end ) = ( 0, $1 ) if $range_str =~ /^-(\d+)$/;
            ( $start, $end ) = ( $1, $content_size - 1 )
                if $range_str =~ /^(\d+)-$/;
            return <[httpd.error_page]>->( $id, 416 )    # Range Not Satisfiable
                if $start >= $content_size
                or $end >= $content_size
                or $end < $start;
            map {    # check for overlapping ranges
                return
                    <[httpd.error_page]>->( $id, 416 )   # Range Not Satisfiable
                    if ($start >= $_->{'start'}
                    and $start <= $_->{'end'} )
                    or ($end >= $_->{'start'}
                    and $end <= $_->{'end'} )
            } @byte_ranges;
            push( @byte_ranges, { 'start' => $start, 'end' => $end } );
        }
        delete $response->{'params'}->{'Content-Range'};
        $request->{'range'} = \@byte_ranges if @byte_ranges;
    skip_range:

        # print "\n range : " . Dumper( $request->{'range'} );

        if ( $content_size <= 16 * 1024 and not exists $request->{'range'} ) {
            return
                <[httpd.serve_file]>
                ->( { 'sid' => $id, 'path' => $file_path, 'stat' => \@stat } );
        } else {
            return
                <[httpd.download_init]>
                ->( { 'sid' => $id, 'path' => $file_path, 'stat' => \@stat } );
        }
    }
} else {
    return <[httpd.error_page]>->( $id, 400 );    # Bad Request
}

return <[httpd.error_page]>->( $id, 404 )         # Not Found
    if not defined $file_path
    or !-f $file_path;
