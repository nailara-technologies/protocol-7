# >:]

# name = browser.gtk3.init_window

my ( $instance_id, $geometry ) = @_;

my ( $size_x, $size_y, $pos_x, $pos_y ) = (
    <browser.default_size.x>,     <browser.default_size.y>,
    <browser.default_position.x>, <browser.default_position.y>
);
( $size_x, $size_y, $pos_x, $pos_y ) = ( $1, $2, $4, $5 )
    if defined $geometry
    and $geometry =~ /^(\d+)x(\d+)(([\-\+]\d+)([\-\+]\d+))?$/;

<browser.window_size> = { 'x' => $size_x, 'y' => $size_y };

my $browser_root = '/tmp/.browser';
mkdir($browser_root) if !-d $browser_root;
chdir($browser_root);
$ENV{'HOME'} = $browser_root;

%{<browser.blocked_event_types>} = map { $_ => 1 } qw(
    key-press
    key-release
    button-press
    2button-press
    3button-press
    motion-notify
    button-release
    script-alert
    script-prompt
    script-confirm
    run-file-chooser
);

delete @{<browser.blocked_event_types>}{qw(key-press key-release)}
    if <browser.cfg.allow_text_edit>;

delete @{<browser.blocked_event_types>}{qw(button-press button-release)}
    if <browser.cfg.links_clickable>;

my $sn_str
    = defined <system.agent.subname> ? '[' . <system.agent.subname> . ']' : '';
my $title_str = 'browser' . $sn_str;
$title_str .= "-$instance_id-$$" if defined $instance_id;

Gtk3->init;

my $window = Gtk3::Window->new('toplevel');
<browser.gtk3.obj.window> = $window;

<browser.state.first_load> //= 1;

if ( $window->is_composited() ) {
    <[base.log]>->( 1, "transparency available (composited)" );
} else {
    <[base.log]>->( 1, "transparency is not available!" );
}

$window->set_decorated(0);
$window->set_border_width(0);
$window->set_accept_focus( <browser.cfg.allow_text_edit> ? 1 : 0 );
$window->set_resizable(0);
$window->stick;

$window->set_title($title_str);

$window->move( $pos_x, $pos_y ) if defined $pos_x and defined $pos_y;
$window->set_default_size( $size_x, $size_y );

$window->signal_connect( destroy => sub { Gtk3->main_quit() } );

#my @p = $window->signal_list_names();
#map { printf " :]>  %-17s -- %s\n", $_->{'name'}, $_->{'descr'} } @p;

Event->unloop_all();

<browser.event.loop_timeout> //= 0.042;

my $debug = 0;

Glib::Idle->add(
    sub {
        <browser.loop_timer> = Event->timer(
            desc   => "Event::loop timeout",
            after  => <browser.event.loop_timeout>,
            cb     => sub { Event->unloop() },
            prio   => -1,
            repeat => 0
        );
        print "loop [" . ( ++<debug.loop_count> ) . "]  > enter\n" if $debug;
        Event::loop();
        print "loop [" . <debug.loop_count> . "] <  exit\n" if $debug;
        return 1;
    }
);

<[browser.gtk3.init_view]>;

$window->show_all();

Gtk3->main;
