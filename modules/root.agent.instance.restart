# >:]

# name = root.agent.instance.restart

my $instance_id = shift;
my $instance    = <root.agent.instance>->{$instance_id};
my $agent_name  = $instance->{'agent_name'};
my $job_id      = $instance->{'job_id'};

<[base.log]>->( 1, "restarting instance $instance_id ($agent_name)..." );

$instance->{'status_timer'}->cancel  if exists $instance->{'status_timer'};
$instance->{'timeout_timer'}->cancel if exists $instance->{'timeout_timer'};
delete <callback.session.close_last> if $instance->{'is_core'};

my %child;    # XXX: create and use 'update_children' callback!
map { $child{$_} = 1 } (
    keys( %{ $instance->{'process'}->{'child'} } ),
    @{ <[root.process.get_children]>->( $instance->{'process'}->{'id'} ) }
);
my @children = sort keys %child;

<[base.log]>->(
    1, ": TERMinating instance pid " . $instance->{'process'}->{'id'}
);
my @kill_list;
kill( 'TERM', $instance->{'process'}->{'id'} );
push( @kill_list, $instance->{'process'}->{'id'} );
my $ren = scalar @children == 1 ? '' : 'ren :';
if (@children) {
    <[base.log]>->(
        1, ": TERMinating instance child$ren " . join( ', ', @children )
    );
    kill( 'TERM', @children );
    push( @kill_list, @children );
}

<[event.add_timer]>->(
    {   'after'   => <root.timeout.kill_list>,
        'handler' => 'root.handler.process_kill_list',
        'data'    => \@kill_list
    }
);

<[agent.change_status]>->( $instance_id, 'queued' );
<[jobqueue.move_job]>->( $job_id, 'queued' );
