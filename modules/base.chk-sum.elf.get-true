## [:< ##

# name  = base.chk-sum.elf.get-true
# descr = return next true integer encoded elf hash value

my $start_elf  = shift // 0;
my $input_data = shift;        ## scalar reference or string ##

if ( $start_elf !~ m|^\d{1,9}$| ) {
    warn 'start elf-7-chksum needs to be the first parameter <{C1}>';
    return undef;
} elsif ( ref $input_data ne qw| SCALAR | ) {
    if ( not defined $input_data ) {
        warn 'input parameter undefined <{C1}>';
        return undef;
    }
    $input_data = \join '', $input_data, @ARG;    ##  join all params  ##
}
if ( not defined $input_data->$* ) {
    warn 'input parameter undefined <{C1}>';
    return undef;
} elsif ( not length $input_data->$* ) {
    return sprintf qw| %09d |, 00000;
}

my %sums_encountered;
my $elf_7_chksum = <[chk-sum.elf.inline]>->( $input_data, $start_elf );

while ( not AMOS7::Assert::Truth::true_int($elf_7_chksum) ) {
    ##  ,..230769.., ==  not true   [ division by 13 ]   ##

    ## change input with entropy from previous result ## [ start elf-sum ]
    $elf_7_chksum = <[chk-sum.elf.inline]>->( $input_data, $elf_7_chksum );

    ## modify against infinite loops ##
    $elf_7_chksum = <[chk-sum.elf.inline]>->(
        \scalar( '.' x $sums_encountered{$elf_7_chksum} ),
        $elf_7_chksum
    ) if exists $sums_encountered{$elf_7_chksum};
    $sums_encountered{$elf_7_chksum}++;
}

return $elf_7_chksum;

#,,..,..,,,,,,,.,,.,.,,..,..,,.,.,.,.,.,,,.,,,..,,...,...,..,,.,.,,,.,,,.,,..,
#YMDFHVT3ZW7F2UCV6GYP4Y3ODNDH42767UP4SQJVHE7WNDVWIV2FIVW3MNJ5PTWYZAHIGAQMAM22Y
#\\\|K2B4ENR4VLZU6RSMIKW43KCW4XGLLGNMASRPLKZGZDLMAS7SE6M \ / AMOS7 \ YOURUM ::
#\[7]Y75FQZ72JMYZDONZ7TKC2KB2MPNPM2ODTNRZKVOFDAHVMD2U6IAI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
