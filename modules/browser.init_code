# >:]

# name = browser.init_code

use Gtk3;
use Glib::Event;
use Gtk3::WebKit;
use HTTP::Soup;

undef $SIG{'CHLD'};

delete $ENV{'GTK_DEBUG'};
<browser.open_gtk_inspector> //= 0;
if (<browser.open_gtk_inspector>) {
    <[base.log]>->(
        0, "((( 'Gtk Inspector' is enabled! )))  [open_gtk_inspector=1]"
    );
    $ENV{'GTK_DEBUG'} = 'interactive';
}

package Browser::ScrolledWindow;

use Glib::Object::Subclass 'Gtk3::ScrolledWindow',;

sub INIT_INSTANCE {
    my $self = shift;
    $self->set_policy( 'never', 'never' );
}

package Browser::WebView;

use Glib::Object::Subclass 'Gtk3::WebKit::WebView',
    properties => [
    Glib::ParamSpec->boolean(
        'self-scrolling', 'foo', 'foo', 0, [qw/readable writable/]
    ),
    ];

sub INIT_INSTANCE {
    my $self = shift;
    $self->set_property( 'self-scrolling', 0 );
}

package main;

my $browser_root = '/tmp/.browser';    # XXX: random tmp dir
mkdir($browser_root) if !-d $browser_root;
chdir($browser_root);
$ENV{'HOME'} = $browser_root;

<system.agent.mode> //= 'stand-alone';

my $sn_str
    = defined <system.agent.subname> ? '[' . <system.agent.subname> . ']' : '';

<browser.window.title_str>
    = <system.agent.mode> eq 'media-child' ? 'media.browser' : 'browser';
<browser.window.title_str> .= $sn_str;
<browser.window.title_str> .= "-$$" if !length($sn_str);

<browser.status.fade_view> //= 0;
<browser.fg_opacity>       //= 1;

<browser.zoom_level>     //= 1;
<browser.zoom_factor>    //= 1;    # adjusts configured or calculated zoom level
<browser.zoom_text_only> //= 0;

<browser.slideshow.no_scroll>        //= 0;
<browser.slideshow.no_switch>        //= 0;
<browser.cfg.user_can_scroll>        //= 0;
<browser.cfg.links_clickable>        //= 0;
<browser.cfg.allow_text_edit>        //= 0;
<browser.cfg.allow_scrollbars>       //= 0;
<browser.cfg.overlay_scrolling>      //= 1;
<browser.cfg.force_overlay>          //= 0;
<browser.cfg.show_progress_bar>      //= 1;
<browser.cfg.javascript_enabled>     //= 1;
<browser.cfg.plugins_enabled>        //= 0;
<browser.cfg.load_timeout>           //= 13;
<browser.cfg.use_transparency>       //= 1;
<browser.slideshow.swap_delay>       //= 2;
<browser.slideshow.err_delay>        //= 2;
<browser.slideshow.iteration>        //= 0;
<browser.slideshow.paused>           //= 0;
<browser.scroll.fail.timeout>        //= 2.7;
<browser.scroll.fail.js_disabled>    //= 0;
<browser.cfg.no_memory_cache>        //= 0;
<browser.redraw_fps.slowdown>        //= 0;
<browser.redraw_fps.slowdown_target> //= 0;
<browser.cfg.max_gpu_load>           //= 64; # % ( auto-speed mode load target )

<[browser.calc_scroll_speed]>
    if not defined <browser.subcfg>
    or ref(<browser.subcfg>) eq 'HASH'
    and not defined <browser.subcfg.scroll_speed>;

map { <browser.page>->{$_}->{'scrollable'} //= 0 } ( 1, 2 );

$ENV{'GTK_OVERLAY_SCROLLING'}
    = (
           <browser.cfg.force_overlay>
        or <browser.cfg.allow_scrollbars> && <browser.cfg.overlay_scrolling>
    )
    ? 1
    : 0;

<browser.html_ref.loading_page> = <[file.slurp]>->(<browser.loading_page>);

# [ workaround to suppress weird/untraceable Event.pm warnings on load timeout ]
$SIG{__WARN__} = sub {
    <[base.sig_warn]>->(@_)
        if caller ne 'Carp'
        and $_[0] !~ /Source ID \d+ was not found when attempting to remove it/;
};

open STDERR, '>>/dev/null' or warn "/dev/null: $!";

0;
