## [:< ##

# name  = keys.console.enc-key-chksum
# param = <name>
# descr = calculate and display chksum of encrypted key

my $name = shift;

if ( not defined $name ) {
    say "\n  << expected <key_name> parameter >>\n";
    <[base.exit]>->(qw| 0110 |);
}

my $key_status = <[crypt.C25519.encrypted_key]>->($name);

if ( $key_status < 0 ) {
    my $err_reason_str;
    if ( $key_status == -1 ) {
        $err_reason_str = sprintf "only public key named '%s' found", $name;
    } elsif ( $key_status == -2 ) {
        $err_reason_str = sprintf 'user-key %s not found', $name;
    } elsif ( $key_status == -3 ) {
        $err_reason_str = 'error reading private keyfile';
    } elsif ( $key_status == -4 ) {
        $err_reason_str = 'not a valid key format';
    } elsif ( $key_status == -5 ) {

        <[base.logs]>->(    ##  virtual keys enabled  ##
            1, "key '%s' registered 'virtual' [ seed-phrase ]", $name
        );

    } else {
        $err_reason_str = 'undefined error';
    }
    if ( defined $err_reason_str ) {
        return printf "\n  << %s >>\n\n", $err_reason_str;
        <[base.exit]>->(qw| 0110 |);
    }

} elsif ( $key_status == FALSE ) {
    printf "\n  ::  '%s' key is not encrypted  ::\n\n", $name;
    <[base.exit]>->(qw| 0010 |);
}

my $load_success;

if ( <[crypt.C25519.single_file]>->($name) ) {

    $load_success = <[crypt.C25519.load_single]>->( $name, undef, 'private' );

} else {
    $load_success
        = <[crypt.C25519.load_keypair]>->( $name, undef, TRUE, TRUE );
}

if ( not $load_success ) {
    say "\n  << no keys loaded >>\n";
    <[base.exit]>->(qw| 0110 |);
}

my %keys_bin = $keys{'C25519'}{$name}->%{qw| private public |};

my $chksum_str = sprintf "\n  ::  '%s' :  %s  ::\n", $name,
    <[crypt.C25519.key_bin_checksums]>->( values %keys_bin );

##[ deleting keys from memory ]##
<[crypt.C25519.unload_key]>->( $name, TRUE );    ##[ silent ]##

## colorizing ##
##
if ( <system.ansi_color> or <system.force_colors> ) {
    my %C = %AMOS7::C;
    $chksum_str =~ s|^(.+)$|$C{T}$1$C{R}|mg;
    $chksum_str =~ s|('.+')|$C{B}$C{b}$1$C{R}$C{T}|mg;
    $chksum_str =~ s|(<:.+:>)|$C{b}$C{o}$1$C{R}$C{T}|sg;
}

return say $chksum_str;

#,,..,.,,,..,,,,.,,,.,.,,,.,,,.,.,.,,,,..,.,.,.,.,...,...,,,,,,,,,,..,...,...,
#7GOBTFF3THWVCXEPHGOQBSOFIPTLMFTQXYIOWWEFZS6URWCVS63E7YFEE2YJAS4TUS6O63G5C4SHC
#\\\|GKJWJ23YO4R5XVRPUKTUYBLP24MKKWOBDL3OEIBEQGZ2SA4CKII \ / AMOS7 \ YOURUM ::
#\[7]GES5KFCHN7GJ23WPCIAH2ZVIGZ27CGWONRQHDELZER5AJ6VMXSAI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
