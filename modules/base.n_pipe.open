## [:< ##

# name  = base.n_pipe.open

my $fifo_path   = shift // '';     ## auto-create ? ##
my $permissions = shift // 0640;
my $reconnect   = shift // TRUE;
my $overwrite   = shift // TRUE;

my $mkmod_bin_path = qw| /bin/mknod |;

if ( not length $fifo_path ) {
    warn 'expected path parameter for named pipe creation <{C1}>';
    return undef;
}

if ( -e $fifo_path ) {
    if ( not $reconnect and not $overwrite ) {
        warn 'named pipe path already exists [ no clean-up ? ] <{C1}>';
        return undef;
    }
    my $stat_ref = File::stat::stat($fifo_path);

    if (not $stat_ref->cando( S_IWUSR(), $UID )    ## no write perm ##
        and not $stat_ref->cando( S_IWGRP(), $GID )
    ) {
        warn 'named pipe path already exists and no write permission <{NC}>';
        <[base.s_warn]>->( '%s <{C1}>', $fifo_path );
        return undef;
    }
    if ( not $stat_ref->cando( S_IFIFO() ) ) {    ## S_ISFIFO ? ##
        <[base.s_warn]>->(
            "named pipe path '%s' is not a FIFO <{C1}>", $fifo_path
        );
        return undef;
    }
    if ( not $reconnect and $overwrite and not unlink($fifo_path) ) { ## rm ##
        <[base.s_warn]>->(
            'cannot unlink %s : %s <{C1>',
            $fifo_path, <[base.str.os_err]>
        );
        return undef;
    }
} else {    ## create named pipe when not exists ##

    if ( system( $mkmod_bin_path , $fifo_path, qw| p | ) != 0 ) {  ## mknod ##
        my $err_str = <[base.format_error]>->($OS_ERROR);
        <[base.s_warn]>->( '<mknod> %s : %s <{C1>', $fifo_path, $err_str );
        return undef;
    }
    if ( not -p $fifo_path ) {    ##  exists? ##
        warn 'cannot create fifo file path <{C1}>';
        return undef;
    }
    if ( not chmod( $permissions, $fifo_path ) ) {    ## chmod ##
        my $err_str = <[base.format_error]>->($OS_ERROR);
        <[base.s_warn]>->(
            '%s : chmod %s : %s <{C1}>',
            $fifo_path, $permissions, $err_str
        );
        unlink($fifo_path)    ## removing in case of permission error ##
            or <[base.s_warn]>->( 'left existing [ %s ]', $fifo_path );
        return undef;
    }
}

if ( not $reconnect ) {
    <system.init_reports> //= [];
    push(
        <system.init_reports>->@*,
        {   'param'          => $fifo_path,
            'descr'          => 'registering fifo pipe..,',
            'target_command' => qw| v7.report-temp-path |,
        }
    );
}

#,,,.,.,.,,..,.,,,,.,,,,,,,,,,,.,,,.,,.,.,,.,,..,,...,...,.,,,,.,,...,.,,,,..,
#HVDZDBW4RHDIC42J6XJ6XLD74RREUSUCFKMQ2LSCU6PNVSUCNROCAEOFTWR2WGCNF6YKLSXDCI6DU
#\\\|4L4Q7NCEMZ4M7XZDHRTNDFFVLG2J27S645ATIAV2WESLK4FQG6L \ / AMOS7 \ YOURUM ::
#\[7]PFWRQA4CT2SISQZOM4YSAEONE4AWFPNOMMNSUWYXOZJLKP4OU4BI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
