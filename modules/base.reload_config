## [:< ##

# name  = base.reload_config
# descr = reload configuration files

my $success = 5;    ## true ##

<base.parser.config.errors> = 0;
if ( exists <config.reload.cleanup_keys>
    and defined <config.reload.cleanup_keys> ) {
    foreach my $key ( split m| +|, <config.reload.cleanup_keys> ) {

        if ( <[base.validate.data_key_syntax]>->($key) ) {

            <[base.del_key]>->($key);    ## delete %data hash key ##

            <[base.logs]>->( 2, ": cleaned up data key '%s'", $key );
        } else {
            <[base.logs]>->(
                0, ": cleanup_keys : invalid key syntax '%s'", $key
            );
        }
    }
    delete <config.reload.cleanup_keys>;
}
if ( exists <system.config.reload_order> ) {
    my @reload_order = @{<system.config.reload_order>};
    <system.config.reload_order> = [];
    foreach my $config_name (@reload_order) {
        my $already_loaded = 0;
        map { $already_loaded = 1 if $ARG eq $config_name }
            @{<system.config.reload_order>};
        next if $already_loaded;    ## [ nested load_config_file ]
            # resetting password hashes for auth.setup.usr.* files
        <auth.setup.usr> = {} if $config_name =~ m|^auth\.setup\.usr\..+|;
        $success = 0 if !<[base.load_config_file]>->($config_name);
    }
}
$success = 0
    if !<[base.reload_values]>->( '', <system.path.rel.cur_zenka_cfg> )
    or <base.parser.config.errors>;

return $success;

#,,,,,...,,,.,,.,,.,.,.,,,.,.,.,,,.,,,,,.,...,..,,...,..,,,,,,,,.,,,,,.,,,.,.,
#HNOXCSPMJGZOY4N5EQLRFSZQ5SLTVBVSCMEZPMFQVXKLIUGUYXBJWMHFI2FFWP4PQJMFFNCBKGF4K
#\\\|ONXF4NQLVBBEN4X33F5DLRJX5IXB46ZT46PACTMSBSIXLM5CDO4 \ / AMOS7 \ YOURUM ::
#\[7]YZAWW6I64MJQMSYRAMLE3ONT2ALEG65LFX6X5PH3PLB2MK4TKGAA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
