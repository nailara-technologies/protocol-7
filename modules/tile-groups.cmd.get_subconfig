## [:< ##

# name  = tile-groups.cmd.get_subconfig
# param = <zenka[+tile]_name>
# descr = return 'subconfig' for zenka or tile name

return {
    'mode' => qw| false |,
    'data' => "expected syntax is 'zenka[subname]'"
    }
    if not defined $call->{'args'}
    or $call->{'args'} !~ m|^(\S+)( +(\S+))?$|;

my ( $source_zenka, $zenka_name ) = ( ${^CAPTURE}[0], ${^CAPTURE}[2] );
$source_zenka =~ s|^.+\.||g;
$zenka_name = $source_zenka if not defined $zenka_name;

if ( not exists <tile-groups.subconfig>->{$zenka_name} ) {
    my $last_match;
    my $match   = 0;
    my $msg_str = sprintf "no set-up for zenka '%s'", $zenka_name;
    if ( $zenka_name !~ m|[\[\]]+| ) {
        map {
            if ( $ARG =~ m|^([^\[]+)\[| and ${^CAPTURE}[0] eq $zenka_name ) {
                $last_match = $ARG;
                $match++;
            }
        } keys <tile-groups.subconfig>->%*;
    }
    $msg_str
        = sprintf( "multiple '%s' instances defined, zenka subname required.",
        $zenka_name )
        if $match > 1;
    return {
        'mode' => qw| false |,
        'data' => $msg_str
        }
        if $match != 1;
    $zenka_name = $last_match;
}

( undef, my $maxlen )
    = minmax map {length} keys <tile-groups.subconfig>->{$zenka_name}->%*;

return {
    'mode' => qw| size |,
    'data' => join(
        '',
        map {
            sprintf( "%-*s = %s\n",
                $maxlen,
                $ARG, <tile-groups.subconfig>->{$zenka_name}->{$ARG} )
            }
            sort keys <tile-groups.subconfig>->{$zenka_name}->%*
    )
    }

#,,..,.,.,.,.,.,.,,..,...,,,,,..,,..,,.,,,.,,,..,,...,...,,,,,.,.,,.,,,..,...,
#TNPQV5B2IDIS7MYFXBGQQWA5VV6EJGJTD63X545PTNENEWSTQON6O7L3VGKNNCOHEDXOCNU5VM2OU
#\\\|EK7VWTZLBNLX7PME5QJJTB5TGQZYJBHUUCMEBFAN7CTIO2NEG62 \ / AMOS7 \ YOURUM ::
#\[7]D36K6LY25VXNCKHJIGUYKUHWX6DXNC2TNMMM5WBL7NHBGTXZQ4DI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
