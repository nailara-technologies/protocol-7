## >:] ##

# name  = base.cmd.src-age
# param = ['date'] [VERSION]
# descr = return age of installed p7 source code

my $network_time;

my $param_str     = shift->{'args'} // '';
my $date_mode     = $param_str =~ s|^date *|| ? 1 : 0;
my $B32_re        = <regex.base.base_32>;
my $current_ntime = <[base.ntime]>;

if ( ( not exists <system.zenka.type> or <system.zenka.type> ne qw| cube | )
    and length($param_str) ) {  # <-- no second param for non-cube type zenki.
    return {
        'mode' => qw| false |,
        'data' => "ask a 'cube'-type zenka for custom values"
    };
} elsif ( $param_str =~ m|^($B32_re+)\-\d+\.\d+$| )
{    # <-- strict format [LLL]
    $network_time = $LAST_PAREN_MATCH;
} elsif ( length($param_str) ) {
    return {
        'mode' => qw| false |,
        'data' => "version syntax not valid [ check 'src-ver' ]"
    };
} elsif ( <protocol-7.src-ver> =~ m|^($B32_re+)\-\d+\.\d+$| ) {
    $network_time = $LAST_PAREN_MATCH;
}
return { 'mode' => qw| false |, 'data' => 'have no version time-stamp' }
    if not defined $network_time;

my $src_ntime = <[base.ntime_BASE32_to_numerical]>->($network_time);

return { 'mode' => qw| false |, 'data' => 'decoding not successful' }
    if not defined $src_ntime
    or $src_ntime < 2455747200000;    # <-- network-time begin

my $src_unix = <[base.n2u_time]>->($src_ntime);

( my $date_stamp   = <[base.parser.timestamp]>->($src_unix) ) =~ s|:\d\d$||;
( my $duration_str = <[base.parser.duration]>->($src_unix) )  =~ s|^0s$|0m|;

return { 'mode' => qw| true |, 'data' => $date_stamp } if $date_mode;

return { 'mode' => qw| true |, 'data' => $duration_str }

#,,,,,...,,,.,..,,.,.,,,,,,..,,,.,...,,,,,,.,,..,,...,...,...,..,,...,.,.,.,,,
#AWZ3EYPF5GIBINIGOZK3KDF36PAHVTJACRIZNQHP47RUBAWHLX67P4TVEU2XMDQBGETKDDDMQQKHO
#\\\|TMX7LXFHXUASIT6UMITHUUBGAZQBSXCYI6IA2RKMATDPH76ERX4 \ / AMOS7 \ YOURUM ::
#\[7]NC6G5NKFA6JNAUO7KL6BUEL6V7DCSBCBSBBXE4FDTSQJDGMEF6CY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
