## [:< ##

# name  = source.load_signature_key

my $sigkey_name = shift // <source.C25519.signature_key_name>;

##[ nailara.source ]##
##
if ( not length $sigkey_name ) {
    warn 'signature key name is not defined <{C1}>';
    return undef;
}

##  enable in zenka config to auto-create key  ##
<source.autocreate-sig-key> //= FALSE;

my $key_vars_ref = <[crypt.C25519.key_vars]>->($sigkey_name);
my $key_dir      = $key_vars_ref->{'key_dir'};
my $key_basepath = $key_vars_ref->{'key_basepath'};

my $success = FALSE;

my $sign_key_exists = <[crypt.C25519.key_exists]>->($sigkey_name);

if ( $sign_key_exists
    and <[crypt.C25519.load_keypair]>->( $sigkey_name, undef, TRUE ) ) {

    $success = TRUE;    ##  key loaded  ##

} elsif ( not $sign_key_exists
    and <[base.cfg_bool]>->(<source.autocreate-sig-key>) ) {
    if ( <[crypt.C25519.gen_keys]>->($sigkey_name) ) {
        $success = TRUE
            if <[crypt.C25519.write_keys]>->( $sigkey_name, undef, FALSE );
    }

    <[base.log]>->(
        0, 'autocreate-sig-key not enabled, not creating signature key..,'
    ) if not $success;

}

##  todo : [more] silently load public key for verification only  ##

return $success;

#,,.,,,.,,..,,,,.,...,,,,,..,,..,,,..,.,,,,,.,..,,...,...,,,.,..,,...,,,.,...,
#XNZCL6QMEQINRAEPZ4QK4JLJECZTQPP2GGATYCWL5YUED5KPPGNE7JBDGJKEESEKFXUKJT3GFIZWO
#\\\|555AUWOLNVQMMZIMSNIN3RAEQKFH7NCSFF3JOYGAO6KTGOVZWDQ \ / AMOS7 \ YOURUM ::
#\[7]QYQ7PPFUQHL4VYGCYRYAINFTWBVQNXHUWHAJURNHOCKW4BG5X4DI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
