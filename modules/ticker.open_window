## [:< ##

# name = ticker.open_window

<[base.log]>->( 1, ': opening ticker window.,' );

$ENV{'DISPLAY'} = <x11.display>;
Gtk3->init;

<ticker.is-iconified> //= FALSE;

my $window_mode = <ticker.window.force_above> ? qw|popup| : qw|toplevel|;

my $window = <ticker.obj.window> = Gtk3::Window->new($window_mode);

$window->signal_connect( delete_event => sub { Gtk3->main_quit } );

if ( $window->is_composited ) {
    <ticker.is_composited> = TRUE;
    <[base.log]>->( 1, ': : compositor detected =)' );
    $window->set_opacity(0)
        if <ticker.use_transparency> and <ticker.do_custom_fade_in>;
} else {
    <ticker.is_composited> = FALSE;
    <[base.log]>->( 1, ': : no compositor running :|' );
}

<x11.window.width>  = <x11.coordinates.right> - <x11.coordinates.left>;
<x11.window.height> = <x11.coordinates.bottom> - <x11.coordinates.top>;

<[ticker.load_font_offsets_table]>;    ## <--  uses window-height ##

$window->move( <x11.coordinates.left>, <x11.coordinates.top> );
$window->set_default_size( <x11.window.width>, <x11.window.height> );

$window->set_title(<x11.title_str>);
$window->set_border_width(0);
$window->set_decorated(0);
$window->set_keep_above(1) if <ticker.window.force_above>;
$window->set_app_paintable(1);
$window->set_accept_focus(0);

my $screen = $window->get_screen;

my $rgba = FALSE;
$rgba = $screen->get_rgba_visual() if <ticker.use_transparency>;

if ( not $rgba ) {
    <ticker.use_transparency> = FALSE;
} else {
    $window->set_visual($rgba);
}

## $window->signal_connect( 'draw' => $code{'ticker.callback.draw'} );

$window->signal_connect(
    qw| draw | => sub {
        eval { <[ticker.callback.draw]>->(@ARG) };
        if ( length $EVAL_ERROR ) {
            <[base.log]>->( 0, <[base.str.eval_error]>->(1) );
            <[base.sleep]>->(0.07);
        }
    }
);

$window->show_all;

<x11.id> = $window->get_toplevel()->get_window()->get_xid();

<[base.X-11.assign_window]>;

<ticker.font.size> = 0;

my $font_name = <ticker.font.name>;
my $font_path = sprintf qw| %s/%s.ttf |, <ticker.font.path>, $font_name;
my $freetype  = Font::FreeType->new;
my $ft_face   = $freetype->face($font_path);
<ticker.font.face> = Cairo::FtFontFace->create($ft_face);

<ticker.obj.window>->queue_draw;

#,,..,...,,,.,...,.,,,,,,,,..,,.,,,,.,.,.,,,,,.,.,...,...,,,,,,.,,,.,,,..,..,,
#43TACZ3M7OMJWESZ24Z5BBDN67YBQKPSI4IKJAG3FNO66YIH3IQX7LXIYGRPG3JLUTYCRRFEPFH42
#\\\|LRRU4P7K7DBJJSN2ZS4XWJ3WC6QEZTFMKPLLD7YKM43JWGDYQVY \ / AMOS7 \ YOURUM ::
#\[7]3T2UHFZEWD6ZF6MF2ZPOXQ6I4K5ET6AJSPYLOTJGPWUMQHEC2GDA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
