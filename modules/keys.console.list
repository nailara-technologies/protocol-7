## >:] ##

# name  = keys.console.list
# param = [nochecksums]
# descr = list C25519 key names \ files for current user
# note  = Protocol-7 keys list | grep ' : .*:' | sed 's|.* : ||'

my $param = shift;

my $display_checksums = 5;    ## true ##

$display_checksums = 0 if defined $param and $param eq qw| nochecksums |;

my %C            = %AMOS7::C;
my $key_vars_ref = <[crypt.C25519.key_vars]>;

my $key_dir = $key_vars_ref->{'key_dir'};
my $key_usr = $key_vars_ref->{'usr_name'};

my $keys_re        = <keys.regex>;
my $key_re_public  = $keys_re->{'key_file'}->{'public'};
my $key_re_private = $keys_re->{'key_file'}->{'private'};

## warns when absent ##
my @k_files = grep {s|^.+/||} <[keys.get_keyfiles]> or return;

my %key_chksums;
if ($display_checksums) {    ## calculating key checksums ##

    my $calculating_message = 'calculating C25519 key checksums ..,';
    <[base.log]>->( 1, $calculating_message );
    if ( not <system.verbosity.console> ) {
        $OUTPUT_AUTOFLUSH = TRUE;
        printf ": %s%s\r", $C{0}, $calculating_message;
    }
    %key_chksums = ( <[keys.checksum_href]>->%* );
}

my $key_name;
my %key_names;
my $max_nlen = 0;
foreach my $file (@k_files) {

    if ( $file =~ m{$key_re_private} ) {
        $key_name         = $LAST_PAREN_MATCH;
        $key_names{$file} = sprintf qw| '%s' |, $key_name;
    }
    my $length = length $key_name;

    if ( not $display_checksums ) {
        my $spaces = ' ' x length $key_name;
        $key_names{$file} = sprintf ' %s ', $spaces
            if $file =~ m{$key_re_public};

    } else {
        $key_names{$file}
            = sprintf( ' %*s ', $length, $key_chksums{$key_name} )
            if $file =~ m{$key_re_public};
    }

    my $l = length $key_names{$file};
    $max_nlen = $l if $l > $max_nlen;

    $max_nlen = length $key_chksums{$key_name}
        if $display_checksums and length $key_chksums{$key_name} > $max_nlen;
}

<[base.logs]>->( "listing key files ['%s']", $key_dir );

my $key_list_string = join '',
    sprintf( "%40s\n :: keys for user %s :.\n :\n", '', $key_usr ),
    ( map { sprintf( " : %*s : %s\n", $max_nlen, $key_names{$ARG}, $ARG ) }
        @k_files ),
    "::\n";

## colorizing ##
##
if ( <system.ansi_color> or <system.force_colors> ) {
    $key_list_string =~ s|^(.+)$|$C{T}$1$C{R}|mg;
    $key_list_string =~ s|('.+')|$C{B}$1$C{R}$C{T}|mg;
    $key_list_string =~ s|(*plb:user)( \S+ )|$C{B}$C{b}$1$C{R}$C{T}|mg;
    $key_list_string =~ s,(<:.+:>|encrypted),$C{0}$C{b}$1$C{R}$C{T},mg;
}

return say $key_list_string;

#,,,.,,.,,..,,.,,,,..,,,,,,.,,.,.,,,.,.,,,,.,,..,,...,...,...,..,,.,,,...,.,.,
#23ZMRBLYNZYU2KR6RBVRXEFDKDX7XP63F2YUZPIW77XO6OMOWFN6ROCJOOXBLMZQLCC27RTLAUIUC
#\\\|L4OD6WFQPI6P376OV7D6FQZME32SM5DAVYZATVWXT3MUZ4VLK5C \ / AMOS7 \ YOURUM ::
#\[7]E6MN3BDM3ZIONRFUH2VQGRDZN7E3JY4LVSF7BCUDEEZATA5ZCMDY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
