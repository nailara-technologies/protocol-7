## [:< ##

# name  = keys.console.list
# param = [:nosums:|:sigs:]
# descr = list C25519 key names \ files for current user
# note  = Protocol-7 keys list | grep ' : .*:' | sed 's|.* : ||' # | grep -v :

my $param = shift;

( my $display_sigs, my $display_checksums ) = ( FALSE, TRUE );

if ( defined $param ) {
    $display_sigs      = TRUE  if $param eq qw| :sigs: |;
    $display_checksums = FALSE if $param eq qw| :nosums: |;
}

my %C            = %AMOS7::C;
my $key_vars_ref = <[crypt.C25519.key_vars]>;
my $name_regex   = qr|[0-9a-zA-Z\._\-]+|;
my $key_dir      = $key_vars_ref->{'key_dir'};
my $key_usr      = $key_vars_ref->{'usr_name'};

my $keys_re        = <keys.regex>;
my $key_re_public  = $keys_re->{'key_file'}->{'public'};
my $key_re_private = $keys_re->{'key_file'}->{'private'};
my $key_re_sig     = $keys_re->{'key_sig'}->{'signature'};

## warns when absent ##
my @k_files = grep {s|^.+/||} <[base.reverse-sort]>->(<[keys.get_keyfiles]>)
    or return;

my %key_chksums;
if ($display_checksums) {    ## calculating key checksums ##
    my $calculating_message = 'calculating C25519 key checksums ..,';
    <[base.log]>->( 1, $calculating_message );
    if ( not <system.verbosity.console> ) {
        $OUTPUT_AUTOFLUSH = TRUE;
        if ( <system.ansi_color> or <system.force_colors> ) {
            printf "\n: %s%s\r", $C{0}, $calculating_message;
        } else {
            printf "\n: %s\r", $calculating_message;  ## todo : detect pipe ##
        }
    }

    %key_chksums = ( <[keys.checksum_href]>->%* ); ##  uses cache look-ups  ##

    foreach my $name ( <[base.sort]>->( \%key_chksums ) ) {
        <[base.logs]>->( 0, "failed to acquire checksum for key '%s'", $name )
            if not defined $key_chksums{$name};
    }
}

my %key_signed_by;
foreach my $file (    ## collect signatures ##
    grep {m{$key_re_sig}}
    grep {s|^$key_dir/||} <[file.all_files]>->($key_dir)->@*
) {
    next if $file !~ $key_re_sig;    ## init capture ##

    $key_signed_by{ ${^CAPTURE}[0] } //= [];    ## key name ##
    ## root key name ##
    push $key_signed_by{ ${^CAPTURE}[0] }->@*, ${^CAPTURE}[1];
}

my @display_kfiles;
foreach my $file (@k_files) {
    push @display_kfiles, $file;
    if ( $file =~ m|([^/]+):seed-phrase$| ) { ## : todo :  add single keys  ##
        push @display_kfiles,
            sprintf( qw| :.virtual.::%s |, $LAST_PAREN_MATCH );
    }
}

my %key_files;
foreach my $file (@display_kfiles) {
    my $name = <[crypt.C25519.get_keyname]>->($file);
    $key_files{$name} //= [];
    push $key_files{$name}->@*, $file;
}

my $names_len
    = 2 + [ minmax( map {length} keys %key_files ) ]->[1];
$names_len
    = [ minmax( $names_len, map {length} values %key_chksums ) ]->[1];

<[base.logs]>->( "listing key files ['%s']", $key_dir );

my $linefeed
    = ( $display_checksums and not <system.verbosity.console> ) ? '' : "\n";

my $key_list_string = join '', $linefeed,
    sprintf( "%40s\r :: %skeys for user %s :.\n",
    '', $display_sigs ? '[signed] ' : '', $key_usr );

my $displayed_files_count = 0;
foreach my $name ( <[base.sort]>->( \%key_files ) ) {

    next if $display_sigs and not exists $key_signed_by{$name};
    $displayed_files_count++;

    $key_list_string .= sprintf " : %*s .\n", $names_len, '';

    $key_list_string .= sprintf " : %*s .\n", $names_len,
        sprintf qw| '%s' |, $name;

    if ($display_sigs) {    ##  display signature [root] key names per key  ##

        foreach my $signature_key ( $key_signed_by{$name}->@* ) {
            if ( <[crypt.C25519.signature_exists]>->( $name, $signature_key )
                < 3 ) {
                $signature_key .= '  [incomplete]'; ##  some files missing  ##
            }
            $key_list_string .= sprintf " : %*s : %s\n", $names_len,
                '', $signature_key;
        }
        next;    ##  skip key filename listing  ##
    }

    my $shown_chksum = FALSE;    ##  otherwise listing key files  ##
    foreach my $file ( $key_files{$name}->@* ) {

        my $chksum_line
            = ( not $display_checksums or $shown_chksum )
            ? ( $file =~ $key_re_public and exists $key_signed_by{$name} )
                ? ': signed :'
                : ''
            : $key_chksums{$name};

        $key_list_string .= sprintf " : %*s : %s\n", $names_len,
            $chksum_line, $file;

        $shown_chksum++ if length $chksum_line;
    }

}

if ( not $displayed_files_count ) {
    $key_list_string .= sprintf " : %*s\n", $names_len, '';
    $key_list_string .= sprintf " : %*s\n", $names_len,
        '[ no matching files ]';
} else {
    $key_list_string .= sprintf " : %*s .\n", $names_len, '';
}

$key_list_string .= "::\n";

## colorizing ##
##
if ( <system.ansi_color> or <system.force_colors> ) {
    my $_sn = $names_len + 2;
    no warnings qw| experimental |;    ##  variable length lookbehind  ##
    $key_list_string =~ s|^( *)(:{1,2})|$1$C{G}$2$C{T}|mg;
    $key_list_string =~ s|::(.+):.|$C{G}::$C{T}$1$C{G}:.$C{R}|m;
    $key_list_string =~ s|^(.+)$|$C{T}$1$C{R}|mg;
    $key_list_string =~ s,(*plb:(\ {$_sn}|:\ signed\ :|[\>']))\ (?<n>[\.:])
                         , $C{G}$+{n}$C{T},mgx;
    $key_list_string =~ s<(\S+)  (\[incomplete\])>
                         <$C{0}$C{b}$1$C{R}  $C{o}$2$C{R}>mg;
    $key_list_string =~ s|: signed \e\S+|$C{G}: signed :$C{T}|mg;
    $key_list_string =~ s|(\[ [^\]]+ \])|$C{G}$1$C{R}|mg;    ##[ no match ]##
    $key_list_string =~ s|'(.+)'|$C{G}'$C{T}$C{B}$1$C{R}$C{G}'$C{T}|mg;
    $key_list_string =~ s|(*plb:user)( \S+ )|$C{B}$C{b}$1$C{R}$C{T}|mg;
    $key_list_string =~ s,(<:.+:>|encrypted),$C{0}$C{b}$1$C{R}$C{T},mg;
    $key_list_string
        =~ s,($name_regex\Q:seed-phrase\E),$C{0}$colors{B01}$1$C{R}$C{T},mg;
    $key_list_string
        =~ s,(:.virtual.::),$C{0}$colors{B01}$1$C{R}$C{T}$C{B}$C{B02},mg;
}

return say $key_list_string;

#,,,.,..,,,..,...,,.,,,,,,.,,,.,,,...,,,,,,.,,..,,...,...,.,.,,..,,.,,,.,,...,
#IMECOKKP5OLFM3MZTYHGK74YFG2Z2ICQGKBAZKQY3CLN7KBVDNINKNYNNPYJ3HGB3ZTTQSTHNVQ2S
#\\\|INB6INMI6ZG4CBUFII4RNCOUEY2SB33I7SBVVP4US3LVHWCUQFR \ / AMOS7 \ YOURUM ::
#\[7]RTICOFA34HOMRRGYHRIINLCG5W2ZSFTUVS7VLZ7IAEK6XYDSJQCY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
