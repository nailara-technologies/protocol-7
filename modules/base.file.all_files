## >:] ##

# name = base.file.all_files

my ( $path, $result_aref, $resolved ) = @ARG;

if ( not defined $path or not length $path ) {
    warn 'path param missing or undefined <{C1}>';
    return undef;
}

my $old_path;
my $recursive         = FALSE;
my $recursion_entered = FALSE;
$resolved //= FALSE;    # <-- resolve symlinks
$resolved = TRUE if $resolved eq qw| resolved |;

if ( not defined $result_aref ) {
    $result_aref = [];
} elsif ( $result_aref eq qw| recursive | ) {
    $result_aref = [];
    $recursive   = TRUE;    ## true ##
} else {
    $recursion_entered = TRUE;    ## true ##
}

if ( not -d $path ) {
    <[base.s_warn]>->( "non existant path ['%s'] <{C1}>", $path );
    return undef;
} else {
    my $dir_fh;
    $path =~ s|/+$||;
    if ( not opendir( $dir_fh, $path ) ) {
        <[base.s_warn]>->(
            "directory path '%s' [ %s ] <{C1}>",
            $path, <[base.str.os_err]>
        );
        return undef;
    }
    foreach my $entry ( <[base.sort]>->( readdir($dir_fh) ) ) {
        next if $entry =~ m|^\.{1,2}$|;
        my $path_abs = catfile( $path, $entry );
        my $result_path
            = $resolved ? abs_path($path_abs) : canonpath($path_abs);
        push $result_aref->@*, $result_path if -f $path_abs;
        <[file.all_files]>->( $result_path, $result_aref, $resolved )
            if -d $path_abs and $recursive;
    }
}

return $result_aref if not $recursion_entered;

#,,,.,..,,,,.,..,,.,.,,,.,..,,,,.,,.,,,..,,..,..,,...,.,.,.,.,,,.,,,.,.,,,,,.,
#GOBNEREYKZKIJM2XSSBUMNIJCXCISPZRVWLEHKUJMQQ2DD6UHGARPXFQ6WSHKVNYKFO2LZCR3533E
#\\\|4ALWUF7GIQ5VDQOQT54BQT24VQEXHLI75JSMTKJHGTLFE5LEDOJ \ / AMOS7 \ YOURUM ::
#\[7]YQBL5HDNYG2VNUXGIDMVYF64FD754IMQQAI75OUZDV4AAUDUZ6AA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
