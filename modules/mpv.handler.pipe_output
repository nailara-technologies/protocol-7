## [:< ##

# name  = mpv.handler.pipe_output
# descr = reads and processes output from mpv control pipe

my $bytes;
my $event   = shift->w;
my $read_fh = $event->fd;
my $process = $event->data;
my $pid     = $process->{'pid'};

<mpv.pipe.buffer> //= '';
if ( defined $read_fh ) {
    ## needs 'safer' read method [read len] [ LLL ]
    $bytes = <[base.s_read]>->(
        $read_fh, \$data{'mpv'}{'pipe'}{'buffer'},
        16 * 1024
    ) // 0;
}

if ( $bytes <= 0 or not defined <mpv.pipe.buffer> ) {
    $event->cancel;
    close($read_fh);
    my $exit_code = 2;
    my $log_level = 0;
    if ( not <zenka.shutdown> ) {
        <[base.log]>->( 0, 'mpv control pipe closed unexpectedly >:|' );
        <[base.logs]>->(
            'sent kill signal to mpv-process [PID:%d] ..,', $pid
        ) if kill( 9, $pid );
    } else {
        kill( 9, $pid );
        $exit_code = 0;
        $log_level = 1;
    }
    <[base.logs]>
        ->( $log_level, 'stopping %s-zenka..,', <system.zenka.name> );
    exit($exit_code);
}

while ( <mpv.pipe.buffer> =~ s|^([^\n]*)\n||s ) {
    my $reply_id;
    my $output_line = $LAST_PAREN_MATCH;
    my $decoded     = <mpv.json.parser>->decode($output_line);

    if (    defined $decoded
        and ref($decoded) eq qw| HASH |
        and exists $decoded->{'event'} ) {
        <[mpv.handler.event]>->($decoded);
    }

    if (    exists $decoded->{'error'}
        and $decoded->{'error'} ne qw| success |
        and $reply_id = shift <mpv.reply_ids>->@* ) {

        <[base.logs]>->(
            0,         '[%d] pipe-FALSE [%s]',
            $reply_id, $decoded->{'error'}
        );
        <[base.callback.cmd_reply]>->(
            $reply_id,
            {   'mode' => qw| false |,
                'data' => sprintf( "player child replied '%s'.,",
                    $decoded->{'error'} )
            }
        );
        next;
    } elsif ( exists $decoded->{'error'}
        and exists <mpv.command.reply>
        and ref(<mpv.command.reply>) eq qw| ARRAY |
        and <mpv.command.reply>->@* ) {
        my $reply_setup = shift <mpv.command.reply>->@*;

        my $command_handler  = $reply_setup->{'handler'}  // '';
        my $command_callback = $reply_setup->{'callback'} // '';

        $code{$command_handler}->( $decoded->{'data'} )
            if $decoded->{'error'} eq qw| success |
            and exists $code{$command_handler};

        $code{$command_callback}->( $decoded->{'error'} )
            if defined $code{$command_callback};

        next;
    } elsif ( exists $decoded->{'error'}
        and $decoded->{'error'} eq qw| success |
        and exists <mpv.success_reply_str>
        and $reply_id = shift <mpv.reply_ids>->@* ) {

        <[base.logs]>->(
            2,         '[%d] pipe-TRUE [%s]',
            $reply_id, <mpv.success_reply_str>
        );
        <[base.callback.cmd_reply]>->(
            $reply_id,
            { 'mode' => qw| true |, 'data' => <mpv.success_reply_str> }
        );
        delete <mpv.success_reply_str>;
        next;
    }

    # log output [ no reply_id case ]
    my $log_level
        = ( defined $decoded->{'error'}
            and $decoded->{'error'} ne qw| success | )
        ? 0
        : 2;
    $output_line =~ s|[\r\n]+||sg;
    <[base.logs]>->( $log_level, '< mpv > %s', $output_line );
}

#,,..,.,.,,,.,...,,.,,.,,,,.,,,,,,,.,,.,,,..,,..,,...,...,...,...,,,.,,..,.,,,
#IJT5T7MVZXB6GPVCGN7NQIJF627VNFFTDN4TQINCSAXZN4ZJVYQIA43U4IXYOMKSXJZP7RJOKJBOW
#\\\|RR3F5KKICH4H6Q6G2FMDJJREZ4OP7JPUECPCSZSYOLB27V7NKBF \ / AMOS7 \ YOURUM ::
#\[7]34EI4DWLVXVMRDVCSFCEDL4GFA7CEBOAMX62TT2AGCHKSX7HLMAI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
