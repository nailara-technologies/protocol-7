# >:]

# name  = mpv.handler.pipe_output
# descr = reads and processes output from mpv control pipe

my $event   = shift->w;
my $read_fh = $event->fd;
my $process = $event->data;
my $pid     = $process->{'pid'};

<mpv.pipe.buffer> //= '';

if (sysread( $read_fh, <mpv.pipe.buffer>, 4096, length(<mpv.pipe.buffer>) )
    == 0 ) {
    $event->cancel;
    close($read_fh);
    if ( !<agent.shutdown> ) {
        <[base.log]>->( 0, "mpv control pipe closed unexpectedly!" );
        <[base.log]>->( 1, "killing mpv-process [PID:$pid].." );
    }
    kill( 9, $pid );
    <[base.log]>->( 1, "shutting down " . <system.agent.name> . "-agent!" );
    CORE::exit(2);
}

while ( <mpv.pipe.buffer> =~ s|^([^\n]*)\n||s ) {
    my $reply_id;
    my $output_line = $1;
    my $decoded     = decode_json($output_line);

    if (    exists $decoded->{'error'}
        and exists <mpv.command.reply>
        and ref(<mpv.command.reply>) eq 'ARRAY'
        and @{<mpv.command.reply>} ) {

        my $reply_setup = shift @{<mpv.command.reply>};

        my $command_handler  = $reply_setup->{'handler'}  || '';
        my $command_callback = $reply_setup->{'callback'} || '';

        $code{$command_handler}->( $decoded->{'data'} )
            if $decoded->{'error'} eq 'success'
            and exists $code{$command_handler};

        $code{$command_callback}->( $decoded->{'error'} )
            if exists $code{$command_callback};

        next;
    } elsif ( exists $decoded->{'error'}
        and $decoded->{'error'} ne 'success'
        and $reply_id = shift @{<mpv.reply_ids>} ) {
        <[base.callback.cmd_reply]>->(
            $reply_id,
            {   'mode' => 'nack',
                'data' => 'mpv process replied "' . $decoded->{'error'} . '"!'
            }
        );
        next;
    } elsif ( exists $decoded->{'error'}
        and $decoded->{'error'} eq 'success'
        and exists <mpv.success_reply_str>
        and $reply_id = shift @{<mpv.reply_ids>} ) {
        <[base.callback.cmd_reply]>->(
            $reply_id, { 'mode' => 'ack', 'data' => <mpv.success_reply_str> }
        );
        delete <mpv.success_reply_str>;
        next;
    }

    # log remaining output
    my $log_level
        = ( exists $decoded->{'error'} and $decoded->{'error'} ne 'success' )
        ? 0
        : 2;
    $output_line =~ s/[\r\n]+//sg;
    <[base.log]>->( $log_level, "< mpv > " . $output_line );
}
