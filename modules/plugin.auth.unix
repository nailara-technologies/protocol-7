## [:< ##

# name    = plugin.auth.unix
# return  = user-name [ success ], undef on error

my $event = shift;
my $id    = $event->w->data;
my $re    = <regex.base>;

my $input  = \$data{'session'}{$id}{'buffer'}{'input'};
my $output = \$data{'session'}{$id}{'buffer'}{'output'};

if ( $input->$* =~ s|^auth ($re->{usr_str})\n|| ) {

    my $auth_user = $LAST_PAREN_MATCH;

    if ($data{'handle'}{ $data{'session'}{$id}{'handle'} }{'link'} ne 'unix' )
    {
        <[base.logs]>->(
            0,   "[%d] [ auth unix ] access denied to user '%s' %s",
            $id, $auth_user, '[ not a unix link ]'
        );
        $output->$* .= ">:[\n";
        return 2;
    }

    my $authorize_unix_session = 0;

    my $client_uid
        = $data{'handle'}{ $data{'session'}{$id}{'handle'} }{'unix'}{'uid'};
    my $client_uname = getpwuid($client_uid);

    if ( not defined $client_uname ) {
        $output->$* .= ">:[\n";
        <[base.logs]>->(
            0, '[%s] peer UID is undefined, unix auth aborted..,', $id
        );
        return 2;
    }

    my $mapped_user_str;
    if ( defined <auth.setup.usr>->{$auth_user}
        and <auth.setup.usr>->{$auth_user} =~ m|:unix:(\S+)| ) {
        my @allowed_users = split( m|\s*,\s*|, $1 );

        map { $authorize_unix_session = 5 if $client_uname eq $ARG }
            @allowed_users;

        if ( not $authorize_unix_session ) {

            ## 'unix-' prefixed users are matched against unix accounts ##
            foreach my $allowed_user (@allowed_users) {
                my $special_user
                    = <[base.access.special-user-map]>->($allowed_user);
                next
                    if not defined $special_user
                    or $special_user !~ s|^unix-||;

                if ( $special_user eq $client_uname ) {  ## unix user match ##
                    $mapped_user_str = $allowed_user;
                    ## authorized using special user template ##

                    $authorize_unix_session = 5;
                    last;                                ##  5 == true  ##
                }
            }
        }

    }

    if ($authorize_unix_session) {
        $output->$* .= "AUTH_TRUE =)\n";
        my $s_usr = $client_uname ne $auth_user ? " [u:$client_uname]" : '';

        <[base.logs]>->(    ## reports unix user seperated if different ##
            "[%d] '%s' session authorized%s",
            $id, $auth_user, $s_usr
        );
        <[base.logs]>->(    ##  report matching template  ##
            "[%d] :. unix user '%s' match in %s",
            $id, $client_uname, $mapped_user_str
        ) if defined $mapped_user_str;

        return ( 0, $auth_user );    ## register as authorized ##
        #######
    } else {    ##  no match for unix-user \ auth-user pair  ##
        $output->$* .= "AUTH_ERROR `>:|\n";
        my $s_usr
            = $client_uname ne $auth_user
            ? sprintf( ' [uname=%s]', $client_uname )
            : '';
        <[base.logs]>->(
            0,   "[%s] [auth unix] access as '%s' denied%s",
            $id, $auth_user, $s_usr
        );
        return 2;
    }
} elsif ( $input->$* =~ m|\n| ) {
    $output->$* .= ">:[\n";
    <[base.logs]>->(
        0, "[%d] authentication protocol mismatch [ unix ] `:|", $id
    );
} else {
    return 1;
}

return 2;

#,,,.,,,.,...,,.,,.,,,.,.,,.,,,,,,..,,,.,,..,,..,,...,...,...,,..,,..,.,.,,.,,
#LGEHO65NKFDC5W5BCF7EAJ4SFJTDODLLSEL3T4OOIFLJAVW3H3B4INC535MSTMYVM34PRUYD3GJ7I
#\\\|E7GVWRN3OUQB3YJPVMREGGGZAV43RAPCP2PZIDNIUMX36GUVZLD \ / AMOS7 \ YOURUM ::
#\[7]GKOCZMZPEU4CFZFP5ESP2EA3LE2OE4PGNAWBGPZ7G2ZL6XTITKAY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
