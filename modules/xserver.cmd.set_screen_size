# >:]

# name  = xserver.cmd.set_screen_size
# param = <W><x| ><H>
# descr = set new xserver screen size (if possible)
# todo  = restart xephyr process on size change request (if in xephyr mode)

my $X = <xserver.x11>;
my ( $width, $height ) = split( /\D+/, $$call{'args'} );

return {
    'mode' => 'nack',
    'data' => 'screen size expected [<width>x<height>]'
    }
    if not defined $width
    or $width !~ /^\d+$/
    or not defined $height
    or $height !~ /^\d+$/;

## current size ##

$X->choose_screen(0);    # XXX: doesn't support multiple screens yet!

# XXX: check ranges in advance...
# print STDERR Dumper( $X->RRGetScreenSizeRange( <xserver.x11>->root ) );

my %screen_geom = $X->GetGeometry( <xserver.x11>->root );

my ( $current_width, $current_height )
    = ( $screen_geom{'width'}, $screen_geom{'height'} );

return {
    'mode' => 'nack',
    'data' => "requested size identical to current one!"
    }
    if $width == $current_width and $height == $current_height;

<[base.log]>->(
    0,
    "<!> changing screen size: ${current_width}x${current_height}"
        . " -> ${width}x${height}"
);

$X->RRSetScreenSize( $X->root, $width, $height, $X->width_in_millimeters,
    $X->height_in_millimeters );

# checking for failures... ;/
eval '$X->RRGetScreenInfo( $X->root )';
if ($@) {
    my $err_msg = 'failed to set screen size ( out of range )';
    <[base.log]>->( 0, " :. $err_msg" );
    return {
        'mode' => 'nack',
        'data' => $err_msg
    };
}

%screen_geom = $X->GetGeometry( <xserver.x11>->root );

if (   $screen_geom{'width'} != $current_width
    or $screen_geom{'height'} != $current_height ) {

    # restart layout agent to update geometries
    <[base.proto.nailara.command.send.local]>->(
        {   'command'   => 'core.root.restart',
            'call_args' => { 'args' => 'layout' },
        }
    );
    return {
        'mode' => 'ack',
        'data' => "screen size is now $screen_geom{width}x$screen_geom{height}"
    };
} else {
    my $err_msg = 'failed to set screen size ( remained unchanged )';
    <[base.log]>->( 0, " :. $err_msg" );
    return {
        'mode' => 'nack',
        'data' => $err_msg
    };
}
