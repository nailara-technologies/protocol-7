## >:] ##

# name = weather.base.fork_weather_child

use Socket;

( my $session_id ) = keys <user.cube.session>->%*;

<weather.pipe> = { 'child' => {}, 'parent' => {} };

<[base.log]>->( 1, 'forking weather child.,' );

<[base.enable_list]>->('sessions');

socketpair( my $child_pipe, my $parent_pipe, AF_UNIX, SOCK_STREAM, PF_UNSPEC )
    || die "can't create socketpair. [ \l$OS_ERROR ]";
map { $data{'handle'}{$ARG}{'link'} = qw| ipc.pipe | }
    ( $child_pipe, $parent_pipe );

<[event.add_signal]>->(
    { 'signal' => 'CHLD', 'handler' => qw| base.handler.sig_chld.shutdown | }
);

<weather.child.pid> = <[base.fork]>;

if ( !<weather.child.pid> ) {    ## child ##

    <[event.add_signal]>->( { 'signal' => 'CHLD', 'handler' => 'dev.null' } );
    close($child_pipe);
    delete <weather.pipe.child> if exists <weather.pipe.child>;

    ## making base.s_read() and base.s_write() work after fork ., ##
    IO::AIO::reinit();

    <weather.pipe.parent> = $parent_pipe;
    <log.file.system.retry_timer>->cancel
        if exists <log.file.system.retry_timer>;

    my $subname = <system.zenka.subname>;
    my $sn_str  = defined $subname ? ':' . $subname : '';
    <system.zenka.subname> = sprintf 'child%s', $sn_str;
    $PROGRAM_NAME = sprintf '%s[child%s]', <system.zenka.name>, $sn_str;

    $data{'session'}{$session_id}{'shutdown'} = 1;

    $data{'handle'}{$parent_pipe}{'mode'} = qw| out |;
    my $id = <[base.session.init]>->(
        $parent_pipe, qw| protocol-7 client parent |
    );

    $data{'session'}{$id}{'input'}{'handler'} = qw| base.handler.command |;

    <[base.load_modules]>->('weather.child');
    <[base.init_modules]>->('weather.child');

    <[base.log]>->( 1, 'preparing to close cube session of child .,' );

} else {    ## parent ##
    close($parent_pipe);
    delete <weather.pipe.parent> if exists <weather.pipe.parent>;
    <weather.pipe.child> = $child_pipe;

    <[base.load_modules]>->('weather.parent');
    <[base.init_modules]>->('weather.parent');

    $data{'handle'}{$child_pipe}{'mode'} = qw| out |;
    my $id
        = <[base.session.init]>
        ->( $child_pipe, qw| protocol-7 client child | );
    $data{'session'}{$id}{'input'}{'handler'} = qw| base.handler.command |;

    my $cache_dir = <weather.cache_dir>;
    my $city_file = sprintf '%s/city.current', $cache_dir;
    if ( -f $city_file ) {
        <[base.log]>->( 1, "found saved location setup in cache.," );

        ##  contains UTF8 data  ##
        <[file.slurp]>->( $city_file, \my $stid_loc_str, qw| :raw | );

        my ( $timestamp, $loaded_location );

        if ( defined $stid_loc_str and $stid_loc_str =~ m|^(\d+)\s+(.+)$| ) {

            ( $timestamp, $loaded_location )
                = ( ${^CAPTURE}[0], ${^CAPTURE}[1] );

            <[base.logs]>
                ->( "<*> restoring location '%s'", $loaded_location );
            <weather.location> = $loaded_location;
        } else {
            <[base.log]>->(
                0, "<< syntax error in location cache file, purging.., >>"
            );
            unlink($city_file) or warn "unlink failed : \l$OS_ERROR";
        }
    }

    if ( defined <weather.location> and length(<weather.location>) ) {
        <[weather.parent.set_city]>->(<weather.location>);
    } else {
        <[base.log]>->( 1, '<< no city configured at startup >>' );
        if ( !<weather.zenka.initialized> ) {
            <[base.async.get_session_id]>;   # change zenka status to 'online'
            <weather.zenka.initialized> = 1;
        }
    }

}

#,,..,,,.,.,.,,,.,,.,,...,,,.,...,...,.,,,..,,..,,...,..,,.,,,,,,,.,,,,..,,,.,
#IXNM7XYN4WME4GE4VKGNNG4YEAQJUF4X4EVZ5V2KIEAVYTE5FNNHJO2WVQ4OTM4DXLQ5ZSPPV6Q3E
#\\\|6VFD4QMKLGB5XSZHNJRIKPZ6XJOSQUX66LEWML522BPKVFR76KJ \ / AMOS7 \ YOURUM ::
#\[7]67644H3EFWB27N4VJ67LJSP66G3NPRJZVFGIGTSK7KXGMPEE3CCY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
