## [:< ##

# name  = v7.set_up_zenka_dependencies
# descr = configures zenka dependency chains

my @zenki = @_;

if ( !@zenki ) {
    <[base.log]>->(
        0, 'v7.set_up_zenka_dependencies: no zenka list provided'
    );
    return;
}

# callbacks for dependency validation
<[dependency.install_callbacks]>->('v7');

# set up dependency objects ..,
foreach my $zenka_name (@zenki) {

    <[base.log]>->( 2, ": dependency object : zenka '$zenka_name'" );

    # install zenka setup data
    my $zenka_id = <[zenka.setup.add]>->( { 'name' => $zenka_name } );

    # create dependency objects for the zenki
    <[dependency.add_object]>->(
        {   'type'       => 'zenka',
            'zenka_id'   => $zenka_id,
            'zenka_name' => $zenka_name,
        }
    );
}

<[base.log]>->( 1, 'setting up zenka dependency chains.,' );

foreach my $s_id (
    sort {
        <v7.zenka.setup>->{$a}->{'name'} cmp <v7.zenka.setup>->{$b}->{'name'}
    } keys( %{<v7.zenka.setup>} )
) {
    my $zenka_name   = <v7.zenka.setup>->{$s_id}->{'name'};
    my $dependencies = <[zenka.get_dependencies]>->($zenka_name);
    next if not defined $dependencies;

    <[base.log]>->(
        2, ": zenka '$zenka_name' dependencies [ $dependencies ]"
    );

    my $source_object = <[zenka.get_object_id]>->($s_id);

    foreach my $dep_zenka_name ( split / +/, $dependencies ) {
        my $object_id;
        if ( $dep_zenka_name =~ /^([\w\.]+)\.(\w+)$/ ) {
            my ( $type, $name ) = ( $1, $2 );
            foreach my $id ( keys %{<dependency.object>} ) {
                next if <dependency.object>->{$id}->{'type'} ne $type;
                if ( <dependency.object>->{$id}->{'name'} eq $name ) {
                    $object_id = $id;
                    last;
                }
            }
            if ( not defined $object_id ) {
                <[base.log]>->(
                    0, "a '$type' type object named '$name' does not exist."
                );
                <[base.log]>->(
                    0,
                    "[WARNING] skipping invalid $type "
                        . "dependency for object $source_object"
                );
                next;
            }
        } else {

            if ( !<[zenka.is_enabled]>->($dep_zenka_name) ) {
                <[base.log]>->(
                    2,
                    "<< ! >> zenka '$dep_zenka_name' listed as dependency"
                        . " but is not enabled!"
                );

                #                <[v7.teardown]>;
            }

            # choosing first zenka with such a name (for now)
            my $first_id = <[zenka.get_id]>->($dep_zenka_name);
            if ( not defined $first_id ) {
                <[base.log]>->(
                    0,
                    "[obj.dependency:'$source_object'] unknown "
                        . "zenka '$dep_zenka_name'"
                );
                next;
            } else {
                $object_id = <[zenka.get_object_id]>->($first_id);
            }
        }
        <[dependency.add]>->( $source_object, $object_id );
    }
}

#,,,.,...,...,,,.,...,..,,..,,,,.,..,,,..,,,,,..,,...,...,.,,,.,.,.,.,,,,,..,,
#MEGMLST53IDDS3SFZOIPAXL5ORN3UMYHTMUBLHIJYMQLWN3BAZDIQPLMP7QUR375AE376F4U3QWAQ
#\\\|YSZEG3YMS66IUS6D6T4NYJOGHBE6N2SX4TTJX3N4BM4RNFLWH2D \ / AMOS7 \ YOURUM ::
#\[7]E7XSOPCPHKTKLZBS6PFJGCMYXULR56MECKC3FCJFQ43ZG2F5VOCA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
