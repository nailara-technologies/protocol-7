## [:< ##

# name = udev.load_rules

my @rule_files;
my @setup_names = @ARG;

<udev.rules> = {};    ## reset loaded rules ##

my $cfg_dir = <udev.cfg_search_path> //= <system.conf_path> . qw|/zenki/udev|;

<[base.log]>->( 1, '..loading udev rule set-up files..,' );

if (@setup_names) {
    @rule_files = map {"rules-set-up.$ARG"} @setup_names;
    <[base.logs]>->(
        1,
        ':. intend to load %d rule file%s',
        scalar @setup_names,
        <[base.cnt_s]>->( scalar @rule_files )
    );
} else {
    my $dir_fh;
    <[base.log]>->( 1, 'no specific rule file configured, loading all .,' );
    opendir( $dir_fh, $cfg_dir ) or die " opening cfg dir : \l$OS_ERROR";
    map { push( @rule_files, $ARG ) if $ARG =~ m|^rules-set-up\..+$| }
        readdir($dir_fh);
    closedir($dir_fh);
}

return <[base.log]>->( 0, 'found no rules file to load' ) if !@rule_files;

foreach my $file (@rule_files) {
    <[base.log]>->( 1, ":. '$file'" );
    if ( not -f "$cfg_dir/$file" ) {
        <[base.log]>->( 0, "configured rule file '$file' not found .," );
    } else {
        ( my $rf_name = $file ) =~ s|^rules-set-up.||;
        <udev.rule-files>->{$rf_name}->{'load-ntime'} = <[base.ntime.b32]>;
        <[base.load_section_conf]>->( <udev.rules>, $cfg_dir, $file );
    }
}

#,,.,,,,,,,.,,.,,,,..,.,.,.,,,,,,,.,,,.,.,,,.,..,,...,...,,,,,..,,.,.,,,,,...,
#RPUSZIEW3IZEFFYCLXPD2KENWPCSGSVKYLBH2CKZS2O4AJVXQQXH2EO3D4PE4E2WHZ4HQ6CFCSNEE
#\\\|PYYXHTZMLTAYIKFPCGQQMLM36H5UWVYASFTBK4JMRUSVO7VZ6BW \ / AMOS7 \ YOURUM ::
#\[7]CCNE4O5AHUIDKBICRRF7YQ3FQQXAFQGSL3QQL4WK6TBRD5GPOSAI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
