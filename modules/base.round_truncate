## [:< ##

# name  = base.round_truncate
# descr = truncate round to specified precision [ omitting zero remainders ]

my $value  = shift // '';
my $digits = shift // '';

if ( $value !~ m|^\d+(?:\.\d+)?$| ) {
    warn 'expected floating point value input <{}>';
    return undef;
} elsif ( $digits !~ m|^\d+$| ) {
    warn 'expected numerical digits parameter <{C1}>';
    return undef;
}

my $p_pos  = index( $value, qw| . | );
my $v_len  = length $value;
my $fp_len = $v_len - $p_pos;

return $value if $p_pos == -1 or $digits >= $fp_len;

my $cut_len = $digits == 0 ? $p_pos : $p_pos + 1 + $digits;

return substr( $value, 0, $cut_len );

#,,..,,.,,...,...,,,.,..,,,,,,...,,,.,,,,,,,.,..,,...,.,,,,,.,,,.,,..,.,,,.,,,
#323ZJUQSDQ7NTABA3JD25DN7HRU3K55QEQSCVQ5MRR5VNDS5GDQUQ3JI4HK6Q2XXRO6MIC7MJVCUG
#\\\|4AW7DDFPSMH7S7P5OKVSFZGFX5P3ZPLICXZ2UN4JM2733NTALGZ \ / AMOS7 \ YOURUM ::
#\[7]B3I5G7HBYXC5VZU4VRFSKIVLAJOZ342QOM4OZT67TTP3ZFX7AWDQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
