## >:] ##

# name  = base.file.matching_path_linknames
# descr = generates symbolic link paths for creating target path references

my $temp_file_dir    = shift // '';    ##  target dir for link creation  ##
my $link_target_path = shift // '';    ##  symlink target  ##

my $check_log_level = 2;               ##  report log level for devmod  ##

if ( not length $temp_file_dir ) {
    warn 'expected registry path parameter <{C1}>';
    return undef;
}

##  returns matches for current protocol-7 installation path  ##
##
state $inst_path_chksum //= <[chk-sum.bmw.L13-str]>->(<system.root_path>);

##  return undef when link directory not present  ##
##
if ( not -d $temp_file_dir ) {
    <[base.s_warn]>->(
        "specified directory not found ['%s'] <{C1}>",
        $temp_file_dir
    );
    return undef;
}

##  checksum input string sprintf template  ##
##
my $input_str_template = sprintf qw| %s:%%d%%s |, $inst_path_chksum;

my @link_path;

##  symlink path \ name sprintf templates  ##
##
my $fname_templ = sprintf qw| %s/%%s |, $temp_file_dir;

my $links_href = <[file.all_links]>->($temp_file_dir);

my $prev_target_path = $link_target_path;

$link_target_path = abs_path($link_target_path)
    if length $link_target_path and not -l $link_target_path;

<[base.logs]>->(
    $check_log_level,  ':: :. resolved target path %s as %s .: ',
    $prev_target_path, $link_target_path
) if $prev_target_path ne $link_target_path;

undef $prev_target_path;

foreach my $link_path_abs ( <[base.sort]>->($links_href) ) {
    ( my $rel_link_path = $link_path_abs ) =~ s|^.*/||;
    <[base.logs]>->(
        $check_log_level, ': checking temp path link : %s',
        $rel_link_path
    );
    <[base.logs]>->(
        $check_log_level, ':. %s', $links_href->{$link_path_abs}
    );
    if (length $link_target_path
        ## check if target matches ##
        and $links_href->{$link_path_abs} ne $link_target_path
        and abs_path( $links_href->{$link_path_abs} ) ne $link_target_path
    ) {
        <[base.logs]>->(
            $check_log_level, ':: %s :: no match ::',
            $link_target_path
        );
        next;    ##  skip link and target path \ no match  ##
    } else {
        <[base.logs]>->(
            $check_log_level, ':. %s .: match =) ::',
            $link_target_path
        );
    }

    ##                                                           ##
    ##  verify checksum to check if registered by current zenka  ##
    ##                                                           ##

    next if not $link_path_abs =~ m|/0(\d+)0[^/]+$|;
    my $file_iteration_counter = 0 + $LAST_PAREN_MATCH;

    my $calculated_abspath = <[file.gen_path_linkname]>->(
        $temp_file_dir,
        $links_href->{$link_path_abs},
        $file_iteration_counter - 1, 5    ##  existing link paths  ##
    );

    <[base.log]>->(
        $check_log_level, '::[ no result from gen_path_linkname ] :|'
    ) if not defined $calculated_abspath;

    next    ##  does differ  ##
        if not defined $calculated_abspath
        or $calculated_abspath ne $link_path_abs;

    push @link_path, $link_path_abs;    ##  is a valid match  ##
}

return @link_path;    ##  returning matching symlink paths for target  ##

#,,..,,,,,,,.,,..,,.,,,.,,..,,.,,,,..,.,.,..,,..,,...,..,,,..,...,..,,.,.,...,
#255YZKSMMPELYH3QEFTBMSILOKJSJCNDBG24OIU4QX4ORS2ONFMSC2S5SHTGQF2AM3VHRGXZBZD7I
#\\\|BGBH4UYLRBNYYZACEWPRC3W75N4PWZXSZ6J7CDOZWBZ7IOFHDH6 \ / AMOS7 \ YOURUM ::
#\[7]UF4BB2YFMFMIBNKQMBXORBLU4A4Z2TGNR2RFCNLIHSF5JJCSLICQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
