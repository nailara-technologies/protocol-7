## [:< ##

# name  = base.init
# descr = initialize zenka and run start-up code

<system.zenka.init_passed> //= FALSE;    ##  false  ##

if (<system.zenka.init_passed>) {
    <[base.s_warn]>->(
        '%s zenka already initialized, skipping %s call <{C1}>',
        <system.zenka.name>, __FILE__
    );
    return undef;
} else {
    <system.zenka.init_passed> = TRUE;    ## true ##
}

if ( $ARG[0] =~ m|~$| ) {
    <[base.log]>->(
        0, '<-- zenka subroutine name not valid [ backup file ], aborting ..,'
    );
    <[base.exit]>->(4);
}

<system.sub_name> = qw| base.init |;    ##  <--  used for warnings  ###

$PROGRAM_NAME = $ARG[0];

if ( $_[0] =~ m{([^\.]+)\.([\w|\.]+)$} ) {
    ( <system.node.name>, <system.zenka.name> )
        = ( ${^CAPTURE}[0], ${^CAPTURE}[1] );
}

if (<system.background_mode>) {
    my $status = FALSE;    ##  false  ##

    eval { $status = <[base.process-into-background]> };

    <[base.exit]>->(
        ':: exit :: cannot background zenka process ::',
        0, qw| 0110 |
    ) if length $EVAL_ERROR or not $status;
}

## <[base.process-into-background]> if <system.background_mode>;

my $success = TRUE;    ## true ##
if (    <system.start-up.stdin.read-init-code>
    and <zenka.start-up.init_code>->@* ) {

    $success = <[base.execute_zenka_code]>
        ->( <[base.parser.config]>->(<zenka.start-up.init_code>) );

    ## cleaning up., [could contain auth key strings] ##
    undef <zenka.start-up.init_code>->@*;
    delete <zenka.start-up.init_code>;
    <[base.clean_hashref]>->( $data{'zenka'} );
    delete $data{'zenka'} if not keys $data{'zenka'}->%*;
}

if ( not $success or length $EVAL_ERROR ) {
    <[base.log]>->( 0, 'warning : start-up init code contained errors.,' );
    undef $EVAL_ERROR;
}

my $zenka_cfg_path = <[base.get_path.zenka_cfg]>->(<system.zenka.name>);

if ( not -e sprintf qw| %s/%s |, <system.conf_path>, $zenka_cfg_path ) {
    my $zenka_name = <system.zenka.name>;
    local <system.zenka.name> = qw|error|; # <-- changed zenka name to 'error'
    <system.sub_name> = undef;
    <[base.logs]>->( 0, "<< no such zenka found ['%s'] >>", $zenka_name );
    <[base.exit]>->(qw| 0010 |);
}

<system.path.rel.cur_zenka_cfg> = $zenka_cfg_path;

<base.config_parser.cfg_name> = qw| zenka |;
<base.config_parser.cfg_type> = qw| start_cfg |;

# note : load_config_file will not return for zenki invoking the event loop..,
if ( not <[base.load_config_file]>->($zenka_cfg_path) ) {
    <[base.logs]>->(
        0, "starting of '%s' zenka not successful",
        <system.zenka.name>
    );
    <[base.exit]>->(qw| 0110 |);
}

<system.sub_name> = undef;    ##  zenka code has ended  ##

#,,,.,.,.,...,,,.,,,.,..,,,..,,,.,.,.,...,..,,..,,...,...,.,.,.,,,,..,.,,,.,.,
#FQTYX2ZQ5RTOBSLZPXC5DCWAP3NP4QY6FROBF5Y5ZHFQRE6W43QSOSQQGE7KFH5M2ME2XY7LZI6A6
#\\\|5GTK72YJPO72ZCAZXGUOOXKKBAATWKN5GLWHGH5NDYQPEBYM6OR \ / AMOS7 \ YOURUM ::
#\[7]BTUXJAZDH45C5WWSBVKXJETOLRSANBTU7EB32PV4RGK7YDIPOKCI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
