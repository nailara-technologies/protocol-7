## [:< ##

# name  = source.restore_payload_endline_state

my $payload_sref      = shift;
my $endline_state_oct = shift;

##  endline state description  ##
#
##  7 : 2 added, 5 : untouched, 0 : 4 removed  ##

warn 'expected sref to payload data <{C1}>' and return undef
    if not length ref $payload_sref;
<[base.s_warn]>->( 'got ref-type %s , want SCALAR <{C1}>', ref $payload_sref )
    and return undef
    if ref $payload_sref ne qw| SCALAR |;

warn 'expected octal endline state descriptor <{C1}>' and return undef
    if not defined $endline_state_oct
    or $endline_state_oct !~ m|^\d$|
    or $endline_state_oct > 7;

return 0 if $endline_state_oct == 5;

my $previous_payload_length = length $payload_sref->$*;

if ( $endline_state_oct < 5 ) {

    ##  amending at signature time removed endlines  ##
    ##
    my $endline_count = abs( $endline_state_oct - 4 );
    $payload_sref->$* .= "\n" x $endline_count;

} else {    ##  removing at signature time added endlines  ##

    my $endline_count = abs( $endline_state_oct - 5 );
    $payload_sref->$* =~ s|(\n){$endline_count}$||s;

}

##  return length difference [ representing change in trailing endlines ]  ##
return length( $payload_sref->$* ) - $previous_payload_length;

#,,,.,,..,,,.,,.,,.,.,..,,.,,,.,.,,..,,..,,..,..,,...,...,.,.,.,,,,,.,..,,.,.,
#VQPR7DOGSOJOQBK6DLF6Q6B7QTZ4Y7FN423Q5FLKQE5HC7IMW5XBBKAFXP6SF5RPLASFT5UKWV6TO
#\\\|FFGGZ57YS3GMNPMWYGXNG37JEMJBG5UOAUWLABLZVQ2GEMGI62W \ / AMOS7 \ YOURUM ::
#\[7]I2DTRANIOGPAJTQITNDNPGIF276RQUNMJT4GXQPBMSFXQABOH6CA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
