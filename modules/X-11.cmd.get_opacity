## [:< ##

# name  = X-11.cmd.get_opacity
# param = <w_id>
# descr = return window opacity in percent [0..100]

my $X         = <X-11.obj>;
my $window_id = $$call{'args'};

return { 'mode' => qw| false |, 'data' => 'x11 window id required' }
    if not defined $window_id;
return { 'mode' => qw| false |, 'data' => 'invalid x11 window id syntax' }
    if $window_id !~ /^\d+$/;

my $xtops = <X-11.WM>;
<[X-11.update_X11_WM]>;

my $window;
for my $w ( @{ $xtops->sorted } ) {
    if ( $w->id eq $window_id ) {
        $window = $w;
        last;
    }
}

return { 'mode' => qw| false |, 'data' => 'no such window' }
    if not defined $window;

my $result = <[X-11.get_window_opacity]>->($window_id);

if ( not defined $result ) {
    <[base.log]>->(
        0,
        "error during get_opacity() command for window $window_id [closed?]"
    );
    return { 'mode' => qw| false |, 'data' => 'window has been closed' };
}

return { 'mode' => qw| true |, 'data' => sprintf( '%.3f%%', $result * 100 ) };

#,,.,,,,,,,.,,,..,,.,,,.,,..,,,.,,...,.,,,,.,,..,,...,..,,.,.,.,.,.,.,,..,,,,,
#HKLCZZIPFYXW555OAJJQEZPNSW2KFO4OCGCCKCJQ5ZZJY6CD2OSHRSAPEXYMZ72D3GSTPDIVGQRXI
#\\\|5Z5NXGREA56YHVL2YRTUKNTLMOC6LV4DTZZKTTJPEA23ZBNCCQX \ / AMOS7 \ YOURUM ::
#\[7]DPJE6J5A7IAQ3DN5MJYFOXL6CEWGBIK6SLID2ZCR4LYY6JRLJ2AA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
