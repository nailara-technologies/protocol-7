# >:]

# name  = config.cmd.export_config
# param = <agent> [type]
# descr = return config of specified agent as json

return { 'mode' => 'nack', 'data' => 'expected agent name parameter' }
    if not defined <config.json.export_allowed>
    or !<config.json.export_allowed>;

my ( $agent_name, $config_type ) = split( / +/, $$call{'args'}, 2 );
return { 'mode' => 'nack', 'data' => 'expected agent name parameter' }
    if not defined $agent_name;
$config_type //= 'config';    # default

return { 'mode' => 'nack', 'data' => 'invalid agent name syntax!' }
    if $agent_name !~ <regex.base.usr>;

my $type_args = {};
$type_args = { 'args' => $config_type } if defined $config_type;

return { 'mode' => 'nack', 'data' => 'invalid config type syntax!' }
    if $config_type !~ /^\w+$/;

my $cmd_path = "core.$agent_name.get_config";
$cmd_path = "core.get_config" if $agent_name eq 'core';

<[base.proto.nailara.command.send.local]>->(
    {   'command'   => $cmd_path,
        'call_args' => $type_args,
        'reply'     => {
            'handler' => 'config.handler.export_reply',
            'params'  => {
                'agent_name'  => $agent_name,
                'config_type' => $config_type,
                'reply_id'    => $$call{'reply_id'}
            }
        }
    }
);

return { 'mode' => 'later' };
