## [:< ##

# name = base.file.match_links
# args = [result_array_ref,] <search_dir_path>, <symlink_name_pattern(s)>

# supported wildcard patterns are: '*' ([^\.]*) and '**' (.*)

my $result_aref;
$result_aref = shift(@ARG) if ref $ARG[0] eq qw| ARRAY |;    # [ append mode ]

my $search_abs_path = shift @ARG;

my $recursive_scan    ## 'recursive' parameter ##
    = (     @ARG
        and defined $ARG[0]
        and $ARG[0] eq qw| recursive |
        and shift @ARG )
    ##  true ##
    ? 5
    ##  false  ##
    : 0;

##  false  ##
my $recursion_entered = 0;

if ( not defined $result_aref ) {
    $result_aref = [];
} else {
    ## true ##
    $recursion_entered = 5;
}
my $results = [];
$results = $result_aref if defined $result_aref;    ##  [ append mode ]

##  precompiled regular expression patterns  ##
##
my $regex_aref = shift @ARG
    if ref $ARG[0] eq qw| ARRAY |
    and rindex( ref $ARG[0]->[0], qw| Regexp | ) != -1;

if ( not defined $regex_aref ) {
    my @wildcard_filenames = @ARG;

    if ( @wildcard_filenames == 0 ) {
        warn 'expected filenames \\ patterns <{C1}>';
        return undef;
    }

    my @file_table = map {
        my $key = $ARG // '';
        $key =~ s|\.|\\.|g;
        $key =~ s{(\*\*|\*)}{ $LAST_PAREN_MATCH eq '*' ? '[^\.]*' : '.*' }ge;

        ( my $reg_ex, my $regex_err_str ) = <[base.eval.comp_regex]>->($key);

        if ( not defined $reg_ex or length $EVAL_ERROR ) {
            <[base.s_warn]>->( '[ %s ] %s <{C1}>', $key, $regex_err_str->$* );
            return undef;
        }
        $reg_ex;

    } @wildcard_filenames;

    $regex_aref = \@file_table;

}

my $dir_fh;
$search_abs_path =~ s|/+$||;    ##  remove trailing '/'-es ##

if ( not opendir( $dir_fh, $search_abs_path ) ) {
    <[base.s_warn]>->(
        "directory path '%s' [ %s ] <{C1}>",
        $search_abs_path, <[base.str.os_err]>
    );
    return undef;
}

foreach my $entry ( <[base.sort]>->( readdir($dir_fh) ) ) {
    next if $entry =~ m|^\.{1,2}$|;
    my $path_abs = catfile( $search_abs_path, $entry );

    foreach my $pattern ( $regex_aref->@* ) {

        ##  matching for any 'files' only  ##
        if ( -l $path_abs and $path_abs =~ $pattern ) {

            push $results->@*, $path_abs;
            last;
        }
    }

    ##  skip not readable  ##
    next if not $recursive_scan or not -d $path_abs or not -r $path_abs;

    <[file.match_links]>->(
        $result_aref, $path_abs, qw| recursive |, $regex_aref
    );
}

if ( not $recursion_entered ) {
    undef $regex_aref->@*;
    undef $regex_aref;    ##  reset regular expression patterns  ##
    if ( not $recursion_entered ) {

        return $result_aref->@* if wantarray;    ## array in list context ##

        ##  returning ARRAY reference in scalar context  ##
        return $result_aref if not $recursion_entered;
    }
}

#,,,.,...,,,,,...,,,.,,..,.,.,,,.,...,.,,,,,,,..,,...,...,,..,..,,.,.,..,,,,.,
#D7527IGYIWVB3FXDTP7TKS5KMA53NQ52IS76RY47QFSSRR5PVSWTL7J6IY3C3Y2H6GS3CW46XDPZO
#\\\|AYN7H7URZDRR5QZLPKK5C4DCUNPPRBR3OIIKPD7M77Z7J66PWF3 \ / AMOS7 \ YOURUM ::
#\[7]D7XOKQ64EESTHCJ6HFZ772WEPHIEVTAZY2YYLKCGFOCFS2OCMUBI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
