## [:< ##

# name  = base.buffer.add_line
# descr = write log messages to buffer and screen

my $name          = shift;
my $log_message   = shift;  # <-- <t-stmp>  <lvl>   <msg>
my $log_cmd_level = shift;  # <-- [lvl] <-- optional log level [ for log_cmd ]

my $min_b_size = 13747;

$code{'base.log'} //= $code{'log.noerr'} // sub { say "<< $ARG[1] >>" };

if ( not length( $name // '' ) ) {
    <[base.log]>->( 1, 'add_ram_log: no buffer name supplied' );
    warn 'expected buffer name <{C1}>';
    return -1;
} elsif ( $name !~ m|^[\w\-_]{1,24}$| ) {
    <[base.s_warn]>->( "invalid buffer name '%s' specified <{C1}>", $name );
    return -1;
}

my $buffer_size = $data{'buffer'}->{$name}->{'max_size'};

if ( defined $code{'base.utf8.clean_not_valid'} ) {
    <[base.utf8.clean_not_valid]>->( \$log_message, 3, 3 );  ## warn-lvl: 3 ##
}

$log_message =~ s{^\s+|\s+$}{};
$log_message =~ s|\n|\\n|g;
$log_message =~ s|\r|\\r|g;

my $message_len = length $log_message;

if ( not defined $buffer_size or $buffer_size < $min_b_size ) {

    ## buffer size ##
    ##
    my $default_size = 64512;    ##  <-- 63K internal default  ##

    my $default_found = defined <default.max_size.log_buffers> ? TRUE : FALSE;
    $default_size = <default.max_size.log_buffers> if $default_found;
    my $min_size_error = FALSE;
    if ( defined $buffer_size and $buffer_size < $min_b_size ) {
        $default_size   = $min_b_size;
        $min_size_error = TRUE;
    }
    my $size_str = $default_size;
    if ( not $size_str =~ s|000000$|M| ) { $size_str =~ s|000$|K| }
    $buffer_size = $data{'buffer'}->{$name}->{'max_size'} = $default_size;
    if ($min_size_error) {
        <[base.logs]>->(
            0, "<<< log buffer size too small, using %s for '%s' buffer >>>",
            $size_str, $name
        );
    } elsif ( !$default_found ) {
        <[base.logs]>->(
            "no log buffer size set [using %s for '%s']",
            $size_str, $name
        );
    } else {
        <[base.logs]>->(
            2, "<< no '%s'-buffer size set, using default setting [%s] >>",
            $name, $size_str
        );
    }
}
if ( $message_len > $buffer_size ) {
    <[base.logs]>->(
        0,
        "WARNING: log message longer than log-buffer-size"
            . " [ buffer: %d bytes message: %d bytes ]",
        $buffer_size,
        $message_len
    );
    return 0;
}

my $buffrs = $data{'buffer'} //= {};

$buffrs->{$name}->{'size'} //= 0;

push $buffrs->{$name}->{'data'}->@*, $log_message;
$buffrs->{$name}->{'size'} += $message_len + 1;    ## <--[\n]

while ( $buffrs->{$name}->{'size'} + $message_len > $buffer_size ) {

    my $deleted_bytes = length $buffrs->{$name}->{'data'}->[0];

    undef $buffrs->{$name}->{'data'}->[0];
    shift $buffrs->{$name}->{'data'}->@*;

    $buffrs->{$name}{'overrun'}{'count'}++;
    $buffrs->{$name}{'overrun'}{'lost_bytes'} += $deleted_bytes + 1; ##<--[\n]

    $buffrs->{$name}->{'size'} -= ( $deleted_bytes + 1 );
    if (    exists <log.file>->{$name}
        and exists <log.file>->{$name}->{'start_index'} ) {
        <log.file>->{$name}->{'start_index'}--
            if <log.file>->{$name}->{'start_index'} > 0;
        <log.file>->{$name}->{'next_index'}--
            if <log.file>->{$name}->{'next_index'} > 0;
    }
}

return if not <[base.cfg_bool]>->(<base.log.allow_buffer_send>);

if (    defined $buffrs->{$name}->{'log_cmd'}
    and length $buffrs->{$name}->{'log_cmd'}
    and (  $name ne qw| zenka |
        or not defined $log_cmd_level
        or not defined <system.verbosity.zenka_logfile>
        or $log_cmd_level <= <system.verbosity.zenka_logfile> )
) {
    my $buffer_index = scalar( $buffrs->{$name}->{'data'}->@* ) - 1;

    if ( defined $code{'base.log.send_buffer_line'} ) {

        <[base.log.send_buffer_line]>->( $name, $buffer_index )
            if not exists $data{'p7-log'}
            or not exists <log.file>
            or not exists <log.file>->{$name}
            or <log.file>->{$name}->{'complete'} == TRUE;
    }
}

#,,.,,.,,,,,.,..,,..,,,,,,.,.,,,.,,,,,,,.,,,,,..,,...,...,...,.,.,.,.,,.,,.,.,
#GFQIZQGZI2LS7HJAHICOV3EIH5HJ2WPAIZH3KD4O2GIHUMBJUPEHYOF34T75FQMDQ7DVBGQRN2Y22
#\\\|2AGDS2IZOLZE4GDE2KA5WM3FIPZJYJAON3B23AOUQ77XK33CHRV \ / AMOS7 \ YOURUM ::
#\[7]RNPJIIO6VFVSYFVBZRBEERMMHQPUGTA5DIBLFK3VESYI7MTRDMBY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
