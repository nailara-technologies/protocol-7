# >:]

# name = base.x11.get_window_id

my $name     = shift;
my $user     = shift || 'core';
my $cmd_path = shift || '';
$cmd_path .= '.' if length($cmd_path);
if ( not defined $name ) {
    $name = <system.agent.name>;
    $name .= '[' . <system.agent.subname> . ']'
        if defined <system.agent.subname>;
}
die "expected window name parameter" if not defined $name or !length($name);
my ($local_session_id) = keys( %{ $data{'user'}{$user}{'session'} } );

<[base.log]>->( 2, "requesting window id for '$name'.." );

my $cmd_id = <[base.gen_id]>->( $data{'route'} );

my $core_fh = $data{'session'}{$local_session_id}{'handle'};
<[net.out]>->( $core_fh, "($cmd_id)${cmd_path}xserver.get_windows $name\n" );

my $reply_string;
my $matched_reply = 0;
while ( !$matched_reply ) {
    $reply_string = <$core_fh>;
    die "core handle had an exception!"
        if not defined $reply_string or !length($reply_string);

    $matched_reply = 1 if $reply_string =~ /^\($cmd_id\)(NACK|RAW) /;
    if ( !$matched_reply ) {
        my $reply_cmd_id = $reply_string =~ /^\((\d+)\)(\S+)/ ? "($1)" : '';
        <[net.out]>->( $core_fh, "${reply_cmd_id}NACK not initialized yet!\n" )
            if uc($2) ne $2;
    }
}

if ( $reply_string =~ /^\($cmd_id\)RAW (\d+)\n$/ ) {
    my $buffer_string = '';
    my $bytes_to_go   = $1;
    if ( !$bytes_to_go ) {
        <[base.log]>->( 2, ": no window id found for \"$name\" [!]" );
        return undef;
    }
    while ($bytes_to_go) {
        my $read_bytes = read( $core_fh, $buffer_string, $bytes_to_go,
            length($buffer_string) );
        die "core filehandle had unexpected exception!"
            if not defined $read_bytes;
        $bytes_to_go -= $read_bytes if $read_bytes;
        sleep 0.1 if $bytes_to_go and !$read_bytes;
    }
    my $lines = $buffer_string =~ /\n/;
    warn "[!] found more than one matching window, please fix the name pattern!"
        if $lines > 1;
    <x11.id> = $1 if $buffer_string =~ /^([^ ]+) /;
    <[base.log]>->( 2, ": received X window id '" . <x11.id> . "'.." );
    return <x11.id>;
} else {
    <[base.log]>->(
        0,
        "protocol error (unexpected reply from xserver agent)"
            . " ['$reply_string']"
    );
    return undef;
}
