# >:]

# name = browser.gtk3.init_view

my $window = <browser.gtk3.obj.window>;

my $win_size = <browser.window_size>;

my $scr_win = Gtk3::ScrolledWindow->new();
<browser.gtk3.obj.scr_win> = $scr_win;

my $style_con = $scr_win->get_style_context();
my $css_prov  = Gtk3::CssProvider->new();
$css_prov->load_from_data(<<'EOT');
.undershoot.top, .undershoot.right, .undershoot.bottom, .undershoot.left {
    background-image: none;
}
EOT
$style_con->add_provider( $css_prov, -1 );

$ENV{'GTK_OVERLAY_SCROLLING'} = <browser.cfg.overlay_scrolling> ? 1 : 0;

if (<browser.cfg.allow_scrollbars>) {
    $scr_win->set_policy( 'GTK_POLICY_AUTOMATIC', 'GTK_POLICY_AUTOMATIC' );
} else {
    $scr_win->set_policy( 'GTK_POLICY_EXTERNAL', 'GTK_POLICY_EXTERNAL' );
}

$scr_win->set_size_request( $win_size->{'x'}, $win_size->{'y'} )
    if defined $win_size->{'x'} and defined $win_size->{'y'};

my $view = Gtk3::WebKit::WebView->new();

<browser.gtk3.obj.view>  = $view;
<browser.gtk3.obj.frame> = $view->get_main_frame();

$view->set_zoom_level( <browser.zoom_level> * <browser.zoom_factor> );
$view->set_full_content_zoom( <browser.zoom_text_only> ? 0 : 1 );
$view->set_editable(0);
$view->can_go_back_or_forward(0);
$view->set_maintains_back_forward_list(0);
<[browser.gtk3.set_properties]>->($view);
$view->set_property( 'editable', 0 );

my $view_port = Gtk3::Viewport->new();
$view_port->add($view);
$scr_win->add($view_port);

$window->add($scr_win);

$window->signal_connect(
    'size-allocate' => sub {
        my $self        = shift;
        my $view        = <browser.gtk3.obj.view>;
        my $uri         = $view->get_uri();
        my $load_status = $view->get_load_status;

        return 1
            if not defined $uri
            or $uri =~ m,^(file|about):,
            or $load_status ne 'finished';

        my $win_size = <browser.window_size>;
        my $sreq     = $view->size_request();
        my ( $nw, $nh ) = ( $sreq->width, $sreq->height );
        $view->size_allocate( { 'width' => $nw, 'height' => $nh } );
        my $zoom_level
            = sprintf( "%.3f", <browser.zoom_level> * <browser.zoom_factor> );
        $view->set_zoom_level($zoom_level);
        return 0;
    }
);

$view->signal_connect( # filtering all events according to blocklist setup above
    'event',
    sub {
        my $v    = shift;
        my $evt  = shift;
        my $type = $evt->type();

        return 1 if exists <browser.blocked_event_types>->{$type};    # block

        if ( index( $type, 'key' ) == 0 )
        {    # block key presses outside input fields
            return 1 if !$v->can_paste_clipboard();
            $v->delete_selection() if $v->can_copy_clipboard();
        }

        return 0;    # allow the rest
    }
);

if (<browser.state.first_load>) {
    $view->load_uri( 'file:///' . <browser.loading_page> )
        if <browser.cfg.show_loading_page>;
    <browser.state.first_load> = 0;
}

$window->show_all();

