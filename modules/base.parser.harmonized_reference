## >:] ##

# name  = base.parser.harmonized_reference
# desc  = convert ref. addr [hex] to harmonized compressed integer format

my $cref_str = shift;

if ( not defined $cref_str
    or $cref_str !~ m|^([A-Z]+)\((0x[0-9a-f]{1,16})\)$| ) {
    warn 'expected ref addr string <{C1}>';
    return undef;
}

my $reftype = ${^CAPTURE}[0];
my $refaddr = ${^CAPTURE}[1];

my $remove_prefix = 5;    ##  strip refaddr prefix before encoding  ##

my $refaddr_prefix;
my $raddr_prefix_length;
my $refaddr_prefix_timestamp;

if ($remove_prefix) {
    if (not <[base.is_defined_recursive]>->(
            qw| base.cache.perl.refaddr_prefix.current |)
    ) {
        warn 'refaddr prefix cache was empty, populating it ., <{C1}>';
        <[base.cache.refaddr-prefix.init]>;
    }
    my $refaddr_cache_ref = <base.cache.perl.refaddr_prefix.current>;
    $refaddr_prefix      = $refaddr_cache_ref->{'value_str'};
    $raddr_prefix_length = $refaddr_cache_ref->{'val_length'};
}

if ( $remove_prefix and index( $refaddr, $refaddr_prefix, 2 ) == 2 )  ##:0x:##
{    ##  match, strip prefix  ##
    substr( $refaddr, 2, $raddr_prefix_length, '' );
}

return <[base.p7refs.gen_template_chksum]>->( $reftype, $refaddr );

#,,,.,,..,,..,,,.,,..,...,,..,,.,,.,.,.,.,.,.,..,,...,...,...,.,.,,,,,...,,.,,
#GTRNIQPURP2YGKEEHLHZEYVFQ7CSLJGDXASQSGHJAAKQNPQIKU2F4Z6W3XN4ER5FKV7J2MN6PTVSQ
#\\\|Q7U7BSJ7QO3SY36BNEUOXQTVBRSKP2PS2DJZJW2UX2FLVAZQSN3 \ / AMOS7 \ YOURUM ::
#\[7]YEHNVB3H5ZQX2VAOFN2G2BPOERFFH2JI54AUFYNP75FFZJVHYUDI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
