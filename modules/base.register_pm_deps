## [:< ##

# name = base.register_pm_deps

my %pmods          = map { $ARG => 5 } grep { !m,^AMOS(::.+|$)$, } @ARG;
my $zenka          = <system.zenka.name>;
my $cfg_path       = <system.conf_path>;
my $zenka          = <system.zenka.name>;
my $start_cfg_name = qw| start |;
state $access_warned = 0;

my $file_perm = 0664;    ##  zenka group gets write access  ##
my $owner     = <system.amos-zenka-user> // qw|  protocol-7  |;

my $mod_dir = <[base.get_path.zenka_cfg]>;

my ( undef, undef, $owner_uid, $gid ) = getpwnam($owner)
    or <[base.logs]>->(
    0, "<< register_pm_deps : unix user '%s' not in passwd >>", $owner
    ) and return undef;

my @not_registered;

if ( $mod_dir
    =~ s|zenki/$zenka/$start_cfg_name|$cfg_path/zenki/$zenka/pm-dep| ) {

    <[base.check_dependency_dirs]> if not -d $mod_dir;

    my $src_stat = File::stat::stat($mod_dir);

    if (    -d $mod_dir
        and -r $mod_dir ) {
        foreach my $mod_name ( <[base.reverse-sort]>->( \%pmods ) ) {
            next if -e catdir( $mod_dir, $mod_name );
            eval 'use Module::CoreList'
                if not defined &Module::CoreList::is_core;
            next if $EVAL_ERROR or Module::CoreList::is_core($mod_name);
            if ( -w $mod_dir ) {
                my $path_abs = catfile( $mod_dir, $mod_name );
                ( my $relpath = $path_abs ) =~ s|^.*/||;
                my $fh;
                open( $fh, qw| > |, $path_abs )
                    and close($fh);

                ## chmod ##
                chmod( $file_perm, $path_abs )
                    or <[base.logs]>->(
                    2,        ":. : '%s' : chmod : %s .:",
                    $relpath, <[base.str.os_err]>
                    );

                ## chown ##
                if ( $EUID == 0 ) {
                    chown( $src_stat->uid, $gid, $path_abs )
                        or <[base.logs]>->(
                        2,        ":. : cannot chown %s : %s .:",
                        $relpath, <[base.str.os_err]>
                        );
                }

            } else {
                push @not_registered, $mod_name;
            }
        }

    }
    if (    @not_registered
        and not <system.zenka.initialized>
        and not $access_warned++ ) {
        my $root_path = <system.root_path>;
        ( my $mod_dir_rel = $mod_dir ) =~ s|^$root_path/?||g;
        <[base.logs]>->( 0, '<< no write access to %s >>', $mod_dir_rel );
        map { <[base.logs]>->( 0, ': not registered :. %s .:', $ARG ) }
            @not_registered;
    }
}

#,,.,,,,.,,,.,,..,.,.,,,.,..,,...,,,,,,.,,,.,,..,,...,...,...,..,,...,.,,,.,,,
#ON2FB43KQ4ZBBLOTI3XITCTJR7H3LNY7DHLW5OXWVF5YDYUNPMV65QYIMLJFCEKDF44ZRH5SAVQBW
#\\\|RDVRLUKZEMRSCXBLJTSZ6CLZSVGAEV6EDH4VN7645D7NJCRMD3T \ / AMOS7 \ YOURUM ::
#\[7]5VJKUUB2HDM6LZHWMV4UKHR7BTASY7UJD5BNGH4QCTPGTBBWFUBQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
