## [:< ##

# name  = io.unix.socket.input.connect

my $fd = $_[0]->w->fd;     ## <-- $data{'session'}{$id}{'handle'} ##
my $id = $_[0]->w->data;

return undef if not defined $data{'session'}{$id};

if ( ref($fd) eq qw| IO::Socket::UNIX | and -S $fd ) {
    my $unix_client;
    if ( $unix_client = $fd->accept() ) {

        no strict;   ##  retrieving peer credentials [ unix user details ]  ##
        my @peercred = unpack( 'i*', $unix_client->sockopt( SO_PEERCRED() ) );
        use strict;

        if ( @peercred != 3 ) {
            warn "[$id] no success with SO_PEERCRED()";
            return undef;
        }

        $data{'handle'}{$unix_client} = {
            'encryption' => qw| none |,
            'mode'       => qw| input |,
            'link'       => qw| unix |,
            'unix'       => {
                qw| pid | => $peercred[0],    # <-- process id  ###
                qw| uid | => $peercred[1],    # <-- unix-user-id  ###
                qw| gid | => $peercred[2]     # <-- unix-group id  ###
            }
        };

        <[base.logs]>->(
            2,   '[%s] unix.connect [ PID : %d, UID : %d, GID : %d ]',
            $id, @peercred
        );

        return $unix_client;    ## <-- success ##

    } else {
        my $err_msg = <[base.format_error]>->($OS_ERROR);
        <[base.log]>->( 0, "[$id] cannot accept() connection : $err_msg" );
        return undef;
    }
} else {
    <[base.logs]>->(
        0,   '[%d] server socket is not valid %s',
        $id, <[base.caller]>
    );
    return undef;    ## <-- error connecting ##
}

#,,..,..,,...,,,,,...,,.,,,..,...,,,,,,.,,...,..,,...,...,.,,,.,.,...,,.,,.,,,
#JZFGXH5FQONF7CHN3R7LYMOIXL5PDBKQ7DJIIVY4I75YIPEEOHBTUDYZDCK7CZYTSHXZYC3MWTC2I
#\\\|EUPCIH74DYJIRMBMNNJ6B222M66ZX5HOAAPRZKC7SSAHONB3IR7 \ / AMOS7 \ YOURUM ::
#\[7]SYLBTSPTU7CLSADDS2JCYSO2LP3G7WFRGXJ5G7SZ6SWW7ED7DACY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
