## >:] ##

# name  = nodes.cmd.add-trunc
# descr = add a nailara node with name and key [B32]
# param = <name> <addr> <pkey>

<nodes.setup> //= {};
my @params = split( m| +|, $$call{'args'} // '' );

return {
    'mode' => qw| false |,
    'data' => 'expected <name> <addr> and <pkey> parameters'
    }
    if @params != 3;

my $err_msg;
my $name = shift @params;
my $addr = shift @params;
my $pkey = shift @params;

$err_msg = 'not a valid node name' if $name !~ <regex.base.usr>;

foreach my $id ( keys %{<nodes.trunc>} ) {
    last if defined $err_msg;
    $err_msg = "link '$name' already exists"
        if <nodes.trunc>->{$id}->{'name'} eq $name;
}

$err_msg = 'specified IP address is not valid'
    if not defined $err_msg
    and ( $addr !~ /[\.:]/ or !ip_validate($addr) );

$err_msg = 'expect base32 encoded [C25519] public key'
    if length($pkey) !~ 52 or $pkey !~ m|^[A-Z0-9]+$|;

return { 'mode' => qw| false |, 'data' => $err_msg } if defined $err_msg;

$addr = ip_transform($addr);    # ..expanding..,

## establish encrypted connection .., ## [ LLL ] ##

my $node_id = <[base.list.element.add]>->(
    {   'key_ref' => \$data{'nodes'}{'trunc'},
        'val_ref' => \{
            'name' => $name,
            'addr' => $addr,
            'pkey' => $pkey
        }
    }
);

return {
    'mode' => qw| false |,
    'data' => "failed to add node [ details in log ]"
    }
    if not defined $node_id;

return {
    'mode' => qw| true |,
    'data' => "node '$name' added"
};

#,,,,,,,.,..,,,,.,,..,.,.,.,.,..,,.,.,.,.,.,,,..,,...,.,.,.,.,,,,,.,.,...,.,,,
#EC6KQTR5RM7OKZDEGFIIRK3WREF3M2B5ELLD3UQJGXM7HNUMZPYBTD5ZOJK4UMP62JNH3IXFI3SVW
#\\\|7P5MAA5LFVY7K44WDFLR5I7TH2SA24TV6VIFIR4WTJ4EX3V5YTP \ / AMOS7 \ YOURUM ::
#\[7]7W7LWXQ5OYFH6DTHY6R5XYS4TPK4GJGJDKHCCSWXCTLDNLQDQWCI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
