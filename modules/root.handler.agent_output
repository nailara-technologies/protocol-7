# >:]

# name  = root.handler.agent_output
# descr = reads agent console output and triggers commands on matching patterns

<root.patterns.agent_output> //= {};

my $event          = shift->w;
my $read_fh        = $event->fd;
my $instance_id    = $event->data;
my $agent_instance = <root.agent.instance>->{$instance_id};
my $agent_id       = $agent_instance->{'agent_id'};
my $agent_name     = <root.agent.setup>->{$agent_id}->{'name'};

$agent_instance->{'output_buffer'} //= '';

if (sysread(
        $read_fh, $agent_instance->{'output_buffer'},
        4096,     length( $agent_instance->{'output_buffer'} )
    ) == 0    # ( filehandle has an exception )
    ) {
    $event->cancel;
    my $process = $agent_instance->{'process'};
    close($read_fh);

    # collect process exit status
    waitpid( $process->{'id'}, 0 );
    my $exit_status = $? >> 8;
    delete $agent_instance->{'process'};
    undef $process;
    my $log_level = $exit_status == 0 ? 1 : 0;
    <[base.log]>->(
        $log_level,
        "instance $instance_id : agent '$agent_name'"
            . " process exit ($exit_status)"
    );

    <[agent.change_status]>->( $instance_id, 'failed' );
    undef $agent_instance->{'output_buffer'};
    return;
}

while ( $agent_instance->{'output_buffer'} =~ s|^([^\n]*\n)||s ) {
    my $output_line = $1;
    print $output_line if <system.verbosity>;
    if ( exists <root.patterns.agent_output>->{$agent_name} ) {
        foreach my $pattern (
            keys %{ <root.patterns.agent_output>->{$agent_name} } ) {
            <root.patterns.agent_output>
                ->{$agent_name}->{$pattern}->($instance_id) # (pattern callback)
                if $output_line =~ $pattern;
        }
    } else {
        warn "no output patterns defined for agent '$agent_name'"
            if not exists <root.status.warning>->{"pattern_$agent_name"};
        <root.status.warning>->{"pattern_$agent_name"} = 1;
    }
}
