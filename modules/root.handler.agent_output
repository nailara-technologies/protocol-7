# >:]

# name  = root.handler.agent_output
# descr = reads agent console output and triggers commands on matching patterns

# todo  = XXX: fix buffer and newline handling !!!

my $event       = shift->w;
my $read_fh     = $event->fd;
my $instance_id = $event->data;
my $agent_id    = <root.agent.instance>->{$instance_id}->{'agent_id'};
my $agent_name  = <root.agent.setup>->{$agent_id}->{'name'};
<root.patterns.agent_output> //= {};

my $max_buffer_size = 42500;
$max_buffer_size = <root.bufsize.agent_output>
    if exists <root.bufsize>
    and exists <root.bufsize.agent_output>
    and <root.bufsize.agent_output> >= 1024;

sysread( $read_fh, my $buffer, $max_buffer_size );

if ( !length($buffer) ) {
    $event->cancel;
    my $process = <root.agent.instance>->{$instance_id}->{'process'};
    close($read_fh);

    # collect process exit status
    waitpid( $process->{'id'}, WNOHANG );
    my $exit_status = $? >> 8;
    delete <root.agent.instance>->{$instance_id}->{'process'};
    undef $process;

    <[base.log]>->(
        1,
        "[instance $instance_id] agent '$agent_name' exited"
            . " (status $exit_status)"
    );

    <[agent.change_status]>->( $instance_id, 'failed' );
    return;
}

print $buffer if <system.verbosity>;

if ( exists <root.patterns.agent_output>->{$agent_name} ) {
    foreach
        my $pattern ( keys %{ <root.patterns.agent_output>->{$agent_name} } ) {
        my $c_ref = <root.patterns.agent_output>->{$agent_name}->{$pattern};
        die "no code ref defined for pattern '$pattern'"
            if not defined $c_ref;
        die "'$c_ref' is not a code ref" if ref($c_ref) ne 'CODE';
        $c_ref->($instance_id) if $buffer =~ $pattern;
    }
} else {
    warn "no output patterns defined for agent '$agent_name'"
        if not exists <root.status.warning>->{"pattern_$agent_name"};
    <root.status.warning>->{"pattern_$agent_name"} = 1;
}
