## >:] ##

# name  = io.unix.socket.input.open

my $socket_path  = shift;
my $socket_umask = shift // 0775;
my $socket_owner = shift;

if ( not defined $socket_owner ) {
    <[base.start.unlink_child]>;
    ##  prepare automatic clean-up of unlink-chld when no longer required  ##
    <io.unix.unlink_child_fh> = delete <process.unlink_child.w_fh>;
    <[base.clean_hashref]>->(<process.unlink_child>);
    delete $data{'process'} if not keys $data{'process'}->%*;
}

undef <unix.socket_paths> if ref <unix.socket_paths> ne qw| ARRAY |;
<unix.socket_paths> //= [];

my $uaddr = sockaddr_un($socket_path);
my $proto = getprotobyname('tcp');

my $tmp_spath = join qw| . |, $socket_path,
    AMOS7::CHKSUM::amos_template_chksum( "$socket_path.%s", \$PID );

unlink($tmp_spath);    ## automatic clean-up [ error case ] ##

my $unix_sock = IO::Socket::UNIX->new(
    Type   => SOCK_STREAM(),
    Local  => $tmp_spath,
    Listen => SOMAXCONN(),
) || die "io.unix.socket.input.open: socket: \l$OS_ERROR";

if ( -S $socket_path ) {
    if (<system.verbosity.console>) {
        map { <[base.log]>->( 1, $ARG ) } ':',
            ': unix path exists. overwriting.,', ':';
    } else {
        <[base.log]>->( 0, ': unix socket path exists. overwriting..,' );
    }
}

rename( $tmp_spath, $socket_path )
    or die "io.unix.socket.input.open: rename: \l$OS_ERROR";

##  unlink child removes path in io.unix.socket.end_code  ##
push( <unix.socket_paths>->@*, $socket_path );

push(
    <system.init_reports>->@*,
    {   'target_command' => qw| v7.report-temp-path |,
        'param'          => $socket_path,
        'handler'        => qw| io.unix.socket.handler.report-tmp-path |,
        'descr'          => 'registering unix domain socket file'
    }
);

<[base.logs]>->(
    2,            ': %s : filemode change to %#o',
    $socket_path, $socket_umask
);

chmod( $socket_umask, $socket_path )
    or die "io.unix.socket.input.open: chmod: \l$OS_ERROR";

if ( defined $socket_owner ) {
    my ( undef, undef, $uid, $gid ) = getpwnam($socket_owner);

    <[base.logs]>->(
        2,            ": %s : changing owner to '%s'",
        $socket_path, $socket_owner
    );

    chown( $uid, $gid, $socket_path )
        or die "io.unix.socket.input.open: chown[$socket_owner]: \l$OS_ERROR";
}

( my $sp_str = $socket_path ) =~ s{^\Q/var/run/.7/UNIX/\E}{};
<[base.logs]>->( "UNX server launched [unix:%s]", $sp_str );

if ( defined $data{'handle'}{$unix_sock} ) {
    <[base.logs]>->(
        0,
        "io.unix.socket.input.open: handle '%s' "
            . "was not cleaned up, doing now .,",
        $unix_sock
    );
    delete $data{'handle'}{$unix_sock};
}

$data{'handle'}{$unix_sock}{'link'} = qw| unix |;
$data{'handle'}{$unix_sock}{'mode'} = qw| input |;

return $unix_sock;

#,,,,,.,,,.,,,..,,..,,.,.,,,,,.,.,.,.,,.,,,,,,..,,...,...,...,.,,,...,...,,..,
#C3RFGQLHJYY723IKRJ5FTV2AIWZ6XO6VDGLMJPBARGTEQYUONMCWABEKI42JWTBZWKU5KLZIQXXMU
#\\\|W2CW25BK7WKZLRR2UCNQ4YN3JO2VIGWNODT7LQ6TSHTLR4PWMON \ / AMOS7 \ YOURUM ::
#\[7]KI7PJMF7DXD3HJYVSK4JEGXJIYIV4BL6EX6TVSS4LDGVHO3LOUDA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
