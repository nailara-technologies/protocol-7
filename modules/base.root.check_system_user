## [:< ##

# name  = base.root.check_system_user
# note  = also implement 'mo-group' and <group-name> options

my $usr      = shift // ''; ##  unix user to create  ##
my $not_home = shift // ''; ##  optional 'not-home' param to skip home dir  ##

if ( not length $usr ) {
    warn 'expected user-name parameter <{C1}>';
    return undef;
}

my @useradd_paths = qw| /usr/sbin/useradd /sbin/useradd |;

## initialize base.root module if called too early ##
<[base.root.init_code]> if not defined <base.root.useradd.exit-codes>;

my $exit_codes = <base.root.useradd.exit-codes>;

my $home_setting = <[base.cfg_bool]>->(<base.root.useradd.create_home>);
$not_home = $not_home eq qw| not-home | ? TRUE : $home_setting ^ TRUE;

my $uid = getpwnam($usr);

if ( not defined $uid and $EFFECTIVE_USER_ID == 0 ) {
    my $uid_str = '';
    if (    defined <base.root>
        and defined <base.root.pref-uid>
        and defined <base.root.pref-uid>->{$usr}
        and <base.root.pref-uid>->{$usr} =~ m|^\d{3}$| ) {
        $uid     = <base.root.pref-uid>->{$usr};
        $uid_str = sprintf ' [ UID %u ]', $uid;
    }
    my $useradd = shift @useradd_paths;
    while ( not -x $useradd and @useradd_paths ) {
        my $new_path = shift @useradd_paths;
        $useradd = $new_path if -x $new_path;
    }
    if ( not -x $useradd ) {
        map { <[base.log]>->( 0, $ARG ) } (
            '::[ check_system_user ]:.',
            ':',
            sprintf( ":: cannot find 'useradd' binary at '%s' ::", $useradd )
        );
        return undef;    ##  missing useradd binary  ##
    }

    <[base.logs]>->( 0, "creating system user '%s'%s.,", $usr, $uid_str );
    my @useradd_opts = ( qw| --system -U |, $not_home ? qw| -M | : qw| -m | );
    push @useradd_opts, qw| -u |, $uid if defined $uid;

    push @useradd_opts, $usr;
    <[base.logs]>->( 2, '< useradd > %s', join( ' ', @useradd_opts ) );

    <[base.stderr_redir]>;
    my $status = system( $useradd, @useradd_opts ) >> 8;
    <[base.stderr_restore]>;

    if ( $status > 0 ) {

        my $reason = $exit_codes->{$status}
            // sprintf( 'exit code %s', $status );
        <[base.logs]>->( 0, '< useradd > %s', $reason );
        <[base.log]>->( 0, qw| : | );
        <[base.logs]>->( 0, "::[ cannot create user '%s' ]", $usr );

        return undef;    ##  error occurred \ not created  ##

    } else {

        my $created_uid = getpwnam($usr);
        my $new_uid_str
            = defined $uid ? '' : sprintf( ' [ UID %u ]', $created_uid );
        my $l = defined $uid ? 1 : 0;
        <[base.logs]>->(
            $l, ':.. user creation was successful =)%s', $new_uid_str,
        );

        return TRUE;    ##[ success ]##

    }
} elsif ( not defined $uid and $EFFECTIVE_USER_ID != 0 ) {

    <[base.logs]>->(
        0, "<< am not 'root', not creating system user '%s'., >>", $usr
    );
    return FALSE;    ##  no permission \ not root  ##

} else {

    <[base.logs]>->( 2, "user '%s' exists [ %u ].,", $usr, $uid );

    return TRUE;     ##[ user already exists ]##
}

#,,,.,,,.,.,,,...,,,,,,..,,,.,,,,,.,.,,,.,.,,,..,,...,...,...,,.,,,,.,.,.,,..,
#IEEEQOMMYU6DRZFKKHGQS72WA625G5RLRGUFCYTQRWNJZZBIDUANTGZALAF3SAFGO7OKG43C7LAGI
#\\\|ZUFTUZQAFAKYPZUGYXA2SY7TVHIVLAL7WBRTEXZPTSLRMJNV6EW \ / AMOS7 \ YOURUM ::
#\[7]4GLN24S3KASKHRVPFMSRZKH7IWKF5FIWOKNP5KIGKAERMFN2CWCQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
