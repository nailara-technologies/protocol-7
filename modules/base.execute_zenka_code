## >:] ##

# name  = base.execute_zenka_code
# descr = execute protocol-7 zenka code

my @zenka_perl_code = @ARG;

if (   not @zenka_perl_code
    or not defined $zenka_perl_code[0] ) {
    my $caller_lvl
        = index( [<[base.caller]>]->[0], qw| Protocol-7 | ) == -1
        ? qw| <{C1}> |
        : qw| <{NC}> |;
    <[base.s_warn]>->(
        'expected zenka config perl code to run %s', $caller_lvl
    );
    return undef;
}

my $stack_index = scalar(@main::ZENKA_RUN_CFG_STACK) - 1;
my $cfg_ref     = $main::ZENKA_RUN_CFG_STACK[$stack_index] // {};

my $line_count = scalar scalar @zenka_perl_code;
<[base.logs]>->(
    2,           ': executing zenka code., [ %03d %5s ]',
    $line_count, <[base.cnt_s]>->( $line_count, qw|  lines  line  | )
);
<[base.logs]>->( 2, ": :. config '%s'", $cfg_ref->{'name'} )
    if defined $cfg_ref->{'name'};

<base.zenka_cfg.warnings> = qw| report |;    ## [ silent | fatal | report ] ##

$main::RUN_ZENKA_CONFIG_CNAME
    = defined $main::LOAD_ZENKA_CFG_NAME
    ? sprintf( "cfg '%s'", $main::LOAD_ZENKA_CFG_NAME )
    : qw| zenka-code |;
$main::RUN_ZENKA_CONFIG_CNAME = sprintf qw| %s-zenka |, <system.zenka.name>
    if lc($main::RUN_ZENKA_CONFIG_CNAME) eq qw| zenka |;

undef $main::RUN_ZENKA_CFG_WARNING_STRING;

## storing last return value ##
<zenka_cfg.ret_val> = undef;

my $use_aliases = 1;    ## <-- resolve config command aliases ? ##
my $noerr       = 5;
$main::RUN_ZENKA_CFG_LINE = 0;

my $event_loop_name_re = qr,\$code{'(event.loop|(base.)?zenka.loop)'},;
my $event_loop_present
    = <[base.list_matches]>->( \@zenka_perl_code, $event_loop_name_re );

foreach my $code_line (@zenka_perl_code) {
    $main::RUN_ZENKA_CFG_LINE++;
    my $error_exit = 0;

    $main::RUN_ZENKA_CODE_LINE = $code_line;

    ## change warn handler to report zenka config line numbers ##
    local $SIG{'__WARN__'}
        = $code{'base.agent_code.handler.sig_warn.end_proc'}
        if <base.zenka_cfg.warnings> eq qw| report |
        or $event_loop_present
        ## use regular base.sig_warn handler in main event loop ##
        and $code_line !~ $event_loop_name_re;

    ## silencing all warnings ##
    local $SIG{'__WARN__'} = sub { }
        if <base.zenka_cfg.warnings> eq qw| silent |;

    ## restoring global sig_warn handler ##
    local $SIG{'__WARN__'} = $code{'base.sig_warn'}
        if $code_line =~ $event_loop_name_re;

    ## checking \ resolving command routine aliases ## [ cfg_cmd.<name> ]
    #
    $code_line =~ s|(*plb:\$code\{')([^']+)(*pla:'\})|
            <[base.check_cfg_cmd_alias]>->($1)|ge;
    ###

    ##  evaluate zenka-code \ config line  ##
    <zenka_cfg.ret_val> = eval($code_line);

    $noerr = 0 if defined $main::RUN_ZENKA_CFG_WARNING_STRING;

    if ($error_exit) {    ## todo : adapt parser from below ##
        return warn 'stopped processing <{C1}>';
        return $noerr = 0;
    }

    if ( length $EVAL_ERROR ) {
        if ($EVAL_ERROR =~ m,^Can't use (string \(""\)) as a subroutine ref, )
        {
            my $code_line_copy = $code_line;
            while ( $code_line_copy =~ s|(\$code\{'([^']*)'\})|| ) {
                my ( $sub_call, $sub_name )
                    = ( ${^CAPTURE}[0], ${^CAPTURE}[1] // '' );
                next if length $sub_name and defined $code{$sub_name};
                <[base.logs]>->(
                    0,         "unknown subroutine '%s' called [ %s ]",
                    $sub_name, $sub_call
                );
                $noerr = 0 if $noerr;
            }
        }

        if ($noerr) {
            <base.eval_error> = { qw| name | => undef, qw| line | => undef };
            my @error_data = <[base.format_error]>->( $EVAL_ERROR, -1 );

            ## say ' < EVAL ERROR > ' . $EVAL_ERROR;
            ## say ' < ZENKA CONFIG > ' . $main::RUN_ZENKA_CONFIG_CNAME
            ##  if defined $main::RUN_ZENKA_CONFIG_CNAME;

            my $caller_string = '';
            if ( @error_data > 1 ) {
                $caller_string = $error_data[1];
                <base.eval_error.name> = $error_data[2];
                <base.eval_error.line> = $error_data[3];
            }
            if ( length $caller_string ) {

                ## say $main::RUN_ZENKA_CONFIG_CNAME;
                ## say $main::LOAD_ZENKA_CFG_NAME
                ##  if defined $main::LOAD_ZENKA_CFG_NAME;

                ## need zenka config stack ##

                ## say STDERR ' < pass warn 0000 >';

                <[base.log]>->( 0, $error_data[0] );
                <[base.logs]>->( 0, ':. %s', $caller_string );
            } else {
                <[base.s_warn]>->( 'eval error : %s', $error_data[0] );
            }
        } else {
            ## say ' < pass > has err';
        }
        $noerr = 0 if $noerr;
    }
}

if ($noerr) {    ##  reset names when no error has occurred  ##
    undef $main::RUN_ZENKA_CFG_LINE;
    undef $main::RUN_ZENKA_CODE_LINE;
    undef $main::LOAD_ZENKA_CFG_NAME;
    undef $main::RUN_ZENKA_CONFIG_CNAME;

    my $completed_ref = pop @main::ZENKA_RUN_CFG_STACK;

}
return $noerr;    ## return zenka cfg execution status ##

#,,..,..,,,,,,...,,..,,,.,,,.,,,,,,,.,,,,,..,,..,,...,...,.,.,...,,,,,,..,,.,,
#G3YUYW37RT74I6KISL77O2RYVWMKO5LNDIQEPQAQXBTRH3UNV7GN6M5IYUI7RAAZUML3MXL5HWECM
#\\\|NVIMT27EQ7YUIY4PJ7P63NP3TVPAARH5IEBCBKFISNZEJWBAMPG \ / AMOS7 \ YOURUM ::
#\[7]FCDJO6RBPJURUE64COBCUHPPRUR575NBWJ6QJ536F6Q5IYQPXACI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
