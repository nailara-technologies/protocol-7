## [:< ##

# name  = base.event.add_var
# descr = install variable [access] watcher

my $params = shift;

if ( ref $params ne qw| HASH | ) {
    warn 'base.event.add_var: expected a hash reference <{C1}>';
    return undef;
}
my $callback = $params->{'handler'};
if ( not defined $callback ) {
    warn "base.event.add_var: callback ['handler'] is missing <{C1}>";
    return undef;
} elsif ( not exists $code{$callback} ) {
    <[base.s_warn]>->(
        "base.event.add_var: callback '%s' does not exist <{C1}>", $callback
    );
    return undef;
} elsif ( not length ref $params->{'var'} ) {
    warn 'base.event.add_var: expected reference <{C1}>';
    return undef;
}

<[base.perlmod.autoload]>->('Event')   ##  autoload for early availability  ##
    if not <[base.perlmod.loaded]>->('Event');

return Event->var(                     ##  registering var watcher  ##
    'poll'      => $params->{'poll'}      // qw| w |,
    'reentrant' => $params->{'reentrant'} // TRUE,
    'repeat'    => $params->{'repeat'}    // TRUE,
    'prio'      => $params->{'prio'}      // 2,
    'async'     => $params->{'async'}     // FALSE,
    'desc'      => $params->{'desc'}      // $params->{'var'},
    'var'       => $params->{'var'},
    ## wrapped for code reloading ##
    'cb'   => sub { $code{$callback}->(@ARG) },
    'data' => $params->{'data'}
);

#,,..,,,.,,.,,.,,,...,..,,.,,,,,,,.,.,,,,,..,,..,,...,...,.,,,..,,..,,...,,,.,
#6QRX3VQDPQQXQRU5MQIO45P3KELHLUFG746G3DCBCTEYAKGTU5XJ23PMMQFW2HIHPTDFBXWJCDJQU
#\\\|ZWXQLSALPI2VLHTGU5WSURIBYRCBGLUB22E37BZLOCDHFK6XAAZ \ / AMOS7 \ YOURUM ::
#\[7]4FAS7I36O3SBA7Y66QGXYUKSEJS7K65O6ECEEP2KQPTKOERTLWDY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
