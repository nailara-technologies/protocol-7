## [:< ##

# name = httpd.serve_file

my $id;
my $params;
my $file_path;
if ( ref( $_[0] ) eq qw| HASH | ) {
    $params    = shift;
    $id        = $params->{'sid'};
    $file_path = $params->{'path'};
} else {
    $id        = shift;
    $file_path = shift;
}
my $session         = $data{'session'}{$id};
my $response_params = $session->{'response'}->{'params'};
my $file_stat
    = ( defined $params and defined $params->{'stat'} and ref($params) )
    ? $params->{'stat'}
    : File::stat::stat($file_path);

my $content_size = $file_stat->size;
my $content_date = time2str( $file_stat->mtime );
my $server_date  = time2str(time);

my $content_type = qw| text/plain |;
if ( $file_path =~ m|\.htm(l)?$|i ) {
    $content_type = qw| text/html |;
} else {
    $content_type = mimetype($file_path);
}

open( my $content_fh, '< :raw', $file_path )    # LLL: error handling..,
    or <[base.s_warn]>->( '<<!>> %s : %s', $file_path, <[base.str.os_err]> );
local $RS = undef;
$session->{'buffer'}->{'output'} .= <[httpd.new_header]>->(
    200,
    {   'Content-Type'   => $content_type,
        'Last-Modified'  => $content_date,
        'Content-Length' => $content_size,
        'Connection'     => $session->{'http'}->{'close'}
        ? qw| close |
        : qw| keep-alive |,
        qw| Accept-Ranges | => qw| bytes |,
        $response_params->%*
    }
) . <$content_fh>;

close($content_fh);

return $session->{'http'}->{'close'} ? 2 : 0;

#,,..,...,..,,.,,,,,,,,..,,,,,...,.,.,.,.,.,,,..,,...,...,,.,,...,.,.,,..,,..,
#66MZHMGYDU4LUKKZQSFWMYUTISTR5MGZL2HSQH7LN7ON2GW76K7MHG2XAJLXV7OJ3W5WLTL7U6WPM
#\\\|4S55ZYQ2HGY7G6SP53YPK7RIIBS4AKQDYKKHQGYA5BPKVCBGZZ6 \ / AMOS7 \ YOURUM ::
#\[7]64LK7ZJ7LESTRAITGQ6RXMNM4IX64VIOBDWSOQFAHQQNWCLBI2BY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
