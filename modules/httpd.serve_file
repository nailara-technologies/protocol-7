## >:] ##

# name = httpd.serve_file

my $id;
my $params;
my $file_path;
if ( ref( $_[0] ) eq 'HASH' ) {
    $params    = shift;
    $id        = $params->{'sid'};
    $file_path = $params->{'path'};
} else {
    $id        = shift;
    $file_path = shift;
}
my $session         = $data{'session'}{$id};
my $response_params = $session->{'response'}->{'params'};
my $file_stat
    = ( defined $params and defined $params->{'stat'} and ref($params) )
    ? $params->{'stat'}
    : File::stat::stat($file_path);

my $content_size = $file_stat->size;
my $content_date = time2str( $file_stat->mtime );
my $server_date  = time2str(time);

my $content_type = 'text/plain';

if ( $file_path =~ /\.htm(l)?$/i ) {
    $content_type = 'text/html';
} else {
    $content_type = mimetype($file_path);
}

open( my $content_fh, '< :raw', $file_path )
    or warn "<< ! >> $file_path : \l$OS_ERROR";    # LLL: error handling..,
local $RS = undef;
$session->{'buffer'}->{'output'} .= <[httpd.new_header]>->(
    200,
    {   'Content-Type'   => $content_type,
        'Last-Modified'  => $content_date,
        'Content-Length' => $content_size,
        'Connection'     => $session->{'http'}->{'close'}
        ? 'close'
        : 'keep-alive',
        'Accept-Ranges' => 'bytes',
        %{$response_params}
    }
) . <$content_fh>;
close($content_fh);

return $session->{'http'}->{'close'} ? 2 : 0;

#,,,.,...,..,,,..,,..,...,..,,,,,,...,...,,..,..,,...,...,,.,,,,,,..,,,,.,...,
#A3O5SUHY2DMVR4VDHNBHLOCUKIGCSOCYX46MBGMU7E3ZNAVHO3MWYPQDJ42AWQCRJ35OMWBNVMWLI
#\\\|RSEEWLXSUPSY5V4SCBDTCGNMR62OX2ZFKJJ3I5XJWOGRUXO55I5 \ / AMOS7 \ YOURUM ::
#\[7]T4EVSNIGL6P3H4XNMLDCWXUPUWGFIOHZG7J654FTZLKYZMYZQKBA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
