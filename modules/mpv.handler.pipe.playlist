## >:] ##

# name = mpv.handler.pipe.playlist

my $playlist_str  = '';
my $playlist_json = shift // '';
my $reply_id      = shift @{<mpv.reply_ids>};

if ( length($playlist_json) ) {
    my $playlist_data = <mpv.json.parser>->decode($playlist_json);
    map {
        $playlist_str .= exists $ARG->{'playing'} ? ':. ' : ':  ';
        $playlist_str .= $ARG->{'filename'} . "\n"
    } @{$playlist_data};
} else {
    <[base.log]>->(
        0, "playlist decoding handler called with empty string (invalid json)"
    );
}

<[base.callback.cmd_reply]>->(
    $reply_id,
    {   'mode' => qw| size |,
        'data' => $playlist_str
    }
);

#,,..,.,.,..,,.,.,,..,...,,.,,..,,,,.,..,,,,.,..,,...,...,...,.,.,,..,.,.,,,.,
#SJAIARWVACLJX53YNLL2WXMU75Z7766RBVRHSG5VZ5H2LGJL357KB7JW5FQVURS6BI5XFOOBWNTYS
#\\\|FEPLUSZ4UZ6F5IRW6LUAMOWNUBC3TD3P6X2LIL4QRXLVNLIXANB \ / AMOS7 \ YOURUM ::
#\[7]Y7Q3WZA5CHASLFTPENXT6YCNZVJ4HL7PPSMBIGL3DOVPDX4IWGCY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
