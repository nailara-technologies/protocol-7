## [:< ##

# name  = protocol.protocol-7.auth.select-method

my $backend_socket = shift;
my $auth_method    = shift // '';

## protocol-7 message strings ##
##
my $protocol_messages = <protocol.protocol-7.connect>;

my $protocol_banner     = $protocol_messages->{'banner'};
my $proto_msg_timeout   = $protocol_messages->{'timeout'};
my $protocol_error_msg  = $protocol_messages->{'protocol_error'};
my $auth_method_warning = $protocol_messages->{'auth_method_wrn'};
my $auth_method_err     = $protocol_messages->{'auth_method_err'};
my $select_method_templ = $protocol_messages->{'select-method'};

####

<[base.net.send_to_socket]>->(
    $backend_socket, \sprintf( $select_method_templ, $auth_method )
);

my $answer = readline($backend_socket);
chomp($answer) if defined $answer;

if ( not defined $answer ) {
    <[base.log]>->( 0, '[X] connection lost :|' ) and return undef;
} elsif ( sprintf( "%s\n", $answer ) eq $auth_method_warning ) {
    <[base.log]>->( 0, '[#] server side auth method error >:|' );
    return undef;
} elsif ( sprintf( "%s\n", $answer ) eq $auth_method_warning ) {
    <[base.logs]>->(
        0, '[#] %s authentication not available >:|', $auth_method
    );

    return -0;    ## not successful ##

} elsif ( $answer ne 'TRUE continue' ) {
    <[base.log]>->( 0, '[#] authentication protocol error `:|' );

    return -0;    ## not successful ##

} else {
    <[base.logs]>->( 2, '[*] %s authentication selected', $auth_method );

    return TRUE;    ## true ##
}

#,,.,,...,...,,..,.,,,.,,,,.,,..,,,..,,.,,,,,,..,,...,...,,,,,,,,,,,,,...,...,
#IRQI67EXT5UEXW3E7KVVN6JXY6YPLBZ4M6DNLR6TXWHUTT763ZMKFNVRAXO2QOIFV2TV23KA4I7WO
#\\\|MZVIUUE6PXJQLSRSISX6LE22CNNOXHYOCPX4EKXRYTIY34F6YIG \ / AMOS7 \ YOURUM ::
#\[7]WR4G5XDNYHAY5BFMK7ZUAYHZCGAHPGPE5CBMWQJNFN3MPNCJJGCQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
