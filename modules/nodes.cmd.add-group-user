## [:< ##

# name  = nodes.cmd.add-group-user
# descr = add a group user to associate accounts with
# param = <group> [regexp]

my $groups = <nodes.group.names> //= {};
my $gregex = <nodes.group.regex> //= {};
my $by_id  = <nodes.group.by-id> //= {};

( my $grp_name, my $regex_str ) = split( m| +|, $call->{'args'} // '', 2 );

$regex_str //= sprintf qw| ^%s- |, $grp_name;

return { 'mode' => qw| false |, 'data' => 'group name required' }
    if not defined $grp_name;
return { 'mode' => qw| false |, 'data' => 'group account already exists' }
    if exists $groups->{$grp_name};
return {
    'mode' => qw| false |,
    'data' => sprintf( "regex already in use ['%s']", $gregex->{$regex_str} )
    }
    if exists $gregex->{$regex_str};

( my $regex_qr, my $re_err ) = <[base.eval.comp_regex]>->($regex_str);

if ( not defined $regex_qr ) {
    return {
        'mode' => qw| false |,
        'data' => sprintf( 'group regex is not valid [ %s ]',
            $re_err // $regex_str )
    };
}

my $grp_id = <[base.list.element.add]>->(
    {   'key_ref' => \$data{'nodes'}{'group'}{'by-id'},
        'val_ref' => \{
            'name'  => $grp_name,
            'regex' => $regex_str,
        }
    }
);

return {
    'mode' => qw| false |,
    'data' => "no success adding group user `>:|"
    }
    if not defined $grp_id;

$groups->{$grp_name}  = $grp_id;
$gregex->{$regex_str} = $grp_name;

return {
    'mode' => qw| true |,
    'data' => sprintf(
        "'%s' group added, matches m'%s' [ grp-id : %s ]",
        $grp_name, $regex_str, $grp_id
    )
    }

#,,..,.,.,.,.,.,,,,..,,,.,,,.,,.,,.,,,.,,,.,,,..,,...,...,...,..,,,.,,,,,,,,,,
#QFBOZCPQ32FGUALJ22G53WSRL5PUSFTL3LDQFXFGKHPCEBHM4JFAQ43I366GDSUIEJETMLA7SKS2A
#\\\|3WPKEQHDBB4C7X6N5HOKJLTTQVU2BZKTEQR4D4SGLKEAHQSUTVF \ / AMOS7 \ YOURUM ::
#\[7]IUQZQPKVJPEE22PLECDGJPI3QJDBCM22THRG74GAO4CTOCO4D2CY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
