## [:< ##

# name  = discover.cmd.host_details
# param = <hostname>
# descr = returning parameters from nodes list

my $hostname = $call->{'args'};

return { 'mode' => qw| false |, 'data' => 'expecting hostname parameter' }
    if not defined $hostname;

my $hostname_L13;
my $match = FALSE;
foreach
    my $id ( <[base.reverse-sort.key-name]>->( qw| host |, $data{'hosts'} ) )
{
    if ( $hostname eq $data{'hosts'}->{$id}->{'host'} ) {
        $hostname_L13 = $id;
        $match        = TRUE;
        last;
    }
}

return { 'mode' => qw| false |, 'data' => 'host is not known' } if not $match;

my $reply_string;
my $host_details_ref = $data{'hosts'}->{$hostname_L13};

my $key_len = [ minmax( map {length} keys $host_details_ref->%* ) ]->[1];

foreach my $param_key ( <[base.reverse-sort]>->($host_details_ref) ) {

    my $param_value = $param_key ne qw| pkey |
        ? uc $host_details_ref->{$param_key}    ##  encoding host key  ##
        : Crypt::Misc::encode_b32r( $host_details_ref->{$param_key} );
    ##  param values are uppercased  ##
    $reply_string .= sprintf "%*s : %s\n", $key_len, $param_key, $param_value;
}

return { 'mode' => qw| size |, 'data' => $reply_string };

#,,,.,,,,,,,,,.,,,...,,,.,.,,,.,,,..,,,,.,,,.,..,,...,...,.,.,,..,,..,,..,.,.,
#4XVESCFUIM5YVTNQUAMSJQF2EA76IFO3GA3KG3JGVZCZSSLXPXC5TRZSJ5JH4TNWXNDERRBMKEQTC
#\\\|U2SNHYMPXRBGTY77MMBIT7XVN7RJQOYR3AI7WWDO437MNRTWDK2 \ / AMOS7 \ YOURUM ::
#\[7]ORDYBUQPUZJUVOANG4TMLLH6YMFX7SZOELZA7LHQEK7SJFKMNMCY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
