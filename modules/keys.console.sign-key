## [:< ##

# name  = keys.console.sign-key
# param = <rkey> <name>
# descr = sign the public key <name> with root key <rkey>

my ( $rkey_name, $name ) = split m|[\t ]+|, shift // '';

if ( not length $rkey_name ) {
    print "\n  << expecting root-key name param >>\n\n";
    <[base.exit]>->(qw| 0010 |);
} elsif ( not defined $name ) {
    return print "\n  << expected <key_name> parameter >>\n\n";
    <[base.exit]>->(qw| 0010 |);
} elsif ( not <[crypt.C25519.key_exists]>->($rkey_name) ) {
    printf "\n  << root key named '%s' not found >>\n\n", $rkey_name;
    <[base.exit]>->(qw| 0010 |);
} elsif ( not <[crypt.C25519.key_exists]>->($name) ) {
    printf "\n  << key with name '%s' not found >>\n\n", $name;
    <[base.exit]>->(qw| 0010 |);
}

my $virt_key = <[crypt.C25519.key_is_virtual]>->($name);
my $complete = $virt_key ? 4 : 3;    ## also .vk. when virtual ##

my $signature_status    ##  check number of existing signature components  ##
    = <[crypt.C25519.signature_exists]>->( $name, $rkey_name );

if ( $signature_status == $complete ) {
    say "\n  <<  requested key signature already exists  >>\n";
    <[base.exit]>->(qw| 0010 |);
} elsif ($signature_status) {
    say "\n  << incomplete key signature present >>\n";
    <[base.exit]>->(qw| 0010 |);
}

<[base.logs]>->( 1, "loading signature key '%s' .,", $rkey_name );

if ( not <[crypt.C25519.load_keypair]>->( $rkey_name, undef, TRUE, TRUE ) ) {
    say "\n  <<  no [signature] root key loaded  >>\n";
    <[base.exit]>->(qw| 0110 |);
}

my @created_rq_files
    = <[crypt.C25519.create_signature_request]>->( $name, $rkey_name, TRUE );

if ( @created_rq_files == 1 and not defined $created_rq_files[0] ) {
    say "\n  <<  failed to create signature request file  >>\n";
    <[base.exit]>->(qw| 0110 |);
}

my $rq_filename = $created_rq_files[0];

say sprintf "\n:: signing '%s'\n :", $name;

( my $status, my @created_files )
    = <[crypt.C25519.sign_keys]>->( $rkey_name, $name );

unshift @created_files, reverse @created_rq_files;

if ( not $status ) {
    say "\n  <<  key signing failed  >>\n";
    <[base.exit]>->(qw| 0110 |);
} else {
    foreach my $file (@created_files) {
        say sprintf " : created '%s'", $file;
    }
    say " :\n ::\n";
}

#,,..,..,,,,.,,.,,..,,..,,,,,,,..,.,,,,,.,..,,..,,...,...,..,,,,.,..,,,,,,...,
#C23BPUY6MUBU2MV6NMUEXLSCWIGQ2AO3LBXQZ4HRVD2VLSFOMFSTI6V4D2F7S7YXTE7RM4ZRJ6EMK
#\\\|SIYOIKAG22AI6XTUFV737PBOKER2MZWSNUGMYF7HL5HEWWWERPP \ / AMOS7 \ YOURUM ::
#\[7]WCGG5YTQROAHKBBILW5ZIKNVDTSIKWNO6YSK22CSJYSJRVPAB4CQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
