# >:]

# name = xserver.init_display_states

my $drm_dir = '/sys/class/drm';

if ( !-d $drm_dir ) {
    <[base.log]>->( 0, "failed to access '$drm_dir' [not found]" );
    return;
}

opendir( my $drm_dir_fh, $drm_dir ) or die "$drm_dir: $!";

my $connected = 0;

<xserver.path.display_status> = {};
<xserver.display_connected> //= {};

<[base.log]>->( 2, "scanning $drm_dir .." );

foreach my $card_name ( readdir($drm_dir_fh) ) {
    next if !-l "$drm_dir/$card_name" or $card_name !~ /^card\d+$/;
    <[base.log]>->( 2, ": $card_name" );
    ( my $target_path = readlink("$drm_dir/$card_name") ) =~ s|^(../)+|/sys/|;
    <[base.log]>->( 2, ": : $target_path" );

    <base.obj.inotify>->watch( $target_path,
        IN_ACCESS, $code{'xserver.scan_display_states'} );

    opendir( my $card_dir_fh, $target_path ) or die "$target_path: $!";
    foreach my $disp_name ( readdir($card_dir_fh) ) {
        next if !-d "$target_path/$disp_name" or $disp_name !~ /^$card_name/;
        my $status_file = "$target_path/$disp_name/status";
        die "display status file $status_file not found!" if !-f $status_file;
        chomp( my $status_content = ${ <[file.slurp]>->($status_file) } );

        <xserver.display_connected>->{$disp_name}
            = $status_content eq 'connected' ? 1 : 0;

        <[base.log]>->( 2, ": : : $disp_name < $status_content >" );
        $connected++ if $status_content eq 'connected';
        <xserver.path.display_status>->{$disp_name} = $status_file;
    }
    closedir($card_dir_fh);
}
closedir($drm_dir_fh);

<xserver.display_connected>->{'any'} = $connected ? 1 : 0;

return $connected;
