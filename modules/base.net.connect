## [:< ##

# name = base.net.connect

my $cube_sock;
my $cube_name = qw| cube |;
my $cube_port = <protocol-7.network.internal.port>;
my $cube_addr = <protocol-7.network.internal.addr>;

my @connection_types;
my $custom_addr = 0;
foreach my $param (@ARG) {
    if ( $param =~ m|^\d+$| ) {
        $cube_port = $param;
    } elsif ( -S $param ) {    ##  <--  implement   ##    [LLL]
        $cube_sock = $param;
    } elsif ( $param =~ m,^(ip\.|unix), ) {
        push( @connection_types, $param );
    } elsif ( not $custom_addr ) {
        $custom_addr = 1;
        $cube_addr   = $param;
    } else {
        $cube_name = $param;
    }
}

@connection_types = (qw|unix|) if !@connection_types and defined <unix.path>;

my $unix_path = defined <unix.path> ? <unix.path> : undef;

my $zenka_name    = <system.zenka.name>;
my $zenka_subname = <system.zenka.subname>;

foreach my $c_type (@connection_types) {
    my $type_str = $c_type eq qw| unix | ? qw| unix | : qw| zenka |;
    if ( not defined $code{ sprintf( 'auth.%s.authenticate', $type_str ) } ) {
        <[base.logs]>->(
            0, "protocol-7 module 'auth.%s' not loaded, skipping..,",
            $type_str
        );
        next;
    }

    <[base.logs]>->( 'initiating cube connection [%s].,', $c_type );

    if ( $c_type eq qw| unix | ) {

        if ( not defined $unix_path ) {
            if ( not defined $cube_addr and defined $cube_port ) {
                <[base.log]>->(
                    0,
                    'connect_to_cube[unix]: neither unix.path nor '
                        . 'net.local.{addr,port} are defined, aborting.,'
                );
                exit(2);
            } else {
                my $unix_chksum
                    = <[base.calc_unix_path]>->( $cube_addr, $cube_port );
                <[base.log]>->(
                    0, '<< unix socket name calculation not successful >>'
                    )
                    and next
                    if not defined $unix_chksum;
                $unix_path
                    = join( '', qw| /var/run/.7/UNIX/ |, $unix_chksum );
                <[base.logs]>->(
                    2, ": connecting to socket path '%s'.,", $unix_path
                );
                ##  main cube socket path  ##
                <unix.path> = $unix_path if not $custom_addr;
            }
        }
        if ( !-e $unix_path or !-S $unix_path and @connection_types ) {
            <[base.logs]>->(
                2, "unix path '%s' not found, skipping..,", $unix_path
            );
            next;
        }
        ## connect to unix socket ##
        $cube_sock = <[base.open]>->( qw| unix output |, $unix_path );

        if (    defined $cube_sock
            and -S $cube_sock
            and $cube_sock->connected ) {

            ## select correct authentication method ##
            <system.authentication-type> //= qw| unix |;

            if (not $custom_addr    ##  multiple addresses case  ##
                and <system.authentication-type> eq qw| zenka |
                and
                <[base.is_defined_recursive]>->( ##  has zenka session key  ##
                    qw| zenka.session_key |, \%keys
                ) == 5
                ) {    ## authentication set-up ':zenka:' ##

                my $auth_name = $zenka_name;
                $auth_name .= sprintf( '[%s]', $zenka_subname )
                    if defined $zenka_subname;

                $cube_sock
                    = <[auth.zenka.authenticate]>->( $cube_sock, $auth_name );

            } else {    ## authentication set-up :unix:.., ##

                $cube_sock  ## authenticate without key [ unix uname only ] ##
                    = <[auth.unix.authenticate]>->( $cube_sock, $zenka_name );
            }
        } else {
            $cube_sock = undef;
        }

    } elsif ( $c_type eq qw| ip.tcp | ) {
        $cube_sock    ## connect to tcp.ip cube socket ##
            = <[base.open]>->( qw| ip.tcp output |, $cube_addr, $cube_port );

        if (    defined $cube_sock
            and -S $cube_sock
            and $cube_sock->connected ) {
            my $auth_name = $zenka_name;
            $auth_name .= sprintf( '[%s]', $zenka_subname )
                if defined $zenka_subname;

            $cube_sock
                = <[auth.zenka.authenticate]>->( $cube_sock, $auth_name );

        } else {
            $cube_sock = undef;
        }
    } elsif ( $c_type eq qw| pipe | ) {
        die "<<< connection type 'pipe' not implemented yet >>>";
    } else {
        die "<<< unknown connection type '$c_type' requested >>>";
    }

    if ( defined $cube_sock ) {
        <[base.session.init]>->(
            $cube_sock, qw| protocol-7 client |, $cube_name
        );
        <system.timer>->{'send_reports'} = <[event.add_timer]>->(
            {   'repeat'  => 0,
                'after'   => 0.777,
                'handler' => qw| base.session.send_init_reports |
            }
        );
        <base.log.allow_buffer_send> = 1;    ## enable sending to 'p7-log' ##
        return $cube_sock;
    }
}

if ( not defined $cube_sock ) {
    map { <[base.log]>->( 0, $ARG ) } (
        '<< not able to connect to local cube., >>',
        ' :. aborting zenka start-up ..,'
    );
    exit(4);
}

#,,..,,,.,.,,,...,,,,,...,...,,.,,,,.,,.,,..,,..,,...,...,...,...,,,.,.,.,,..,
#G5MCYJFYLCKPDIGKDGCP3NCZATUYJHRAXP3SNS63PIVM45LYA3OGATLY7UE35WBOA6NVVAEZ52YWS
#\\\|UQ2BHPUTTUL4U5RKIT4LGY2S4KA4GMY6DA5GJ4UYM5FJTHE7CPM \ / AMOS7 \ YOURUM ::
#\[7]4UHS2HPHOTWHPSOCXHTVLD74MYN55M2AEVQFBBZR6JTEKNNEM6AA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
