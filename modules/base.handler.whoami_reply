## [:< ##

# name = base.handler.whoami_reply

my $reply = shift;

<base.callback_hooks.async_online> //= [];
delete <base.in_progess.get_session_id>;

if ( $reply->{'cmd'} ne qw| TRUE | ) {
    my $reason = $reply->{'call_args'}->{'args'};
    <[base.log]>->( 0, "<< whoami command reply not expected [$reason] >>" );
    return undef;
}

my $reply_str = $reply->{'call_args'}->{'args'};

if ( $reply_str =~ m|^(\w[\w\-\d]*) (\d+)$| ) {
    my ( $zenka_name, $cube_sid ) = ( $1, $2 );
    if ( $zenka_name ne <system.zenka.name> ) {
        <[base.log]>->( 0, "<< 'whoami' reply does not match zenka name >>" );
    }
    my $usr_str = $reply->{'params'}->{'route_user'};
    my ($local_sid) = keys( %{ $data{'user'}{$usr_str}{'session'} } );
    $data{'session'}{$local_sid}{'cube_sid'} = $cube_sid;
    <[base.log]>->( 1, "cube session id received [$cube_sid]" );
    <system.zenka.initialized> = 1;
    <[base.call_online_hooks]>;
} else {
    <[base.log]>->(
        0, "protocol mismatch [ 'whoami' reply not expected ] [ $reply_str ]"
    );
    return undef;
}

#,,.,,...,.,,,,..,,..,,..,,,,,...,,,,,...,,..,..,,...,...,...,,,,,..,,,.,,,..,
#FQU73ALZGMYGXKTRSB2GA4OAJXDDDMWUJAWVH272Z57E4QDTRYXAQCAWB5MYISH4HV2PSVVPKA3IG
#\\\|CO4XLFU24R4AH4D3NEB37ILJMDLBKRR5HDK7AAHBFBHNIWC6EKY \ / AMOS7 \ YOURUM ::
#\[7]MQ42QRWCFKVCTNDKPB6EN7WORKR5BC3NJ5R67NKJNBN6FW26OODA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
