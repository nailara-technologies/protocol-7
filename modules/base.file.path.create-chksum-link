## [:< ##

# name  = base.file.path.create-chksum-link

my $chksum_dir  = shift;
my $path_string = shift;
my $chksum_str  = shift;

if ( not defined $chksum_dir or not -d $chksum_dir ) {
    warn 'expected existing checksum directory path <{C1}>';
    return undef;
} elsif ( not -w $chksum_dir ) {
    <[base.s_warn]>->(
        'directory path %s is not writable to zenka <{C1}>', $chksum_dir
    );
    return undef;
} elsif ( not length( $path_string // '' ) ) {
    warn 'expected path str parameter <{C1}>';
    return undef;
} elsif ( not length( $chksum_str // '' ) ) {
    warn 'expected chksum str parameter <{C1}>';
    return undef;
} elsif ( $chksum_str !~ m|^(0\d+0)?[2-7A-Z]+$| ) {  ## allow ^0\d+0 prefix ##
    warn 'checksum is expected to be in BASE32 encoding <{C1}>';
    return undef;
}

my $abs_chksum_path = catfile( $chksum_dir, $chksum_str );

if ( -l $abs_chksum_path or -e $abs_chksum_path ) {
    <[base.s_warn]>->( 'entry existed already [ %s ] <{C1}>', $chksum_str );
    return 0;
}

if ( not symlink( $path_string, $abs_chksum_path ) ) {
    <[base.s_warn]>->(
        '[ %s ] %s <{C1}>',
        $abs_chksum_path, <[base.str.os_err]>
    );
    return undef;
} else {
    return TRUE;    ## true ##   [ success ]   ##
}

#,,.,,.,,,.,.,.,.,.,.,.,,,,,.,,,,,..,,,..,.,,,.,.,...,...,..,,..,,,,.,,,,,,,,,
#EJW4PZZWZUR54EW64COIS666SBZORPZJEOXMDV6FCTGWBQ6CQQAUESDLHZHU4FQLRSWMRARG2D4MY
#\\\|TRXYAM7BNGQUDZHC4XFT2V4BEKHB6GLTN5MQPRX6M3WJDNTCI56 \ / AMOS7 \ YOURUM ::
#\[7]XLKVL5FR64GSVVKQRCIY63PZXISWIS3LESJO6TIUMSKFTN3VVEBA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
