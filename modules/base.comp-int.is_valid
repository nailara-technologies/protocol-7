## >:] ##

# name  = base.comp-int.is_valid
# descr = assert validity of BER compressert integer [ pack template 'w' ]

## note : can be multiple, but must be correctly terminated [ w* template ] ##

my $compressed_int = shift;

if ( not length( $compressed_int // '' ) ) {
    warn 'expected compressed integer parameter [ got nothing ] <{C1}>';
    return undef;
}

my $is_terminated   = 0;
my $numbers_counted = 0;

foreach my $check_byte ( split '', $compressed_int ) {

    if ( vec( $check_byte, 7, 1 ) == 0 ) {    ## first bit 0 [ terminated ] ##

        $is_terminated = 5;                   ## true ##
        $numbers_counted++;

    } else {
        $is_terminated = 0;    ## first bit 1 [ unterminated ] ##
    }
}

if ($is_terminated) {    ## valid compressed integer[s] ##

    return $numbers_counted;    ## true ##

} else {    ##  unterminated : not valid comp-int  ##

    return FALSE;    ##  false  ##
}

#,,,.,,,.,,..,.,,,,,.,.,,,...,,,,,..,,.,.,...,..,,...,...,,,.,,,,,.,.,..,,..,,
#YRQFRZFO3SSC7GCLZPPTEUOG3PBPBP5LTRJIEJCM373GREAYT3B3AHOMBYV6PMOU4MYZYBZYT4A2Y
#\\\|EHHVAYHA6CQMGRT5MI52HHGTL5XNEQBM5GRTRPTIMPWLJSWMZ2N \ / AMOS7 \ YOURUM ::
#\[7]VVIE4ZAEH4QJS2OIEYIBEVOTRR3GDH77ER4LWQWFLWV36DYFWYBQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
