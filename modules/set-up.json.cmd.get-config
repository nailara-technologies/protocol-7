## [:< ##

# name = set-up.json.cmd.get-config
# param = [type]
# descr = return zenka configuration as json

my $json_data;
my $data_copy     = {};
my $zenka_name    = <system.zenka.name>;
my $config_type   = $call->{'args'} // qw| set-up |;
my $rules_subname = sprintf qw| %s.set-up.export_rules |, $zenka_name;
return {
    'mode' => qw| false |,
    'data' => "no export rules defined for zenka '$zenka_name'"
    }
    if not defined $code{$rules_subname};
my $export_rules = $code{$rules_subname}->();

return {
    'mode' => qw| false |,
    'data' => "config type '$config_type' not defined in export rules"
    }
    if not defined $export_rules->{'keys'}->{$config_type};

my @export_keys = $export_rules->{'keys'}->{$config_type}->{'export'}->@*;

return {
    'mode' => qw| false |,
    'data' => "type '$config_type' export key list is empty"
    }
    if !@export_keys;

my @exclude_list = ();
@exclude_list = $export_rules->{'keys'}->{$config_type}->{'exclude'}->@*
    if defined $export_rules->{'keys'}->{$config_type}->{'exclude'};

foreach my $exp_key (@export_keys) {
    my $parent_ref = $data_copy;
    my @rest_keys  = split '\.', $exp_key;
    while ( my $k = shift @rest_keys ) {
        if (@rest_keys) {
            $parent_ref->{$k} //= {};
            $parent_ref = $parent_ref->{$k};
        } else {
            my $exp_resolved = <[base.resolve_key]>->($exp_key);
            if ( defined $exp_resolved and length $exp_resolved->{'r-type'} )
            {
                $parent_ref->{$k} = clone( $exp_resolved->{'r-data'} );
            }
        }
    }
}

foreach my $exclude_key (@exclude_list) {
    if ( index( $exclude_key, qw| *. |, 0 ) == -1 ) {
        <[base.del_key]>
            ->( { 'data_ref' => $data_copy, 'del_key' => $exclude_key } );

    } else {
        map {
            <[base.del_key]>
                ->( { 'data_ref' => $data_copy, 'del_key' => $ARG } )
                if $ARG =~ m|(?<!\\)\.$exclude_key$|

        } keys flatten($data_copy)->%*;
    }
}

my $err_msg = '';
$EVAL_ERROR = undef;

$json_data = eval { <json.parser>->encode($data_copy) };

$err_msg = <[base.format_error]>->( $EVAL_ERROR, -1 ) if length $EVAL_ERROR;

return { 'mode' => qw| false |, 'data' => $err_msg } if length $err_msg;

return { 'mode' => qw| size |, 'data' => $json_data };

#,,,.,,.,,,..,,,.,,.,,..,,...,,..,,,,,,,.,.,.,..,,...,...,,,,,...,,,.,,,,,...,
#KNM3DT4ETHH6UJWYAMYQQGVVCPBMN74SUDWPEISSRFYPUNPMEDKUR2RS3BF2HNDXMKTCODWOK3DKG
#\\\|KQOLAK4OWJDNIXVOAXHVZ6CG4WNQYUMDZG2BIYFGUKTSOQFNBPO \ / AMOS7 \ YOURUM ::
#\[7]IVWBJZXOZLIFOVVE6Q5D57TCS5ILYMR5XNKXSTHJF7T3HJCOJQAY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
