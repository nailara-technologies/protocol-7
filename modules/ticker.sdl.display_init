# >:]

# name = ticker.sdl.display_init

<[base.log]>->( 1, "initializing ticker display..." );

$ENV{'DISPLAY'} = <x11.display>;
$ENV{'SDL_AUDIODRIVER'} = 'disk';    # <- disables ALSA permission warnings :)

use SDL;
use SDL::TTF;
use SDL::Rect;
use SDL::Event;
use SDL::Video;
use SDL::Color;
use SDL::Mouse;
use SDL::Surface;
use SDL::VideoInfo;

## configuration ##

# applying setup defaults
<ticker.display.position>  //= 'bottom';      # [top|center|bottom]
<ticker.font.name>         //= 'DroidSans';
<ticker.font.size>         //= 84;
<ticker.font.size_percent> //= 100;
<ticker.redraw_delay>      //= 13;
<ticker.font.bold>         //= 0;
<ticker.shadow.enabled>    //= 1;
<ticker.shadow.offset>     //= 2;
<ticker.border_offset>     //= 0;
<ticker.animation.steps>   //= 1;
<ticker.colour.foreground> //= '#000000';
<ticker.colour.background> //= '#FFFFFF';

# prepare colors to use for the ticker
<ticker.col.fg> = SDL::Color->new(
    <[ticker.base.colour.hex_split]>->(<ticker.colour.foreground>) );

<ticker.col.sh> = <[ticker.base.colour.hex_split]>->(
    <[ticker.base.colour.shadow_hex]>->(
        <ticker.colour.foreground>, <ticker.colour.background>
    )
);

my $bg_col = SDL::Color->new(
    <[ticker.base.colour.hex_split]>->(<ticker.colour.background>) );

# set up list of known fonts
my @font_names = qw(
    DroidSans
    DroidSans-Bold
    DroidSansMono
    DroidSerif-Bold
    DroidSerif-Regular
);

# init SDL
<ticker.sdl> = SDL::init(SDL_INIT_VIDEO);
SDL::Mouse::show_cursor(SDL_DISABLE);
SDL::TTF::init();

# adjust / add paths as needed.. (and install droid fonts or configure another)
my $font_path;
$font_path = '/usr/share/fonts/truetype/droid';           # debian / ubuntu
$font_path = '/usr/share/fonts/TTF' if !-d $font_path;    # arch linux

# check font name
my $font_matched = 0;
map { $font_matched = 1 if $_ eq <ticker.font.name> } @font_names;
if ( !$font_matched ) {
    my $fallback_font = $font_names[0];
    <[base.log]>->(
        0,
        "(((!))) unknown font name '"
            . <ticker.font.name>
            . "' configured! [falling back to '$fallback_font'] (((!)))"
    );
    <ticker.font.name> = $fallback_font;
}

<[base.log]>->( 1, "loading '" . <ticker.font.name> . "' font.." );

# determine font path (droid fonts need to be installed)
die "font path not found" if !-d $font_path;
$font_path .= '/' . <ticker.font.name> . '.ttf';

<ticker.font.path> = $font_path;

if ( exists <x11.coordinates> ) {    #  new (dynamic) mode
    my $coord = <x11.coordinates>;
    ( <sdl.display_width>, <sdl.display_height> ) = (
        $coord->{'right'} - $coord->{'left'},
        $coord->{'bottom'} - $coord->{'top'}
    );
    SDL::putenv("SDL_VIDEO_WINDOW_POS=$coord->{left},$coord->{top}");

    # calculate dynamic font size

    my $last            = 0;
    my $font_size       = 0;
    my $font_and_border = 0;
    my $display_height  = $coord->{'bottom'} - $coord->{'top'};

    while ( !$last and $font_and_border < $display_height ) {
        $font_size++;
    recalc:
        <ticker.font.object> = SDL::TTF::open_font( $font_path, $font_size );
        die "failed to open font (size=$font_size) [" . SDL::get_error . "]"
            if not defined <ticker.font.object> or !<ticker.font.object>;
        <ticker.font.height> = SDL::TTF::font_height(<ticker.font.object>);
        <ticker.border_height>
            = int( abs( SDL::TTF::font_descent(<ticker.font.object>) ) / 2 );
        $font_and_border
            = <ticker.font.height> + ( 2 * <ticker.border_height> );
        if ( $font_and_border > $display_height ) {
            $font_size--;
            $last = 1;
            goto recalc;
        }
    }

    # apply user defined font scale
    <ticker.font.size_percent> =~ s|%$||;
    my $scale_factor = <ticker.font.size_percent> * 0.01;
    if ( $scale_factor < 1 and $scale_factor > 0 ) {

        $font_size *= $scale_factor;

        <ticker.font.object>
            = SDL::TTF::open_font( $font_path, int($font_size) );
        die "failed to open font (size=$font_size) [" . SDL::get_error . "]"
            if not defined <ticker.font.object> or !<ticker.font.object>;

        <ticker.border_offset> += sprintf(
            "%.0d",
            (   <ticker.font.height>
                    - SDL::TTF::font_height(<ticker.font.object>)
            ) / 2
        );

    } elsif ( $scale_factor != 1 ) {
        warn "[!] font scale factor $scale_factor is out of range, ignoring..";
    }

} else {    # old mode

    # load the configured font
    <ticker.font.object>
        = SDL::TTF::open_font( $font_path, <ticker.font.size> );
    die "failed to open font (size="
        . <ticker.font.size> . ") ["
        . SDL::get_error . "]"
        if not defined <ticker.font.object> or !<ticker.font.object>;
    <ticker.font.height> = SDL::TTF::font_height(<ticker.font.object>);
    my $font_line_skip = SDL::TTF::font_line_skip(<ticker.font.object>);
    <ticker.border_height>
        //= int( abs( SDL::TTF::font_descent(<ticker.font.object>) ) / 2 );

    # determine screen size
    my $video_info = SDL::Video::get_video_info();
    die "failed to get video info [" . SDL::get_error . "]"
        if not defined $video_info;
    my @modes
        = @{ SDL::Video::list_modes( $video_info->vfmt, SDL_FULLSCREEN ) };
    my $max_mode = shift(@modes);

    # store size parameters
    ( <x11.width>, <x11.height> ) = ( $max_mode->w, $max_mode->h );

    # calculate display size
    ( <sdl.display_width>, <sdl.display_height> )
        = ( $max_mode->w, $font_line_skip + ( <ticker.border_height> * 2 ) );

    # set up position on the screen
    if ( <ticker.display.position> eq 'center' ) {
        SDL::putenv("SDL_VIDEO_CENTERED=center");
    } else {
        my $y_pos
            = <ticker.display.position> eq 'top'
            ? 0
            : $max_mode->h - <sdl.display_height>;
        SDL::putenv("SDL_VIDEO_WINDOW_POS=0,$y_pos");
    }

}

# initialize SDL window
<[base.log]>->(
    1,
    "initializing SDL display ( "
        . <sdl.display_width> . " x "
        . <sdl.display_height> . " )"
);
<sdl.display> = SDL::Video::set_video_mode(
    <sdl.display_width>,
    <sdl.display_height>,
    32,
    SDL_DOUBLEBUF | SDL_HWSURFACE | SDL_HWACCEL | SDL_NOFRAME | SDL_PREALLOC
        | SDL_ASYNCBLIT
);

# hide ticker window (until we have rendered text)
SDL::Video::wm_iconify_window();
<ticker.window.raised> = 0;

# set window title
SDL::Video::wm_set_caption( <system.agent.name> . '(' . $$ . ')',
    <system.agent.name> . '(' . $$ . ') [minimized]' );

<ticker.col.m_bg>    # prepare a mapped color for screen background
    = SDL::Video::map_RGB( <sdl.display>->format(),
    $bg_col->r, $bg_col->g, $bg_col->b );

# clear screen area
SDL::Video::fill_rect( <sdl.display>,
    SDL::Rect->new( 0, 0, <sdl.display_width>, <sdl.display_height> ),
    <ticker.col.m_bg> );
unless ( SDL::Video::flip(<sdl.display>) == 0 ) {
    SDL::Video::update_rect( <sdl.display>, 0, 0, <sdl.display_width>,
        <sdl.display_height> );
}
