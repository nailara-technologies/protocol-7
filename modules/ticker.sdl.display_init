# >:]

# name = ticker.sdl.display_init

<[base.log]>->( 1, "initializing ticker display..." );

$ENV{'DISPLAY'} = <x11.display>;
$ENV{'SDL_AUDIODRIVER'} = 'disk';    # <- disables ALSA permission warnings :)

use SDL;
use SDL::TTF;
use SDL::Rect;
use SDL::Event;
use SDL::Video;
use SDL::Color;
use SDL::Mouse;
use SDL::Surface;
use SDL::VideoInfo;

## configuration ##

# applying setup defaults
<ticker.display.position> //= 'bottom';      # [top|center|bottom]
<ticker.font.name>        //= 'DroidSans';
<ticker.font.size>        //= 84;
<ticker.redraw_delay>     //= 13;
<ticker.font.bold>        //= 0;
<ticker.shadow.enabled>   //= 1;
<ticker.shadow.offset>    //= 2;
<ticker.border_offset>    //= 0;
<ticker.animation.steps>  //= 1;

# prepare colors to use for the ticker
<ticker.col.fg> = SDL::Color->new( 0x00, 0x00, 0x00 );    # foreground
<ticker.col.sh> = SDL::Color->new( 0xF0, 0xF0, 0xF0 );    # text shadow
my $bg_col = SDL::Color->new( 0xFF, 0xFF, 0xFF );         # background

# set up list of known fonts
my @font_names = qw(
    DroidSans
    DroidSans-Bold
    DroidSansMono
    DroidSerif-Bold
    DroidSerif-Regular
);

# init SDL
<ticker.sdl> = SDL::init(SDL_INIT_VIDEO);
SDL::Mouse::show_cursor(SDL_DISABLE);
SDL::TTF::init();

# adjust / add paths as needed.. (and install droid fonts or configure another)
my $font_path;
$font_path = '/usr/share/fonts/truetype/droid';           # debian / ubuntu
$font_path = '/usr/share/fonts/TTF' if !-d $font_path;    # arch linux

# check font name
my $font_matched = 0;
map { $font_matched = 1 if $_ eq <ticker.font.name> } @font_names;
die "unknown font name '" . <ticker.font.name> . "' configured"
    if !$font_matched;

<[base.log]>->( 1, "loading '" . <ticker.font.name> . "' font.." );

# determine font path (droid fonts need to be installed)
die "font path not found" if !-d $font_path;
$font_path .= '/' . <ticker.font.name> . '.ttf';

<ticker.font.path> = $font_path;

# load the configured font
<ticker.font.object> = SDL::TTF::open_font( $font_path, <ticker.font.size> );
die "failed to open font " . SDL::get_error . "]" if !<ticker.font.object>;
<ticker.font.height> = SDL::TTF::font_height(<ticker.font.object>);
my $font_line_skip = SDL::TTF::font_line_skip(<ticker.font.object>);
<ticker.border_height>
    //= int( abs( SDL::TTF::font_descent(<ticker.font.object>) ) / 2 );

# determine screen size
my $video_info = SDL::Video::get_video_info();
die "failed to get video info [" . SDL::get_error . "]"
    if not defined $video_info;
my @modes = @{ SDL::Video::list_modes( $video_info->vfmt, SDL_FULLSCREEN ) };
my $max_mode = shift(@modes);

# store size parameters
( <x11.width>, <x11.height> ) = ( $max_mode->w, $max_mode->h );

# calculate display size
( <sdl.display_width>, <sdl.display_height> )
    = ( $max_mode->w, $font_line_skip + ( <ticker.border_height> * 2 ) );

# set up position on the screen
if ( <ticker.display.position> eq 'center' ) {
    SDL::putenv("SDL_VIDEO_CENTERED=center");
} else {
    my $y_pos
        = <ticker.display.position> eq 'top'
        ? 0
        : $max_mode->h - <sdl.display_height>;
    SDL::putenv("SDL_VIDEO_WINDOW_POS=0,$y_pos");
}

# initialize SDL window
<[base.log]>->(
    1,
    "initializing SDL display ( "
        . <sdl.display_width> . " x "
        . <sdl.display_height> . " )"
);
<sdl.display> = SDL::Video::set_video_mode(
    <sdl.display_width>,
    <sdl.display_height>,
    32,
    SDL_DOUBLEBUF | SDL_HWSURFACE | SDL_HWACCEL | SDL_NOFRAME | SDL_PREALLOC
        | SDL_ASYNCBLIT
);

# hide ticker window (until we have rendered text)
SDL::Video::wm_iconify_window();
<ticker.window.raised> = 0;

# set window title
SDL::Video::wm_set_caption( <system.agent.name>,
    <system.agent.name> . ' (minimized)' );

<ticker.col.m_bg>    # prepare a mapped color for screen background
    = SDL::Video::map_RGB( <sdl.display>->format(),
    $bg_col->r, $bg_col->g, $bg_col->b );

# clear screen area
SDL::Video::fill_rect( <sdl.display>,
    SDL::Rect->new( 0, 0, <sdl.display_width>, <sdl.display_height> ),
    <ticker.col.m_bg> );
unless ( SDL::Video::flip(<sdl.display>) == 0 ) {
    SDL::Video::update_rect( <sdl.display>, 0, 0, <sdl.display_width>,
        <sdl.display_height> );
}
