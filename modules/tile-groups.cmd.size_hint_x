## >:] ##

# name  = tile-groups.cmd.size_hint_x
# param = <zenka[tile]> [ratio]
# descr = return matching X % to fit ratio [16:9]

return { 'mode' => qw| false |, 'data' => "expected valid zenka name" }
    if not defined $$call{'args'}
    or $$call{'args'} !~ /^(\S+)( +(\d+:\d+))?$/;

my ( $zenka_name, $ratio_str ) = ( $1, $3 // '16:9' );    # <-- default ratio!

my $coords_reply = <[tile-groups.cmd.get_coordinates]>->($zenka_name);

return $coords_reply if $coords_reply->{'mode'} ne qw| true |;

my @coords = split( / /, $coords_reply->{'data'} );

my ( $width, $height ) = ( $coords[2] - $coords[0], $coords[3] - $coords[1] );

my %underscan;
map {
    $underscan{$1} = <tile-groups.setup.screen>->{$ARG}
        if $ARG =~ /^underscan\.(\w+)/
} keys %{<tile-groups.setup.screen>};

my $x_total = <x11.screen.width> - $underscan{'left'} - $underscan{'right'};
my $y_total = <x11.screen.height> - $underscan{'top'} - $underscan{'bottom'};

my ( $ratio_x, $ratio_y ) = split( /:/, $ratio_str );

my $new_width = sprintf( '%.02f', ( $height / $ratio_y ) * $ratio_x );

my $old_percent = sprintf( '%.02f', $width * 100 / $x_total );
my $new_percent = sprintf( '%.02f', $new_width * 100 / $x_total );

return {
    'mode' => qw| true |,
    'data' => "[$ratio_str] X = $old_percent% --> $new_percent%"
    }

#,,..,,,.,,,,,.,.,...,,,,,..,,,..,,,.,.,.,,.,,..,,...,...,.,.,,.,,..,,,..,.,.,
#IAUKDVWL2CQZEV5IH2O7PASN2E22ND3MVNQ432AUTLX5TANGJQ3HILACAGPO5CNIKAHD4NQDYLJTY
#\\\|T3BH5RG4YMWGOYJE4FMQFYAESP7TLUR2PYOBBYLJKFMVCCZJQR6 \ / AMOS7 \ YOURUM ::
#\[7]YYCQQKVRFB6UFUVUOPKY2MAHT7LDALZ35VA4GJNVGJUNFUT4OYCQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
