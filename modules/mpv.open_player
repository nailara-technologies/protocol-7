# >:]

# name = mpv.open_player

my $abort_startup = 0;
my $mpv_params    = <mpv.params>;
$ENV{'DISPLAY'} = <x11.display>;
my $socket_path = "/tmp/.mpv.socket.$$";
$mpv_params .= " --input-unix-socket $socket_path";

<[base.log]>->( 1, 'starting mpv player..' );

<mpv.pid> = open3( <mpv.fh.stdin>, <mpv.fh.stdout>, <mpv.fh.stderr>,
    ( 'mpv', split( / +/, $mpv_params ) ) );

if ( !<mpv.pid> ) {
    <[base.log]>->( 0, "[!] failed to start mpv [$!]" );
    <[base.log]>->( 1, " : aborting agent startup .." );
    CORE::exit(1);
}
<[base.log]>->( 1, ": mpv process spawned [PID=<mpv.pid>]" );

close( delete(<mpv.fh.stdin>) );

my $max_retries = 100;
while ( $max_retries-- ) {
    last if -e $socket_path;
    <[base.sleep]>->(0.1);
}
if ( not -e $socket_path ) {
    <[base.log]>->(
        0, "[!] mpv socket creation failed ['$socket_path' does not exist]"
    );
    $abort_startup = 1;
} else {
    <[base.log]>->( 1, "opening unix domain socket '$socket_path'.." );
    <mpv.socket> = <[base.open]>->( 'unix', 'out', $socket_path );
    <[base.log]>->( 1, "unlinking socket $socket_path.." );
    unlink($socket_path) or warn("unlink($socket_path): $!");
}

if (   !$abort_startup and not defined <mpv.socket>
    or !$abort_startup and !-S <mpv.socket> ) {
    <[base.log]>->( 0, "[!] mpv socket creation failed [opened handle valid]" );
    $abort_startup = 1;
}

if ($abort_startup) {
    <[base.log]>->( 1, " : aborting agent startup .." );
    <[base.log]>->( 1, " : terminated mpv process " . <mpv.pid> . ".." )
        if kill( 9, <mpv.pid> );
    CORE::exit(1);
}

<[event.add_io]>->(
    {   'fd'      => <mpv.fh.stdout>,
        'handler' => 'mpv.handler.stdout',
        'data'    => {
            'pid'           => <mpv.pid>,
            'log_whitelist' => [
                'Creating non-video VO',
                '\[ipc',
                '.{5}Video ',
                '.{5}Audio ',
                'Waiting for XShm'
            ]
        }
    }
);

<[event.add_io]>->(
    {   'fd'      => <mpv.socket>,
        'handler' => 'mpv.handler.pipe_output',
        'data'    => { 'pid' => <mpv.pid> }
    }
);
