# >:]

# name = mpv.open_player

my $abort_startup = 0;
my $mpv_params    = <mpv.params>;
$ENV{'DISPLAY'} = <x11.display>;

if ( not defined <mpv.geometry> ) {
    <[base.log]>->( 0, "<!> no geometry received..." );
    if (<mpv.autoresize>) {
        <[base.log]>->( 0, " : disabled 'autoresize' function.." );
        <mpv.autoresize> = 0;
    }
    if ( <mpv.fade_in> and <mpv.auto_fs> ) {
        <[base.log]>->( 0, " : disabled 'fade_in' ('auto_fs' is on).." );
        <mpv.fade_in> = 0;
    }
}

my $target_geometry;
if (<mpv.fade_in>) {
    $target_geometry = <mpv.geometry>;
    <mpv.geometry> = <mpv.fade_start_geom>;
}

$mpv_params .= ' --geometry=' . <mpv.geometry> if defined <mpv.geometry>;

<mpv.geometry> = $target_geometry if defined $target_geometry;

$mpv_params .= ' -fs'
    if not defined <mpv.geometry>
    and exists <mpv.auto_fs>
    and <mpv.auto_fs>;

$mpv_params .= ' -vo ' . <mpv.vo_backend> if defined <mpv.vo_backend>;

if (    defined <mpv.geometry>
    and exists <x11.coordinates>
    and exists <mpv.autoresize>
    and <mpv.autoresize> ) {
    my ( $width, $height ) = (
        <x11.coordinates>->{'right'} - <x11.coordinates>->{'left'},
        <x11.coordinates>->{'bottom'} - <x11.coordinates>->{'top'}
    );
    <[base.log]>->( 1, "auto resize is enabled (${width}x${height})" );
    $mpv_params .= " --autofit=${width}x${height} --no-keepaspect";
}

my $socket_path = "/tmp/.mpv.socket.$$";
$mpv_params .= " --input-unix-socket $socket_path";

my $mpv_title_param .= '--title="' . <system.agent.name>;
$mpv_title_param .= '[' . <system.agent.subname> . ']'
    if exists <system.agent.subname> and length(<system.agent.subname>);
$mpv_title_param .= ' ( ${media_title} )"';

<[base.log]>->(
    2, "current mpv parameters: " . <mpv.bin_path> . " $mpv_params"
);

<[base.log]>->( 1, 'starting mpv player..' );

<mpv.started_with_params> = $mpv_params . ' ' . $mpv_title_param;

<mpv.pid> = open3( <mpv.fh.stdin>, <mpv.fh.stdout>, <mpv.fh.stderr>,
    ( <mpv.bin_path>, split( / +/, $mpv_params ), $mpv_title_param ) );

if ( !<mpv.pid> ) {
    <[base.log]>->( 0, "[!] failed to start mpv [$!]" );
    <[base.log]>->( 1, " : aborting agent startup .." );
    CORE::exit(1);
}

<[base.log]>->( 1, ": mpv process spawned [PID=<mpv.pid>]" );

close( delete(<mpv.fh.stdin>) );

<x11.window_timeout> //= 7;

if ( not defined <[base.x11.wait_for_window]> ) {
    <[base.log]>->( 0, "[!] mpv window creation timed out!" );
    $abort_startup = 1;
    goto abort;
}

my $max_retries = 42;
while ( $max_retries-- ) {
    last if -e $socket_path;
    <[base.sleep]>->(0.1);
    <[base.log]>->( 2, ": waiting for $socket_path .." )
        if !-e $socket_path;
}
if ( not -e $socket_path ) {
    <[base.log]>->(
        0, "[!] mpv socket creation failed ['$socket_path' does not exist]"
    );
    $abort_startup = 1;
} else {
    <[base.log]>->( 1, "opening unix domain socket '$socket_path'.." );
    <mpv.socket> = <[base.open]>->( 'unix', 'out', $socket_path );
    <[base.log]>->( 1, "unlinking socket $socket_path.." );
    unlink($socket_path) or warn("unlink($socket_path): $!");
}

if (   !$abort_startup and not defined <mpv.socket>
    or !$abort_startup and !-S <mpv.socket> ) {
    <[base.log]>->( 0, "[!] mpv socket creation failed [opened handle valid]" );
    $abort_startup = 1;
}

abort:

if ($abort_startup) {
    <[base.log]>->( 1, " : aborting agent startup .." );
    <[base.log]>->( 1, " : terminated mpv process " . <mpv.pid> . ".." )
        if kill( 9, <mpv.pid> );
    CORE::exit(1);
}

if (<mpv.fade_in>) {
    <[base.x11.set_window_opacity]>->( <x11.id>, 0 );
    <[base.proto.nailara.command.send.local]>->(
        {   'command' => 'core.xserver.set_geometry',
            'call_args' =>
                { 'args' => join( ' ', <x11.id>, $target_geometry ) },
            'reply' => {
                'handler' => 'dev.null',
                'params'  => {}
            }
        }
    );
    <mpv.opacity> = 0;
    Event->idle(
        cb => sub {
            <mpv.opacity>++;
            return 0 if <mpv.opacity> > 100;
            <[base.x11.set_window_opacity]>->( <x11.id>, <mpv.opacity> );
            return 1;
        },
        repeat => 1
    );
}

<[event.add_io]>->(
    {   'fd'      => <mpv.fh.stdout>,
        'handler' => 'mpv.handler.stdout',
        'data'    => {
            'pid'           => <mpv.pid>,
            'log_whitelist' => [
                'Creating non-video VO',
                '\[ipc',
                '.{5}Video ',
                '.{5}Audio ',
                'Waiting for XShm',
                'Exiting... \(Quit\)'
            ]
        }
    }
);

<[event.add_io]>->(
    {   'fd'      => <mpv.socket>,
        'handler' => 'mpv.handler.pipe_output',
        'data'    => { 'pid' => <mpv.pid> }
    }
);

<[base.log]>->( 1, "player startup successful.." );
