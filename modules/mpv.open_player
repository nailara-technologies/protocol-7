## [:< ##

# name = mpv.open_player

$SIG{'PIPE'} = sub {
    <[base.log]>->( 0, 'SIGPIPE received, shutting down..,' );
    <[base.exit]>->(qw| 0010 |);
};

my $socket_path = <mpv.path.ipc_socket>
    = sprintf( qw| /run/.7/.mpv.socket.%u |, $PID );

my $target_geometry;
<mpv.audio_only> = FALSE;
my $mpv_params = <mpv.params>;

<mpv.audio_only> = TRUE
    if <system.zenka.mode> eq qw| stand-alone |
    and defined <system.zenka.subname>
    and <system.zenka.subname> eq qw| audio |;

<mpv.playlist_type> = qw| audio |
    if <mpv.audio_only>;    # <-- run with 'audio' subname

if ( not <mpv.audio_only> ) {
    my $xmode = <x11.mode>;
    $ENV{'DISPLAY'} = <x11.display>;

    if ( defined $xmode and defined <mpv.xmode>->{$xmode} ) {
        <mpv.vo_backend> = <mpv.xmode>->{$xmode}->{'vo'}
            if defined <mpv.xmode>->{$xmode}->{'vo'};
        <mpv.hwdec> = <mpv.xmode>->{$xmode}->{'hwdec'}
            if defined <mpv.xmode>->{$xmode}->{'hwdec'};
        <[base.logs]>->(
            "<< ! >> switching vo_backend to '%s' [ %s-mode ] << ! >>",
            <mpv.vo_backend>, $xmode
        );
    }

    if ( not defined <mpv.geometry> or exists <x11.geometry_was_undefined> ) {
        <[base.log]>->( 1, '<< ! >> geometry was undefined..,' );
        if (<mpv.autoresize>) {
            <[base.log]>->( 1, " : disabled 'autoresize' function.," );
            <mpv.autoresize> = FALSE;
        }
        if ( <mpv.fade_in> and <mpv.auto_fs> ) {
            <[base.log]>->( 1, " : disabled 'fade_in' [auto_fs active].," );
            <mpv.fade_in> = FALSE;
        }
    }
    if ( <system.zenka.mode> eq 'universal-child' and <mpv.fade_in> ) {
        <[base.log]>->( 1, " : disabled 'fade_in' [universal-child].," );
        <mpv.fade_in> = FALSE;
    }

    if (<mpv.fade_in>) {
        $target_geometry = <mpv.geometry>;
        <mpv.geometry> = <mpv.fade_start_geom>;
    }

    $mpv_params .= ' --geometry=' . <mpv.geometry> if defined <mpv.geometry>;

    <mpv.geometry> = $target_geometry if defined $target_geometry;

    if ( ( not defined <mpv.geometry> or exists <x11.geometry_was_undefined> )
        and exists <mpv.auto_fs>
        and <mpv.auto_fs> ) {
        $mpv_params .= ' -fs';
        if (<mpv.autoresize>) {
            <[base.log]>->( 1, " : disabled 'autoresize' function.," );
            <mpv.autoresize> = FALSE;
        }
        <[base.log]>->( 1, ' : fullscreen mode is enabled [auto_fs].,' );
        <mpv.current.window_width>  = <x11.coordinates.right>;
        <mpv.current.window_height> = <x11.coordinates.bottom>;
        <mpv.current.box_width>  = <x11.coordinates.right>;  # LLL: check, fix
        <mpv.current.box_height> = <x11.coordinates.bottom>;
    }

    $mpv_params .= ' -vo=' . <mpv.vo_backend> if defined <mpv.vo_backend>;
    $mpv_params .= ' --hwdec=' . <mpv.hwdec>  if defined <mpv.hwdec>;

    if (    defined <mpv.geometry>
        and exists <x11.coordinates>
        and exists <mpv.autoresize>
        and <mpv.autoresize> ) {
        my ( $width, $height ) = (
            <x11.coordinates>->{'right'} - <x11.coordinates>->{'left'},
            <x11.coordinates>->{'bottom'} - <x11.coordinates>->{'top'}
        );
        <[base.logs]>->( "auto resize is enabled [%ux%u]", $width, $height );
        $mpv_params
            .= sprintf( ' --autofit=%ux%u --no-keepaspect', $width, $height );
    }
} else {
    $mpv_params = <mpv.audio_params>;
    map { <[base.disable_command]>->($ARG) }
        qw| zoom align-x align-y change_subname |;
}

$mpv_params .= sprintf ' --input-ipc-server=%s', $socket_path;
$mpv_params =~ s|  +| |g;

my @mpv_params = split m| +|, $mpv_params;

my $mpv_title_str = <mpv.zenka_title>;
$mpv_title_str .= sprintf qw| [%s] |, <system.zenka.subname>
    if exists <system.zenka.subname> and length <system.zenka.subname>;
$mpv_title_str
    .= ' [ ${?universal-title:${universal-title}}'
    . '${!universal-title:no file} ]';

push( @mpv_params, sprintf qw| --title='%s' |, $mpv_title_str );
<mpv.started_with_params> = join ' ', @mpv_params;

<[base.log]>->(
    2, join( ' ', 'current parameters : ', <mpv.bin_path>, @mpv_params )
);

<mpv.fh.stdin>  = IO::Handle->new();
<mpv.fh.stdout> = IO::Handle->new();
<mpv.fh.stderr> = IO::Handle->new();

<[base.log]>->( 1, 'starting mpv player.,' );

## note ## mpv writes errors to stdout, consider replacement with open2 .., ##
<mpv.pid> = open3( <mpv.fh.stdin>, <mpv.fh.stdout>, <mpv.fh.stderr>,
    ( <mpv.bin_path>, @mpv_params ) );

my $wait_res = <[base.waitpid]>->(<mpv.pid>);    ##  WNOHANG  ##

if (   not defined <mpv.pid>
    or not <mpv.pid>
    or $wait_res == <mpv.pid>
    or $wait_res < 0 ) {
    <[base.logs]>
        ->( 0, '[!] cannot start mpv [%s]', <[base.str.eval_error]> );
    <[mpv.handler.error_output]>;
    <[mpv.callback.abort_startup]>;    # <-- exiting
} else {
    push( <system.kill_list>->@*, <mpv.pid> );
    <[base.zenki.report_child_pid]>->(<mpv.pid>);
}

END {    # cleaning up left over process on lost socket
    do { <[base.sleep]>->(0.13); kill( 9, <mpv.pid> ) }
        if defined <mpv.pid>
        and kill( 15, <mpv.pid> );
}

<[base.logs]>->( ': mpv process started [PID=%u]', <mpv.pid> );
close( delete <mpv.fh.stdin> );    # input fd not required

<[event.add_io]>->(
    {   'fd'      => <mpv.fh.stderr>,
        'handler' => qw| mpv.handler.stderr |,
        'data'    => { qw| pid | => <mpv.pid> }
    }
);

<[mpv.open_control_socket]>;

<[mpv.await_window_presence]> if not <mpv.audio_only>;

<[mpv.callback.fade_in]> if <mpv.fade_in> and not <mpv.audio_only>;

<[event.add_io]>->(
    {   'fd'      => <mpv.fh.stdout>,
        'handler' => qw| mpv.handler.stdout |,
        'data'    => {
            qw| pid |           => <mpv.pid>,
            qw| log_whitelist | => [
                'Creating non-video VO',
                '\[ipc',
                '.{5}Video ',
                '.{5}Audio ',
                'Waiting for XShm',
                'Exiting... \(Quit\)',
                '\[VDPAU SUNXI\] Presentation time not supported',
                'XIO:  fatal IO error ',
                'after \d+ requests',
                'libva info: VA-API version',
                'libva info: .+returns 0',
                'libva info: Trying to open /usr/lib/',
                'libva info: Found init function __vaDriverInit_',
                'No protocol specified',
                'WARNING: Invalid RefPicListX',
                'xcb_connection_has_error\(\) returned true',
                'jack server is not running or cannot be started',
                'JackShmReadWritePtr::~JackShmReadWritePtr - Init not done for',
                'Failed to open VDPAU backend libvdpau_nvidia.so',
            ]
        }
    }
);

<[base.log]>->( 1, 'player startup successful., =)' );

#,,,,,,,.,..,,..,,.,,,.,.,,,,,..,,.,.,.,.,.,,,..,,...,...,...,...,.,.,,,,,,.,,
#3Z7SVGAFWSKLHB4VUXLRVTFGTMHUED4SP2NDUAV4XAFOHXXJ2NCLB6X5Y4335Q7KLW7KJ4OGB5BNS
#\\\|Q6TCI3WIZSGACHLFLKJUUVD66OAR6UJPJFXQ5T46YE26JMIBSIH \ / AMOS7 \ YOURUM ::
#\[7]VVY2U7ILFTFJAU2AF3PM4PJE2TGDLH3ONGBHNSS3ZCSCSWGK3ABI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
