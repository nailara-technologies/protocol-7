## [:< ##

# name  = crypt.C25519.del_keys_hash_entry
# descr = erase a C25519 key from memory [secure]

my $name          = shift // '';
my $silent_unload = shift // FALSE;    ##  optional  ##
my @del_types     = @ARG;              ##  optional  ##
if ( not length $name ) {
    warn 'expected C25519 key name param <{C1}>';
    return undef;
}
if ( not exists $keys{'C25519'}->{$name} ) {
    <[base.s_warn]>->( "there is no key named '%s' loaded", $name );
    return undef;
}
<[base.logs]>->(
    $silent_unload ? 2 : 1,
    "unloading C25519 key '%s'.,", $name
);

my $usr_key = $keys{'C25519'}->{$name};    ##[ secret , private , public ]##
@del_types = <[base.reverse-sort]>->($usr_key) if not @del_types;
my $delete_count = 0;
foreach my $type (@del_types) {
    next if not exists $usr_key->{$type};
    <[base.erase_buffer_content]>->( \$usr_key->{$type} );
    $usr_key->{$type} = undef;
    delete $usr_key->{$type};
    $delete_count++ if not exists $usr_key->{$type};
}

undef $usr_key;
delete $keys{'C25519'}->{$name} if not keys $keys{'C25519'}->{$name}->%*;
delete $keys{'C25519'}          if not keys $keys{'C25519'}->%*;

return TRUE    ##  success  ##
    if @ARG and ( not exists $keys{'C25519'}
    or not exists $keys{'C25519'}->{$name} )
    or @ARG and $delete_count == @ARG;

return FALSE;    ##  hash read-only?  ##

#,,.,,...,,.,,,,,,,,.,,..,...,.,.,,,.,,..,,..,..,,...,...,...,.,,,,..,,..,,.,,
#QXXEQ5LPBPEN5AM7JM7DLD2FOCOR6SFX664MGLLLLRAMHUTWZT7LIIKJCMLGG7IZBQAPWGKGGIZQG
#\\\|2TFNJ7MZTIQ6CHJWC3TSMDD5H64WPDRCFA3VCCZZV7U2KMIZYIV \ / AMOS7 \ YOURUM ::
#\[7]QNM4EEDGH4NUUGJB3FZ7GEYDWZOMBBKNOPQNFID2IDXHQ3SIO2BA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
