## >:] ##

# name  = crypt.C25519.del_keys_hash_entry
# descr = erase a C25519 key from memory [secure]

my $name          = shift // '';
my $silent_unload = shift // FALSE;
if ( not length $name ) {
    warn 'expected C25519 key name param <{C1}>';
    return undef;
}
if ( not exists $keys{'C25519'}->{$name} ) {
    <[base.s_warn]>->( "there is no key named '%s' loaded", $name );
    return undef;
}
<[base.logs]>->(
    $silent_unload ? 2 : 1,
    "unloading C25519 key '%s'.,", $name
);

my $usr_key = $keys{'C25519'}->{$name};    ## [ private , public ] ##
foreach my $type ( <[base.reverse-sort]>->($usr_key) ) {
    <[base.erase_buffer_content]>
        ->( \$usr_key->{$type}, int( rand(13) ) + 7 ); ##  <-- rnd padding  ##
    $usr_key->{$type} = undef;
    delete $usr_key->{$type};
}

undef $usr_key;
delete $keys{'C25519'}->{$name};
delete $keys{'C25519'} if not keys $keys{'C25519'}->%*;

return TRUE    ##  success  ##
    if not exists $keys{'C25519'}
    or not exists $keys{'C25519'}->{$name};

return FALSE;    ##  hash read-only?  ##

#,,.,,,..,,.,,,,.,.,.,,.,,...,,,,,..,,,.,,..,,..,,...,...,,..,.,.,,.,,..,,,,,,
#254NSDMQTKEIQ4XWVKLYD75RMKUX2JB7SK5NUS6TEQA5LN2IDTDGS2PLQOJPCW6NEIMWLSHPMZTGO
#\\\|NDXBOAFSCYOVGLN4JGPELR7QW27RX2DUK3OQRAB6F34AF3WSDRK \ / AMOS7 \ YOURUM ::
#\[7]L6ZZSY6ZLP3PPIITEPWQHVBAUY664UWBF3POMXCAG3SFNY7MKMDY 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
