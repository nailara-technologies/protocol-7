## [:< ##

# name  = crypt.C25519.del_keys_hash_entry
# descr = erase a C25519 key from memory [secure]

my $name          = shift // '';
my $silent_unload = shift // FALSE;    ##  optional  ##
my @del_types     = @ARG;              ##  optional  ##
if ( not length $name ) {
    warn 'expected C25519 key name param <{C1}>';
    return undef;
}
if ( not exists $keys{'C25519'}->{$name} ) {
    <[base.s_warn]>->( "there is no key named '%s' loaded", $name );
    return undef;
}
<[base.logs]>->(
    $silent_unload ? 2 : 1,
    "unloading C25519 key '%s'.,", $name
);

my $usr_key = $keys{'C25519'}->{$name};    ##[ secret , private , public ]##
@del_types = <[base.reverse-sort]>->($usr_key) if not @del_types;
my $delete_count = 0;
foreach my $type (@del_types) {
    next if not exists $usr_key->{$type};
    <[base.erase_buffer_content]>->( \$usr_key->{$type} );
    $usr_key->{$type} = undef;
    delete $usr_key->{$type};
    $delete_count++ if not exists $usr_key->{$type};
}

undef $usr_key;
delete $keys{'C25519'}->{$name} if not keys $keys{'C25519'}->{$name}->%*;
delete $keys{'C25519'}          if not keys $keys{'C25519'}->%*;

my $key_name_table = <crypt.C25519.loaded-keys> //= {};

if ( not exists $keys{'C25519'}->{$name} and exists $key_name_table->{$name} )
{
    <[base.erase_buffer_content]>    ##  erasing key chksum from memory  ##
        ->( \$key_name_table->{$name}->{'checksum'} );
    $key_name_table->{$name}->{'checksum'} = undef;
    ##  removing name from table  ##
    delete $key_name_table->{$name};
}

return TRUE    ##  success  ##
    if not exists $keys{'C25519'}
    or not exists $keys{'C25519'}->{$name}
    or @ARG and $delete_count == @ARG;    ##  <-- improve reporting if not  ##

##  hash read-only?  ##
##
return FALSE;

#,,..,,.,,,.,,.,.,..,,.,.,,,.,,,.,,,,,...,,,,,..,,...,...,,,.,,,.,,..,,,,,,,.,
#GYYYGNSWS2QN3NYBJJWF4Y3JNYAMWV7QJ3LFO3UQREGBXWTNEH33ANBCD6Y6GTVVP6AZ4BXKESGMS
#\\\|7CRK44VMLWN4XYHVYZCQ6SBWEB4XH5VD5WF5AIBO5HMD6VUMLK7 \ / AMOS7 \ YOURUM ::
#\[7]5JVKLFRHLODWV2QSOJVV2T5DJ6LXAP2LI6M4RBZ4D4HAXBUNIUAA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
