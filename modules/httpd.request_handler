## [:< ##
# name = httpd.request_handler
# note : return 2 to close connection

my $id      = $_[0]->w->data;
my $session = $data{'session'}->{$id};

my $max_uri_len = 1 + ( <httpd.cfg.max_uri_length>     || 1024 * 7 );
my $max_req_len = 1 + ( <httpd.cfg.max_request_length> || 1024 * 13 );

if ( $session->{'buffer'}{'input'} =~ m,^[^\r\n]{$max_uri_len}, ) {
    <[base.logs]>->(
        0,   '[%d] maximum URI length [ %d bytes ] exceeded.,',
        $id, $max_uri_len - 1
    );
    <[httpd.send_error_page]>->( $id, 414 );
    return 2;    # Request-URI Too Long
} elsif ( length( $session->{'buffer'}{'input'} ) >= $max_req_len ) {
    <[base.log]>->(
        0,   '[%d] maximum Request length [ %d bytes ] exceeded.',
        $id, $max_req_len - 1
    );           # Request Entity Too Large
    <[httpd.send_error_page]>->( $id, 413 );
    return 2;    # LLL: fix false positives..,
}

my $peer_fh = $session->{'handle'};

$session->{'http'} //= {
    'request' => {
        'client' => {
            'addr' => $data{'handle'}{$peer_fh}{'peerhost'},
            'port' => $data{'handle'}{$peer_fh}{'peerport'}
        },
        'req_time' => $session->{'start_time'},
        'headers'  => {}
    }
};
my $request = $session->{'http'}->{'request'};

return 0 if $session->{'buffer'}->{'input'} !~ s|^(.+\r?\n\r?\n)||s;

$session->{'http'}->{'request'}->{'data'} = $LAST_PAREN_MATCH // '';

##  calculate and store average command line length  ##
my $req_len = <[base.session.calc_cmd_stats]>->(
    $id, \$session->{'http'}->{'request'}->{'data'}
);

my $h_req = HTTP::Request->parse( $session->{'http'}->{'request'}->{'data'} );

$h_req->decode;

my $r_key;
if    ( not defined $h_req->method ) { $r_key = qw| METHOD | }
elsif ( not defined $h_req->uri
    and $h_req->method =~ m,^(GET|HEAD|POST|PUT|DELETE|OPTIONS)$, ) {
    $r_key = qw| URI |;
}
if ( defined $r_key ) {
    <[base.logs]>->(
        0,   '[%d] malformed request [ %s not defined ]',
        $id, $r_key
    );
    <[httpd.send_error_page]>->( $id, 400 );    ## Bad Request ##
    return 2;
}

if ( defined $h_req->protocol and length( $h_req->protocol ) != 8
    or $h_req->protocol !~ m|HTTP/1.[01]| ) {
    my $err_reason_str = 'protocol version not supported';
    if ( index( uc( $h_req->protocol ), qw| HTTP/ | ) == 0 ) {
        ##  HTTP Version not supported  ##
        <[httpd.send_error_page]>->( $id, 505 );
    } else {
        ## Not Implemented ##
        $err_reason_str = 'unknown protocol requested';
        <[httpd.send_error_page]>->( $id, 501, $err_reason_str );
    }
    <[base.logs]>->(
        0,   "[%d] %s [REQ:'%s']",
        $id, $err_reason_str, $h_req->protocol
    );
    return 2;
}

$request->{'method'}   = $h_req->method;
$request->{'protocol'} = $h_req->protocol;
$request->{'host'}     = lc $h_req->header('host')
    if defined $h_req->header('host');

( $request->{'uri'} = $h_req->uri // '' )
    =~ s|%([0-9a-f]{2})|chr(hex($1))|egi;

if ( index( $h_req->uri, qw| %0 |, 0 ) >= 0
    or $request->{'uri'} !~ m|^[[:print:]\\]+$| ) {  ##  backslash allowed  ##
    undef $request->{'uri'};
    my $err_reason_str = 'non printable characters in URI';
    <[base.logs]>                                    ## Bad Request ##
        ->( 0, "[%d] request 'malformed' [ %s ]", $id, $err_reason_str );
    <[httpd.send_error_page]>->( $id, 400, $err_reason_str );
    return 2;
}

<[base.logs]>->(
    2, ' < %s > %s', $request->{'client'}->{'addr'},
    $request->{'uri'}
);

$session->{'http'}->{'close'}      = 1;
$session->{'response'}->{'params'} = {};

map { $request->{'headers'}->{ lc $ARG } = $h_req->header($ARG) // '' }
    $h_req->header_field_names;

( $session->{'meta'}->{'request_path'} = $request->{'uri'} ) =~ s|[#\?].*$||;
( $session->{'meta'}->{'request_file'}
        = $session->{'meta'}->{'request_path'} ) =~ s|^.*/||;
$session->{'meta'}->{'request_host'}   = $request->{'host'};
$session->{'meta'}->{'request_method'} = $request->{'method'};
$session->{'meta'}->{'req_time'}       = $request->{'req_time'};
$session->{'meta'}->{'client_addr'}    = $request->{'client'}->{'addr'};
$session->{'meta'}->{'client_port'}    = $request->{'client'}->{'port'};

$session->{'http'}->{'close'} = 0
    if defined $request->{'headers'}->{'connection'}
    and lc( $request->{'headers'}->{'connection'} ) eq qw| keep-alive |;

if ( defined <http.handler>->{ lc $request->{'method'} } ) {
    my $handler_name = <http.handler>->{ lc $request->{'method'} };
    if ( exists $code{$handler_name} ) {
        return $code{$handler_name}->($id);
    } else {
        <[base.logs]>->(
            0,   '[%d] http [%s] handler defined + callback missing',
            $id, $request->{method}
        );
        <[httpd.send_error_page]>->( $id, 500 ); ##  Internal Server Error  ##
        return 2;
    }

} else {
    <[base.logs]>->(
        0,   '[%d] http handler not defined [%s]',
        $id, $request->{method}
    );
    <[httpd.send_error_page]>->( $id, 405 );
    return 2;    # Method Not Allowed
}

return 2;        ## <-- disconnecting client ##

#,,.,,...,,,.,,,.,,.,,,.,,..,,.,.,...,,,,,..,,..,,...,...,...,...,,,.,,.,,.,,,
#6XQT5NKAVMF5AP3OJBXOELMUGF762UHS3CEP7S4Y5LGREBREZUOKJVBYONSVTJ5MG3XUBK6OPCFDO
#\\\|YC3VVCWYQH3WE6YXELTQMLWJLLIFF7U7WSZGJ3XUP477JEQZ3L7 \ / AMOS7 \ YOURUM ::
#\[7]WCEZAIHAD74ZTLHX6CGDU6JMXYUL5PW26GEKKHOX27JT7WGZUOBI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
