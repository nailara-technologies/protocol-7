# >:]

# name = httpd.request_handler
# note : return 2 to close connection!

my $id      = $_[0]->w->data;
my $session = $data{'session'}{$id};

$session->{'http'} //= { 'request' => { 'headers' => {} } };
my $request = $session->{'http'}->{'request'};

return 0 if $session->{'buffer'}{'input'} !~ s|^(.+\r?\n\r?\n)||s;

$session->{'http'}->{'request'}->{'raw'} = $1;

my $req = HTTP::Request->parse( $session->{'http'}->{'request'}->{'raw'} );

$req->decode;

$request->{'method'} = $req->method;
$request->{'host'} = lc( $req->header('host') ) if defined $req->header('host');
$request->{'uri'}  = $req->uri->as_string;
$session->{'http'}->{'close'} = 1;

map { $request->{'headers'}->{ lc($_) } = $req->header($_) }
    $req->header_field_names;

$session->{'http'}->{'close'} = 0
    if defined $request->{'headers'}->{'connection'}
    and lc( $request->{'headers'}->{'connection'} ) eq 'keep-alive';

if ( exists <http.handler>->{ lc( $request->{'method'} ) } ) {
    my $handler_name = <http.handler>->{ lc( $request->{'method'} ) };
    if ( exists $code{$handler_name} ) {
        return $code{$handler_name}->($id);
    } else {
        <[base.log]>->(
            0,
            "[$id] http [$request->{method}] handler defined,"
                . " but callback missing!"
        );
        return 2;    # XXX: error page
    }

} else {
    <[base.log]>->( 0, "[$id] http handler not defined [$request->{method}]" );
    return 2;        # XXX: error page
}

return 2;
