## [:< ##

# name  = source.signature_valid

## input parameters ##
my $payload_sref          = shift // '';
my $signature_footer_data = shift;
my $truth_checks          = shift // {};    ##  optional  ##

map {    ## early exit without further validation ##
    if ( defined $signature_footer_data->{$ARG}
        and not $signature_footer_data->{$ARG} ) {

        return ( FALSE, { $ARG => FALSE } ) if wantarray;
        return FALSE;
    }
} qw| was-present structure-was-valid |;

map {    ## verify presence of footer data parameters ##
    if ( not defined $signature_footer_data->{$ARG} ) {
        <[base.s_warn]>->(
            "footer data key '%s' is not present <{C1}>", $ARG
        ) if not exists $signature_footer_data->{$ARG};

        return ( FALSE, { $ARG => FALSE } ) if wantarray;
        return FALSE;
    }
    } qw| was-present structure-was-valid data-reference amos-payload-checksum
    amos-iterations-remaining endline-state-encoded checksum-type bmw-chksum
    signature-type signature footer-length-found signature-footer-str |;

##  return values  ## 5 == TRUE,  0 == FALSE ##
##
my $verified_true = TRUE; ## signature valid and essential checks succeeded ##

##[ truth validation setting constants ]##
##
use constant RQ => TRUE;  ##  TRUTH REQUIRED [ essential ]  ##
use constant OP => 2;     ##  optional [ only report ]  ##

##  default enabled checks  ##
my $truth_check_settings = {

    ##  essential [ overall status false when absent ]  ##
    ##
    qw| footer-bmw          | => RQ,
    qw| entire-payload      | => RQ,
    qw| signature-as-parts  | => RQ,
    qw| signature-complete  | => RQ,
    qw| single-footer-lines | => RQ,

    qw| embedded-code-style | => OP,    ##  optional [ only report ]  ##
    qw| footer-complete     | => OP,    ##  optional [ only report ]  ##
};

##  returned as second [ in list context ]  ##
my $truth_status_report = { qw| bmw-chksum-matches | => FALSE };

warn 'expecting scalar reference to payload <{C1}>' and return undef
    if ref $payload_sref ne qw| SCALAR |;
warn 'payload data not defined <{C1}>' if not defined $payload_sref->$*;
warn 'footer data is not a hash reference <{C1}>'
    and return undef
    if defined $signature_footer_data
    and ref $signature_footer_data ne qw| HASH |;
warn 'truth check set-up is not a hash ref. <{C1}>'
    and return undef
    if defined $truth_checks
    and ref $truth_checks ne qw| HASH |;

##  setting option defaults  ##
while ( my ( $param_key, $set ) = each $truth_check_settings->%* ) {
    $truth_checks->{$param_key} //= $set;
}

my $ELFmode         = 7;   ###  ELF chksum mode for AMOS-chksum generation  ##
my @t_elf_modes     = qw| 4 7 |;    ## elf modes for truth assertion ##
my $footer_bit_size = <source.chksum_bitsize>; ## footer BMW bits [ 384 ] ##
my $AMOS_bitsize    = 512;                     ## AMOS checksum BMW bitsize ##

my $footer_as_string = $signature_footer_data->{'signature-footer-str'};

##  strip signature if not done already  ##
if ( not defined $signature_footer_data
    or defined $footer_as_string
    and $payload_sref->$* =~ m|$footer_as_string$| ) {

    $signature_footer_data    ##  endline state is restored during strip  ##
        = <[source.extract_sig_body]>->( $payload_sref, qw| strip | );
}

## no valid signature footer was found ##
##
if ( not $signature_footer_data->{'was-present'} ) {
    return ( FALSE, { 'footer-was-present' => FALSE } ) if wantarray;
    return FALSE;
} elsif ( not $signature_footer_data->{'structure-was-valid'} ) {
    return ( FALSE, { 'footer-structure-was-valid' => FALSE } ) if wantarray;
    return FALSE;
}

my $found_footer_length = $signature_footer_data->{'footer-length-found'};
my $footer_bmw          = $signature_footer_data->{'data-chksum'};

##  initialize elf start chksum values  ##
my $elf_chksum = {
    qw|   entire-payload     | => { map { $ARG => 0 } @t_elf_modes },
    qw| embedded-code-style  | => { map { $ARG => 0 } @t_elf_modes }
};

my $data_pos     = 0;
my $read_length  = 4282;
my $content_size = length $payload_sref->$*;

##  array refs [ <chksum_name>, [chksum_param[s]] ],
##
my $chksum_parameters = [];
##
## my $chksum_parameters = shift // [];

my @embedded_params;

##  embedded code style syntax  ##
##
@embedded_params = map {    ##  [ embedded code style ] line prefix  ##
    [ qw| ELF-7 |, $code{'base.parser.chk-sum.embedded-code-style'}, $ARG ]
    } @t_elf_modes
    if $truth_check_settings->{'embedded-code-style'};
##

$chksum_parameters = [      ##  data checksum set-up  ##

    ##  FOOTER ELF CHKSUM  ## [ 4 7 ]
    ( map { [ qw| ELF-7 |, $ARG ] } @t_elf_modes ),

    [qw | BMW 384 |],       ##  FOOTER BMW CHKSUM  ## [ 384 ]

    [ qw| ELF-7 |, $ELFmode ],    ##  AMOS7 ELF CHKSUM  ## [ 7 ]
    [qw | BMW-bin 512 |],         ##  AMOS7 BMW CHKSUM  ## [ 512 ]

    @embedded_params              ##  embedded code style syntax  ##
];
##
###

my @chksum_results = <[base.chk-sum.from_substr]>->(
    $payload_sref, $data_pos, $content_size, $chksum_parameters, $read_length
);

##  removing BMW ctx objects  ##
##
my $BMW_objects_ref = pop @chksum_results;
my $bmw_start_ctx   = shift $BMW_objects_ref->@*;    ##[ BMW 384 ]##
my $bmw_amos_ctx    = shift $BMW_objects_ref->@*;    ##[  BMW 512  ]##

##  FOOTER ELF CHKSUM  ## [ 4 7 ]
##
map { $elf_chksum->{'entire-payload'}->{$ARG} = shift @chksum_results }
    @t_elf_modes;

shift @chksum_results;    ##  strip footer BMW checksum  ##
shift @chksum_results;    ##  stripping amos-ELF checksum  ##

##  AMOS7 BMW CHKSUM  ## [ 512 ]
my $amos_digest_bin = shift @chksum_results;

##  embedded code style syntax  ##
#
map { $elf_chksum->{'embedded-code-style'}->{$ARG} = shift @chksum_results }
    @t_elf_modes
    if $truth_check_settings->{'embedded-code-style'};

##  validating payload + footer and embedded code style elf  ##
#
foreach my $type (qw| entire-payload embedded-code-style |) {

    if ( $truth_check_settings->{$type} ) {    ##  full payload true ?  ##
        $truth_status_report->{$type} = {
            map {

                my $test_elf = $elf_chksum->{$type}->{$ARG};

                ##  add footer  ##
                $test_elf = <[chk-sum.elf]>->(
                    \$signature_footer_data->{'signature-footer-str'},
                    $elf_chksum->{$type}->{$ARG}, $ARG
                ) if $type eq qw| entire-payload |;

                $ARG => AMOS7::Assert::Truth::true_int($test_elf)

            } @t_elf_modes
        };

        next if $truth_check_settings->{$type} < RQ;    ##  not essential  ##

        foreach my $__elfmode (@t_elf_modes) {
            if ( not $truth_status_report->{$type}->{$__elfmode} ) {
                $verified_true = FALSE;                 ##  overall status  ##
                last;
            }
        }
    }
}

my $AMOS_B32 = AMOS7::CHKSUM::amos_chksum(   ##[  AMOS7-elf chksum mode 7  ]##
    {   qw| elf-shift-bits | => 13,
        qw| elf-modes      | => [ 4, 7 ],
        qw| elf_checksum   | => $elf_chksum->{'entire-payload'}->{$ELFmode},
        qw| BMW_checksum   | => $amos_digest_bin    ##  512 bits [bin]  ##
    }
);

if ( $AMOS_B32 eq $signature_footer_data->{'amos-payload-checksum'} ) {
    $truth_status_report->{'AMOS-chksum-matches'} = TRUE;    ## true ##
} else {
    $truth_status_report->{'AMOS-chksum-matches'} = FALSE;    ##  false  ##
    $verified_true = FALSE;                                   ##  false  ##
    return ( $verified_true, $truth_status_report ) if wantarray;
    return $verified_true;    ## end assertion ##
}

## add start line + # to checksum ##
$bmw_start_ctx->add( sprintf '%s#',
    $signature_footer_data->{'footer-start-line'} );

##  calculating footer BMW checksum  ##
my $footer_bmw_bin = $bmw_start_ctx->digest;
$footer_bmw = encode_b32r($footer_bmw_bin);

if ( $footer_bmw eq $signature_footer_data->{'bmw-chksum'} ) {
    $truth_status_report->{'bmw-chksum-matches'} = TRUE;    ## true ##
} else {
    $truth_status_report->{'bmw-chksum-matches'} = FALSE;    ##  false  ##
    $verified_true = FALSE;                                  ##  false  ##
    return ( $verified_true, $truth_status_report ) if wantarray;
    return $verified_true;    ## end assertion ##
}

##  checking signature validity  ##
#                          ##  up to signature string  ##
my $signed_data_str = substr( $footer_as_string, 0, 163 );
my $signature_str   = $signature_footer_data->{'signature'};

if ( <[crypt.C25519.verify_sign]>->( \$signed_data_str, \$signature_str ) ) {
    $truth_status_report->{'signature-is-valid'} = TRUE;    ## true ##
} else {
    $truth_status_report->{'signature-is-valid'} = FALSE;    ##  false  ##
    $verified_true = FALSE;                                  ##  false  ##
    return ( $verified_true, $truth_status_report ) if wantarray;
    return $verified_true;    ## end assertion ##
}

## checking footer as block ##
#
foreach my $type (qw| footer-complete |) {    ## [..,]

    if ( $truth_check_settings->{$type} ) {    ##  elf-checksums true ?  ##

        $truth_status_report->{$type} = {
            map {
                $ARG => AMOS7::Assert::Truth::true_int(
                    $elf_chksum->{$type}->{$ARG} //= FALSE )
            } @t_elf_modes
        };

        map {
            $verified_true = FALSE    ##  overall status  ##
                if $verified_true
                and not $truth_status_report->{$type}->{$ARG}
            } @t_elf_modes
            if $truth_check_settings->{$type} == RQ;    ##  essential  ##
    }
}

##  returning report  ##
##
return ( $verified_true, $truth_status_report ) if wantarray;
return $verified_true;

#,,,,,,..,.,.,.,.,,,.,,,,,..,,,,,,...,...,,,.,..,,...,...,,.,,,,,,,..,..,,,,.,
#ZVVBQ2JY73PD4ILAO4T5JVXJRBBAQT37GJBYHADXLOBQ7EBCCNCRYVQP2VIWIBDKBHXMDTYWRQ6UU
#\\\|WIT7DIDYRSYPJGSWMP6WOUL7DMCTVO4GP5SYRO5BJKXJAVRR5RQ \ / AMOS7 \ YOURUM ::
#\[7]3XHF24DZKMFG2ULBSBEWTYAGOLALJ6DNW3N4PFEN6GCESNDV2UDA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
