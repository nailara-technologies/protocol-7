## [:< ##

# name  = p7-log.add_line
# descr = add a log entry to specified log file

my ( $log_name, $log_msg_ref ) = @ARG;

my $log_file_encoding = <p7-log.log-file-encoding> // qw| :encoding(UTF-8) |;

## validating input params ##
##
return ( 0, 'no log file specified' )
    if not defined $log_name or !length($log_name);

return ( 0, sprintf( "log file name '%s' not valid", $log_name ) )
    if $log_name =~ m|^\.|;

return ( 0,
    sprintf( "not valid characters in log file name '%s'", $log_name ) )
    if $log_name !~ m|^[\w\d\-\.\_\ ]+$|;

return ( 0, 'empty log message' )
    if not defined $$log_msg_ref or not length $$log_msg_ref;

$$log_msg_ref =~ s|^0 ||;    # cube-zenka source sid
$$log_msg_ref .= "\n" if $$log_msg_ref !~ m|\n$|;

my $log_path = <log.protocol_7.path>;

my $log_file .= sprintf qw| %s.log |, $log_name;
my $file_create_mode = 0640;

<log.files>->{$log_name}
    //= { qw| fh | => undef, qw| locked | => FALSE, qw| timer | => undef };

# check log directory
if ( not -d $log_path ) {
    <[base.logs]>->(
        0, "log directory '%s' disappeared, recreating..,", $log_path
    );
    my ( $ok, $err_msg )    # LLL: use File::Path::make_path() ?
        = <[file.make_path]>->( $log_path, <log.protocol_7.dir_mask> );
    return ( 0, $err_msg ) if !$ok;
    my ( undef, undef, $uid, $gid ) = getpwnam(<log.protocol_7.user>)
        or return ( 0, "user '<log.protocol_7.user>' not in passwd file" );
    <log.protocol_7.path> =~ s|/+$||;
    chown( $uid, $gid, <log.protocol_7.path> )
        or return ( 0, sprintf 'chown[%s] : %s',
        <log.protocol_7.path>, <[base.str.os_err]> );
    <log.files>->{$log_name} = { qw| fh | => undef, qw| locked | => FALSE };
}

# manage file handle and locking
my $log_fh;
if ( not <log.files>->{$log_name}->{'locked'} ) {
    <[base.logs]>->( 2, "opening log '%s'..,", $log_name );
    open(
        $log_fh,
        sprintf( qw| >>%s |, $log_file_encoding ),
        catfile( $log_path, $log_file )
        )
        or return ( 0, sprintf 'cannot open logfile [ %s ]',
        <[base.str.os_err]> );
    flock( $log_fh, 2 )    # LOCK_EX
        or return ( 0,
        sprintf( 'cannot lock logfile [ %s ]', <[base.str.os_err]> ) );
    <log.files>->{$log_name}->{'locked'} = TRUE;
    <log.files>->{$log_name}->{'fh'}     = $log_fh;
    <log.files>->{$log_name}->{'timer'}  = <[event.add_timer]>->(
        {   'after'   => 1.2,
            'handler' => qw| p7-log.handler.close_log |,
            'data'    => $log_name
        }
    );
    <[base.logs]>->( 2, "got lock for '%s'.,", $log_name );
} else {
    $log_fh = <log.files>->{$log_name}->{'fh'};
}

print {$log_fh} $$log_msg_ref;

return TRUE;

#,,.,,...,,.,,,,,,..,,...,,.,,,.,,.,,,..,,,.,,..,,...,.,.,..,,,,,,.,,,,,.,,,,,
#IT5TXKG4KEFSLV3ULZUHICUEDK7DBRN55A5LLFD2K2WPZ2N2R2H4OTPWXVCOC7NGOWJQPBYGK4ZWC
#\\\|UXACSV7A2U3JUX5EHBGGKFIIC62OPDI2OZCPK7BIMGAQN3WCSHF \ / AMOS7 \ YOURUM ::
#\[7]EWCFAY6IJ4GPMLOVCNG7I7ZFKGYE2OHAMBLMMDL3JU2625YV7SCQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
