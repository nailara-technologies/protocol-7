## [:< ##

# name  = index.gen_path

my $s_ref = shift;    ##[  string or scalar reference  ]##

my @path_structure;
my $minimum_subdir_count  = 4;
my @subdir_modes          = qw| 5 7 |;
my @truth_elf_mode_filter = qw| 7 9 |;

$s_ref = \"$s_ref" if ref($s_ref) eq '';

while ( !@path_structure ) {
    my @checksums = map { <[chk-sum.amos]>->( $s_ref, $ARG ) } @subdir_modes;

##                                                                     ##
##   splitting amos-chksum entropy into anti-entropic directory tree   ##
##                                                                     ##

    my %checksum_map;
    for my $offset ( 0 .. 6 ) {    ##  create amos chksum character matrix  ##
        foreach my $checksum (@checksums) {
            ++$checksum_map{$offset}{ substr( $checksum, $offset, 1 ) };
        }
    }
    for my $offset ( 0 .. 6 ) {    ##  iterating through checksum width  ##
        my $dir_name = join(
            '',
            sort { $checksum_map{$offset}{$b} <=> $checksum_map{$offset}{$a} }
                reverse sort keys %{ $checksum_map{$offset} }
        );
        push( @path_structure, $dir_name )
            if    ## truth filtering names ##
            is_true( $dir_name, join ' ', @truth_elf_mode_filter );
    }
    if ( @path_structure < $minimum_subdir_count ) {
        my $path_reseed = join( '', reverse sort ( @checksums, $$s_ref ) );
        $s_ref          = \"$path_reseed";
        @path_structure = ();
    }
}

return join qw| / |, @path_structure;

#,,.,,,..,,,.,,..,..,,,.,,,,.,..,,...,,,,,..,,..,,...,...,..,,,..,,,.,,.,,,,.,
#342G3J6UDDYVMRLUDWI3UQ5OYFOGXFGADBE6PCPL42XWPV7VXZLU2FFWXM4ZAAL34ICCAKTH7AKNO
#\\\|NLOVLHAMZIL66JCAYXV4OZSM2QL4Z2ZBIT7NKJDUUVRNQON33FN \ / AMOS7 \ YOURUM ::
#\[7]RYFDXUUWBVJXRBFLNSSFOGZOKFDZ6R3XWKEY42RIRASS26V3VCBQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
