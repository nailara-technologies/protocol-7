## >:] ##

# name  = base.cmd.reload
# param = [keyword]
# descr = reload or reinit config and source code
my @keywords = qw|  config  perl-mods  source  plugins  init  all  |;

my $arg = $call->{'args'} // qw| all |; ## [LLL] enable multiple keyword param
my $id  = $call->{'session_id'};

##  implicit reload keyword alias  ##
##
$arg = qw| perl-mods | if $arg eq qw| p-mods |;   ## reloading perl modules ##

my ( $success, $output ) = ( 0, '' );

<base.devmod.keep_on_reload>     //= 0; # <-- dbg. module persistence override
<base.reload.success.clean-code> //= 5; # <-- delete $data{'code'} [ success ]

my $s_str = ' ' x 5;
$reply->{'data'} = ":\n\n::\n";         # <-- header
my $reply_footer  = "::\n\n:\n";        # <-- footer
my $keyword_match = 0;

<system.reload.mode> = $arg; ## <-- <system.reload> deleted after completition

if ( $arg eq qw| config | or $arg eq qw| all | ) {
    $keyword_match = 5;      ## true ##
    delete <access.cmd.usr>;
    <[base.logs]>->( '[%d] < reload config >', $id );
    if (<[base.reload_config]>) {
        $reply->{'data'} .= sprintf "%s reload config  [ success ]\n", $s_str;
    } else {
        $reply->{'data'} .= sprintf "%s reload config  [  error  ]\n", $s_str;
    }
    <[base.parser.access_conf]> if $arg eq qw| config |;
    $success = 5;            ## true ##
}
if ( $arg eq qw| perl-mods | or $arg eq qw| all | ) {
    $keyword_match = 5;      ## true ##
    <[base.logs]>->( '[%d] < reload perl-mods >', $id );
    eval { Module::Refresh->refresh };
    if ( not length $EVAL_ERROR ) {
        $success = 5;        ## true ##
        $reply->{'data'} .= sprintf "%s reload p-mods  [ success ]\n", $s_str;
    } else {
        $reply->{'data'} .= sprintf "%s reload p-mods  [  error  ]\n", $s_str;
        $success = 0;        ## false ##
    }
}
if ( $arg eq qw| source | or $arg eq qw| all | ) {

    my @reload_modules = <[base.clear_p7_mods]>;
    my %mod            = map { $ARG => 5 } @reload_modules;    ## true ##

    $keyword_match = 5;                                        ## true ##
    delete <base.commands>;
    delete <base.subroutines>;
    <base.modules.load_errors> = 0;
    $data{'callbacks'}{'end_code'} = [];

    <[base.logs]>->( '[%d] < reload source code >', $id );

    if ( not <base.devmod.keep_on_reload> and not exists $mod{'devmod'} ) {
        <[base.log]>->( 0, '[reload] .. removing devmod module [mem] .,' )
            if ref( $code{'devmod.dump'} ) eq qw| CODE |;
        <[base.purge_code]>->('devmod');    # [LLL] create unload mechanism
    } elsif (<base.devmod.keep_on_reload>) {
        <[base.log]>->( 0, '<< keeping devmod module enabled >>' );
        $mod{'devmod'} = 1;
    } else {
        <[base.log]>->( 0, '<< devmod module enabled in configuration >>' );
    }

    map { delete $data{'base'}->{$ARG} } (qw|  cmd  console  overwritten  |);

    my $error = <[base.load_modules]>->(@reload_modules);
    if ( not $error and not <base.modules.load_errors> ) {
        $reply->{'data'} .= "$s_str reload source  [ success ]\n";
        $success = 5;    ## true ##
    } else {
        $reply->{'data'} .= "$s_str reload source  [  error  ]\n";
        $success = 0;    ## false ##
    }

    ## source version ##
    my $old_version = <protocol-7.src-ver> // qw| UNKNOWN |;

    my $s_strrc_version_file
        = catfile( $data{'system'}{'conf_path'}, qw| protocol-7.src-ver | );
    <protocol-7.src-ver>
        = <[base.read_from_version_file]>->($s_strrc_version_file);

    <[base.logs]>->( 0, 'NEW SOURCE CODE [ %s ]', <protocol-7.src-ver> )
        if <protocol-7.src-ver> ne $old_version;

    ## release version ##
    my $old_release = <protocol-7.rel-ver> // qw| UNKNOWN |;

    my $rel_version_file
        = catfile( $data{'system'}{'conf_path'}, qw| protocol-7.rel-ver | );
    <protocol-7.rel-ver>
        = <[base.read_from_version_file]>->($rel_version_file);

    <[base.logs]>->(
        0,            'RELEASE VERSION : %s --> %s',
        $old_release, <protocol-7.rel-ver>
    ) if <protocol-7.rel-ver> ne $old_release;
}
if ( $arg eq qw| plugins | or $arg eq qw| all | ) {
    $keyword_match = 5;    ## true ##
    <[base.logs]>->( '[%d] < reload plugins >', $id );
    if (<[base.reload_plugins]>) {
        $reply->{'data'} .= sprintf "%s plugin reload  [ success ]\n", $s_str;
        $success = 5;      ## true ##
    } else {
        $reply->{'data'} .= sprintf "%s plugin reload  [  error  ]\n", $s_str;
        $success = 0;      ## false ##
    }
}
if ( $arg eq qw| init | or $arg eq qw| all | ) {
    $keyword_match = 5;    ## true ##

    delete <base.templates.sprintf>;   ## require automatic reload on 'src' ##

    <[base.logs]>->( '[%d] < source code reinit >', $id );

    my $modules_init_success = <[base.init_modules]>;

    ## reports calls to undefined subroutine names ##
    <[base.referenced_subroutines.clear_from_disk]>
        if $arg eq qw| init | or $arg eq qw| all |;

    ##  if above call leaves entries, assume not defined or error state  ##
    $modules_init_success = 0
        if <[base.is_defined_recursive]>->(qw| base.subroutines.referenced |);

    if ($modules_init_success) {
        $reply->{'data'} .= "$s_str reinit source  [ success ]\n";
        $success = 5;    ## true ##
    } else {
        $reply->{'data'} .= "$s_str reinit source  [  error  ]\n";
        $success = 0;    ## false ##
    }
}
if ( not $keyword_match ) {
    <[base.logs]>->(
        0,   "[%d] unknown reload keyword '%s' called.,",
        $id, $arg
    );
    return {
        'mode' => qw| false |,
        'data' => sprintf( "unknown reload keyword '%s'", $arg )
    };
}

if ($success) {
    <[base.logs]>->( "[%s] .. reloading complete =)", $id );
    if (<base.reload.success.clean-code>) {
        <[base.log]>->( 2, ":.. cleaning up 'code' namespace .," );
        delete $data{'code'};
    }
} else {
    <[base.logs]>->(
        0,   '[%d] reloading [%s] was not successful `:|',
        $id, $arg
    );
}

delete <system.reload>;    ## completed ##

$reply->{'mode'} = qw| data |;
$reply->{'data'} .= $reply_footer;

#,,..,.,,,,..,,..,,,.,.,,,,,,,,.,,,,,,,.,,,.,,..,,...,...,,.,,..,,,,.,.,.,...,
#FSN4UYSOZN6QMUNCF5GRKNFKO6JRJQE474B6X4DNJT3CV2UGKDWJTS2Z7S4GJSUYPHVGEN34JNBN4
#\\\|P6DR4YTDRLKIPEZQUQ5IRQRTNJ5GKH7F57VTA7BKVR53WCMABUW \ / AMOS7 \ YOURUM ::
#\[7]XYU2OP2ZUP6EK5PFOEPLYIAPK4YYSBVGC6C7EOTMVQR2MFEOHUCA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
