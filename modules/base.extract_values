## [:< ##

# name = base.extract_values
# todo = clean up implementation [ LLL ]

my $entries        = 0;
my $conf_key       = shift;         ## <-- swap parameters  [LLL]
my $file_ref       = shift // [];
my $resolve_values = ( @ARG and $ARG[0] eq qw| resolved | ) ? 5 : 0;

if ( not defined $conf_key ) {
    warn 'expected defined cfg key param <{C1}>';
    return undef;
} elsif ( ref $file_ref ne qw| ARRAY | ) {
    warn 'expected array ref to configuration <{C1}>';
    return undef;
}

##  use 'base.validate.data_key_syntax'  ##  [LLL]

if ( defined $conf_key and length $conf_key and $conf_key !~ m|[{}]| ) {
    $conf_key =~ s|'||g;
    $conf_key =~ s|\.|'}{'|g;
    $conf_key = sprintf qw| {'%s'} |, $conf_key;
} elsif ( defined $conf_key and length $conf_key ) {
    <[base.s_warn]>->(
        'not allowed characters in config key [{}] [ %s ] <{C1}>', $conf_key
    );
    return undef;
}
<base.parser.config.errors> //= 0;
my $reload_mode = <base.parser.config.reloading> // 0;
my $last_line   = '';
foreach my $conf_line ( $file_ref->@* ) {
    $conf_line =~ s{[ \t]*#.*|[ \t]*\.:.*| +$|[\r\n\t]+}{}g;
    if ( $conf_line =~ s|\\ *$|| ) {
        $last_line .= $conf_line;
        next;
    } elsif ( length $last_line ) {
        $conf_line =~ s|^[ \t]+||;
        $conf_line = join '', $last_line, $conf_line;
        $last_line = '';
    }
    $conf_line =~ s|(^[^=]+=)[ \t]+|$LAST_PAREN_MATCH|;
    ( my $name, my $value ) = split( qw| = |, $conf_line );
    if ( defined $value ) {
        $name  =~ s|[ \t]+||g;
        $name  =~ s|\.|'}{'|g;
        $value =~ s|'||g;
        if ($resolve_values) {
            while ( $value =~ m{<([^>]+)>} ) {
                my $key                   = ${^CAPTURE}[0];
                my $resolved_config_value = '';

                my $resolved_value_ref = <[base.resolve_key]>->($key);
                if ( defined $resolved_value_ref ) {

                    ## implement encoded p7-reference results ##  [ LLL ]

                    $resolved_config_value = $resolved_value_ref->{'r-data'}
                        if not length $resolved_value_ref->{'r-type'}
                        and defined $resolved_value_ref->{'r-data'};
                }
                ##  also implement [UNDEF] zenka code  ## [ LLL ]
                $value =~ s|<$key>|$resolved_config_value|g;
            }
        }

        ## use base.cmd_set for resolution \ defining ##  [LLL]

        my $conf_hash = sprintf qw| $data%s{'%s'} |, $conf_key, $name;

      # do not overwrite results of init commands with raw nailara cmd strings
        next if $reload_mode and $value =~ m|^\[[^\]]+\]|;

        my $cmd = sprintf qw| %s='%s' |, $conf_hash, $value;

        <[base.log]>->( 1, $cmd )  ##  devmod output of prepared perl code  ##
            if defined <system.verbosity.console>
            and <system.verbosity.console> > 2;

        ##  replace eval with base.set_key where applicable  ##

        eval $cmd;                 ##  use 'Safe' module eval ?  ##  [LLL]

        if ( length $EVAL_ERROR ) {
            <base.parser.config.errors>++;
            <[base.logs]>->(
                0,    "<< error during config parsing : ['%s'] %s >>",
                $cmd, <[base.str.eval_error]>
            );
            undef $EVAL_ERROR;
        } else {
            $entries++;
        }
    }
}
return $entries;

#,,..,.,.,.,,,,,,,,..,..,,,..,.,,,.,.,.,.,...,..,,...,...,.,.,..,,,,.,..,,,,,,
#KV6TJ4WHNB57ERFXR3LHZBEB3JWON3M7W2W3MFUMFPSZAMEIYK2LASOE5R7MBR64TMCLAMXNIRKOI
#\\\|R5NHS6NAKKRVGVZF54ATAIORGDVCBW7AJVFWV7VDJPTUMVCI46Y \ / AMOS7 \ YOURUM ::
#\[7]IKAK4X6ZUED245MT5UKS4XTBYJ2JLCB5VNIKU6SEIRLJBMEPBKAA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
