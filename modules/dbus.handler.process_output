## [:< ##

# name  = dbus.handler.process_output
# descr = reads output from dbus process

<v7.patterns.zenka_output> //= {};

my $event   = shift->w;
my $read_fh = $event->fd;
my $server  = $event->data;
my $bin     = $server->{'bin'};
my $pid     = $server->{'pid'};

<dbus.output_buffer> //= '';

my $read_bytes
    = <[base.s_read]>->( $read_fh, \$data{'dbus'}{'output_buffer'}, 4096 );
if ( $read_bytes < 1 ) {    ## [ assumed filehandle exception ] ##
    $event->cancel;
    close($read_fh);
    <[base.logs]>->( '%s [PID:%d] output filehandle closed.', $bin, $pid );
    kill( 9, $pid );        ## making sure it is gone ##
    my $err_str
        = defined <dbus.first_error>
        ? ': "' . <dbus.first_error> . '"'
        : ' unexpectedly! (reason unknown)';
    <[base.logs]>->( 0, '%s terminated%s', $bin, $err_str );
    <[base.log]>->( 1, "done." );
    exit(2);
}

while ( <dbus.output_buffer> =~ s|^([^\n]*)\n||s ) {
    my $output_line = $LAST_PAREN_MATCH;
    $output_line =~ s|\r||sg;
    if ( $output_line =~ m|^(unix:abstract=([^\n,]+),[^\n]+)$| ) {
        <dbus.socket_addr> = ${^CAPTURE}[0];
        <dbus.socket_path> = ${^CAPTURE}[1];
        my $privs_user = <dbus.privs_user>;
        <[base.logs]>->(
            ": socket path : %s [owner:'%s']",
            ${^CAPTURE}[1], $privs_user
        );
        <[base.async.get_session_id]>;
    } else {
        my $log_level = $output_line =~ m{ctivat(ing|ed) service} ? 2 : 0;
        <[base.logs]>->( $log_level, '< %s > %s', $bin, $output_line );
    }
}

#,,,.,.,.,,.,,,,,,,.,,,..,,.,,..,,..,,,,.,,,,,..,,...,...,..,,..,,.,,,.,.,.,,,
#YYBCCFEZKRFUJ3ZXBFP6P5T4T3X275PYT6WB5O7D7764FO6RDKCA3RGTHFOPLH4KV3JL6KD6BMP2G
#\\\|4J6T6Y7NOZPFZ62JDJPQMMLDBW5FYUDBPK6C657MXOQEKLAXAOY \ / AMOS7 \ YOURUM ::
#\[7]YHTJLMVLWI4YHEBNWDNPZPVV3OISUWO3UQDRYSOS7HUAP4YZ22AI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
