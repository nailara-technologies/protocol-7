## [:< ##

# name = httpd.handler.template_reply

my $reply = shift;
return 'reply href expected' if not defined $reply or ref($reply) ne qw|HASH|;
my $sid      = $reply->{'params'}->{'client_sid'};
my $session  = $data{'session'}{$sid};
my $args_str = $reply->{'call_args'}->{'args'};

if ( $reply->{'cmd'} eq qw| FALSE | ) {

    if ( $args_str =~ m|^\d{3}$| ) {
        $session->{'buffer'}->{'output'}
            .= <[httpd.send_error_page]>->( $sid, $args_str )
            if $args_str > 0;    # 000 == drop connection, no reply
        delete $session->{'content'};
        $session->{'flush_shutdown'} = 1;
        return;

    } elsif ( defined $session->{'content'}->{'type'}
        and $session->{'content'}->{'type'} =~ m|html| ) {
        $args_str = sprintf( '<b style="color:#C58D07">%s</b>', $args_str );
    }
}

my $content_part = $reply->{'params'}->{'part'};

if ( $reply->{'cmd'} eq qw| FALSE | ) {
    <[httpd.send_error_page]>->( $sid, 500 );
    delete $session->{'content'};
    $session->{'flush_shutdown'} = 1;
    return;

} elsif ( $reply->{'cmd'} eq qw| SIZE | ) {
    $content_part->{'data'} = \$reply->{'data'};
} else {
    $content_part->{'data'} = \$args_str;
}

my $done_cmd = delete $content_part->{'command'};
delete $content_part->{'params'};

my $cmd_count = 0;
map { $cmd_count++ if defined $ARG->{'command'} }
    @{ $session->{'content'}->{'sequence'} };

if ($cmd_count) {
    <[base.log]>
        ->( 1, "['$done_cmd'] segment complete, $cmd_count to go..," );
} else {

    my $content_length = 0;
    map { $content_length += length( ${ $ARG->{'data'} } ) }
        @{ $session->{'content'}->{'sequence'} };

    my $s = <[base.cnt_s]>->($cmd_count);
    <[base.log]>->(
        1,
        "content segments complete, returning page [${content_length} bytes]"
    );

    $session->{'buffer'}->{'output'} .= <[httpd.new_header]>->(
        200,
        {   'Content-Length' => $content_length,
            'Content-Type'   => $session->{'content'}->{'type'},
            'Last-Modified'  => $session->{'content'}->{'date'},
            'Connection'     => $session->{'http'}->{'close'}
            ? qw| close |
            : qw| keep-alive |
        }
        )
        . join( '',
        map { ${ $ARG->{'data'} } }
            @{ $session->{'content'}->{'sequence'} } );
    delete $session->{'content'};
    $session->{'flush_shutdown'} = 1;
}

#,,.,,,.,,.,,,.,.,.,.,,.,,,..,.,.,,,,,,.,,,,.,..,,...,..,,,,.,...,,..,.,.,,,.,
#3UZVXMKOX56B2XVL4YP7AB5MSVO7P6OL2YTSMYPEKMMOSSAQXVOONDM5QWNUAA5W34N542SLBBFGC
#\\\|LNCZGC4VWMLRWRULQUTF7D74SZKI6UHTV6R5K5S3HEWRZEB6NCW \ / AMOS7 \ YOURUM ::
#\[7]URUBBCLLTXSAT265WTROHMLXFQ7QXQJIPVHHHHQS57HX5TPTXWAI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
