# >:]

# name = browser.base.calc_zoom_level

my ($local_session_id) = keys( %{<user.core.session>} );
<browser.zoom_level> //= 1;

if ( not defined <browser.auto_zoom> or !<browser.auto_zoom> ) {
    <[base.log]>->(
        1,
        sprintf( "auto zoom is disabled.. using default value [%.2f]",
            <browser.zoom_level> )
    );
    return;
} else {
    <[base.log]>->( 1, "auto zoom is enabled.." );
}

my $cmd_id = <[base.gen_id]>->( $data{'route'} );

my $core_fh = $data{'session'}{$local_session_id}{'handle'};
<[net.out]>->( $core_fh, "($cmd_id)xserver.get_screen_size\n" );

my $reply_string;
my $matched_reply = 0;
while ( !$matched_reply ) {
    $reply_string = <$core_fh>;
    $matched_reply = 1 if $reply_string =~ /^\($cmd_id\)N?ACK /;
    if ( !$matched_reply ) {
        my $reply_cmd_id = $reply_string =~ /^\((\d+)\)(\S+)/ ? "($1)" : '';
        <[net.out]>->( $core_fh, "${reply_cmd_id}NACK not initialized yet!\n" )
            if uc($2) ne $2;
    }
}

if ( $reply_string =~ /^\($cmd_id\)ACK (\d+) (\d+)\n$/ ) {
    <x11.screen_width>  = $1;
    <x11.screen_height> = $2;
    my $base_width = 1920;
    my $calc_width
        = <x11.screen_width> > <x11.screen_height>
        ? <x11.screen_width>
        : <x11.screen_height>;
    <browser.zoom_level> = sprintf( "%.3f",
        ( <browser.zoom_level> / $base_width ) * $calc_width );
    my $m_str = '';
    if ( defined <browser.min_zoom> ) {
        <browser.zoom_level> = <browser.min_zoom>
            if <browser.zoom_level> < <browser.min_zoom>;
        $m_str = ' (configured minimum value)'
            if <browser.zoom_level> == <browser.min_zoom>;
    }
    <[base.log]>->(
        1, ": recalulated zoom level = " . <browser.zoom_level> . $m_str
    );
    return <browser.zoom_level>;
} else {
    <[base.log]>->(
        0,
        "protocol error (unexpected reply from xserver agent)"
            . " ['$reply_string']"
    );
    return undef;
}
