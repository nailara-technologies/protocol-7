# >:]

# name = mpv.handler.event.property-change.height

my $params = shift;

<mpv.current.video_height> = $params->{'data'};

my $video_width  = <mpv.current.video_width>;
my $video_height = <mpv.current.video_height>;

if ( <mpv.autorescale> and defined $video_width and defined $video_height ) {

    my $window_width  = <mpv.current.window_width>;
    my $window_height = <mpv.current.window_height>;
    my $box_width     = <mpv.current.box_width>;
    my $box_height    = <mpv.current.box_height>;

    if ( defined <mpv.current.path>
        and not exists <mpv.file_map.rescaled>->{<mpv.current.path>}
        or defined <mpv.current.path>
        and !-f <mpv.file_map.rescaled>->{<mpv.current.path>}
        or defined <mpv.current.path> and !-f <mpv.current.path> ) {

        my $target_width
            = $window_width > $video_width ? $video_width : $window_width;
        $target_width = <mpv.rescale_max_width>
            if defined <mpv.rescale_max_width>
            and $target_width > <mpv.rescale_max_width>;

        while ( ( $video_height / $video_width * $target_width ) % 2
            or $target_width % 16 ) {
            $target_width--;
        }

        <[base.log]>->(
            1,
            "autorescaling video ( ${video_width}x$video_height"
                . " => target_width: $target_width )"
        );

        <[base.proto.nailara.command.send.local]>->(
            {   'command'   => 'core.ffmpeg.rescale_video',
                'call_args' => {
                    'args' => join( ' ',
                        <mpv.current.path>, "$target_width",
                        "${box_width}x$box_height" )
                },
                'reply' => {
                    'handler' => 'mpv.handler.rescale_video_reply',
                    'params'  => { 'orig_path' => <mpv.current.path> }
                }
            }
        );
    }
}
