# >:]

# name = mpv.handler.event.property-change.height

my $params = shift;

<mpv.current.video_height> = $params->{'data'};

my $current_path = <mpv.current.path>;
my $video_width  = <mpv.current.video_width>;
my $video_height = <mpv.current.video_height>;

<mpv.converting> //= {};

if (    <mpv.autorescale>
    and defined $video_width
    and defined $video_height
    and defined $current_path
    and not exists <mpv.file_map.rescaled.source>->{$current_path} ) {
    my $target_path;
    my $window_width  = <mpv.current.window_width>;
    my $window_height = <mpv.current.window_height>;
    my $box_width     = <mpv.current.box_width>;
    my $box_height    = <mpv.current.box_height>;
    my $box_size      = "${box_width}x$box_height";
    $target_path = <mpv.file_map.rescaled.target>->{$current_path}
        if defined <mpv.file_map.rescaled.target>->{$current_path};

    if ( not defined $target_path or !-f $target_path ) {

        my $target_width
            = $window_width > $video_width ? $video_width : $window_width;
        $target_width = <mpv.rescale_max_width>
            if defined <mpv.rescale_max_width>
            and $target_width > <mpv.rescale_max_width>;

        while ( ( $video_height / $video_width * $target_width ) % 2
            or $target_width % 16 ) {
            $target_width--;
        }

        <[base.log]>->(
            1,
            "autorescaling video ( ${video_width}x$video_height"
                . " => target_width: $target_width )"
        );

        my $cmd_args = join( ' ',
            $current_path, "$target_width", "${box_width}x$box_height" );
        my $chk_hash = <[digest.md5.hex]>->($cmd_args);

        <[base.proto.nailara.command.send.local]>->(
            {   'command'   => 'core.ffmpeg.rescale_video',
                'call_args' => { 'args' => $cmd_args },
                'reply'     => {
                    'handler' => 'mpv.handler.rescale_video_reply',
                    'params'  => {
                        'orig_path' => $current_path,
                        'chk_hash'  => $chk_hash
                    }
                }
            }
        ) if not exists <mpv.converting>->{$chk_hash};
        <mpv.converting>->{$chk_hash} = $current_path;
    }
}
