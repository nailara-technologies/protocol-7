## [:< ##

# name  = amos7.encode_octal_header

my $header_params = shift // '';
if ( ref $header_params ne qw| HASH | ) {
    warn 'expected header params hash reference parameter <{C1}>';
    return undef;
}
map {
    <[base.s_warn]>->( "missing parameter hashref key '%s' <{C1}>", $ARG )
        if not defined $header_params->{$ARG}
} qw|  amos-checksum-num  endline-state-encoded  amos-iterations-remaining  |;

my $AMOS_chksum_num  = $header_params->{'amos-checksum-num'};
my $iterations_left  = $header_params->{'amos-iterations-remaining'};
my $stripped_endline = $header_params->{'endline-state-encoded'};

my $numerical_header_start = sprintf qw| %011o%o%07o |,    ## <-- encoding
    $AMOS_chksum_num, $stripped_endline, $iterations_left;

##  all values 0 does invert the binary encoding mode  ##
my $inverted_mode = $numerical_header_start == 0 ? 1 : 0;

my @octal_bits
    = map { sprintf qw| %03b |, sprintf( qw| %o |, $ARG ) } split '',
    $numerical_header_start;

my $binary_header_start = sprintf qw| 0%s0 |, join( '0', @octal_bits );
## encode for header representation ##
if ( not $inverted_mode ) {
    $binary_header_start =~ s|0|,|g;
    $binary_header_start =~ s|1|.|g;
} else {    ##  all zulum mode  ##
    $binary_header_start =~ s|1|,|g;
    $binary_header_start =~ s|0|.|g;
}

return sprintf "#%s\n", $binary_header_start;

#,,.,,.,.,,,,,,,.,,..,,,.,,,.,,,.,,,,,,..,...,..,,...,...,..,,,..,.,.,,,,,...,
#NYU6DVHE7FH2D2AVG5MOZ5COUFPCMGUUG3GGJEYA2TAQJHKVYL7ZROQX3FQD2ZX5VENVBPWOZTX7A
#\\\|X3IFSMCNEBKB2NQ3VDYBXVPMAFM2KKCLJZU33Z4ZGR5Q76JRAZR \ / AMOS7 \ YOURUM ::
#\[7]DV4UEHWNXXZXVRPS2E3Y2HO3IS6BDHAG6CEDXFP5A4N2QSJL3GDA 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
