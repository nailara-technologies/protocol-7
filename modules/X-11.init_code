## >:] ##

# name = X-11.init_code

<[base.perlmod.autoload]>->('X11::WM');
<[base.perlmod.autoload]>->('IPC::Open3');
<[base.perlmod.autoload]>->('X11::Protocol');
<[base.perlmod.autoload]>->('X11::Keyboard');
<[base.perlmod.autoload]>->('Linux::Inotify2');
<[base.perlmod.autoload]>->('X11::Protocol::WM');
<[base.perlmod.autoload]>->('X11::Protocol::XSetRoot');

my $modes_re = <X-11.modes_re> = qr,^(host|xnest|nxagent|xorg|xephyr|xvfb)$,;

if ( defined <system.zenka.subname> ) {
    my $override_mode = <system.zenka.subname>;
    if ( $override_mode =~ $modes_re ) {
        <[base.logs]>->(
            0, "<< overriding X-11 zenka mode [ with '%s' ] >>",
            $override_mode
        );
        <X-11.mode> = $override_mode;
    } else {
        my $old_mode = <X-11.mode>;
        <[base.logs]>->(
            0,              "<< zenka mode \"%s\" not valid, keeping '%s' >>",
            $override_mode, $old_mode
        );
    }
}

foreach my $bin_name ( qw [
    Xorg
    Xvfb
    Xnest
    lspci
    Xephyr
    nxagent
    intel_gpu_top
    intel_gpu_frequency
    ]
) {
    <X-11.bin_path>->{$bin_name} //= <[base.required_bin_path]>->($bin_name);
}

<[base.inotify.install_io_watcher]>;

if ( <X-11.mode> eq qw| auto-xephyr | ) { ## detect if Xorg running --> xephyr
    system('ps h -C Xorg 1>/dev/null 2>/dev/null');
    <X-11.mode> = $CHILD_ERROR == 256 ? qw| xorg | : qw| xephyr |;
    <[base.log]>->( 1, "[auto] switched to '<X-11.mode>'-mode.," );
}

<X-11.waiting>        //= {};
<X-11.bg_mode>        //= qw| cover |;
<X-11.video_driver>   //= <[X-11.get_video_driver]>;
<X-11.disable_glamor> //= 0;
<X-11.blank_timeout>  //= 60 * 13;    ## 13 minutes default timeout setting ##

<X-11.bg_color> //= qw| 000000 |;
<X-11.bg_color> =~ s|^#?([0-9a-f]{6})$|#$1|i;

<X-11.keybd.grab_all_keys> //= qw| no |;
<X-11.max_intel_gpu_freq>  //= qw| no |;

<X-11.collect_intel_gpu_stats> //= 0;

if (    <X-11.mode> eq qw| xorg |
    and <[base.cfg_bool]>->(<X-11.max_intel_gpu_freq>)
    and <X-11.video_driver> =~ m|^i\d\d\d$| ) {
    my $freq_bin_path = <X-11.bin_path.intel_gpu_frequency>;
    if ( not length $freq_bin_path or !-x $freq_bin_path ) {
        <[base.log]>->(
            0,
            '<< max_intel_gpu_freq is enabled but'
                . ' intel_gpu_frequency binary not found., >>'
        );
    } else {
        my $freq_output = qx| $freq_bin_path -g |;
        if ( $freq_output =~ m|^cur: ([^\n]+)\n.+max: ([^\n]+)\n$|s ) {
            my ( $cur_freq, $max_freq ) = ( ${^CAPTURE}[0], ${^CAPTURE}[1] );
            if ( $cur_freq ne $max_freq ) {
                <[base.logs]>->(
                    '<< maximizing GPU frequency [ %s --> %s ] >>',
                    $cur_freq, $max_freq
                );

                qx| $freq_bin_path -m |;    # <-- max

                if ( qx| $freq_bin_path -g |
                    =~ m|^cur: ([^\n]+)\n.+max: ([^\n]+)\n$|s ) {
                    ( $cur_freq, $max_freq )
                        = ( ${^CAPTURE}[0], ${^CAPTURE}[1] );
                    <[base.logs]>->(
                        0,
                        '<< cannot set GPU frequency '
                            . '[ is %s : should be %s ] >>',
                        $cur_freq,
                        $max_freq
                    ) if $cur_freq ne $max_freq;
                }
            }
        }
    }
}

0;

#,,,,,.,,,,.,,,..,.,.,..,,,,,,...,.,.,,..,.,.,..,,...,...,...,,..,...,,,.,,,,,
#Z4VOCGQN3J73FCMFD6XJVWUERHHOXDQLFXRNQ5TG7SUPQ7WTD4ERD4T4FMCAV555PYKLAG6GMIYBM
#\\\|3VBYRD46VMI7TLL66YCQELLHBPHD7AFYU7Q635LWIAPM5O3FKM2 \ / AMOS7 \ YOURUM ::
#\[7]OVXESYZNGCTAUZWJVMYIZVIN7Y56JJZ6X47UXWPKGAQPIHGCP2DQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
