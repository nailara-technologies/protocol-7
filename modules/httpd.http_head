# >:]

# name = httpd.http_head

my $id        = shift;
my $session   = $data{'session'}{$id};
my $http_host = <[httpd.determine_host]>->($id);
my $http_uri  = $session->{'http'}{'request'}{'uri'};

my $file_path;

# ...

if ( defined $http_host and exists <httpd.cfg.hostnames>->{$http_host} ) {
    <[base.log]>->(
        1,
        sprintf( "(i) matched Host '%s' -> '$http_host'",
            $session->{'http'}{'request'}{'host'} )
    ) if $http_host ne $session->{'http'}{'request'}{'host'};

    my $base_dir = <httpd.cfg.hostnames>->{$http_host};
    $file_path = "$base_dir$http_uri";
    if ( !-f $file_path and $file_path =~ /\/$/ ) {
        if ( -f $file_path . 'index.html' ) {
            $file_path .= 'index.html';
        }
    }
    if ( -f $file_path ) {
        my @stat         = stat($file_path);
        my $content_size = $stat[7];
        my $content_date = time2str( $stat[9] );
        my $server_date  = time2str(time);

        my $content_type;
        if ( $file_path =~ /\.htm(l)?$/ ) {
            $content_type = 'text/html';
        } else {
            $content_type = mimetype($file_path);
        }

        $session->{'buffer'}->{'output'} .= <[httpd.new_header]>->(
            200,
            {   'Content-Type'   => $content_type,
                'Last-Modified'  => $content_date,
                'Content-Length' => $content_size,
                'Connection'     => $session->{'http'}->{'close'}
                ? 'close'
                : 'keep-alive'
            }
        );

        return $session->{'http'}->{'close'} ? 2 : 0;
    }
} else {
    return <[httpd.return_raw_html]>->(
        $id, 400, "<html>\n  <h1>400 Bad Request.</h1>\n</html>\n"
    );
}

if ( not defined $file_path or !-f $file_path ) {
    return <[httpd.return_raw_html]>->(
        $id, 404, "<html>\n  <h1>404 Not Found.</h1>\n</html>\n"
    );
}
