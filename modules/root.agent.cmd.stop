# >:]

# name  = root.agent.cmd.stop
# param = <agent_name(s)|instance(s)>
# descr = shutdown agent instance(s)

my $params = $$call{'args'} || '';
return { 'mode' => 'nack', 'data' => 'expected agent name or instance id' }
    if !length($params);

my @instance_ids;
foreach my $param_str ( split / +/, $params ) {
    if ( $param_str =~ /^\d+$/ ) {    # instance id
        return {
            'mode' => 'nack',
            'data' => "unknown agent instance '$param_str' (see 'list agents')"
            }
            if not exists <root.agent.instance>->{$param_str};
        push( @instance_ids, $param_str );
    } else {                          # agent name ( XXX: validate syntax! )
        my $agent_id = <[agent.get_id]>->($param_str);
        return {
            'mode' => 'nack',
            'data' => "no agent '$param_str' found in setup!"
                . " (see 'list agents')"
            }
            if not defined $agent_id;
        map {
            push( @instance_ids, $_ )
                if <root.agent.instance>->{$_}->{'agent_id'} == $agent_id
        } keys %{<root.agent.instance>};
    }
}

map { <[agent.instance.stop]>->($_) } @instance_ids;

my $count   = scalar @instance_ids;
my $s       = $count > 1 ? 's' : '';
my $msg_str = "shutdown of $count agent instance$s initiated!";

my %agent_names;
map {
    my $agent_name
        = <root.agent.setup>
        ->{ <root.agent.instance>->{$_}->{'agent_id'} }->{'name'};
    $agent_names{$agent_name}++;
} keys %{<root.agent.instance>};
my %shutdown_names;
map {
    my $agent_name
        = <root.agent.setup>
        ->{ <root.agent.instance>->{$_}->{'agent_id'} }->{'name'};
    $shutdown_names{$agent_name}++;
} @instance_ids;
foreach my $name ( keys %shutdown_names ) {
    my $instances_remaining = $agent_names{$name} - $shutdown_names{$name};
    if ( !$instances_remaining ) {
        my %agent_list;
        map { $agent_list{$_} = 1 } split / +/,
            <root.spawn_config.globals.agents.enabled>;
        delete $agent_list{$name};
        <root.spawn_config.globals.agents.enabled>
            = join( ' ', keys %agent_list );
        <[base.log]>->(
            1, "disabled agent '$name' (no more instances present)"
        );
    }
}

if ($count) {
    return { 'mode' => 'ack', 'data' => $msg_str };
} else {
    return {
        'mode' => 'nack',
        'data' => 'there is no agent matching agent running'
    };
}
