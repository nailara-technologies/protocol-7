# >:]

# name = media.handler.get_list_reply

my $reply = shift;

<media.playlist_sha1> //= '';

if ( $reply->{'cmd'} eq 'NACK' ) {
    <[base.log]>->( 0, ": failed to fetch playlist!" );
    return;
}

my @file_list;
my %file_types = ( '[PAUSE]' => 'pause' );
foreach my $rep_line ( split( "\n", $reply->{'data'} ) ) {
    my ( $type, $file ) = split( / /, $rep_line, 2 );
    next if not exists <media.content.agent_map>->{$type} or $file eq '[PAUSE]';
    $file_types{$file} = $type;
    push( @file_list, $file );
}
my $playlist_sha1 = <[digest.sha1]>->( join( ' ', @file_list ) );

if ( $reply->{'call_args'}->{'args'} == 0 ) {
    <[base.log]>->( 0, "received empty playlist!" );
    foreach my $hide_agent ( keys %{<media.child>} ) {
        my $hide_wid = <media.child>->{$hide_agent}->{'window_id'};
        next if not defined $hide_wid;
        <[base.log]>->( 2, ": hiding '$hide_agent' ($hide_wid)" );
        <[base.proto.nailara.command.send.local]>->(
            {   'command'   => "core.xserver.hide_window",
                'call_args' => { 'args' => $hide_wid }
            }
        );
        <media.child>->{$hide_agent}->{'visible'} = 0;
    }
    <[base.log]>->( 2, ": stopping loadsplash agent.." );
    <[base.proto.nailara.command.send.local]>->(
        {   'command' => "core.root.stop",
            'call_args' =>
                { 'args' => 'loadsplash[' . <system.agent.subname> . ']' }
        }
    );
    return;
}

my $playlist_changed = 0;

return <[base.log]>->( 1, ": playlist not changed, doing nothing.." )
    if $playlist_sha1 eq <media.playlist_sha1>
    and !$playlist_changed;
<media.playlist_sha1> = $playlist_sha1;

<media.playlist.files> = \@file_list;
<media.playlist.types> = \%file_types;
<media.playlist.agent>
    = { map { $_ => [] } @{<media.display_agents>} };
<media.sequence.position>     = 0;
<media.sequence.switch_order> = [];

my $index = 0;
my $last_agent;
my $first_agent;
my $switch_count = 0;
my $switched_map = {};
my $last_index   = scalar @file_list - 1;
foreach my $file (@file_list) {
    my $type = $file_types{$file};
    next if not exists <media.content.agent_map>->{$type};
    my $agent = <media.content.agent_map>->{$type};
    $switched_map->{$agent} //= 0;
    if ( defined $last_agent and $agent ne $last_agent ) {
        push( @{ <media.playlist.agent>->{$last_agent} }, '[PAUSE]' );
        $switched_map->{$last_agent}++;
        $switch_count++;
    }
    push( @{ <media.playlist.agent>->{$agent} }, $file );
    my $switch_agent = $agent;
    if ( not defined $last_agent or $agent ne $last_agent ) {
        if ( $index == $last_index ) {
            my $_file  = $file_list[$last_index];
            my $_type  = $file_types{$_file};
            my $_agent = <media.content.agent_map>->{$_type};
            $switch_agent = $_agent;
        }
        push( @{<media.sequence.switch_order>}, "$switch_agent" )
            if not defined $last_agent
            or $agent ne $last_agent and ( $index != $last_index
            or <media.content.agent_map>->{ $file_types{ $file_list[0] } } ne
            <media.content.agent_map>
            ->{ $file_types{ $file_list[$last_index] } } );
    }
    $first_agent = $agent if not defined $first_agent;
    $last_agent = $agent;
    $index++;
}
push( @{ <media.playlist.agent>->{$last_agent} }, '[PAUSE]' )
    if $switch_count
    and ( !$switched_map->{$last_agent}
    or $file_types{ $file_list[0] } ne $file_types{ $file_list[$last_index] } );

<media.playlist.change_count> //= 0;
<[base.log]>->( 1, ": playlist changed.." );

if ( $switch_count
    and <media.playlist.change_count> ) {   # temporary (anti-desync) workaround
    my $sname_str
        = defined <system.agent.subname>
        ? '[' . <system.agent.subname> . ']'
        : '';
    <[base.log]>->( 1, ": : agent restart.. (media$sname_str)" );
    <[base.proto.nailara.command.send.local]>->(
        {   'command'   => 'core.root.restart',
            'call_args' => { 'args' => 'media' . $sname_str },
        }
    );
}
<media.playlist.change_count>++;

map {
    <[base.proto.nailara.command.send.local]>
        ->( { 'command' => "$_.playlist_update" } )
} @{<media.display_agents>};

