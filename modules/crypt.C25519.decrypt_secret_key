## [:< ##

# name  = crypt.C25519.decrypt_secret_key

my $key_str         = shift // '';
my $dec_passwd      = shift // '';
my $public_key      = shift;    ##  optional  ##
my $private_key     = shift;    ##  optional  ##
my $test_key_chksum = shift;    ##  optional  ##

if ( not length $key_str ) {
    warn 'expected key str param <{C1}>';
    return undef;
} elsif ( length($key_str) != 32 ) {
    <[base.s_warn]>->(
        'secret key must be decoded [ len %d != 32 octets ] <{C1}>',
        length($key_str)
    );
    return undef;
} elsif ( defined $private_key and length($private_key) != 64 ) {
    <[base.s_warn]>->(
        'public key needs to be decoded [ len %d != 64 octets ] <{C1}>',
        length $key_str
    );
    return undef;
} elsif ( defined $public_key and length($public_key) != 32 ) {
    <[base.s_warn]>->(
        'public key needs to be decoded [ len %d != 32 octets ] <{C1}>',
        length $key_str
    );
    return undef;
} elsif ( not length $dec_passwd ) {
    warn 'expected decryption password parameter <{C1}>';
    return undef;
}

my $dec_key_32 = AMOS7::13::key_32( \$dec_passwd );

<[base.log]>->( 1, ': decrypting [secret] key ..,' );

if ( not defined $dec_key_32 or not length $dec_key_32 ) {
    warn 'error during file dec key derivation <{C1}>';
    return undef;
}
my $status = AMOS7::Twofish::key_init( $dec_key_32, qw| decryption C25519 | );

if ( not defined $status or not $status ) {
    warn 'error during initializing of key str decryption key <{C1}>';
    return undef;
}

my $decrypted_C25519_sref = AMOS7::Twofish::decrypt( qw|C25519|, \$key_str );

AMOS7::Twofish::delete_table_entry(qw| decryption C25519 |);

if (   not defined $decrypted_C25519_sref
    or ref $decrypted_C25519_sref ne qw| SCALAR |
    or not length $decrypted_C25519_sref->$* ) {
    warn 'key decryption error [ twofish::decrypt was undef ] <{C1}>';
    return undef;
} elsif ( length( $decrypted_C25519_sref->$* ) != 32 ) {
    warn 'error during key decryption [ decrypted size != 32 ] <{C1}>';
    return undef;
}

##  comparing with derrived key pair to be certain password was correct  ##
##
##  [ or compare chksum if was known ]

my $password_not_correct = FALSE;

( my $derrived_public, my $derrived_privkey )
    = Crypt::Ed25519::generate_keypair( $decrypted_C25519_sref->$* );

$password_not_correct = TRUE
    if defined $public_key and $public_key ne $derrived_public;
$password_not_correct = TRUE
    if defined $private_key and $private_key ne $derrived_privkey;

##  calculating key pair chksum [ when required ] ##
##
my $key_checksum;
if ( $password_not_correct == FALSE
    and
    ( wantarray or <system.verbosity.console> or defined $test_key_chksum ) )
{
    $key_checksum = <[crypt.C25519.key_bin_checksums]>->(
        $derrived_public, $derrived_privkey
    );

    if ( defined $test_key_chksum and $test_key_chksum ne $key_checksum ) {
        $password_not_correct = TRUE;
    } else {
        <[base.logs]>->( ': :. done. [ %s ]', $key_checksum );
    }

} else {    ## skip for performance ##  [ gaining about 395% ]
    <[base.log]>->( 1, ': :. success.' );
}

if ($password_not_correct) {
    <[base.log]>->( 1, ':' );
    <[base.log]>->( 0, ': password is not correct ..,' );
    <[base.log]>->( 1, ':' );
    return FALSE;
}

##  lock key in memory to not never swap it to disk  ##
IO::AIO::aio_mlock( $decrypted_C25519_sref->$*, 0, 32 );

return ( $decrypted_C25519_sref, $key_checksum ) if wantarray;

return $decrypted_C25519_sref;

#,,..,,,.,.,.,,.,,.,.,,..,.,.,,..,,,,,..,,,.,,.,.,...,...,...,,..,,.,,.,,,,..,
#RKSDJTGQFSUCY3ML2DZ6VGQYEU7S4DXN2EZF7VCVMG26YLW5L6KU543WEGPRXVL24XY4CMQR2MTCG
#\\\|HPRHGKWKUL5KIICN4NR4HAWRMWUXECQYNYB6N5RI4EPWSMDUCEY \ / AMOS7 \ YOURUM ::
#\[7]YTGGPEF4BNZ6WSFXKJUKSIVOQA6QHPQSSO5IZYJEV7H6677W4EAQ 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
