## >:] ##

# name = base.check_dependency_dirs

my $user           = shift // <system.amos-zenka-user>;
my $zenka          = <system.zenka.name>;
my $cfg_path       = <system.conf_path>;
my $start_cfg_name = qw| start |;

my $subdir_perms = 0775;    ##  zenki group needs write access  ##

my ( undef, undef, $user_uid, $gid ) = getpwnam($user)
    or <[base.logs]>->(
    0, "<< check_dependency_dirs : unix user '%s' not found >>", $user
    ) and return undef;

my @sub_dirs = qw|
    os-dep
    os-dep/binary
    os-dep/debian
    pm-dep
    source
    |;

my $dep_dir = <[base.get_path.zenka_cfg]>;

if (    $dep_dir =~ s|zenki/$zenka/$start_cfg_name$|$cfg_path/zenki/$zenka|
    and -d $dep_dir
    and -w $dep_dir
    and opendir( my $dir_fh, $dep_dir ) ) {
    my @dir_names = grep { !m|^\,| } readdir($dir_fh);
    close($dir_fh);

    my $src_stat = File::stat::stat($dep_dir);

    foreach my $sub_dir (@sub_dirs) {
        my $dir_path = sprintf qw| %s/%s |, $dep_dir, $sub_dir;
        ## create ##
        if ( not -d $dir_path ) {
            mkdir($dir_path)
                or <[base.s_warn]>->(
                'mkdir[%s] : %s',
                $dir_path, <[base.str.os_err]>
                );
        }
        next if not -d $dir_path;

        ( my $relpath = $dir_path ) =~ s|^.*/||;

        my $dir_stat = File::stat::stat($dir_path);

        ## chmod ##
        if ( $dir_stat->mode != $subdir_perms ) {
            <[base.logs]>->(
                2, "correcting permissions on subdir '%s'..,", $relpath
            );
            chmod( $subdir_perms, $dir_path )
                or <[base.logs]>->(
                2,        ":. : '%s' : chmod : %s .:",
                $relpath, <[base.str.os_err]>
                );
        }

        if (   $EUID == 0 and $dir_stat->uid != $src_stat->uid
            or $dir_stat->gid != $gid ) {

            <[base.logs]>->(
                2, "correcting ownership on subdir '%s'..,", $relpath
            );

            ## chown ##
            chown( $src_stat->uid, $gid, $dir_path )
                or <[base.logs]>->(
                2,        ":. : cannot chown %s : %s .:",
                $relpath, <[base.str.os_err]>
                );
        }
        my $placeholder_path = sprintf qw| %s/.placeholder |, $dir_path;
        ( $relpath = $placeholder_path ) =~ s|^.+/(*pla:zenki/)||;

        ## placeholder ##
        if ( not -e $placeholder_path ) {
            open( my $fh, qw| > |, $placeholder_path ) or next;   ## use mknod
            close($fh);
        }
        chown( $src_stat->uid, $gid, $placeholder_path )
            or <[base.logs]>->(
            0,        ":. : cannot chown %s : %s .:",
            $relpath, <[base.str.os_err]>
            );
    }
}

#,,,.,,..,,,,,,.,,,.,,,,,,,..,,,,,,,.,,,.,.,,,..,,...,..,,.,.,.,.,,,,,,.,,.,.,
#XKLYGBJLTNE7G6AM3T6RTAHCOWJ2AM2LU5A72Z6JVYTXZBJAKJP75WHKXTODELVPANYGDDAX653IE
#\\\|4BNPATCGGWFFMDIIPYYOTBXGDITOZ27YHMXCV5XWGJBDAYPHBSZ \ / AMOS7 \ YOURUM ::
#\[7]MFTNQKQ2OXELC7NOZ7TEDZ3GJ2PTN4LHHKR7S7V2UCD7G454G4CI 7  DATA SIGNATURE ::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
