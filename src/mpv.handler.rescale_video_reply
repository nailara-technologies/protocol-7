# >:]

# name = mpv.handler.rescale_video_reply

my $reply    = shift;
my $chk_hash = $reply->{'params'}->{'chk_hash'};

delete <mpv.converting>->{$chk_hash};

if ( $reply->{'cmd'} ne 'ACK' ) {
    <mpv.rescale_failed> //= {};
    <mpv.rescale_failed>->{$chk_hash} = 1;
    <[mpv.callback.reenc_finished]>;    # removing 'reencoding video...' message
    return <[base.log]>->(
        0,
        '<!> video rescaling failed <!>  won\'t try again! :/  ( reason : '
            . $reply->{'call_args'}->{'args'} . ' )'
    );
}

my $old_path = $reply->{'params'}->{'orig_path'};
my $new_path = $reply->{'call_args'}->{'args'};
( my $video_name = $old_path ) =~ s|^.*/||;

<[base.log]>->( 1, "[rescaled] replacing playlist entry for '$video_name'" );

# quick-fix for entry order desyncronization
if ( <system.agent.mode> eq 'media-child' and <mpv.playlist_contains_pause> ) {
    my $sname_str
        = defined <system.agent.subname>
        ? '[' . <system.agent.subname> . ']'
        : '';
    <[base.log]>->( 1, "           : agent restart.. (media$sname_str)" );
    <[base.proto.nailara.command.send.local]>->(
        {   'command'   => 'core.nroot.restart',
            'call_args' => { 'args' => 'media' . $sname_str },
        }
    );
} else {
    <[mpv.send_command]>->('stop');
    <[mpv.send_command]>->('playlist_clear');
    <[mpv.get_playlist]>->('video');
}

<[mpv.callback.reenc_finished]>;
