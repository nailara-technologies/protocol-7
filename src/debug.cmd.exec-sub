# >:]

# name  = debug.cmd.exec-sub
# param = <sub_name>
# descr = run subroutine and return output

my $support_params = 0; ## <-- keep this disabled for security reasons < ! > ###
( my $sub_name, my @params ) = split( m| +|, $$call{'args'} ); # no quotes supp.

return { 'mode' => 'nak', 'data' => 'expected subroutine name parameter' }
    if !length($sub_name);
return { 'mode' => 'nak', 'data' => 'subroutine parameters are not supported' }
    if @params and not $support_params;

return { 'mode' => 'nak', 'data' => 'no such subroutine' }
    if not exists $code{$sub_name};

my @sub_output = eval { $code{$sub_name}->(@params) };

my $err_msg;
$err_msg = 'errors during subroutine execution' if $EVAL_ERROR;
$err_msg = 'undefined subroutine output'
    if !@sub_output
    or @sub_output == 1 and not defined $sub_output[0];
return { 'mode' => 'nak', 'data' => $err_msg } if defined $err_msg;

map { $ARG //= 'UNDEF' } @sub_output if @sub_output > 1;

my $rep_mode = 'ack';
if ( @sub_output == 1 ) {
    $sub_output[0] =~ s|\n$|| if $sub_output[0] =~ m|\n| <= 1;
    $rep_mode = 'data' if $sub_output[0] =~ m|\n|;
}

return { 'mode' => $rep_mode, 'data' => join( ', ', @sub_output ) };

# ______________________________________________________________________________
#\\YK5DDUCZIE7W4S2VGX5Q23LWKOCJBWT4ERC2BW5RURH5WNRQESZ47XXWN7DIKRDNXT24JRIC4S4RK
# \\ D3JRBQQAIG4VY6GJRREK3NJVJEU7XNWVJMV4CZ6TUCYSFT4PP42Z \\// C25519-BASE-32 //
#  \\// JNPQECPKNNEKRMZIMVETN2D3HXYEBIVJCWIK4WZLW2MQRXHOCDA \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
