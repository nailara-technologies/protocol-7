# >:]

# name  = X-11.cmd.rotate-screen
# descr = rotate the screen to specified mode
# param = <mode>

my $X     = <X-11.x11>;
my $param = shift->{'args'} // '';
return {
    'mode' => 'nak',
    'data' => 'expected <mode> parameter :'
        . ' <left|right|normal|inverted>[-x|-y]'
    }
    if !length($param);

my $mirror = $param =~ s/-(x|y)$// ? $1 : '';

my $mode;
$mode = 1 if $param =~ 'normal';
$mode = 2 if $param eq 'left';
$mode = 4 if $param eq 'inverted';
$mode = 8 if $param eq 'right';

if ( not defined $mode ) {
    my $err_msg = "invalid mode '$param$mirror'";
    <[base.log]>->( 0, "<!> rotate-screen: $err_msg <!>" );
    return { 'mode' => 'nak', 'data' => $err_msg };
}

if ( !<X-11.has_randr> ) {
    <[base.log]>->(
        1, "<!> skipping rotate ['$param'] request [ no RANDR ] <!>"
    );
    return {
        'mode' => 'nak',
        'data' => 'not able to rotate screen [ missing RANDR support ]'
    };
}

$mode += 16 if $mirror eq 'x';
$mode += 32 if $mirror eq 'y';

my %screen_info = ( <X-11.x11>->RRGetScreenInfo( <X-11.x11>->root ) );

my $old_mode = $screen_info{'rotation'};
return { 'mode' => 'nak', 'data' => "no changes" }
    if $mode eq $old_mode;
$mirror = "-$mirror" if length($mirror);
<[base.log]>->( 0, "<!> rotating screen to mode '$param$mirror' <!>" );

eval '$X->RRSetScreenConfig( $X->root, $screen_info{time},'
    . '$screen_info{config_time}, $screen_info{size},'
    . '$mode, $screen_info{rate} )';

if ($@) {
    my $err_msg = 'unable to rotate screen';
    <[base.log]>->( 0, " :. $err_msg!" );
    return { 'mode' => 'nak', 'data' => $err_msg };
}

# strip mirrored flag
$old_mode -= 16 while $old_mode > 16;
$mode     -= 16 while $mode > 16;

# restart composition agent to update geometries
<[base.proto.nailara.command.send.local]>->(
    {   'command'   => 'core.nroot.restart',
        'call_args' => { 'args' => 'composition' }
    }
    )
    if $mode != $old_mode
    and $mode + $old_mode != 5
    and $mode + $old_mode != 10;

return { 'mode' => 'ack', 'data' => 'screen rotated' }

# ______________________________________________________________________________
#\\PIKUEJFACMJPTUXBBIVN4IBRJ6DEQ5BYJRNT2LH6K2YNDW3TDS42VHQLEQNPTBOOF2HFDND7GOLQO
# \\ DGQRVBH2LFZ23QOCGVFTGYJ7G4PPT5IMJS652R2OXLTSTD2Z4Z3I \\// C25519-BASE-32 //
#  \\// LXWGIOOP5XBP23NKCOYMFLDRJN7TAJ5KBBJ5MFZ6TOQLPXVUCBI \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
