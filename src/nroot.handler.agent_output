# >:]

# name  = nroot.handler.agent_output
# descr = reads agent console output and triggers commands on matching patterns

<nroot.patterns.agent_output> //= {};
<nroot.patterns.log_matches>  //= 0;

my $event       = shift->w;
my $read_fh     = $event->fd;
my $instance_id = $event->data;
if ( not exists <nroot.agent.instance>->{$instance_id} ) {
    $event->cancel;
    close($read_fh);
    <[base.log]>->( 2, "instance $instance_id : output pipe closed." );
    return;
}
my $agent_instance = <nroot.agent.instance>->{$instance_id};
my $agent_id       = $agent_instance->{'agent_id'};
my $agent_name     = <nroot.agent.setup>->{$agent_id}->{'name'};


<[base.log]>->( 2, "instance $instance_id : agent name not defined." )
    and return
    if not defined $agent_name;

$agent_instance->{'output_buffer'} //= '';

my $read_bytes = <[base.s_read]>->(
    $read_fh, \$agent_instance->{'output_buffer'},
    4096,     length( $agent_instance->{'output_buffer'} )
);
if ( not defined $read_bytes or $read_bytes == 0 ) {  # [ filehandle exception ]
    $event->cancel;
    my $process = $agent_instance->{'process'};
    close($read_fh);
    my $pid = $process->{'id'};
    <[base.log]>->( 2, "[PID:$pid] output pipe closed." );

    my $was_ondemand = 0;
    if ( defined <nroot.ondemand_agents> ) {
        map { $was_ondemand = 1 if $ARG eq $agent_name }
            @{<nroot.ondemand_agents>};
    }

    undef $agent_instance->{'output_buffer'};

    #    if (
    #        (      not exists <agent.instance.shutdown>
    #            or not exists <agent.instance.shutdown>->{$instance_id}
    #        )
    #        and $agent_instance->{'status'} ne 'restart'
    #        and $agent_instance->{'status'} ne 'starting'
    #        ) {
    #        if ( $agent_instance->{'status'} eq 'online' ) {
    #            if ($was_ondemand) {
    #                <[agent.change_status]>->( $instance_id, 'offline' );
    #            }
    #        } else {
    #            <[agent.change_status]>->( $instance_id, 'error' );
    #        }
    #    }
    return;
}

my @matched_names;
my $patterns_output = <nroot.patterns.agent_output>;
foreach my $a_name ( keys %{$patterns_output} ) {

    if ( $a_name =~ m|\*| ) {    # wildcard match
        my $inverse_match = 0;
        my $name_pattern  = $a_name;
        $inverse_match = 1 if $name_pattern =~ s|^\!||;
        $name_pattern =~ s|[^a-zA-Z0-9\-_\*]||g;
        $name_pattern =~ s|\*\*|*|g;
        $name_pattern =~ s|\*|\.*|g;
        push( @matched_names, $a_name )
            if $agent_name =~ m|^$name_pattern$|
            or $inverse_match and $agent_name !~ m|^$name_pattern$|;
        next;
    }
    push( @matched_names, $a_name )
        if $a_name eq $agent_name                           # agent name matches
        or $a_name =~ m|^\!(.+)$| and $1 ne $agent_name;    # inverse match
}

while ( $agent_instance->{'output_buffer'} =~ s|^([^\n]*)\n||s ) {
    my $output_line = $1;
    utf8::decode($output_line);

    say $output_line
        if <system.verbosity.console> or $output_line =~ m|\Q$ANSI{bold}|;

    ## remove colors before matching .., ##
    <[base.strip_ansi]>->(\$output_line);

    if (@matched_names) {    ## matching pattern name exists ##
        $output_line =~ s{^:(\.[^\.]+)?\.+($agent_name|<agent_name>)\.+: }{};
        foreach my $pattern_name (@matched_names) {
            foreach my $pattern (
                keys %{ <nroot.patterns.agent_output>->{$pattern_name} } ) {
                if ( my @matches = $output_line =~ $pattern ) {

                    <[base.log]>->( 0, '<<M>>' . $pattern )
                        if <nroot.patterns.log_matches>;

                    <nroot.patterns.agent_output>->{$pattern_name}->{$pattern}
                        ->( $instance_id, $agent_name, @matches );
                }
            }
        }
    } else {
        warn "no defined output patterns matching agent '$agent_name'"
            if not exists <nroot.status.warning>->{"pattern_$agent_name"};
        <nroot.status.warning>->{"pattern_$agent_name"} = 1;
    }
}

# ______________________________________________________________________________
#\\N54TFPDXGOWRFEXYGI5SWXHSVD4BQT6UMKXG5RUPUICBL5HH5TKP3HUR5PYN5VTA4DEIOQSHA7WSU
# \\ XLHDERQTWQT3GO3WY4QIXDH4MGYXNPJDRKPGAYRMGEOTRG63DBML \\// C25519-BASE-32 //
#  \\// IOXTCHZ6R4H3M2ZC5OE25RDMW22X7YMGQLBXV52IZP34UZGZ4DQ \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
