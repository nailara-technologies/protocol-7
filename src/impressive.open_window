# >:]

# name = impressive.open_window

my $bg_color    = <impressive.cfg.background_color>;
my $trans_delay = <impressive.cfg.transition_delay>;
my $temp_dir    = <impressive.path.impressive_tmp>;
my $tmp_bin     = "$temp_dir/impressive.$$";
my $light_mode  = <impressive.cfg.light_mode>;

$light_mode = 0 if $light_mode ne '1' and $light_mode ne '2';

## replace border (frame) color ##

$bg_color = '#000000'
    if <impressive.cfg.black_on_fullscreen> and not defined <x11.geometry>;
<[impressive.parse_bin]>->( { 'bg_col' => <impressive.cfg.background_color> } );

my $mode_name = $light_mode     ? 'light' : 'normal';
my $lvl       = $light_mode < 2 ? ''      : ' level 2';

<[base.log]>->(
    1,
    sprintf( "preparing impressive %s in < $mode_name > mode$lvl",
        <impressive.version> )
);

if ( $light_mode >= 2 ) {
    <[base.log]>->( 1, ": enforcing software renderer.." );
    $ENV{'LIBGL_ALWAYS_SOFTWARE'} = 1;
}

## select transitions ##

my @transitions;
if ( $light_mode == 1 ) {
    @transitions = ('Crossfade');
} elsif ( $light_mode == 2 ) {
    @transitions = ('None');
} else {
    my $trans_list_output = qx($tmp_bin -l 2>/dev/null);
    foreach my $trans_line ( split( /\n/, $trans_list_output ) ) {
        next if $trans_line =~ /^[^ \*]/;
        $trans_line =~ s|..([^ ]+) .+$|$1|;
        push( @transitions, $trans_line ) if $trans_line !~ /fade|none|cloud/i;
    }
}
<[base.log]>->( 0, "[!] unable to obtain transition list, using defaults [!]" )
    if !@transitions;
my @rnd_trans;
while (@transitions) {
    my $rnd_index = sprintf( "%.0f", rand(@transitions) );
    push( @rnd_trans, shift(@transitions) ) if @transitions == 1;
    next if not exists $transitions[$rnd_index];
    push( @rnd_trans, delete $transitions[$rnd_index] );
}
my $translist_str = join( ',', @rnd_trans );

my $rnd_trans = 1111 + int( rand(2222) );
$rnd_trans += 2222 if $light_mode;
$trans_delay += sprintf( "%.0f", 4 + rand(4) ) if $light_mode >= 2;

## prepare parameter list ##

my $min_width  = 64;
my $min_height = 40;

( $min_width, $min_height ) = ( 320, 200 )
    if <impressive.parser.size_assert_failed>;

if ( defined <x11.geometry>
    and <x11.geometry> =~ /^(\d+)x(\d+)/i ) {    # min size
    ( my $width, my $height ) = ( $1, $2 );
    if ( $width < $min_width ) {
        <[base.log]>->(
            0, "<!> configured window width $1 is too small -> forcing 320!"
        );
        <x11.geometry> =~ s/^$1x/${min_width}x/i;
    }
    if ( $height < $min_height ) {
        <[base.log]>->(
            0, "<!> configured window height $2 is too small -> forcing 200!"
        );
        <x11.geometry> =~ s/x$2/x$min_height/i;
    }
}

my @exec_params = defined <x11.geometry> ? ( '-f', '-g' . <x11.geometry> ) : ();
if ( @{<impressive.current_playlist>} > 1 ) {
    push( @exec_params, '--transition', $translist_str )
        if length($translist_str);
    push( @exec_params,
        '--auto', $trans_delay, '--transtime', $rnd_trans, '--fade', '--wrap' );
}
push( @exec_params,
    '--bind', 'clearall', '--mousedelay', '1', '--nologo', '--scale',
    '--cursor', <impressive.gfx.cursor_png>, @{<impressive.current_playlist>} );

## start up impressive window ##

$ENV{'DISPLAY'} = <x11.display>;

<impressive.pid> = open3( <impressive.in_fh>, <impressive.out_fh>,
    <impressive.err_fh>, $tmp_bin, @exec_params );

if (<impressive.pid>) {    # waiting for python interpreter to read $tmp_bin ..
    my $bits = '';
    vec( $bits, fileno(<impressive.out_fh>), 1 ) = 1;
    select( $bits, undef, undef, undef );
}
unlink($tmp_bin) or warn "unable to delete '$tmp_bin' [$!]";

if ( opendir( my $tdir_fh, $temp_dir ) ) {
    my @t_files = grep { !/^\./ } ( readdir($tdir_fh) );
    if ( !@t_files ) {
        <[base.log]>->( 1, "removing temp dir '$temp_dir'.." );
        rmdir($temp_dir) or warn "unable to remove directory '$temp_dir': $!";
    }
} else {
    warn "unable to open directory '$temp_dir': $!";
}

<[base.agents.report_child_pid]>->(<impressive.pid>) if <impressive.pid>;

## wait for it ##

if ( not defined <[base.x11.wait_for_window]> or !<impressive.pid> ) {
    <[base.log]>->( 0, "[!] unable to start impressive [$!]" );
    <[base.log]>->( 1, " : aborting agent startup .." );
    exit(1);
} else {

    <[base.log]>->( 1, ": impressive process spawned [PID=<impressive.pid>]" );

    <impressive.exec_params> = join( ' ', @exec_params );

    <[base.proto.nailara.command.send.local]>->(
        {   'command'   => "core.xserver.set_opacity",
            'call_args' => { 'args' => <x11.id> . ' 0' }
        }
    );

    <impressive.watcher.output> = <[event.add_io]>->(
        {   'fd'      => <impressive.out_fh>,
            'handler' => 'base.handler.child_output.simple',
            'data'    => {
                'bin'           => 'impressive',
                'pid'           => <impressive.pid>,
                'log_whitelist' => [
                    qr/^Welcome to impressive/,
                    qr/^Total presentation time/,
                    qr/^Background rendering finished/,
                    qr/opengl (software )?renderer/i,
                    qr/likely be too slow/i,
                    'XIO:  fatal IO error ',
                    'after \d+ requests'
                ],
                'callback_patterns' => {
                    qr/^Background rendering finished/ =>
                        'impressive.callback.rendering_finished'
                }
            }
        }
    );

    <[base.proto.nailara.command.send.local]>->(
        {   'command'   => "core.xserver.raise_window",
            'call_args' => { 'args' => <x11.id> }
        }
    );
    <[base.x11.assign_window]>->(<x11.id>);
}

<impressive.timer.stop_loadsplash>->cancel
    if defined <impressive.timer.stop_loadsplash>
    and <impressive.timer.stop_loadsplash>->is_active;

if (    <impressive.cfg.use_loadsplash>
    and <impressive.parser.init_tag_failed> ) {
    <impressive.timer.stop_loadsplash> = <[event.add_timer]>->(
        {   'after'   => 7.7,
            'handler' => 'impressive.callback.stop_loadsplash' # failsafe only #
        }
    );
} elsif ( <impressive.cfg.use_loadsplash>
    and defined <impressive.cfg.loadsplash_timeout>
    and <impressive.cfg.loadsplash_timeout> =~ /^\d+(\.\d+)?$/ ) {
    <impressive.timer.stop_loadsplash> = <[event.add_timer]>->(
        {   'after'   => <impressive.cfg.loadsplash_timeout>,
            'handler' => 'impressive.callback.stop_loadsplash'
        }
    );
}
