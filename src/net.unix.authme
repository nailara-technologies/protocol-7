# >:]

# name  = net.unix.authme
# descr = unix domain socket auth. (client side)
# todo  = implement client side auth. timeout

my $answer;
my $smiley;
my ( $backend_socket, $user ) = @_;

if (   not defined $backend_socket
    or !-S $backend_socket
    or !$backend_socket->connected ) {
    <[base.log]>->(
        0,
        "[!] net.unix.authme: can not authenticate (no valid socket supplied)"
    );
    return undef;
}

if ( sysread( $backend_socket, $smiley, 4 ) ) {
    if ( $smiley =~ />:\]\n/ ) {
        <[base.log]>->( 1, '[*] protocol banner detected..' );
    } else {
        <[base.log]>->( 0, '[#] no valid smiley found! :(' );
        return undef;
    }
    <[net.out]>->( $backend_socket, "select unix\n" );
    <[base.sleep]>->(0.2);
    $answer = <$backend_socket>;
    if ( $answer =~ /ACK continue\n/ ) {
        <[base.log]>->( 1, '[*] unix auth. selected' );
    } else {
        <[base.log]>->( 0, '[#] unix auth. not available!' );
        return undef;
    }
    <[net.out]>->( $backend_socket, "auth $user\n" );
    if ( sysread( $backend_socket, $answer, 9 ) ) {
        if ( $answer =~ /YEAH/ ) {
            <[base.log]>->( 1, '[*] successfully authenticated :)' );
            return $backend_socket;
        } elsif ( $answer =~ /FAIL/ ) {
            <[base.log]>->( 0, '[#] access denied :(' );
            return undef;
        } else {
            <[base.log]>->( 0, '[#] protocol error :(' );
            return undef;
        }
    }
}
