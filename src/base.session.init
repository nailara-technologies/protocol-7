# >:]

# name  = base.session.init
# descr = creates / initializes a new session

my ( $fd, $proto, $mode, $name ) = @_;

$proto //= 'nailara';
$mode  //= 'client';

my $re = $data{'regex'}{'base'};

if ( not defined $fd ) {
    <[base.log]>->(
        0, "[!] base.session.init: [undefined filehandle] can't create session!"
    );
    <[base.session.check_last]>;
    return -1;
}

if ( defined $name and $name !~ /^$re->{usr}$/ ) {
    <[base.log]>->(
        0, "base.session.init: value '$name' for parameter name is invalid"
    );
    <[base.session.check_last]>;
    return -1;
}

$name //= <base.session.uname_server>;

if ( not defined $data{'proto'}{$proto} ) {
    <[base.log]>->( 0, "base.session.init: unknown protocol '$proto'" );
    <[base.session.check_last]>;
    return -1;
}

my $initialized = $mode eq 'server' ? 1 : 0;

my $id = <[base.list.element.add]>->(
    {   'key_ref' => \$data{'session'},
        'val_ref' => \{
            'start_time'     => <[base.time]>->(5),
            'proto'          => $proto,
            'handle'         => $fd,
            'link'           => $data{'handle'}{$fd}{'link'},
            'mode'           => $mode,
            'state'          => 0,
            'shutdown'       => 0,
            'initialized'    => $initialized,
            'flush_shutdown' => 0,
            'user'           => $name,
            'size'           => {
                'buffer' => {
                    'input'  => $data{'size'}{'buffer'}{'input'},
                    'output' => $data{'size'}{'buffer'}{'output'},
                }
            }
        }
    }
);

if ( $name ne <base.session.uname_server> ) {
    $mode = $data{'user'}{$name}{'session'}{$id}{'mode'} = 'client';
}

$data{'handle'}{$fd}{'cid'} = $id if $mode eq 'client';

$data{'watcher_list'}{'paused'} = []
    if not defined $data{'watcher_list'}{'paused'}
    or ref( $data{'watcher_list'}{'paused'} ) ne 'ARRAY';

$data{'session'}{$id}{'watcher'}{'shutdown_trigger'} = <[event.add_var]>->(
    {   'var'     => \$data{'session'}{$id}{'shutdown'},
        'poll'    => 'w',
        'handler' => 'base.session.check.close',
        'repeat'  => 0,
        'data'    => $id,
        'desc'    => "[$id] shutdown trigger"
    }
);

$data{'session'}{$id}{'watcher'}{'flush_shutdown'} = <[event.add_var]>->(
    {   'var'     => \$data{'session'}{$id}{'flush_shutdown'},
        'poll'    => 'w',
        'handler' => 'base.session.check.flushed',
        'repeat'  => 0,
        'data'    => $id,
        'desc'    => "[$id] flush output and shutdown trigger"
    }
);

$data{'session'}{$id}{'watcher'}{'input_buffer'} = <[event.add_var]>->(
    {   'var'     => \$data{'session'}{$id}{'buffer'}{'input'},
        'handler' => 'base.handler.input',
        'poll'    => 'w',
        'repeat'  => 1,
        'data'    => $id,
        'desc'    => "[$id] input buffer"
    }
);

$data{'session'}{$id}{'watcher'}{'output_buffer'} = <[event.add_var]>->(
    {   'var'     => \$data{'session'}{$id}{'buffer'}{'output'},
        'handler' => 'base.handler.write',
        'poll'    => 'w',
        'data'    => $id,
        'prio'    => -1,
        'repeat'  => 0,
        'desc'    => "[$id] output buffer"
    }
);

if ( $mode eq 'server' ) {
    <[event.add_io]>->(
        {   'fd'      => $fd,
            'handler' => 'base.handler.connect',
            'data'    => $id
        }
    );
} else {

    my @timeout
        = ( $proto ne 'nailara' or $name ne <base.session.uname_server> )
        ? ()
        : (
        # set up authentication (input) timeout for nailara protocol sessions
        'timeout' => <net.authentication.timeout> || 13,
        'timeout_cb' => sub {
            <[base.log]>->( 1, "[$id] authentication timeout!" );
            $data{'session'}{$id}{'buffer'}{'output'} .= ">:|\n";
            $data{'session'}{$id}{'shutdown'} = 1;
        }
        );

    # http[d] timeout
    @timeout = (
        'timeout' => <httpd.timeout> || 13,
        'timeout_cb' => sub {
            <[base.log]>->( 1, "[$id] http timeout!" );
            $data{'session'}{$id}{'shutdown'} = 1;
        }
    ) if $proto eq 'http' and $name eq <base.session.uname_server>;

    $data{'session'}{$id}{'watcher'}{'input_handler'} = Event->io(
        'fd'     => $fd,
        'cb'     => $code{'base.handler.read'},
        'prio'   => 1,
        'data'   => $id,
        'repeat' => 0,
        'desc'   => "[$id] input handler",
        @timeout    # disabled eventually in 'base.handler.auth'
    );
}

<[base.session.init_state]>->( $id, 0 );

return $id;
