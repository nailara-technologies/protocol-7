# >:]

# name  = base.session.init
# descr = creates and initializes a new session

my ( $fd, $protocol, $mode, $name ) = @_;

$protocol //= 'protocol-7';
$mode     //= 'client';

my $re = $data{'regex'}{'base'};

if ( not defined $fd ) {
    <[base.log]>->(
        0, '< base.session.init > [undefined filehandle] can not create session'
    );
    <[base.session.check_remaining]>;
    return undef;
}

if ( defined $name and $name !~ m|^$re->{usr}$| ) {
    <[base.log]>->(
        0, "< base.session.init > value '$name' for parameter name is not valid"
    );
    <[base.session.check_remaining]>;
    return undef;
}

$name //=
    $mode eq 'server'
    ? <base.session.uname_server>
    : <base.session.uname_client>;

if ( not defined $data{'protocol'}{$protocol} ) {
    <[base.log]>->( 0, "< base.session.init > unknown protocol '$protocol'" );
    <[base.session.check_remaining]>;
    return undef;
}

my $initialized = $mode eq 'server' ? 1 : 0;

my $id = <[base.list.element.add]>->(
    {   'key_ref' => \$data{'session'},
        'val_ref' => \{
            'start_time'     => <[base.time]>->(5),
            'protocol'       => $protocol,
            'handle'         => $fd,
            'link'           => $data{'handle'}{$fd}{'link'},
            'mode'           => $mode,
            'state'          => 0,
            'shutdown'       => 0,
            'initialized'    => $initialized,
            'flush_shutdown' => 0,
            'user'           => $name,
            'size'           => {
                'buffer' => {
                    'input'  => $data{'size'}{'buffer'}{'input'},
                    'output' => $data{'size'}{'buffer'}{'output'},
                }
            },
            'buffer' => { 'input' => '', 'output' => '' }
        }
    }
);

if ( $name ne <base.session.uname_server> ) {
    $mode = $data{'user'}{$name}{'session'}{$id}{'mode'} = 'client';
}

$data{'handle'}{$fd}{'cid'} = $id if $mode eq 'client';

$data{'watcher_list'}{'paused'} = []
    if not defined $data{'watcher_list'}{'paused'}
    or ref( $data{'watcher_list'}{'paused'} ) ne 'ARRAY';

$data{'session'}{$id}{'watcher'}{'shutdown_trigger'} = <[event.add_var]>->(
    {   'var'     => \$data{'session'}{$id}{'shutdown'},
        'poll'    => 'w',
        'handler' => 'base.session.check.close',
        'repeat'  => 0,
        'data'    => $id,
        'desc'    => "[$id] shutdown trigger"
    }
);

$data{'session'}{$id}{'watcher'}{'flush_shutdown'} = <[event.add_var]>->(
    {   'var'     => \$data{'session'}{$id}{'flush_shutdown'},
        'poll'    => 'w',
        'handler' => 'base.session.check.flushed',
        'repeat'  => 0,
        'data'    => $id,
        'desc'    => "[$id] flush output and shutdown trigger"
    }
);

$data{'session'}{$id}{'watcher'}{'input_buffer'} = <[event.add_var]>->(
    {   'var'     => \$data{'session'}{$id}{'buffer'}{'input'},
        'handler' => 'base.handler.input',
        'poll'    => 'w',
        'repeat'  => 1,
        'data'    => $id,
        'desc'    => "[$id] input buffer"
    }
);

$data{'session'}{$id}{'watcher'}{'output_buffer'} = <[event.add_var]>->(
    {   'var'     => \$data{'session'}{$id}{'buffer'}{'output'},
        'handler' => 'base.handler.write',
        'poll'    => 'w',
        'data'    => $id,
        'prio'    => -1,
        'repeat'  => 0,
        'desc'    => "[$id] output buffer"
    }
);

if ( $mode eq 'server' ) {
    <[event.add_io]>->(
        {   'fd'      => $fd,
            'handler' => 'base.handler.connect',
            'data'    => $id
        }
    );
} else {

    my @timeout
        = (
               $protocol ne 'protocol-7'
            or $name ne <base.session.uname_server>
            and $name ne <base.session.uname_client>
        )
        ? ()
        : (
        # set up auth. [input] timeout for protocol-7 sessions
        'timeout'    => <net.auth.timeout> || 13,
        'timeout_cb' => sub {
            <[base.log]>->( 1, "[$id] authentication timeout.," );
            $data{'session'}{$id}{'buffer'}{'output'} .= ">:|\n";
            $data{'session'}{$id}{'shutdown'} = 1;
        }
        );

    if ( $protocol eq 'http' and $name eq <base.session.uname_server> ) {

        # http[d] timeout
        @timeout = (
            'timeout'    => <httpd.timeout> || 13,
            'timeout_cb' => sub {
                <[base.log]>->( 1, "[$id] .. http timeout .," );
                $data{'session'}{$id}{'shutdown'} = 1;
            }
        );
    } elsif ( defined <net.input_timeout> ) {    # generic input timeout
        <[base.log]>->(
            2, 'setting up ' . <net.input_timeout> . ' seconds input timeout'
        );
        @timeout = (
            'timeout'    => <net.input_timeout>,
            'timeout_cb' => sub {
                <[base.log]>->(
                    1,
                    sprintf( "[$id] input timeout after %s seconds.",
                        <net.input_timeout> )
                );
                $data{'session'}{$id}{'shutdown'} = 1;
            }
        );
    }
    $data{'session'}{$id}{'watcher'}{'input_handler'} = Event->io(
        'fd'     => $fd,
        'cb'     => sub { &{ $code{'base.handler.read'} } },
        'prio'   => 1,
        'data'   => $id,
        'repeat' => 0,
        'desc'   => "[$id] input handler",
        @timeout    # disabled eventually in 'base.handler.auth'
    );
}

if ( not <[base.session.init_state]>->( $id, 0 ) ) {
    $data{'session'}{$id}{'shutdown'} = 1;
    warn "cannot initialize $protocol protocol session $id";
    return undef;
}

return $id;
# ______________________________________________________________________________
#\\FJ7SJ6NEJZVMBWXCK22GKG325A732FWHKP77UEFHZGHYK645SHAFPB4E4FM7E5WGZI6V4ZHHO5NRG
# \\ EMVZ2XASTIG37DKP7VGJ2AT6GKAZFKRQ6I33E5B4VJ76E7N4TJ3V \\// C25519-BASE-32 //
#  \\// BFM6JOKSX2PACN52KSYFHA3XMOLYKZD3SQEFZXQIG7MBLMEHMCY \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
