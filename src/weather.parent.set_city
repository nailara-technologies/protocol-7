# >:]

# name = weather.parent.set_city

my $city      = shift;
my $cache_dir = <weather.cache_dir>;
die "expected city parameter"          if not defined $city or !length($city);
die "cache dir '$cache_dir' not found" if !-d $cache_dir;
my $city_file = "$cache_dir/city.current";

<[weather.parent.get_station_id]>->($city);

<weather.cfg.city> = $city;

<[base.log]>->( 1, "writing location '$city' to disk cache.," );

<[file.put]>->( $city_file, time() . " $city\n" );

if ( defined <weather.station_id> ) {    # cached id found
    <[weather.parent.populate_html_dir]>->(<weather.station_id>);
    <[weather.parent.update_current]>->(<weather.station_id>);
    <[weather.parent.update_forecast]>->(<weather.station_id>);

    if ( !<weather.agent.initialized> ) {
        <[base.async.get_session_id]>;    # change agent status to 'online'
        <weather.agent.initialized> = 1;
    }

    if (    defined <weather.get-urls.reply_ids>
        and ref(<weather.get-urls.reply_ids>) eq 'ARRAY'
        and @{<weather.get-urls.reply_ids>} ) {
        my $url_list_str;
        map { $url_list_str .= "$_\n" }
            <[weather.parent.get_url_list]>->(<weather.station_id>);
        foreach my $reply_id ( @{<weather.get-urls.reply_ids>} ) {
            <[base.callback.cmd_reply]>->(
                $reply_id,
                {   'mode' => 'data',
                    'data' => $url_list_str
                }
            );
            delete <weather.get-urls.reply_ids>;
        }
    }
}

# ______________________________________________________________________________
#\\6A3WC5TR5NHOIAN4BJ3WXWFKNPAWISLWTVOTZH2HBLOKO3GGF4E4NB6PILIB7V3UN225VUZHWGQQG
# \\ GSYAN5GRKLFDKYJIITMVWRRTDIBE6RYSJ3FVSU3JW2LSHU7TEHQS \\// C25519-BASE-32 //
#  \\// PDRLNJV4KYNY3E4XB3O3X77LIVANYA2EOOBOR3MPNBVTNXVPIAA \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
