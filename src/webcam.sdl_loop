# >:]

# name = webcam.sdl_loop

<[base.log]>->( 1, "initializing.." );

$ENV{'DISPLAY'}         = <x11.display>;
$ENV{'SDL_AUDIODRIVER'} = 'disk';

my $http = LWPx::ParanoidAgent->new();

my $image_data;
my $last_modified = '';

$http->agent(<webcam.user_agent>);
$http->whitelisted_hosts( sub { return 1 } );
$http->protocols_allowed( [ 'http', 'https' ] );
$http->timeout(<webcam.http_timeout>);

my $font_path = <system.root_path> . '/data/ttf/droid/DroidSansMono.ttf';

my $screen_width;
my $screen_height;

die "no coordinates received" if not exists <x11.coordinates>;
my $coord = <x11.coordinates>;
( $screen_width, $screen_height ) = (
    $coord->{'right'} - $coord->{'left'},
    $coord->{'bottom'} - $coord->{'top'}
);

SDL::putenv("SDL_VIDEO_WINDOW_POS=$coord->{left},$coord->{top}");

SDL::init( SDL_INIT_VIDEO() );

SDL::Mouse::show_cursor( SDL_DISABLE() );

SDL::Video::wm_set_caption( <system.agent.name> . '(' . $$ . ')',
    <system.agent.name> . '(' . $$ . ') [minimized]' );

SDL::TTF::init();

my $font;
my $err_font;
my $err_color;
my $font_color;
my $font_size = <webcam.font_size>;
my $bg_color = SDL::Color->new( 0x13, 0x13, 0x13 );

<[base.log]>->( 1, ": loading text font" );
$font = SDL::TTF::open_font( $font_path, $font_size );
warn "failed to open font [" . SDL::get_error() . "]" if !$font;
$font_color = SDL::Color->new( 0xAA, 0xAA, 0x00 );    # error message color

<[base.log]>->( 1, ": opening webcam display screen" );

my $screen = SDL::Video::set_video_mode( $screen_width, $screen_height, 32,
    SDL_DOUBLEBUF() | SDL_HWSURFACE() | SDL_HWACCEL() | SDL_NOFRAME()
        | SDL_PREALLOC() | SDL_ASYNCBLIT() );

my $bg_col_map = SDL::Video::map_RGB( $screen->format(),
    $bg_color->r, $bg_color->g, $bg_color->b );

SDL::Video::fill_rect( $screen,
    SDL::Rect->new( 0, 0, $screen->w, $screen->h ), $bg_col_map );
SDL::Video::flip($screen);

my $title_pattern = <system.agent.name> . '\(' . $$ . '\)';
if ( not defined <[base.x11.wait_for_window]>->($title_pattern) ) {
    <[base.log]>->( 0, "agent startup failure (sdl window did not open)" );
    exit(2);
} else {
    <[base.x11.assign_window]>;
}

<[base.log]>->( 1, "entering webcam loop ..." );

# verify_instance reply
loop_wait(0.888);

my $warned_cam = 0;

my $x_offset           = 0;
my $y_offset           = 0;
my $last_scaled_height = 0;

while (1) {

    my $response;
    $http->max_size(0);
    my $last_image_date;

    unless ( length(<webcam.image_url>)
        or not defined $last_image_date
        or $response = $http->get(<webcam.image_url>)
        and $response->is_success
        and $last_image_date = $response->{'_headers'}->{'last-modified'}
        and $last_image_date ne $last_modified ) {
        SDL::Video::flip($screen);

        # ping replies / logging
        loop_wait(222);
    }
    $last_modified = $last_image_date;
    $http->max_size(undef);
    my $dl_time = time();

    my $timed_out = 0;
    {
        local $SIG{'ALRM'} = sub { $timed_out = 1 };
        alarm( <webcam.http_timeout> + 1 );

        # warn "< get >"; # LLL: needs automatically adjusted interval !!!
        $response = $http->get(<webcam.image_url>)
            if length(<webcam.image_url>);
        alarm(0);
    }

    if ( length(<webcam.image_url>) and $response->is_success and !$timed_out )
    {

        <[base.log]>->( 0, ": webcam is reachable again!" ) if $warned_cam;
        $warned_cam      = 0;
        $image_data      = $response->content;
        $last_image_date = $response->{'_headers'}->{'last-modified'};

        my $rw    = SDL::RWOps->new_const_mem($image_data);
        my $image = SDL::Image::load_JPG_rw($rw);
        die SDL::get_error() if ( !$image );

        my $zoom = ( $screen->w / $image->w );
        my $scaled
            = SDL::GFX::Rotozoom::surface( $image, 0, $zoom, SMOOTHING_ON() );

        SDL::Video::fill_rect( $screen,
            SDL::Rect->new( 0, 0, $screen->w, $screen->h ), $bg_col_map );

        $y_offset = sprintf( "%.0f", ( $screen->h - $scaled->h ) / 2 )
            if $scaled->h != $screen->h;

        $last_scaled_height = $scaled->h;

        # copy scaled image to screen
        SDL::Video::blit_surface( $scaled,
            SDL::Rect->new( 0, 0, $scaled->w, $scaled->h ),
            $screen,
            SDL::Rect->new( $x_offset, $y_offset, $screen->w, $screen->h ) );

    } else {    ## display error message in 'unreachable' case
        my $status_str
            = !length(<webcam.image_url>)
            ? 'no cam url defined'
            : $response->status_line;
        my $err_msg = "download failed [$status_str]";
        if ( !$warned_cam ) {
            <[base.log]>->( 0, $err_msg );

            my $err_pos_x = $x_offset + 8;
            my $err_pos_y = 100;

            $err_pos_y
                = ( $y_offset and $last_scaled_height < $screen->h )
                ? $y_offset + $last_scaled_height - $font_size - 15
                : $screen->h - $font_size - 15;

            # text shadow
            my $w_txt
                = SDL::TTF::render_utf8_blended( $font,
                '[ ' . <webcam.error_string> . ' ]', $bg_color );
            SDL::Video::blit_surface(
                $w_txt,
                SDL::Rect->new( 0, 0, $w_txt->w, $w_txt->h ),
                $screen,
                SDL::Rect->new(
                    $err_pos_x + 2,
                    $err_pos_y + 1,
                    $w_txt->w, $w_txt->h
                ),
            );

            # foreground text
            $w_txt
                = SDL::TTF::render_utf8_blended( $font,
                '[ ' . <webcam.error_string> . ' ]', $font_color );
            SDL::Video::blit_surface(
                $w_txt,
                SDL::Rect->new( 0, 0, $w_txt->w, $w_txt->h ),
                $screen,
                SDL::Rect->new( $err_pos_x, $err_pos_y, $w_txt->w, $w_txt->h ),
            );

        }
        $warned_cam = 1;

        # ping replies / logging
        loop_wait(0.333);
    }
    SDL::Video::flip($screen);

    # ping replies / logging
    loop_wait(0.222);
}

sub loop_wait {    # processing network event while waiting
    my $tw = shift // 0;
    my $ts = <[base.time]>->(3);
    while ( <[base.time]>->(3) - $ts < $tw ) {
        <[event.once]>->($tw);
        SDL::delay( $tw * 100 );
    }
}
