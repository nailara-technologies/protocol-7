# >:]

# name = nroot.handler.agent_status

my ( $instance_id, $status ) = @_;
die 'no instance id specified' if not defined $instance_id;
die 'no status submitted'      if not defined $status;
if ( $status eq 'shutdown'
    and not exists <nroot.agent.instance>->{$instance_id} ) {
    <[base.log]>->( 2, "instance $instance_id is not present [ status-skip ]" );
    return;
}
return <[base.log]>->(
    2,
    "agent_status : no such agent instance [ $instance_id ] <status:$status>"
    )
    if not exists <nroot.agent.instance>
    or not exists <nroot.agent.instance>->{$instance_id};

my $globals  = <nroot.start_setup.globals> || {};
my $instance = <nroot.agent.instance>->{$instance_id};

my $old_status   = $instance->{'status'} // $status;
my $agent_id     = $instance->{'agent_id'};
my $object_id    = <[agent.get_object_id]>->($agent_id);
my $agent_name   = <nroot.agent.setup>->{$agent_id}->{'name'};
my $job_id       = $instance->{'job_id'};
my $agent_config = <nroot.start_setup.agents.config>->{$agent_name};

# some cleanup
<[base.clean_hashref]>->($globals);
<[base.clean_hashref]>->($agent_config);

# initialize timer defaults
$instance->{'restart_delay'}
    //= $agent_config->{'restart'}->{'min_delay'}
    || $globals->{'restart'}->{'min_delay'}
    || 0.05;    # <-- minimum restart delay default [ in seconds ]
my $max_restart_delay
    = $agent_config->{'restart'}->{'max_delay'}
    || $globals->{'restart'}->{'max_delay'}
    || 300;     # <-- 5 minutes [ internal default ]
my $status_timer_delay
    = $agent_config->{'heartbeat'}->{'after'}
    || $globals->{'heartbeat'}->{'after'}
    || 2;       # <-- [initial] heartbeat delay default
my $status_timer_interval
    = $agent_config->{'heartbeat'}->{'interval'}
    || $globals->{'heartbeat'}->{'interval'}
    || 5;       # <-- heartbeat interval default

return
        if defined $status
    and defined $instance->{'status'}
    and $instance->{'status'} eq $status;

## record previus status and duration ##
$instance->{'prev-status'}          = $old_status;
$instance->{'prev-status-duration'} = <[base.parser.duration]>
    ->( <[base.n2u_time]>->( $instance->{'status-since'} ) );

<nroot.agent.instance>->{$instance_id}->{'status-since'} = <[base.ntime]>->(3);

$instance->{'heartbeat'} //= {};
$instance->{'heartbeat'}->{'retry_timeout'}
    //= 2;    # short timeout on heartbeat error

if ( exists $instance->{'timer'}->{'verify_instance'} ) {
    $instance->{'timer'}->{'verify_instance'}->cancel;
    delete $instance->{'timer'}->{'verify_instance'};
    delete $instance->{'timer'} if !keys %{ $instance->{'timer'} };
}

if ( exists $instance->{'pid_check_timer'} and $status ne 'delayed' ) {
    $instance->{'pid_check_timer'}->cancel;
    delete $instance->{'pid_check_timer'};
}

# prevent undesired core shutdown [ 'session.check.last' ]
if ( $status eq 'offline' and exists $instance->{'session_id'} ) {
    <[base.log]>->( 0, "removing session.closing_last callback.," );
    delete <callback.session.closing_last>;
}

delete $instance->{'core_sid'}
    if $status ne 'online'
    and $status ne 'extbin'
    and ( $old_status eq 'online' or $old_status eq 'extbin' );

# 'nroot-post-init' code
my $init_code = <nroot.start_setup.agents.startup.init_code>->{$agent_name};
if ( ( $status eq 'online' or $status eq 'extbin' )
    and exists $init_code->{'nroot-post-init'} ) {
    <[base.log]>->( 2, "'$agent_name'-agent post-init-code.," );
    <nroot.current-init-data> = $instance->{'init_data'};
    my @post_init_code = <[base.parser.config]>->(
        $init_code->{'nroot-post-init'},
        "\$data{'nroot'}{'agent'}{'instance'}{$instance_id}{'init_data'}"
    );
    map {
        $ARG =~ s|<instance_id>|$instance_id|g;
        $ARG =~ s|<agent_name>|$agent_name|g;
    } @post_init_code;
    <[base.execute_agent_code]>->(@post_init_code);
}
if (    ( $status eq 'online' or $status eq 'extbin' )
    and exists $init_code->{'nroot-post-init'}
    and exists $instance->{'init_data'} ) {
    my $init_status = $instance->{'init_data'}->{'status'} || {};
    if ( not exists $init_status->{'post-init'}
        or !$init_status->{'post-init'} ) {
        <[base.log]>->( 0, "instance $instance_id : error in post-init code" );
        $status = 'error';
    }
    <[base.log]>->( 2, "cleaning up instance $instance_id init_data" );
    delete <nroot.current-init-data>;
    delete $instance->{'init_data'};
}

$instance->{'status'} = $status;
<[base.log]>->(
    1,
    sprintf(
        "instance %d ['%4s'] %8s --> %s",
        $instance_id, $agent_name, $old_status, $status
    )
);

# quickly terminate leftover processes
if (    $status ne 'starting'
    and $status ne 'online'
    and $status ne 'extbin'
    and exists $instance->{'process'}
    and defined $instance->{'process'}->{'id'} ) {

    map { <[nroot.terminate_process]>->($ARG) } (
        $instance->{'process'}->{'id'},
        <[nroot.instance_child_pids]>->($instance_id),
        <[nroot.sub-process.orphan_pids]>    # LLL: <- make obsolete. [ heavy ]
    );
}

if ( $old_status ne 'error' and $status eq 'error' ) {
    $instance->{'restart_delay'}
        = sprintf( "%.2f", $instance->{'restart_delay'} * 1.2 );
    $instance->{'restart_delay'}
        = sprintf( "%.1f", $instance->{'restart_delay'} )
        if $instance->{'restart_delay'} > 10;
    $instance->{'restart_delay'}
        = sprintf( "%.0f", $instance->{'restart_delay'} )
        if $instance->{'restart_delay'} > 20;

    # warn ' < restart-delay > ' . $instance->{'restart_delay'};
    # warn " < old-status > $old_status [ $status ]";
}
$instance->{'restart_delay'} = $max_restart_delay
    if $instance->{'restart_delay'} > $max_restart_delay;
if (    $status ne 'online'
    and $status ne 'extbin'
    and exists $instance->{'timer'}->{'reset_restart_delay'} ) {
    $instance->{'timer'}->{'reset_restart_delay'}->cancel;
    delete $instance->{'timer'}->{'reset_restart_delay'};
}

# instance startup error hooks
if (    $old_status ne 'online'
    and $old_status ne 'extbin'
    and $status eq 'error' ) {
    $instance->{'startup_error'} //= $agent_config->{'startup-error'}
        if defined $agent_config->{'startup-error'};
    my $start_err_cfg = $instance->{'startup_error'} // {};
    ## : startup-error : section code ###
    if (    exists $init_code->{'startup-error'}
        and ref( $init_code->{'startup-error'} ) eq 'ARRAY'
        and my @start_error_code = @{ $init_code->{'startup-error'} } ) {
        ## : startup-error : agent code section :
        map {
            $ARG =~ s|<instance_id>|$instance_id|g;
            $ARG =~ s|<agent_name>|$agent_name|g
        } @start_error_code;
        <[base.execute_agent_code]>
            ->( <[base.parser.config]>->( \@start_error_code ) );
        ##
    }
    ##
    if ( not defined $instance->{'startup-error-retries'} ) {
        $instance->{'startup-error-retries'} = $start_err_cfg->{'retry-count'}
            // 0;
        $instance->{'restart_delay'} = $start_err_cfg->{'retry-min-delay'}
            if defined $start_err_cfg->{'retry-min-delay'};
    }
    if ( $instance->{'startup-error-retries'}-- ) {
        <[base.log]>->(
            1,
            sprintf(
                ": instance %d : startup-retries : %d :",
                $instance_id, $instance->{'startup-error-retries'}
            )
        );
    } else {
        delete $instance->{'core_sid'};
        <[agent.change_status]>->( $instance_id, 'offline' )
            if $old_status ne 'error';
        return;
    }
}

if (   $status eq 'offline'
    or $status eq 'error'
    and defined $agent_config->{'restart'}->{'disabled'}
    and $agent_config->{'restart'}->{'disabled'} == 1 ) {
    <[base.log]>->( 1, ": no auto-restart for instance $instance_id" );
    <[agent.cmd.stop]>->( { 'args' => $instance_id, 'mode' => 'implicit' } );
    return;
}

delete $instance->{'core_sid'} if $status eq 'restart';

# select correct target job queue
my $target_queue;
$target_queue = 'running' if $status eq 'online' or $status eq 'extbin';
$target_queue = 'error'   if $status eq 'error';
$target_queue = 'queued'  if $status eq 'offline' or $status eq 'restart';

<[jobqueue.move_job]>->( $instance->{'job_id'}, $target_queue )
    if defined $target_queue and $target_queue ne 'queued';

# replying to startup notification requests.,

my @check_keys
    = defined $instance->{'subname'}
    ? (
    $agent_name . '[' . $instance->{'subname'} . ']',
    $agent_name, $instance_id
    )
    : ( $agent_name, $instance_id );
foreach my $name_or_id (@check_keys) {
    my $name_str = $name_or_id =~ m|^\d+$| ? $name_or_id : "'$name_or_id'";
    if ( exists <nroot.agent.notify_offline>->{$name_or_id}
        and $status eq 'shutdown' ) {
        map {
            <[base.callback.cmd_reply]>->(
                $ARG,
                {   'mode' => 'ack',
                    'data' => "instance $name_str is terminated"
                }
            );
        } @{ <nroot.agent.notify_offline>->{$name_or_id} };
        delete <nroot.agent.notify_offline>->{$name_or_id};
    }
    if ( exists <nroot.agent.notify_online>->{$name_or_id} ) {
        if ( $status eq 'shutdown' ) {
            map {
                <[base.callback.cmd_reply]>->(
                    $ARG,
                    {   'mode' => 'nak',
                        'data' => "instance $name_str is terminated"
                    }
                );
            } @{ <nroot.agent.notify_online>->{$name_or_id} };
        } elsif ( $status =~ m{^(online|extbin|error)$}
            or $status eq 'offline'
            and defined $agent_config->{'restart'}->{'disabled'}
            and $agent_config->{'restart'}->{'disabled'} == 1 ) {
            while ( my $reply_id
                = shift @{ <nroot.agent.notify_online>->{$name_or_id} } ) {
                my $startup_reply_mode
                    = ( $status eq 'online' or $status eq 'extbin' )
                    ? 'ack'
                    : 'nak';
                my $what = $name_or_id =~ m|^\d+$| ? 'agent instance' : 'agent';
                my $startup_reply_msg
                    = "$what '$name_or_id' startup "
                    . "not successful [status=$status]";

                if ( $status eq 'online' ) {
                    $startup_reply_msg
                        = sprintf( "$what '$name_or_id' is online [%d]",
                        $instance->{'core_sid'} );
                } elsif ( $status eq 'extbin' ) {
                    $what =~ s|^agent|external program|;
                    $startup_reply_msg
                        = sprintf( "$what '$name_or_id' is running [PID=%d]",
                        $instance->{'process'}->{'id'} );
                }

                <[base.callback.cmd_reply]>->(
                    $reply_id,
                    {   'mode' => $startup_reply_mode,
                        'data' => $startup_reply_msg
                    }
                );
            }
            delete <nroot.agent.notify_online>->{$name_or_id};
        }
    }
}

# delayed restarting on startup error [ .. slowing down with errors .., ]
<[nroot.init_restart_timer]>->($instance_id)
    if defined $target_queue
    and $target_queue eq 'queued'
    and !<[nroot.instance_pid_count]>->($instance_id);

if (    $status ne 'online'
    and $status ne 'extbin'
    and $status ne 'starting'
    and ( $old_status eq 'online' or $old_status eq 'extbin' ) ) {

    # shutdown instances with unresolved dependencies
    foreach my $dep_id ( <[dependency.get_reverse]>->($object_id) ) {
        next if <[dependency.ok]>->($dep_id);
        map {
            <[agent.instance.restart]>->($ARG)
                if not exists <nroot.agent.instance>->{$ARG}->{'stopping'}
            } @{
            <[agent.instance.get_ids]>->(
                <dependency.object>->{$dep_id}->{'agent_id'}
            )
            };
    }
}

if ( $status eq 'shutdown'
    or exists <agent.instance.shutdown>->{$instance_id} ) {
    $status = 'shutdown' if $status ne 'shutdown';
    delete <nroot.agent.instance>->{$instance_id};
    delete <agent.instance.shutdown>->{$instance_id};
    <[base.log]>->( 2, "instance $instance_id terminated ['shutdown']" );
}

if ( $old_status ne 'online' and $status eq 'online' ) {    # LLL: extbin ?

    delete $instance->{'startup-error-retries'};            ## <-- if present ##

    if ( defined $instance->{'timer'}->{'startup-timeout'} ) {
        $instance->{'timer'}->{'startup-timeout'}->cancel
            if $instance->{'timer'}->{'startup-timeout'}->is_active;
        delete $instance->{'timer'}->{'startup-timeout'};
    }

    $instance->{'timer'}->{'reset_restart_delay'} = <[event.add_timer]>->(
        {   'repeat'  => 0,
            'after'   => 4.2,
            'handler' => 'nroot.handler.reset_restart_delay',
            'data'    => $instance_id
        }
    );

    if ( not exists $agent_config->{'heartbeat'}->{'disabled'}
        or !$agent_config->{'heartbeat'}->{'disabled'} ) {
        <[base.log]>->(
            2, "setting up heartbeat response timer < instance $instance_id >"
        );

        <[nroot.stop_heartbeat_timer]>->($instance_id);
        <[nroot.enable_heartbeat_timer]>->($instance_id);

    } else {
        <[base.log]>->(
            2, ": no heartbeat check enabled < $instance_id [$agent_name] >"
        );
    }

    # clean up temporary agent instance startup data
    delete $instance->{'init_data'};

    # set core session to 'initialized'
    if (    defined $instance->{'core_sid'}
        and $old_status ne 'online'
        and $status eq 'online' ) {
        my $root_sid = $instance->{'root_sid'};
        my $core_sid = $instance->{'core_sid'};
        <[base.protocol-7.command.send.local]>->(
            {   'command'   => "$root_sid.set-initialized",
                'call_args' => { 'args' => $core_sid }
            }
        );
    }

    # start next delayed agent of the same name ..,
    foreach my $id ( @{ <[agent.instance.get_ids]>->($agent_id) } ) {
        next
            if $id == $instance_id
            or <nroot.agent.instance>->{$id}->{'status'} ne 'delayed';
        my $j_id = <nroot.agent.instance>->{$id}->{'job_id'};
        <[base.log]>->( 1, "starting delayed '$agent_name' agent instance..," );
        <[jobqueue.exec_job]>->($j_id);
        last;
    }
}

<[nroot.stop_heartbeat_timer]>->($instance_id) if $status ne 'online';

<[jobqueue.check_dependencies]>;

# ______________________________________________________________________________
#\\JRV4UWM55WYCCEIUFS6ANQSOBVJO6IPS3ZPIGICDYQYE3O22YW7RGJ5CNQNLP5GSAAMTOHFDHRJMW
# \\ 7PUZYQIOGVHHD3OTR7DWKIBEVWAK6RI6BDH7LNN7H3OQYVRKCGYC \\// C25519-BASE-32 //
#  \\// FZEZIESTBLOTH6BD2KX2ZAA3YWLXNSDRUAQZV7A44SUHTTNHEDY \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
