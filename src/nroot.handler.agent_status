# >:]

# name = nroot.handler.agent_status

my ( $instance_id, $status ) = @_;
die "no instance id specified" if not defined $instance_id;
die "no status submitted"      if not defined $status;
if ( $status eq 'shutdown'
    and not exists <nroot.agent.instance>->{$instance_id} ) {
    <[base.log]>->(
        2, "instance $instance_id already gone, skipping status change!"
    );
    return;
}
return <[base.log]>->(
    2, "agent_status: no such agent instance ($instance_id) [status:$status]"
    )
    if not exists <nroot.agent.instance>
    or not exists <nroot.agent.instance>->{$instance_id};

my $globals  = <nroot.spawn_config.globals> || {};
my $instance = <nroot.agent.instance>->{$instance_id};

my $old_status   = $instance->{'status'} // $status;
my $agent_id     = $instance->{'agent_id'};
my $object_id    = <[agent.get_object_id]>->($agent_id);
my $agent_name   = <nroot.agent.setup>->{$agent_id}->{'name'};
my $job_id       = $instance->{'job_id'};
my $agent_config = <nroot.spawn_config.agents.config>->{$agent_name};

# some cleanup
delete $agent_config->{'respawn'} if !keys %{ $agent_config->{'respawn'} };
delete $agent_config->{'ping'}    if !keys %{ $agent_config->{'ping'} };
delete $globals->{'respawn'}      if !keys %{ $globals->{'respawn'} };
delete $globals->{'ping'}         if !keys %{ $globals->{'ping'} };

# initialize timer defaults
$instance->{'respawn_delay'}
    //= $agent_config->{'respawn'}->{'min_delay'}
    || $globals->{'respawn'}->{'min_delay'}
    || 0.05;    # <-- minimum respawn delay default (in seconds)
my $max_respawn_delay
    = $agent_config->{'respawn'}->{'max_delay'}
    || $globals->{'respawn'}->{'max_delay'}
    || 300;     # <-- 5 minutes (internal default)
my $status_timer_delay
    = $agent_config->{'ping'}->{'after'}
    || $globals->{'ping'}->{'after'}
    || 2;       # <-- (initial) ping delay default
my $status_timer_interval
    = $agent_config->{'ping'}->{'interval'}
    || $globals->{'ping'}->{'interval'}
    || 5;       # <-- ping interval default

return
        if defined $status
    and defined $instance->{'status'}
    and $instance->{'status'} eq $status;

<nroot.agent.instance>->{$instance_id}->{'status-since'} = <[base.ntime]>->(3);

$instance->{'ping'} //= {};
$instance->{'ping'}->{'retry_timeout'} //= 2;    # short timeout on ping error

if ( exists $instance->{'timer'}->{'verify_instance'} ) {
    $instance->{'timer'}->{'verify_instance'}->cancel;
    delete $instance->{'timer'}->{'verify_instance'};
    delete $instance->{'timer'} if !keys %{ $instance->{'timer'} };
}

if ( exists $instance->{'pid_check_timer'} and $status ne 'delayed' ) {
    $instance->{'pid_check_timer'}->cancel;
    delete $instance->{'pid_check_timer'};
}

# prevent undesired core shutdown (session.check.last)
if ( $status eq 'offline' and exists $instance->{'session_id'} ) {
    <[base.log]>->( 0, "removing session.closing_last callback.." );
    delete <callback.session.closing_last>;
}

delete $instance->{'core_sid'}
    if $status ne 'online'
    and $status ne 'extbin'
    and ( $old_status eq 'online' or $old_status eq 'extbin' );

# 'nroot-post-init' code
my $init_code = <nroot.spawn_config.agents.startup.init_code>->{$agent_name};
if ( ( $status eq 'online' or $status eq 'extbin' )
    and exists $init_code->{'nroot-post-init'} ) {
    <[base.log]>->( 2, "'$agent_name'-agent post-init-code.." );
    my @post_init_code = <[base.parser.config]>->(
        $init_code->{'nroot-post-init'},
        "\$data{'nroot'}{'agent'}{'instance'}{$instance_id}{'init_data'}"
    );
    map { $_ =~ s/<instance_id>/$instance_id/g } @post_init_code;
    <[base.execute_agent_code]>->(@post_init_code);
}
if (    ( $status eq 'online' or $status eq 'extbin' )
    and exists $init_code->{'nroot-post-init'}
    and exists $instance->{'init_data'} ) {
    my $init_status = $instance->{'init_data'}->{'status'} || {};
    if ( not exists $init_status->{'post-init'}
        or !$init_status->{'post-init'} ) {
        <[base.log]>->( 0, "instance $instance_id : error in post-init code" );
        $status = 'error';
    }
    <[base.log]>->( 2, "cleaning up instance $instance_id init_data" );
    delete $instance->{'init_data'};
}

$instance->{'status'} = $status;
<[base.log]>->(
    1, "instance $instance_id [\'$agent_name\'] '$old_status' -> '$status'"
);

# quickly terminate leftover processes
if (    $status ne 'starting'
    and $status ne 'online'
    and $status ne 'extbin'
    and exists $instance->{'process'}
    and defined $instance->{'process'}->{'id'} ) {

    map { <[nroot.terminate_process]>->($_) } (
        $instance->{'process'}->{'id'},
        <[nroot.instance_child_pids]>->($instance_id),
        <[nroot.process.orphan_pids]>    # LLL: <- make obsolete! (heavy)
    );
}

if ( $old_status ne 'error' and $status eq 'error' ) {
    $instance->{'respawn_delay'}
        = sprintf( "%.2f", $instance->{'respawn_delay'} * 1.2 );
    $instance->{'respawn_delay'}
        = sprintf( "%.1f", $instance->{'respawn_delay'} )
        if $instance->{'respawn_delay'} > 10;
    $instance->{'respawn_delay'}
        = sprintf( "%.0f", $instance->{'respawn_delay'} )
        if $instance->{'respawn_delay'} > 20;
}
$instance->{'respawn_delay'} = $max_respawn_delay
    if $instance->{'respawn_delay'} > $max_respawn_delay;
if (    $status ne 'online'
    and $status ne 'extbin'
    and exists $instance->{'timer'}->{'reset_respawn_delay'} ) {
    $instance->{'timer'}->{'reset_respawn_delay'}->cancel;
    delete $instance->{'timer'}->{'reset_respawn_delay'};
}

# instance startup error hooks
if (    $old_status ne 'online'
    and $old_status ne 'extbin'
    and $status eq 'error' ) {
    if ( exists $init_code->{'startup-error'} ) {
        <[base.execute_agent_code]>
            ->( <[base.parser.config]>->( $init_code->{'startup-error'} ) );
    } else {
        delete $instance->{'core_sid'};
        <[agent.change_status]>->( $instance_id, 'offline' )
            if $old_status ne 'error';
        return;
    }
}

if (    $status eq 'offline'
    and defined $agent_config->{'respawn'}->{'disabled'}
    and $agent_config->{'respawn'}->{'disabled'} == 1 ) {
    <[base.log]>->( 1, ": no auto-respawn for instance $instance_id" );
    <[agent.cmd.stop]>->( { 'args' => $instance_id, 'mode' => 'implicit' } );
    return;
}

delete $instance->{'core_sid'} if $status eq 'restart';

# select correct target job queue
my $target_queue;
$target_queue = 'running' if $status eq 'online' or $status eq 'extbin';
$target_queue = 'error'   if $status eq 'error';
$target_queue = 'queued'  if $status eq 'offline' or $status eq 'restart';

<[jobqueue.move_job]>->( $instance->{'job_id'}, $target_queue )
    if defined $target_queue and $target_queue ne 'queued';

# replying to startup notification requests..

my @check_keys
    = defined $instance->{'subname'}
    ? (
    $agent_name . '[' . $instance->{'subname'} . ']',
    $agent_name, $instance_id
    )
    : ( $agent_name, $instance_id );
foreach my $name_or_id (@check_keys) {
    if ( exists <nroot.agent.notify_offline>->{$name_or_id}
        and $status eq 'shutdown' ) {
        map {
            <[base.callback.cmd_reply]>->(
                $_,
                {   'mode' => 'ack',
                    'data' => "instance $name_or_id has been shut down!"
                }
            );
        } @{ <nroot.agent.notify_offline>->{$name_or_id} };
        delete <nroot.agent.notify_offline>->{$name_or_id};
    }
    if ( exists <nroot.agent.notify_online>->{$name_or_id} ) {
        if ( $status eq 'shutdown' ) {
            map {
                <[base.callback.cmd_reply]>->(
                    $_,
                    {   'mode' => 'nak',
                        'data' => "instance $name_or_id has been shut down!"
                    }
                );
            } @{ <nroot.agent.notify_online>->{$name_or_id} };
        } elsif ( $status =~ /^(online|extbin|error)$/
            or $status eq 'offline'
            and defined $agent_config->{'respawn'}->{'disabled'}
            and $agent_config->{'respawn'}->{'disabled'} == 1 ) {
            while ( my $reply_id
                = shift @{ <nroot.agent.notify_online>->{$name_or_id} } ) {
                my $startup_reply_mode
                    = ( $status eq 'online' or $status eq 'extbin' )
                    ? 'ack'
                    : 'nak';
                my $what = $name_or_id =~ /^\d+$/ ? 'agent instance' : 'agent';
                my $startup_reply_msg
                    = "$what '$name_or_id' startup "
                    . "not successful [status=$status]";

                if ( $status eq 'online' ) {
                    $startup_reply_msg
                        = "$what '$name_or_id' now online! ["
                        . $instance->{'core_sid'} . "]";
                } elsif ( $status eq 'extbin' ) {
                    $what =~ s|^agent|external program|;
                    $startup_reply_msg
                        = "$what '$name_or_id' now running! [PID="
                        . $instance->{'process'}->{'id'} . "]";
                }

                <[base.callback.cmd_reply]>->(
                    $reply_id,
                    {   'mode' => $startup_reply_mode,
                        'data' => $startup_reply_msg
                    }
                );
            }
            delete <nroot.agent.notify_online>->{$name_or_id};
        }
    }
}

# delayed respawning on startup error (..slowing down with errors..)
<[nroot.init_respawn_timer]>->($instance_id)
    if defined $target_queue
    and $target_queue eq 'queued'
    and !<[nroot.instance_pid_count]>->($instance_id);

if (    $status ne 'online'
    and $status ne 'extbin'
    and $status ne 'starting'
    and ( $old_status eq 'online' or $old_status eq 'extbin' ) ) {

    # shutdown instances with unresolved dependencies
    foreach my $dep_id ( <[dependency.get_reverse]>->($object_id) ) {
        next if <[dependency.ok]>->($dep_id);
        map {
            <[agent.instance.restart]>->($_)
                if not exists <nroot.agent.instance>->{$_}->{'stopping'}
            } @{
            <[agent.instance.get_ids]>->(
                <dependency.object>->{$dep_id}->{'agent_id'}
            )
            };
    }
}

if ( $status eq 'shutdown'
    or exists <agent.instance.shutdown>->{$instance_id} ) {
    $status = 'shutdown' if $status ne 'shutdown';
    delete <nroot.agent.instance>->{$instance_id};
    delete <agent.instance.shutdown>->{$instance_id};
    <[base.log]>->( 2, "instance $instance_id has been shut down." );
}

if ( $old_status ne 'online' and $status eq 'online' ) {    # LLL: extbin ?

    $instance->{'timer'}->{'reset_respawn_delay'} = <[event.add_timer]>->(
        {   'repeat'  => 0,
            'after'   => 4.2,
            'handler' => 'nroot.handler.reset_respawn_delay',
            'data'    => $instance_id
        }
    );

    if ( not exists $agent_config->{'ping'}->{'disabled'}
        or !$agent_config->{'ping'}->{'disabled'} ) {
        <[base.log]>->(
            2, "setting up ping response timer for instance $instance_id"
        );

        <[nroot.cancel_status_timer]>->($instance_id);
        <[nroot.enable_status_timer]>->($instance_id);

    } else {
        <[base.log]>->(
            2, ": no heartbeat ping enabled! ( $instance_id [$agent_name] )"
        );
    }

    # clean up temporary agent instance startup data
    delete $instance->{'init_data'};

    # set core session to 'initialized'
    if (    defined $instance->{'core_sid'}
        and $old_status ne 'online'
        and $status eq 'online' ) {
        my $root_sid = $instance->{'root_sid'};
        my $core_sid = $instance->{'core_sid'};
        <[base.proto.nailara.command.send.local]>->(
            {   'command'   => "$root_sid.set-initialized",
                'call_args' => { 'args' => $core_sid }
            }
        );
    }

    # start next delayed agent of the same name ...
    foreach my $id ( @{ <[agent.instance.get_ids]>->($agent_id) } ) {
        next
            if $id == $instance_id
            or <nroot.agent.instance>->{$id}->{'status'} ne 'delayed';
        my $j_id = <nroot.agent.instance>->{$id}->{'job_id'};
        <[base.log]>->( 1, "starting delayed '$agent_name' agent instance .." );
        <[jobqueue.exec_job]>->($j_id);
        last;
    }
}

<[nroot.cancel_status_timer]>->($instance_id) if $status ne 'online';

<[jobqueue.check_dependencies]>;
