# >:]

# name = storchencam.sdl_loop

my $current_res_w = 1280;
my $current_res_h = 480;

<[base.log]>->( 1, "initializing.." );

$ENV{'DISPLAY'}         = <x11.display>;
$ENV{'SDL_AUDIODRIVER'} = 'disk';

my $http = LWPx::ParanoidAgent->new();

my $image_data;
my $last_modified      = '';
my $max_size           = <storchencam.http_maxsize> // 1024 * 1024 * 10;
my $resolution_changed = 0;

$http->whitelisted_hosts( sub { return 1 } );
$http->agent(<storchencam.user_agent>);
$http->protocols_allowed( [ 'http', 'https' ] );
$http->timeout(<storchencam.http_timeout>);

my $image_url   = <storchencam.image_url>;
my $cover_image = <system.root_path> . '/data/gfx/storchencam-cover.jpg';
my $font_path   = <system.root_path> . '/data/ttf/droid/DroidSansMono.ttf';

my $screen_width;
my $screen_height;

my $zoom_cvr   = <storchencam.zoom>;
my $i_x_offset = <storchencam.img_x_offset>;
my $i_y_offset = <storchencam.img_y_offset>;

my $mask_left_corner = <storchencam.mask_left_corner>;

my $font_size = <storchencam.font_size>;

die "no coordinates received" if not exists <x11.coordinates>;
my $coord = <x11.coordinates>;
( $screen_width, $screen_height ) = (
    $coord->{'right'} - $coord->{'left'},
    $coord->{'bottom'} - $coord->{'top'}
);

my $time_pos_x = $screen_width - 63;
my $time_pos_y = 17;
$time_pos_y -= 10 if !<storchencam.display_temp>;

my $temp_pos_x = $screen_width - 63;
my $temp_pos_y = 7;

my $err_pos_x = 8;
my $err_size  = 13;

my $time_offset;

SDL::putenv("SDL_VIDEO_WINDOW_POS=$coord->{left},$coord->{top}");

SDL::init( SDL_INIT_VIDEO() );

SDL::Video::wm_set_caption( <system.agent.name> . '(' . $$ . ')',
    <system.agent.name> . '(' . $$ . ') [minimized]' );

SDL::TTF::init();

my $font;
my $err_font;
my $err_color;
my $font_color;
my $bg_color = SDL::Color->new( 0x13, 0x13, 0x13 );

if (<storchencam.display_time>) {
    <[base.log]>->( 1, ": loading text font" );
    $font = SDL::TTF::open_font( $font_path, $font_size );
    warn "failed to open font [" . SDL::get_error() . "]" if !$font;
    $font_color = SDL::Color->new( 0xFF, 0xFF, 0xFF );
}

if ($font) {
    $err_font = SDL::TTF::open_font( $font_path, $err_size );
    $err_color = SDL::Color->new( 0xFF, 0x00, 0x00 );
}

<[base.log]>->( 1, ": opening storchencam display" );

my $screen = SDL::Video::set_video_mode( $screen_width, $screen_height, 32,
    SDL_DOUBLEBUF() | SDL_HWSURFACE() | SDL_HWACCEL() | SDL_NOFRAME()
        | SDL_PREALLOC() | SDL_ASYNCBLIT() );

my $zoom_2 = ( $screen->w / 1035 );

$i_x_offset = sprintf( "%.0f", $i_x_offset * $zoom_2 );
$i_y_offset = sprintf( "%.0f", $i_y_offset * $zoom_2 );

SDL::Mouse::show_cursor( SDL_DISABLE() );

my $bg_col_map = SDL::Video::map_RGB( $screen->format(),
    $bg_color->r, $bg_color->g, $bg_color->b );

<[base.log]>->( 1, ": loading cover image" );

my $image = SDL::Image::load($cover_image);
die SDL::get_error() if ( !$image );

#SDL::Video::fill_rect( $image, SDL::Rect->new( 106, 10, 37, 30 ), $bg_col_map );

SDL::Video::blit_surface(
    $image, SDL::Rect->new( 101 + 42, 10, 42, 30 ),
    $image, SDL::Rect->new( 101,      10, 42, 30 )
);

my $scaled = SDL::GFX::Rotozoom::surface( $image, 0, $zoom_cvr * $zoom_2,
    SMOOTHING_ON() );

my $s_y_offset = sprintf( "%.0f",
    ( ( $screen->h - ( $scaled->h - abs($i_y_offset) ) ) / 2 ) );

my $err_pos_y = $s_y_offset + $scaled->h - 26;

SDL::Video::blit_surface(
    $scaled,
    SDL::Rect->new(
        0, -$i_y_offset, $scaled->w, $scaled->h - abs($i_y_offset)
    ),
    $screen,
    SDL::Rect->new( $i_x_offset, $s_y_offset, $screen->w, $screen->h )
);

SDL::Video::flip($screen);

my $title_pattern = <system.agent.name> . '\(' . $$ . '\)';
if ( not defined <[base.x11.wait_for_window]>->($title_pattern) ) {
    <[base.log]>->( 0, "agent startup failure (sdl window did not open)" );
    exit(2);
} else {
    <[base.x11.assign_window]>;
}

<[base.log]>->( 1, "entering webcam loop ..." );

# verify_instance reply
loop_wait(0.888);

my $warned_cam = 0;
my $warned_res = 0;

while (1) {

    my $response;
    $http->max_size(0);
    my $last_image_date;
    unless ( not defined $last_image_date
        or $response = $http->get($image_url)
        and $response->is_success
        and $last_image_date = $response->{'_headers'}->{'last-modified'}
        and $last_image_date ne $last_modified ) {
        SDL::Video::flip($screen);

        # ping replies / logging
        loop_wait(0.222);
    }
    $last_modified = $last_image_date;
    $http->max_size($max_size);
    my $dl_time = time();

    my $timed_out = 0;
    {
        local $SIG{'ALRM'} = sub { $timed_out = 1 };
        alarm( <storchencam.http_timeout> + 1 );
        $response = $http->get($image_url);
        alarm(0);
    }

    if ( $response->is_success and !$timed_out ) {

        $time_offset
            //= $dl_time - str2time( $response->{'_headers'}->{'date'} );
        $time_offset
            = ( $time_offset * 999 )
            + ( $dl_time - str2time( $response->{'_headers'}->{'date'} ) );
        $time_offset /= 1000;
        <[base.log]>->( 0, ": webcam is reachable again!" ) if $warned_cam;
        $warned_cam      = 0;
        $image_data      = $response->content;
        $last_image_date = $response->{'_headers'}->{'last-modified'};

        my $rw = SDL::RWOps->new_const_mem($image_data);
        $image = SDL::Image::load_JPG_rw($rw);
        die SDL::get_error() if ( !$image );

        $resolution_changed = 1
            if $image->w != $current_res_w
            or $image->h != $current_res_h;
        if ( $resolution_changed and !$warned_res ) {
            <[base.log]>->( 0, "<!> [WARNING] WEBCAM RESOLUTION CHANGED <!>" );
            <[base.log]>->( 0, "<!> activating mask scan countermeasure <!>" );
            $warned_res = 1;
        }

        my $temp;
        if (<storchencam.display_temp>) {
            $temp = SDL::Surface->new( SDL_ASYNCBLIT() | SDL_HWSURFACE(),
                56, 8, 32, 0, 0, 0, 0 );
            SDL::Video::blit_surface(
                $image, SDL::Rect->new( 64, 24, 56, 8 ),
                $temp,  SDL::Rect->new( 0,  0,  56, 8 )
            );
        }

        if ($mask_left_corner) {
            SDL::Video::blit_surface(
                $image, SDL::Rect->new( 64, 40, 56, 8 ),
                $image, SDL::Rect->new( 64, 24, 56, 8 )
            );
            SDL::Video::blit_surface(
                $image, SDL::Rect->new( 73 - 12, 18,     159, 9 ),
                $image, SDL::Rect->new( 72,      17 - 9, 159, 9 )
            );
            SDL::Video::blit_surface(
                $image, SDL::Rect->new( 81, 40,     15, 8 ),
                $image, SDL::Rect->new( 81, 40 - 8, 15, 8 )
            );
        }

        my $zoom = ( $zoom_cvr / $image->w ) * 2048 * $zoom_2;

        my $scaled
            = SDL::GFX::Rotozoom::surface( $image, 0, $zoom, SMOOTHING_ON() );

        SDL::Video::fill_rect( $screen,
            SDL::Rect->new( 0, 0, $screen->w, $screen->h ), $bg_col_map );

        # copy scaled image to screen
        SDL::Video::blit_surface(
            $scaled,
            SDL::Rect->new(
                0, -$i_y_offset, $scaled->w, $scaled->h - abs($i_y_offset)
            ),
            $screen,
            SDL::Rect->new( $i_x_offset, $s_y_offset, $screen->w, $screen->h )
        );

        SDL::Video::blit_surface( $temp, SDL::Rect->new( 0, 0, 56, 8 ),
            $screen,
            SDL::Rect->new( $temp_pos_x, $temp_pos_y + $s_y_offset, 56, 8 ) )
            if <storchencam.display_temp> and defined $temp;

        mask_scan( $screen, $s_y_offset )
            if $mask_left_corner and $resolution_changed;

        if (    <storchencam.display_time>
            and $font
            and $last_image_date =~ /(\d\d):(\d\d):(\d\d) GMT$/ ) {
            my ( $h, $m, $s ) = ( $1, $2, $3 );

            # $h += 2;
            # $h -= 24 if $h > 23;
            # $h = "0$h" if length($h) == 1;
            # my $timestamp = "$h:$m:$s";

            my $time = str2time($last_image_date) + $time_offset;
            my @t    = localtime($time);
            my $timestamp
                = sprintf( '%02d:%02d:%02d', $t[2], $t[1], $t[0] );

            my $txt
                = SDL::TTF::render_utf8_blended( $font, $timestamp,
                $font_color );
            SDL::Video::blit_surface(
                $txt,
                SDL::Rect->new( 0, 0, $txt->w, $txt->h ),
                $screen,
                SDL::Rect->new(
                    $time_pos_x, $time_pos_y + $s_y_offset,
                    $txt->w,     $txt->h
                ),
            );
        }
    } else {
        my $err_msg = 'download failed [' . $response->status_line . ']';
        if ( !$warned_cam ) {
            <[base.log]>->( 0, $err_msg );
            my $w_txt
                = SDL::TTF::render_utf8_blended( $err_font,
                '[ Webcam derzeit nicht erreichbar ]', $err_color );
            SDL::Video::blit_surface(
                $w_txt,
                SDL::Rect->new( 0, 0, $w_txt->w, $w_txt->h ),
                $screen,
                SDL::Rect->new( $err_pos_x, $err_pos_y, $w_txt->w, $w_txt->h ),
            );
        }
        $warned_cam = 1;

        # ping replies / logging
        loop_wait(0.333);
    }
    SDL::Video::flip($screen);

    # ping replies / logging
    loop_wait(0.222);
}

sub loop_wait {    # processing network event while waiting
    my $tw = shift // 0;
    my $ts = <[base.time]>->(3);
    while ( <[base.time]>->(3) - $ts < $tw ) {
        <[event.once]>->($tw);
        SDL::delay( $tw * 100 );
    }
}

# XXX: works on day images only(?) -> implement color sampling area to fix that!

sub mask_scan {
    my $surface    = shift;
    my $s_y_offset = shift // 0;
    my @mask_areas = split( / +/, <storchencam.mask_areas> );
    my $pix_format = $surface->format();

    foreach my $mask_coord (@mask_areas) {
        my ( $x_1, $y_1, $x_2, $y_2 ) = split( /,/, $mask_coord );

        my %cols;
        my $rnd_col;

        foreach my $y ( $y_1 .. $y_2 ) {
            foreach my $x ( $x_1 .. $x_2 ) {
                my $offset = $x + ( $y + $s_y_offset ) * $surface->w;
                my $pixel  = $surface->get_pixel($offset);
                my $rgb    = SDL::Video::get_RGB( $pix_format, $pixel );

                my $black = 0x20;
                my $white = 0x50;
                my $w_tol = 5;

                if (    %cols
                    and $rgb->[0] >= $white - $w_tol
                    and $rgb->[1] >= $white - $w_tol
                    and $rgb->[2] >= $white - $w_tol
                    or %cols
                    and $rgb->[0] <= $black
                    and $rgb->[1] <= $black
                    and $rgb->[2] <= $black ) {

                    my @_keys = keys(%cols);
                    $rnd_col = $_keys[ int( rand( scalar @_keys ) ) ]
                        if not defined $rnd_col or $offset % 2;

                    $surface->set_pixels( $offset, $rnd_col ) if @_keys;
                } elsif ( $rgb->[0] != $rgb->[1]
                    and $rgb->[0] != $rgb->[2]
                    and $rgb->[1] != $rgb->[2] ) {
                    $cols{$pixel} //= 1;
                }
            }
        }
    }
}
