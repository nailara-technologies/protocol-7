# >:]

# name = base.proto.nailara.command.send.local

my $cmd       = ${ $_[0] }{'command'};
my $call_args = ${ $_[0] }{'call_args'};
${ $_[0] }{'reply'} //= {};
$$call_args{'args'} //= '';

die "'command' parameter expected" if not defined $cmd;

return 0 if not exists $data{'session'} or !keys %{ $data{'session'} };

if ( not defined $$call_args{'session_id'} and $cmd =~ /^([^\.]+)\./ ) {
    my $target_usr = $1;
    if ( keys( %{ $data{'user'}{$target_usr}{'session'} } ) == 1 ) {
        ( $$call_args{'session_id'} )
            = keys %{ $data{'user'}{$target_usr}{'session'} };
    } elsif ( exists $data{'session'}{$target_usr} ) { # [numerical (sid) route]
        $$call_args{'session_id'} = $target_usr;
    } else {
        foreach my $_sid ( keys %{ $data{'user'}{$target_usr}{'session'} } ) {
            $$call_args{'session_id'} = $_sid
                if $data{'session'}{$_sid}{'user'} eq $target_usr;
        }
    }
}
return 0 if not defined $$call_args{'session_id'};

my $cmd_id        = <[base.gen_id]>->( $data{'route'} );
my $reply_handler = ${ $_[0] }{'reply'}{'handler'} // 'dev.null';
my $reply_params  = ${ $_[0] }{'reply'}{'params'};

if ( $cmd =~ s/^([^\.]+)\.((([^\.]+)\.)*\w[\w\d\_\-\.]*)$/$2/go ) {

    my $target_name = $1;

    #LLL: needs error handling on unknown target!

    # send to all clients with that session id (or username [group mode])
    my @send_sids;
    my $target_sid = $target_name =~ /^\d+$/ ? $target_name : undef;
    if ( defined $target_sid
        and exists $data{'session'}{$target_sid} ) {    # sid mode
        @send_sids = ($target_sid);
    } elsif ( exists $data{'user'}{$target_name} ) {    # group mode
        @send_sids = keys( %{ $data{'user'}{$target_name}{'session'} } );
    }
    my $count = 0;
    foreach my $target_sid (@send_sids) {
        my $session;
        $session = $data{'session'}{$target_sid}
            if exists $data{'session'}{$target_sid};
        next    # skip unauthorized connections / modes
            if not defined $session
            or $session->{'mode'} ne 'client'
            or $session->{'user'} eq <base.session.uname_server>
            or exists $session->{'authenticated'}
            and $session->{'authenticated'} ne 'yes';

        # setup route

        my $route = <[base.route.add]>->(
            {   'source' => { 'sid' => $target_sid, 'cmd_id' => $cmd_id },
                'reply'  => {
                    'handler' => $reply_handler,
                    'params'  => $reply_params
                },
                'target' => { 'sid' => $target_sid }
            }
        );

        my $target_cmd_id = $$route{'target'}{'cmd_id'};

        my $src_name = <system.agent.name>;
        $src_name .= '[' . <system.agent.subname> . ']'
            if exists <system.agent.subname>;

        # LLL: implement (debug) watch and filter patterns for command logging
        if (   <system.verbosity> >= 2
            or <system.internal_verbosity> >= 2 ) {
            <[base.log]>->( 2, "<CMD> $src_name -> $target_name > $cmd" )
                if ( $src_name ne 'core'
                or $target_name ne 'log'
                or $cmd ne 'msg'
                or !<debug.skip_log_msg> )
                and ( $target_name ne 'core'
                or $cmd ne 'log.msg'
                or !<debug.skip_log_msg> )
                and ( $src_name ne 'nroot'
                or ( $cmd ne 'ping' and substr( $cmd, -5, 5 ) ne '.ping' )
                or !<debug.skip_nroot_ping> );
        }

        $target_cmd_id =~ s/^(\d+)$/($1)/;

        #            if ( $command_mode == 1 )    # single line command mode
        #            {
        my $args = '';

        if ( $$call_args{'args'} ne '' ) { $cmd .= ' ' }

        $data{'session'}{$target_sid}{'buffer'}{'output'}
            .= $target_cmd_id . $cmd . $$call_args{'args'} . "\n";
        $count++;

        # TODO: setup timeout handler

        #            }
        #            elsif ( $command_mode == 2 )    # multi line command mode
        #            {
        #                my $header = '';

        #                if ( defined $$call_args{'param'}
        #                    and ref( $$call_args{'param'} ) eq
        #                    'HASH' )    # prepare parameter header
        #                {
        #                    my ( $key, $val );

#                    while ( ( $key, $val ) = each( %{ $$call_args{'param'} } ) )
#                    {
#                        $header .= $key . '=' . $val . "\n";
#                    }
#                }

        #                $data{'session'}{$target_sid}{'buffer'}{'output'} .=
        #                  $target_cmd_id . $cmd . "+\n" . $header . "\n"
        #                  . $$call_args{'data'} . ".\n";

        #            }
    }
    return $count;
} else {
    warn "protocol mismatch ['$cmd']";
}
