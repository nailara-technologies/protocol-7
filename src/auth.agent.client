# >:]

# name  = auth.agent.client
# descr = authenticate to core in agent mode
# note  : agent name can now contain subnames

my ( $filehandle, $agent, $key_str ) = @_;

if ( defined $key_str
    or %KEYS
    and exists $KEYS{'agent'}{'session_key'}
    and $KEYS{'agent'}{'session_key'} ne '' ) {
    $key_str //= $KEYS{'agent'}{'session_key'};
    my $smiley;
    if ( <[base.s_read]>->( $filehandle, \$smiley, 4 ) > 0 ) {
        if ( $smiley =~ />:\]\n/ ) {
            <[base.log]>->( 1, "[*] protocol banner detected.." );
        } else {
            <[base.log]>->(
                0, "[#] protocol error! (no valid connection banner)"
            );
            exit(1);
        }
    }

    <[net.out]>->( $filehandle, "select agent\n" );
    my $answer = readline($filehandle);
    if ( not defined $answer ) {
        <[base.log]>->( 0, "[X] connection lost :/" );
        return undef;
    } elsif ( $answer !~ /^ACK continue$/ ) {
        <[base.log]>->( 0, "[#] protocol error :(" );
        return undef;
    }

    <[base.log]>->( 2, "[>] authenticating as '$agent'.." );
    <[net.out]>->( $filehandle, "$agent $key_str\n" );
    delete $KEYS{'agent'}{'session_key'}
        if exists $KEYS{'agent'}{'session_key'};

    $answer = readline($filehandle);

    if ( not defined $answer ) {
        <[base.log]>->( 0, "[X] connection lost :/" );
        return undef;
    } elsif ( $answer =~ /^YEAH / ) {
        <[base.log]>->( 1, "[*] success! :), remote end authorized session." );
        return $filehandle;
    } elsif ( $answer =~ /^FAIL / ) {
        <[base.log]>->( 0, "[#] access denied :(" );
        return undef;
    } elsif ( $answer =~ /^>:\|$/ ) {
        <[base.log]>->( 0, "[#] auth. timeout :|" );
        return undef;
    } else {
        <[base.log]>->( 0, "[#] protocol error :(" );
        return undef;
    }

} else {
    <[base.log]>->(
        0, "auth.agent.client: session_key not defined. auth. failed."
    );
    return undef;
}
