# >:]

# name  = nroot.teardown
# descr = shut down nroot agent [with an optional error message]

my $reason    = shift // '';
my $exit_code = length($reason) ? 1 : $?;
my $log_level = length($reason) ? 0 : 1;
my $t_res     = 3;                          # <- time delta float resolution

my $kill_timeout  = <system.kill_timeout> //= 2.1;    # floating seconds
my $abort_timeout = 2;

my %wait_pids = map { $_ => 1 } keys %{<nroot.child>};
foreach my $p_pid ( keys %{<nroot.child>} ) {
    map { $wait_pids{$_} = 1 }
        @{ <[nroot.sub-process.get_children]>->($p_pid) };
    <nroot.child>->{$p_pid}->{'start_time'} //= <[base.time]>;    # just in case
}

my $child_count = keys %wait_pids;

while ( ( my $pid = waitpid( -1, WNOHANG() ) ) > 0 ) {
    $child_count-- if $pid and delete $wait_pids{$pid};
}

my $ren = $child_count == 1 ? ' process' : 'ren';
$reason = "$child_count child$ren left" if !length($reason) and $child_count;
my $reason_txt = length($reason) ? " ( $reason )" : '';

<[base.log]>->( $log_level, "nroot agent shutdown" . $reason_txt );

<[base.log]>->( 1, ": terminating child$ren :." )
    if $child_count and <system.verbosity> == 1;

foreach my $pid (
    sort {
        <nroot.child>->{$b}->{'start_time'} <=>
            <nroot.child>->{$a}->{'start_time'}
    }
    keys %{<nroot.child>}
) {
    next if exists <nroot.child>->{$pid}->{'agent_child'};
    my $inst_id    = <nroot.child>->{$pid}->{'instance_id'};
    my $agent_name = <nroot.agent.instance>->{$inst_id}->{'agent_name'}
        // 'unknown';
    my @children = @{ <[nroot.sub-process.get_children]>->($pid) };
    if ( kill( 15, $pid ) ) {
        <[base.log]>->(
            1, sprintf( ": <TERM> PID %-7s  <-= %11s", $pid, "$agent_name" )
        );
    } else {
        delete <nroot.child>->{$pid};
    }
    if (@children) {
        my $ren = scalar @children == 1 ? ' -- :' : 'ren :';
        <[base.log]>
            ->( 1, ": <TERM> `-- child$ren " . join( ', ', @children ) );
        map { delete <nroot.child>->{$pid} if !kill( 15, $_ ) } @children;
    }
}

map { <[base.log]>->( 1, ": <TERM> orphan $_" ) if kill( 15, $_ ); }
    <[nroot.sub-process.orphan_pids]>;

while ( ( my $w_pid = waitpid( -1, WNOHANG() ) ) > 0 ) {
    delete <nroot.child>->{$w_pid};
}

my %children_left = map { $_ => 1 } keys %{<nroot.child>};

my $wait_start = <[base.time]>->($t_res);

while ( keys %children_left ) {
    foreach my $pid (
        sort {
            <nroot.child>->{$b}->{'start_time'}
                // 0 <=> <nroot.child>->{$a}->{'start_time'} // 0
        }
        keys %children_left
    ) {
        my $inst_id      = <nroot.child>->{$pid}->{'instance_id'};
        my $agent_name   = <nroot.agent.instance>->{$inst_id}->{'agent_name'};
        my $time_now     = <[base.time]>->($t_res);
        my $waiting_secs = $time_now - $wait_start;
        if ( !kill( 15, $pid ) ) {
            delete $children_left{$pid};    # <- gone now!
        } elsif ( $waiting_secs >= ( $kill_timeout + $abort_timeout ) ) {
            kill( 9, keys %children_left );
            <[base.log]>->( 0, "ABORT TIMEOUT during process shutdown!" );
            exit(1);
        }
        if ( $waiting_secs >= $kill_timeout ) {
            my @children = @{ <[nroot.sub-process.get_children]>->($pid) };
            if ( not exists <nroot.child>->{$pid}->{'agent_child'} ) {
                <[base.log]>->(
                    1,
                    sprintf(
                        ": <KILL> PID %-7s  <-= %11s",
                        $pid, "$agent_name"
                    )
                ) if kill( 9, $pid );
            }
            delete $children_left{$pid};
            if (@children) {
                my $ren = scalar @children == 1 ? ' -- :' : 'ren :';
                <[base.log]>->(
                    1, ": <KILL> `-- child$ren " . join( ', ', @children )
                );
                kill( 9, @children );
                map { delete $children_left{$pid}; } @children;
            }
        }
    }
    <[base.sleep]>->(0.042);
}

map { <[base.log]>->( 1, ": <KILL> orphan $_" ); kill( 9, $_ ) }
    <[nroot.sub-process.orphan_pids]>;

<[base.log]>->( 1, ':. done' );
exit($exit_code);

# ______________________________________________________________________________
#\\NBVGRFY7MLNNVGJH64KCCNBFDIBH54RU75WFEH4WIM5QPZ3BNU5KCZUBKAZL4HKY3X7KEO5AHIBUQ
# \\ TPA4NWVQNQYGZ7GT5WCW7CGZSBXJQK5GDBI5HHGBLRR3EY73QD3O \\// C25519-BASE-32 //
#  \\// DJ2JZXVBRHHJJTD2PP2GVDOHOOMDCVOCTCPLWKZTHN3TLFBCYBY \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
