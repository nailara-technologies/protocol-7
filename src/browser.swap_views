# >:]

# name = browser.swap_views

my $scrolled_window = <browser.gtk_obj.scrolled_window>;

my $fg_index = <browser.overlay.index>->{'fg'};
my $bg_index = <browser.overlay.index>->{'bg'};

if ( !<browser.cfg.use_transparency> ) {
    <browser.gtk_obj.overlay>
        ->reorder_overlay( $scrolled_window->{$fg_index}, 0 );
    <browser.overlay.index> = { 'fg' => $bg_index, 'bg' => $fg_index };
    <[browser.callback.load_finished]>;
    return;
}

<browser.fg_opacity> = <browser.gtk_obj.view>->{$bg_index}->get_opacity;
if ( <browser.fg_opacity> == 1 ) {
    <browser.gtk_obj.scrolled_window>->{$bg_index}->set_opacity(0);
    <browser.fg_opacity> = 0;
}
<browser.gtk_obj.overlay>->reorder_overlay( $scrolled_window->{$fg_index}, 0 );
<browser.gtk_obj.scrolled_window>->{$fg_index}->set_opacity(1);
<browser.time.fade_view>   = <[base.time]>->(3);
<browser.status.fade_view> = 1;

<browser.overlay.index> = { 'fg' => $bg_index, 'bg' => $fg_index };

my $window = <browser.gtk_obj.window>;

$window->signal_handler_disconnect( delete <browser.signal_id.swap_views> )
    if defined <browser.signal_id> and defined <browser.signal_id.swap_views>;

<browser.signal_id.swap_views>
    = $window->signal_connect( draw => $code{'browser.handler.swap_views'} );
