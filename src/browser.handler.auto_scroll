# >:]

# name = browser.handler.auto_scroll

my ( $widget, $context, $ref_status ) = @_;

my $reply_id = <window.scroll.reply_id>;
my $fg_index = <browser.overlay.index.fg>;
my $view     = <browser.gtk_obj.view>->{$fg_index};

<browser.autoscroll.brake_count> //= 0;

<browser.gtk_obj.window>->queue_draw();

# handle load based slowdown

my $adjust  = 0;
my $sl_diff = 0;
if ( defined <browser.redraw_fps.slowdown_target>
    and <browser.redraw_fps.slowdown> != <browser.redraw_fps.slowdown_target> )
{
    $adjust = sprintf(
        "%.3f",
        (         <browser.redraw_fps.slowdown_target>
                - <browser.redraw_fps.slowdown>
        ) / 100
    );
    <browser.redraw_fps.slowdown>
        = sprintf( "%.3f", <browser.redraw_fps.slowdown> + $adjust );
    $sl_diff = abs(
        sprintf( "%.3f",
                  <browser.redraw_fps.slowdown_target>
                - <browser.redraw_fps.slowdown> )
    );
    <browser.redraw_fps.slowdown> = <browser.redraw_fps.slowdown_target>
        if $sl_diff <= 0.05;

    <[browser.calc_scroll_speed]>;
}

#       GETTING POS
################### ( update max and posY? )

<window.scroll.last_pos> = <window.scroll.pos> // 0;
<window.scroll.no_js> //= 0;

###################

if ( delete <window.scroll.stop> ) {
    <window.scrolling> = 0;
    my $pos_percent
        = int( ( <window.scroll.pos> * 100 ) / <window.scroll.max> );
    <[base.callback.cmd_reply]>->(
        $reply_id, { 'mode' => 'ack', 'data' => "stopped [$pos_percent%]" }
    ) if defined $reply_id;
    delete <window.scroll.stop_reply_id>;
    delete <browser.time.last_scroll>;
    $widget->signal_handler_disconnect(
        delete <browser.signal_id.auto_scroll> );

    goto scroll_finished if <browser.slideshow.running>;

    if ( my $load_uri = delete <browser.load_at_scroll_stop> ) {
        <[browser.load_uri]>->($load_uri);
    }

    return 0;

} elsif ( <window.scroll.pos> < <window.scroll.max> ) { # backwards?? [happened]
    if (    <browser.cfg.javascript_enabled>
        and !<browser.scroll.fail.js_disabled>
        and <window.scroll.pos> < <window.scroll.last_pos> )
    {    # scroll error? (might be caused by javascript intervention)
        <window.scroll.fail_start> //= <[base.time]>->(2);
        if ( <[base.time]>->(2) - <window.scroll.fail_start>
            >= <browser.scroll.fail.timeout> ) {
            warn "autoscroll error, behaviour change required.."

                # <[base.log]>->(
                #     0, "autoscroll error, stopping javascript execution.."
                # );
                # my $settings = $view->get_settings;
                # $settings->set_enable_javascript(0);
                # $view->set_settings($settings);
                # <browser.scroll.fail.js_disabled> = 1;
                # delete <window.scroll.fail_start>;
        }
    } elsif ( exists <window.scroll.fail_start> ) {
        delete <window.scroll.fail_start>;
    }

################# SETTING POS #####

    <window.scroll.pos>++;    # <--- incr. by [new to write] js_callback!!!

    <[browser.js_call]>->(
        'window.scroll(0,' . <window.scroll.pos> . ')',
        sub { }, $reply_id
    );

    ###############################

} else {
    delete <window.scroll>;
    <window.scrolling>             = 0;
    <browser.time.scroll_complete> = <[base.time]>->(3);
    <[base.callback.cmd_reply]>->(    # LLL: .cmd. only!
        $reply_id, { 'mode' => 'ack', 'data' => 'end of page reached' }
    ) if defined $reply_id;

scroll_finished:

    <[base.log]>->( 2, ": scrolling complete. [end of page]" );

    $widget->signal_handler_disconnect( delete <browser.signal_id.auto_scroll> )
        if defined <browser.signal_id.auto_scroll>;

    if (<browser.slideshow.running>) {
        <browser.slideshow.status> = 'scroll_finished';
        if (<browser.scroll.fail.js_disabled>) {
            delete <browser.scroll.fail.js_disabled>;
            if (<browser.cfg.javascript_enabled>) {
                my $settings = $view->get_settings;
                $settings->set_enable_javascript(1);
                $view->set_settings($settings);
                <[base.log]>->(
                    1, "auto-scroll finished ..javascript reenabled!"
                );
            }
        }

        # slowly speeding up again ...
        if (   !<browser.autoscroll.brake_count>
            and <browser.autoscroll.delay> > <browser.autoscroll.cfg_delay> ) {
            <browser.autoscroll.delay>
                = sprintf( "%.6f", <browser.autoscroll.delay> - 0.000001 );
            <browser.autoscroll.fps>
                = sprintf( "%.2f", 1 / <browser.autoscroll.delay> );
        }

        delete <browser.time.last_scroll>;
        delete <browser.autoscroll.brake_count>;

        <[browser.handler.slideshow]>;
        return 0;
    }
}

<browser.autoscroll.delay>    //= 0.033333;    # scroll speed 5 (default)
<browser.autoscroll.too_fast> //= 0;

<browser.time.last_scroll> //= <[base.time]>->(6);
my $delta_t   = <[base.time]>->(6) - <browser.time.last_scroll>;
my $wait_time = sprintf( "%.6f", <browser.autoscroll.delay> - $delta_t );
if ( $wait_time <= 0 ) {
    <browser.autoscroll.too_fast>++;
    if ( <browser.autoscroll.too_fast> >= 3 ) {
        <browser.autoscroll.delay>
            = sprintf( "%.6f", <browser.autoscroll.delay> + 0.000001 );
        $wait_time = sprintf( "%.6f", <browser.autoscroll.delay> - $delta_t );
        <browser.autoscroll.too_fast>--;
        delete <browser.autoscroll.too_fast>
            if <browser.autoscroll.too_fast> <= 0;
        <[base.log]>->(
            2,
            sprintf( "scrolling too fast.. slowing.. [ %.4f ms ] <$wait_time>",
                <browser.autoscroll.delay> * 100 )
        );
        <browser.autoscroll.fps>
            = sprintf( "%.2f", 1 / <browser.autoscroll.delay> );
        <browser.autoscroll.brake_count>++;
    }
} else {
    delete <browser.autoscroll.too_fast>;
}

<[base.sleep]>->($wait_time) if $wait_time > 0;
<browser.time.last_scroll> = <[base.time]>->(6);

return 0;
