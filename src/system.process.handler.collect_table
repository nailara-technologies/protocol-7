# >:]

# name = system.process.handler.collect_table

<process.limits> //= {};

<process.count>     = 0;
<process.table.top> = {};
<process.poll.last> = <[base.time]>->(2);

my $mem_used_percent = 0;
foreach my $p ( @{ <system.process.pt>->table } ) {
    <process.count>++;
    ( my $cpu = $p->pctcpu ) =~ s/^ +//;
    ( my $mem = $p->pctmem ) =~ s/^ +//;
    next if $cpu eq 'inf' or $mem eq 'inf';
    map { $_ = sprintf( "%.2f", $_ ) if length($_) > 7 } ( $cpu, $mem );

    $mem_used_percent += $mem;

    my $p_name
        = (
               not defined $p->cmndline
            or !length( $p->cmndline )
            or length( $p->cmndline ) > 42
        )
        ? $p->fname
        : $p->cmndline;

    <process.table.top>->{ $p->pid } = {
        'fname'  => $p_name,
        'state'  => $p->state,
        'start'  => $p->start,
        'pctcpu' => $cpu,
        'pctmem' => $mem,
    };

    ## custom process limits ## [currently max cpu in %]
    foreach my $lp_name ( keys %{<process.limits>} ) {
        next
            if $p->fname !~ /\Q$lp_name\E/
            and ( not defined $p->cmndline or $p->cmndline !~ /^\Q$lp_name\E/ );
        my $lp = <process.limits>->{$lp_name};
        ( my $rl_name = $p->fname // $p->cmndline ) =~ s/ .*$//;

        if (    defined $lp->{'max_mem'}
            and $lp->{'max_mem'} =~ /^\d+(\.\d+)?$/
            and $lp->{'max_mem'} != 0 ) {
            $lp->{'condition_start'} //= <[base.time]>->(2)
                if $mem >= $lp->{'max_mem'};
            if ($mem >= $lp->{'max_mem'}
                and ( not defined $lp->{'seconds'}
                    or ( <[base.time]>->(2) - $lp->{'condition_start'} )
                    >= $lp->{'seconds'} )
                ) {
                <[base.log]>->(
                    0,
                    "<!> MEMORY USAGE ALERT: (( $rl_name )) [now $mem%, limit "
                        . $lp->{'max_mem'} . "%]"
                );
                if ( defined $lp->{'action'} and $lp->{'action'} eq 'kill' ) {
                    my $kill_pid = $p->pid;
                    <[base.log]>->(
                        0, " : << killing '$rl_name' process >> [PID=$kill_pid]"
                    );
                    <process.kill_child.w_fh>->print("$kill_pid\n");
                    delete <process.table.top>->{$kill_pid};
                    delete $lp->{'condition_start'};
                }
            }

        }

        next
            if not defined $lp->{'max_cpu'}
            or $lp->{'max_cpu'} !~ /^\d+(\.\d+)?$/
            or $lp->{'max_cpu'} == 0;
        delete $lp->{'condition_start'} if $cpu < $lp->{'max_cpu'};

        $lp->{'condition_start'} //= <[base.time]>->(2)
            if $cpu >= $lp->{'max_cpu'};

        if ($cpu >= $lp->{'max_cpu'}
            and ( not defined $lp->{'seconds'}
                or ( <[base.time]>->(2) - $lp->{'condition_start'} )
                >= $lp->{'seconds'} )
            ) {
            <[base.log]>->(
                0,
                "<!> CPU LOAD ALERT: (( $rl_name )) [now $cpu%, limit "
                    . $lp->{'max_cpu'} . " ]"
            );
            if ( defined $lp->{'action'} and $lp->{'action'} eq 'kill' ) {
                my $kill_pid = $p->pid;
                <[base.log]>->(
                    0, " : << killing '$rl_name' process >> [PID=$kill_pid]"
                );
                <process.kill_child.w_fh>->print("$kill_pid\n");
                delete <process.table.top>->{$kill_pid};
                delete $lp->{'condition_start'};
            }
        }
    }
}

## memory limit alerts ##

<system.mem.used_percent> = $mem_used_percent;

my $mem_limit_reached = 0;
<system.memory_alert.warned> //= 0;
if ( $mem_used_percent >= <mem.max_used> ) {    # system memory alert limit
    $mem_limit_reached = 1;
    my $reached = $mem_used_percent == <mem.max_used> ? 'reached' : 'exceeded';

    my $warn_str
        = "<!> WARNING <!> used memory $reached " . <mem.max_used> . "% limit!";
    $warn_str .= " ( now $mem_used_percent% )" if $reached eq 'exceeded';
    <[base.log]>->( 0, $warn_str ) if !<system.memory_alert.warned>;
    <system.memory_alert.warned>++;
} elsif (<system.memory_alert.warned>) {
    <[base.log]>->(
        1,
        " : memory usage dropped back below "
            . <mem.max_used>
            . "% limit ( now $mem_used_percent% )"
    );
    <system.memory_alert.warned> = 0;
}
if ( $mem_limit_reached and <mem.auto_kill> ) {  # automatic overload mitigation
    foreach my $pid (
        sort {
            <process.table.top>->{$b}->{'pctmem'} <=>
                <process.table.top>->{$a}->{'pctmem'}
        } keys( %{<process.table.top>} )
        ) {
        my $process = <process.table.top>->{$pid};
        next
            if defined <mem.kill_min> and $process->{'pctmem'} < <mem.kill_min>;
        <[base.log]>->(
            0,
            " :. killing highest memory user (PID $pid '"
                . $process->{' fname '} . "') [ "
                . $process->{'pctmem'} . " % ]"
        );
        <process.kill_child.w_fh>->print("$pid\n");
        delete <process.table.top>->{$pid};
        last;
    }
}
