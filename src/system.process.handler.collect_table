# >:]

# name = system.process.handler.collect_table

<process.limits> //= {};

<process.count>     = 0;
<process.table.top> = {};
<process.poll.last> = <[base.time]>->(2);

my $mem_statistics = <system.statistics>->get->memstats;
<system.mem.used_percent> = my $mem_used_pct
    = sprintf( "%.2f", 100 - $mem_statistics->{'realfreeper'} );

foreach my $p ( @{ <system.process.pt>->table } ) {
    <process.count>++;
    ( my $cpu = sprintf( "%.2f", $p->pctcpu ) ) =~ s/^ +//;
    ( my $mem = sprintf( "%.2f", $p->pctmem ) ) =~ s/^ +//;
    $cpu = 0 if $cpu !~ /^\d+(\.\d+)?$/;
    $cpu =~ s/^(\d+\.\d+)0+$/$1/;
    $mem =~ s/^(\d+\.\d+)0+$/$1/;

    my $p_name
        = (
               not defined $p->cmndline
            or !length( $p->cmndline )
            or length( $p->cmndline ) > 42
        )
        ? $p->fname
        : $p->cmndline;

    <process.table.top>->{ $p->pid } = {
        'fname'  => $p_name,
        'state'  => $p->state,
        'start'  => $p->start,
        'pctcpu' => $cpu,
        'pctmem' => $mem,
    };

    ## process name blacklist ( not to be killed ) ##
    my $bl_match = 0;
    map {
        if ( $p_name =~ $_ ) {
            $bl_match = 1;
            <system.process.blacklist_match>->{$p_name} //= $_;
        }
    } @{<system.blacklist.autokill>};
    next if $bl_match;

    ## custom process limits ## [ currently 'max_mem' and 'max_cpu' in percent ]
    foreach my $lp_name ( keys %{<process.limits>} ) {
        next
            if $p->fname !~ /\Q$lp_name\E/
            and ( not defined $p->cmndline
            or $p->cmndline !~ /^[^\s]*\Q$lp_name\E/ );
        my $lp = <process.limits>->{$lp_name};
        ( my $rl_name = $p->fname // $p->cmndline ) =~ s/ .*$//;

        if (    defined $lp->{'max_mem'}
            and $lp->{'max_mem'} =~ /^\d+(\.\d+)?$/
            and $lp->{'max_mem'} != 0 ) {
            $lp->{'condition_start'} //= <[base.time]>->(2)
                if $mem >= $lp->{'max_mem'};
            if ($mem >= $lp->{'max_mem'}
                and ( not defined $lp->{'seconds'}
                    or ( <[base.time]>->(2) - $lp->{'condition_start'} )
                    >= $lp->{'seconds'} )
            ) {
                <[base.log]>->(
                    0,
                    sprintf(
                        "<!> MEMORY USAGE ALERT: (( %s )) "
                            . "[ .. %s%% .. limit=%s%% ]",
                        $rl_name, $mem, $lp->{'max_mem'}
                    )
                );
                if ( defined $lp->{'action'} and $lp->{'action'} eq 'kill' ) {
                    my $term_pid = $p->pid;

                    my $log_msg
                        = sprintf( " : << killing '%s' process >> [PID=%d]",
                        $rl_name, $term_pid );

                    <[system.process.autokill]>->( $term_pid, $log_msg );

                    delete $lp->{'condition_start'};
                }
            }
        }

        next
            if not defined $lp->{'max_cpu'}
            or $lp->{'max_cpu'} !~ /^\d+(\.\d+)?$/
            or $lp->{'max_cpu'} == 0;
        delete $lp->{'condition_start'} if $cpu < $lp->{'max_cpu'};

        $lp->{'condition_start'} //= <[base.time]>->(2)
            if $cpu >= $lp->{'max_cpu'};

        if ($cpu >= $lp->{'max_cpu'}
            and ( not defined $lp->{'seconds'}
                or ( <[base.time]>->(2) - $lp->{'condition_start'} )
                >= $lp->{'seconds'} )
        ) {
            <[base.log]>->(
                0,
                "<!> CPU LOAD ALERT: (( $rl_name )) [now $cpu%, limit "
                    . $lp->{'max_cpu'} . " ]"
            );
            if ( defined $lp->{'action'} and $lp->{'action'} eq 'kill' ) {
                my $term_pid = $p->pid;

                my $log_msg = sprintf( " : << killing '%s' process >> [PID=%d]",
                    $rl_name, $term_pid );

                <[system.process.autokill]>->( $term_pid, $log_msg );

                delete $lp->{'condition_start'};
            }
        }
    }
}

## memory limit alerts ##

my $mem_limit_reached = 0;
<system.memory_alert.warned> //= 0;
if ( $mem_used_pct >= <mem.max_used> ) {    # system memory alert limit
    $mem_limit_reached = 1;
    my $reached = $mem_used_pct == <mem.max_used> ? 'reached' : 'exceeded';

    my $warn_str
        = "<!> WARNING <!> used memory $reached " . <mem.max_used> . "% limit";
    $warn_str .= " ( now $mem_used_pct% )" if $reached eq 'exceeded';
    <[base.log]>->( 0, $warn_str ) if !<system.memory_alert.warned>;
    <system.memory_alert.warned>++;
} elsif (<system.memory_alert.warned>) {
    <[base.log]>->(
        1,
        " : memory usage dropped below "
            . <mem.max_used>
            . "% limit ( now $mem_used_pct% )"
    );
    <system.memory_alert.warned> = 0;
}
if ( $mem_limit_reached and <mem.autokill> ) { # automatic mem. load mitigation!
    foreach my $pid (
        sort {
            <process.table.top>->{$b}->{'pctmem'} <=>
                <process.table.top>->{$a}->{'pctmem'}
        } keys( %{<process.table.top>} )
    ) {
        my $process = <process.table.top>->{$pid};
        next
            if defined <mem.kill_min> and $process->{'pctmem'} < <mem.kill_min>;

        my $log_msg
            = sprintf(
            " :. killing highest memory user (PID %d '%s') [ %s %% ]",
            $pid, $process->{'fname'}, $process->{'pctmem'} );

        <[system.process.autokill]>->( $pid, $log_msg );

        last;
    }
}
