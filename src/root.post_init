# >:]

# name  = root.post_init
# descr = starts configured agents

my $module_reinitialization = shift;

<[root.cleanup_temp_files]> if not $module_reinitialization;

my @all_agents   = keys %{<root.spawn_config.agents.config>};
my @start_agents = @{<root.spawn_config.agents.startup.spawn_order>};

my $prev_all   = <root.init_state.all_agents>   //= [];
my $prev_start = <root.init_state.start_agents> //= [];

my ( $added_start_ref, $removed_start_ref )
    = <[base.diff_array]>->( $prev_start, \@start_agents );
my ( $added_all_ref, $removed_all_ref )
    = <[base.diff_array]>->( $prev_all, \@all_agents );

<root.init_state.all_agents>   = \@all_agents;
<root.init_state.start_agents> = \@start_agents;

# print Dumper(<root.spawn_config.agents.config>).join(', ',@all_agents)."\n";

if ( @{$added_all_ref} ) {
    <[root.set_up_agent_dependencies]>->( @{$added_all_ref} );
    <[root.set_up_ondemand_agents]>->( @{$added_all_ref} );
}

map { <[root.autostart_agents]>->($_) if !<[root.spawn_count]>->($_) }
    @{$added_start_ref};

print Dumper( $data{'jobqueue'} )
    if exists <system.subs_loaded.debug>
    and <system.subs_loaded.debug> > 1
    and <system.verbosity> > 2;

0;
