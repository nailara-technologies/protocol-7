# >:]

# name = ssh.connection.start
# todo = config validation ( check for syntax + missing keys/values )

my $con_id;
my $link_name;
my $connection;
my $profile_name;
if ( @_ == 1 and $_[0] =~ /^\d+$/ ) {
    $con_id       = shift;
    $connection   = $data{'ssh'}{'connections'}->{$con_id};
    $link_name    = $connection->{'name'};
    $profile_name = $connection->{'profile'};
} else {
    $profile_name = shift // '';
    $link_name    = shift // '';
}
my $ssh_timeout = <ssh.cfg.globals>->{'connections.timeout'};
$ssh_timeout //= 10;    # default timeout (seconds)
die "expected ssh profile name\n" if !length($profile_name);
die "expected ssh link name\n"    if !length($link_name);
die "ssh profile '$profile_name' does not exist\n"
    if not exists <ssh.cfg.profiles>->{$profile_name};
my $profile_data = <ssh.cfg.profiles>->{$profile_name};
die "link '$link_name' not found in ssh profile '$profile_name'\n"
    if not exists $profile_data->{$link_name};

my $link_setup = $profile_data->{$link_name};

my $ssh_addr = $link_setup->{'ssh.addr'};
my $ssh_port = $link_setup->{'ssh.port'};

<[base.log]>->( 1, ": link startup : $link_name [$ssh_addr:$ssh_port]" );

if ( not defined $con_id ) {
    $con_id = <[base.gen_id]>->( $data{'ssh'}{'connections'} );
    $data{'ssh'}{'connections'}->{$con_id} //= {};
    $connection = $data{'ssh'}{'connections'}->{$con_id};

    $connection->{'name'}        = $link_name;
    $connection->{'profile'}     = $profile_name;
    $connection->{'target_host'} = $ssh_addr;
    $connection->{'target_port'} = $ssh_port;

    $data{'ssh'}{'profiles'}->{$profile_name}->{$link_name} //= [];
    push(
        @{ $data{'ssh'}{'profiles'}->{$profile_name}->{$link_name} },
        $con_id
    );

    <ssh.status.connections>->{$con_id} = 'offline';
}

my $ssh = Net::SSH2->new();
$ssh->timeout( $ssh_timeout * 1000 );

my $sock = IO::Socket::IP->new(
    PeerHost => $ssh_addr,
    PeerPort => $ssh_port,
    Timeout  => $ssh_timeout,
);

if ( not $sock ) {
    <[base.log]>->( 0, ": : tcp connection error [$!]" );
    goto error;
}

$sock->sockopt( SO_LINGER(), pack( 'SS', 0, 0 ) );

if ( !$ssh->connect($sock) ) {
    <[base.log]>->( 0, ": : ssh connection error [$!]" );
    $sock->shutdown('NOW') if $sock->connected;
    goto error;
}

<[base.log]>->( 2, ": : ssh connection established.." );

my $configured_hostkey = join( '+',
    $link_setup->{'ssh.hostkey.md5'},
    $link_setup->{'ssh.hostkey.sha1'} );

my $host_key = join( '+',
    unpack( 'H*', $ssh->hostkey_hash('md5') ),
    unpack( 'H*', $ssh->hostkey_hash('sha1') ) );

if ( $host_key ne $configured_hostkey ) {
    <[base.log]>->( 0, ": : <!> SSH HOSTKEY [$host_key] IS INVALID!" );
    $ssh->disconnect;
    $sock->shutdown('NOW');
    goto error;
} else {
    my $hk_str = $host_key;
    substr( $hk_str, 10, 35, '...' );
    <[base.log]>->( 1, ": : hostkey accepted [$hk_str]" );
}

my $ssh_user = $link_setup->{'ssh.user'};

my %auth_methods = map { $_ => 1 } $ssh->auth_list($ssh_user);

<[base.log]>->( 2, ": : password auth. is enabled..(!)" )
    if exists $auth_methods{'password'};
if ( not exists $auth_methods{'publickey'} ) {
    <[base.log]>->(
        0, ": : <!> no public key auth. for user '$ssh_user' available!"
    );
    $ssh->disconnect;
    $sock->shutdown('NOW');
    goto error;
} else {
    <[base.log]>->( 2, ": : public key auth. is available.." );
}

my $ssh_keyfile = $link_setup->{'ssh.keyfile'};
my $ssh_privkey = $ssh_keyfile;
my $ssh_pubkey  = "$ssh_keyfile.pub";

foreach my $key_type ( 'private', 'public' ) {
    my $key_file = $key_type eq 'private' ? $ssh_privkey : $ssh_pubkey;
    if ( !open( my $test_fh, '<' . $key_file ) ) {
        <[base.log]>->(
            0, ": : SSH AUTH ERROR [ unable to open $key_type key: $! ]"
        );
        $ssh->disconnect;
        $sock->shutdown('NOW');
        goto error;
    }
}

if ( !$ssh->auth_publickey( $ssh_user, $ssh_pubkey, $ssh_privkey ) ) {
    my ( $err_code, $err_name, $err_str ) = $ssh->error;
    <[base.log]>->( 0, ": : SSH AUTH ERROR [ $err_str! ]" );
    $ssh->disconnect;
    $sock->shutdown('NOW');
    goto error;
}
<[base.log]>->( 1, ": : ssh auth. successful.." );

my $nailara_addr = $link_setup->{'nailara.remote.addr'};
my $nailara_port = $link_setup->{'nailara.remote.port'};

my $channel = $ssh->tcpip( $nailara_addr, $nailara_port );
if ( not defined $channel ) {
    <[base.log]>->( 0, ": : remote nailara connection error [$!]" );
    $ssh->disconnect;
    $sock->shutdown('NOW');
    goto error;
}
$channel->blocking(0);

<[base.log]>->( 1, ": : nailara tunnel connection established.." );

$connection->{'io'}->{'ssh'} = <[event.add_io]>->(
    {   'fd'      => $sock,
        'handler' => 'ssh.handler.ssh_io',
        'data'    => {
            'con_id'       => $con_id,
            'ssh_obj'      => $ssh,
            'profile_name' => $profile_name,
            'link_name'    => $link_name
        }
    }
);

$connection->{'sock'}             = $sock;
$connection->{'obj'}              = $ssh;
$connection->{'nch'}              = $channel;
$connection->{'buffer'}           = '';
$connection->{'authorized'}       = 0;
$connection->{'linked'}           = 0;
$connection->{'heartbeat_errors'} = 0;
$connection->{'latency'}          = 'unknown';

delete $connection->{'retry_delay'}
    if exists $connection->{'retry_delay'};

<ssh.status.connections>->{$con_id} = 'online';

$connection->{'io'}->{'ssh'}->now;    # quickfix!

my $heartbeat_delay = 5;              # LLL: -> config...
$connection->{'timer'}->{'heartbeat'} = <[event.add_timer]>->(
    {   'after'    => 1,
        'interval' => $heartbeat_delay,
        'repeat'   => 1,
        'handler'  => 'ssh.handler.connection_heartbeat',
        'data'     => $con_id
    }
);

return 1;

error:
<ssh.status.connections>->{$con_id} = 'error';
$connection->{'retry_delay'} *= 2
    if exists $connection->{'retry_delay'};
$connection->{'retry_delay'} //= 0.5;    # LLL: -> config!
$connection->{'retry_delay'} = 30 if $connection->{'retry_delay'} > 30;

<[base.log]>->( 1, ": : : retrying in $connection->{retry_delay} seconds ..." );

$connection->{'timer'}->{'reconnect'} = <[event.add_timer]>->(
    {   'after'   => $connection->{'retry_delay'},
        'handler' => 'ssh.handler.connection_retry',
        'data'    => $con_id
    }
);

return 0;

# ______________________________________________________________________________
#\\6CV5A7Q54DZLVX6LPKJB6GQGUX7ORD3OZR5VJDIV7TF3A6UAC2JDY7RGZ7QP3KGFZDBM4G5W32PK2
# \\ IU2FSV2DXB2XLMMTIZZ5ZOBED2WQS5QVRA2PNIFPVYODOCLNH7DH \\// C25519-BASE-32 //
#  \\// V62UCJDE36BD5KZACJWEORO6QLHUMFVSSUNIQTCZORDG7NK2MDA \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
