# >:]

# name  = base.cmd.reload
# param = [keyword]
# descr = reload or reinit config and source code
my @keywords = qw| config  source  plugins  init  all |;

my $arg = $$call{'args'} // 'all';
my $id  = $$call{'session_id'};

my ( $success, $output ) = ( 0, '' );

<base.debug.keep_on_reload> //= 0;    # <- [persistence] override : cfg/defaults

my $s = '     ';
$$reply{'data'} = ":\n\n\n::\n\n";    # <-- header
my $reply_footer  = "\n::\n\n\n:\n";  # <-- footer
my $keyword_match = 0;

if ( $arg eq 'config' or $arg eq 'all' ) {
    $keyword_match = 1;
    <[base.log]>->( 1, "[$id] < reload config >" );
    if (<[base.reload_config]>) {
        $$reply{'data'} .= "$s reload config  [ success ]\n";
    } else {
        $$reply{'data'} .= "$s reload config  [  ERROR  ]\n";
    }
    $success = 1;
}
if ( $arg eq 'source' or $arg eq 'all' ) {
    $keyword_match = 1;
    delete $data{'base'}{'commands'};
    <base.modules.load_errors> = 0;
    $data{'callbacks'}{'end_code'} = [];
    <[base.log]>->( 1, "[$id] < reload source code >" );

    if ( !<base.debug.keep_on_reload>
        and ( not defined <modules.load> or <modules.load> !~ /debug/ ) ) {
        <[base.log]>->( 0, "[reload] .. removing debug module .." )
            if ref( $code{'debug.dump'} ) eq 'CODE';

        # todo: create src tracking unload mechanism
        <[base.purge_code]>->('debug');
    } else {
        my %mod = map { $_ => 1 } split / +/, <modules.load>; # <!> create iface
        if ( not exists $mod{'debug'} ) {
            <[base.log]>->( 1, "<< persistently enabling debug module >>" );
            $mod{'debug'} = 1;
            <modules.load>
                = join( ' ', sort { length $a <=> length $b } sort keys %mod );
        }
    }

    map { delete $data{'base'}{$_} } ( 'cmd', 'console', 'overwritten' );
    my $error = <[base.load_modules]>->("base $data{modules}{load}");
    if ( !$error and !<base.modules.load_errors> ) {
        $$reply{'data'} .= "$s reload source  [ success ]\n";
        $success = 1;
    } else {
        $$reply{'data'} .= "$s reload source  [  ERROR  ]\n";
    }

    ## source version ##
    my $src_version_file
        = catfile( $data{'system'}{'conf_path'}, 'protocol-7.source-version' );
    if ( -f $src_version_file and open( my $ver_fh, '<' . $src_version_file ) )
    {
        my $old_version = <protocol-7.source-version> // '';
        ( <protocol-7.source-version> = <$ver_fh> ) =~ s|\s||g;
        close($ver_fh);
        <[base.log]>->(
            0, sprintf( "NEW SOURCE CODE [ %s ]", <protocol-7.source-version> )
        ) if <protocol-7.source-version> ne $old_version;
    } else {
        <protocol-7.source-version> = 'unknown';
    }

    ## release version ##
    my $rel_version_file
        = catfile( $data{'system'}{'conf_path'}, 'protocol-7.release-version' );
    if ( -f $rel_version_file and open( my $ver_fh, '<' . $rel_version_file ) )
    {
        my $old_release = <protocol-7.release-version> // '';
        ( <protocol-7.release-version> = <$ver_fh> ) =~ s|\s||g;
        close($ver_fh);
        <[base.log]>->(
            0,
            sprintf(
                "RELEASE VERSION : %s -> %s",
                $old_release, <protocol-7.release-version>
            )
        ) if <protocol-7.release-version> ne $old_release;
    } else {
        <protocol-7.release-version> = 'unknown';
    }
}
if ( $arg eq 'plugins' or $arg eq 'all' ) {
    $keyword_match = 1;
    <[base.log]>->( 1, "[$id] < reload plugins >" );
    if (<[base.reload_plugins]>) {
        $$reply{'data'} .= "$s plugin reload  [ success ]\n";
        $success = 1;
    } else {
        $$reply{'data'} .= "$s plugin reload  [  ERROR  ]\n";
    }
}
if ( $arg eq 'init' or $arg eq 'all' ) {
    $keyword_match = 1;
    <[base.log]>->( 1, "[$id] < source code reinit >" );
    if ( <[base.init_modules]>->() ) {
        $$reply{'data'} .= "$s reinit source  [ success ]\n";
        $success = 1;
    } else {
        $$reply{'data'} .= "$s reinit source  [  ERROR  ]\n";
    }
}
if ( !$keyword_match ) {
    <[base.log]>->( 0, "[$id] invalid reload keyword '$arg' called.," );
    return { 'mode' => 'nak', 'data' => "unknown reload keyword '$arg'" };
}
if ($success) {
    <[base.log]>->( 1, "[$id] .. reloading complete =)" );
} else {
    <[base.log]>->( 0, "[$id] reloading $arg was not successful `:|" );
}
$$reply{'mode'} = 'data';
$$reply{'data'} .= $reply_footer;

# ______________________________________________________________________________
#\\TDU2X2G57POQK6IO4OWYZVS6FFZD47UEV47CIXCMPGIZ54AZBJ4RLTIR6W5LBE2G4IJCXPEZMR656
# \\ TD5B3FLDXCTU3FQCCHSG3UBWUZDMLSI3FC7IA75Y75BA2JP7BKTF \\// C25519-BASE-32 //
#  \\// 4R5V2VEQSJQA4NGSZWI6DJC5I2PJGHB46TPROQF4BEO7N7V7KCI \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
