# >:]

# name = crypt.C25519.load_keypair

my $key_vars = <[crypt.C25519.key_vars]>->(shift);    # <- [key_name] (optional)

my $key_dir      = $key_vars->{'key_dir'};
my $key_usr      = $key_vars->{'usr_name'};
my $key_name     = $key_vars->{'key_name'};
my $key_basepath = $key_vars->{'key_basepath'};

my $pubkey_file = "$key_basepath.pub";

use Crypt::Misc 'decode_b32r';

if ( -r $key_basepath and -r $pubkey_file ) {
    my $u_str = $key_name =~ /^$key_usr(?:\..+)$/ ? '' : " [usr:$key_usr]";
    <[base.log]>->( 1, ":. C25519-key .:. '$key_name'$u_str" );

    chomp( my $privkey_data_encoded = ${ <[file.slurp]>->($key_basepath) } );
    chomp( my $pubkey_data_encoded  = ${ <[file.slurp]>->($pubkey_file) } );

    if ( !length($privkey_data_encoded) or !length($pubkey_data_encoded) ) {
        <[base.log]>->( 0, "unable to load '$key_name' key data .," );
        return 0;
    }

    ## decode ##
    my $enc_type;
    if ( $key_basepath =~ /\.C25519_b64u$/ ) {    # base64
        $enc_type                          = 'base64';
        $KEYS{'C25519'}{$key_name}{'priv'} = decode_b64u($privkey_data_encoded);
        $KEYS{'C25519'}{$key_name}{'pub'}  = decode_b64u($pubkey_data_encoded);

    } elsif ( $key_basepath =~ /\.C25519_b32$/ ) {    # base32
        $enc_type                          = 'base32';
        $KEYS{'C25519'}{$key_name}{'priv'} = decode_b32r($privkey_data_encoded);
        $KEYS{'C25519'}{$key_name}{'pub'}  = decode_b32r($pubkey_data_encoded);
    } else {
        <[base.log]>->( 0, "unrecognized key encoding.., loading aborted." );
        return 0;
    }

    map {
        <[base.log]>->( 0, "$enc_type decoding failed [ $_ key ]" )
            if not defined $KEYS{'C25519'}{$key_name}{$_}
    } qw| priv pub |;

    if (   not defined $KEYS{'C25519'}{$key_name}{'pub'}
        or not defined $KEYS{'C25519'}{$key_name}{'priv'} ) {
        <[base.log]>->( 0, "failed to load key '$key_name'" );
        return 0;
    }

    return 1;
} else {
    <[base.log]>->( 0, "'$key_name' key pair not found or readable..," );
    return 0;
}
