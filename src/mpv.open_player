# >:]

# name = mpv.open_player

$SIG{'PIPE'} = sub {
    <[base.log]>->( 0, "SIGPIPE received! shutting down..," );
    exit(2);
};

my $target_geometry;
<mpv.audio_only> = 0;
my $mpv_params = <mpv.params>;

<mpv.audio_only> = 1
    if <system.agent.mode> eq 'stand-alone'
    and defined <system.agent.subname>
    and <system.agent.subname> eq 'audio';

<mpv.playlist_type> = 'audio' if <mpv.audio_only>; # <- run with 'audio' subname

if ( !<mpv.audio_only> ) {
    my $xmode = <x11.mode>;
    $ENV{'DISPLAY'} = <x11.display>;

    if ( defined $xmode and defined <mpv.xmode>->{$xmode} ) {
        <mpv.vo_backend> = <mpv.xmode>->{$xmode}->{'vo'}
            if defined <mpv.xmode>->{$xmode}->{'vo'};
        <mpv.hwdec> = <mpv.xmode>->{$xmode}->{'hwdec'}
            if defined <mpv.xmode>->{$xmode}->{'hwdec'};
        <[base.log]>->(
            1,
            sprintf(
                "<!> switching vo_backend to '%s' [ %s-mode ] <!>",
                <mpv.vo_backend>, $xmode
            )
        );
    }

    if ( not defined <mpv.geometry> or exists <x11.geometry_was_undefined> ) {
        <[base.log]>->( 1, "<!> geometry was undefined..." );
        if (<mpv.autoresize>) {
            <[base.log]>->( 1, " : disabled 'autoresize' function.." );
            <mpv.autoresize> = 0;
        }
        if ( <mpv.fade_in> and <mpv.auto_fs> ) {
            <[base.log]>->( 1, " : disabled 'fade_in' (auto_fs active).." );
            <mpv.fade_in> = 0;
        }
    }
    if ( <system.agent.mode> eq 'media-child' and <mpv.fade_in> ) {
        <[base.log]>->( 1, " : disabled 'fade_in' (media-child).." );
        <mpv.fade_in> = 0;
    }

    if (<mpv.fade_in>) {
        $target_geometry = <mpv.geometry>;
        <mpv.geometry> = <mpv.fade_start_geom>;
    }

    $mpv_params .= ' --geometry=' . <mpv.geometry> if defined <mpv.geometry>;

    <mpv.geometry> = $target_geometry if defined $target_geometry;

    if ( ( not defined <mpv.geometry> or exists <x11.geometry_was_undefined> )
        and exists <mpv.auto_fs>
        and <mpv.auto_fs> ) {
        $mpv_params .= ' -fs';
        if (<mpv.autoresize>) {
            <[base.log]>->( 1, " : disabled 'autoresize' function.." );
            <mpv.autoresize> = 0;
        }
        <[base.log]>->( 1, " : fullscreen mode is enabled [auto_fs].." );
        <mpv.current.window_width>  = <x11.coordinates.right>;
        <mpv.current.window_height> = <x11.coordinates.bottom>;
        <mpv.current.box_width>     = <x11.coordinates.right>; # LLL: check, fix
        <mpv.current.box_height>    = <x11.coordinates.bottom>;
    }

    $mpv_params .= ' -vo=' . <mpv.vo_backend> if defined <mpv.vo_backend>;
    $mpv_params .= ' --hwdec=' . <mpv.hwdec>  if defined <mpv.hwdec>;

    if (    defined <mpv.geometry>
        and exists <x11.coordinates>
        and exists <mpv.autoresize>
        and <mpv.autoresize> ) {
        my ( $width, $height ) = (
            <x11.coordinates>->{'right'} - <x11.coordinates>->{'left'},
            <x11.coordinates>->{'bottom'} - <x11.coordinates>->{'top'}
        );
        <[base.log]>->( 1, "auto resize is enabled (${width}x${height})" );
        $mpv_params .= " --autofit=${width}x${height} --no-keepaspect";
    }
} else {
    $mpv_params = <mpv.audio_params>;
    map { <[base.disable_command]>->($_) }
        ( 'zoom', 'align-x', 'align-y', 'change_subname' );
}

my $socket_path = <mpv.path.ipc_socket> = "/tmp/.mpv.socket.$$";
$mpv_params .= " --input-ipc-server=$socket_path";

$mpv_params =~ s|  +| |g;

my @mpv_params = split( / +/, $mpv_params );

my $mpv_title_str = <mpv.agent_title>;
$mpv_title_str .= '[' . <system.agent.subname> . ']'
    if exists <system.agent.subname> and length(<system.agent.subname>);
$mpv_title_str .= ' ( ${?media-title:${media-title}}${!media-title:no file} )';

push( @mpv_params, "--title='$mpv_title_str'" );
<mpv.started_with_params> = join( ' ', @mpv_params );

<[base.log]>->(
    2, join( ' ', "current parameters : ", <mpv.bin_path>, @mpv_params )
);

<mpv.fh.stdin>  = IO::Handle->new();
<mpv.fh.stdout> = IO::Handle->new();
<mpv.fh.stderr> = IO::Handle->new();

<[base.log]>->( 1, "starting mpv player.," );

## note ## mpv writes errors to stdout, consider replacement with open2 .., ##
<mpv.pid> = open3( <mpv.fh.stdin>, <mpv.fh.stdout>, <mpv.fh.stderr>,
    ( <mpv.bin_path>, @mpv_params ) );

my $wait_res = waitpid( <mpv.pid>, WNOHANG() );

if (   not defined <mpv.pid>
    or !<mpv.pid>
    or $wait_res == <mpv.pid>
    or $wait_res < 0 ) {
    <[base.log]>->( 0, "[!] unable to start mpv [$@]" );
    <[mpv.handler.error_output]>;
    <[mpv.callback.abort_startup]>;    # <-- exiting
} else {
    push( @{<system.kill_list>}, <mpv.pid> );
    <[base.agents.report_child_pid]>->(<mpv.pid>);
}

END {    # cleaning up left over process on lost socket
    do { <[base.sleep]>->(0.13); kill( 9, <mpv.pid> ) }
        if defined <mpv.pid>
        and kill( 15, <mpv.pid> );
}

<[base.log]>->( 1, ": mpv process spawned [PID=<mpv.pid>]" );
close( delete(<mpv.fh.stdin>) );    # input fd not required

<[event.add_io]>->(
    {   'fd'      => <mpv.fh.stderr>,
        'handler' => 'mpv.handler.stderr',
        'data'    => { 'pid' => <mpv.pid>, }
    }
);

<[mpv.open_control_socket]>;

<[mpv.await_window_presence]> if !<mpv.audio_only>;

<[mpv.callback.fade_in]> if <mpv.fade_in> and !<mpv.audio_only>;

<[event.add_io]>->(
    {   'fd'      => <mpv.fh.stdout>,
        'handler' => 'mpv.handler.stdout',
        'data'    => {
            'pid'           => <mpv.pid>,
            'log_whitelist' => [
                'Creating non-video VO',
                '\[ipc',
                '.{5}Video ',
                '.{5}Audio ',
                'Waiting for XShm',
                'Exiting... \(Quit\)',
                '\[VDPAU SUNXI\] Presentation time not supported',
                'XIO:  fatal IO error ',
                'after \d+ requests',
                'libva info: VA-API version',
                'libva info: .+returns 0',
                'libva info: Trying to open /usr/lib/',
                'libva info: Found init function __vaDriverInit_',
                'No protocol specified',
                'WARNING: Invalid RefPicListX',
                'xcb_connection_has_error\(\) returned true',
                'jack server is not running or cannot be started',
                'JackShmReadWritePtr::~JackShmReadWritePtr - Init not done for',
                'Failed to open VDPAU backend libvdpau_nvidia.so',
            ]
        }
    }
);

<[base.log]>->( 1, "player startup successful.." );

# ______________________________________________________________________________
#\\QWTUW6GLMBDJUBAWEENSDAB6XGHHB7NC7VZROSPTQOYKSKCNQDFQSWXVCMJ3NEWZXQ7SBU4ZOVTYU
# \\ OQQZO7NQT4XLADNDZSUWZP3QGPMSZTLZHD2SHVKUSZKTOPKQCEVJ \\// C25519-BASE-32 //
#  \\// ORSWY4BNIIGU4YW73NOQOI23JLCMKJPPSDNACRVF2VZC6H22OAQ \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
