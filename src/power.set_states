# >:]

# name = power.set_states

my $device_id  = shift;
my @set_states = @_;
die "expected valid device id"
    if not defined $device_id
    or not exists <power.cfg.devices>->{$device_id};
die "expected four socket state parameters" if @set_states != 4;

my $dev = <[power.dev_obj]>->($device_id);

map {
    if ( defined $set_states[$ARG] and $set_states[$ARG] eq '1' ) {
        $set_states[$ARG] = SOCK_ON;
    } elsif ( defined $set_states[$ARG] and $set_states[$ARG] eq '0' ) {
        $set_states[$ARG] = SOCK_OFF;
    } else {
        $set_states[$ARG] = SOCK_SKIP;
    }
} ( 0 .. 3 );

$dev->_set_ctrl(@set_states);

if ( not defined $dev or not defined $dev->{'poller'} ) {
    <[base.log]>->( 0, "connection to device $device_id failed" );
    return undef;
}

my @new_states;

map {
    if (defined $dev->{'stat'}->[$ARG]
        and (  $dev->{'stat'}->[$ARG] == 17
            or $dev->{'stat'}->[$ARG] == 18
            or $dev->{'stat'}->[$ARG] == 65 )
    ) {
        $new_states[$ARG] = '1';
    } elsif (
        defined $dev->{'stat'}->[$ARG]
        and (  $dev->{'stat'}->[$ARG] == 33
            or $dev->{'stat'}->[$ARG] == 34
            or $dev->{'stat'}->[$ARG] == 130 )
    ) {
        $new_states[$ARG] = '0';
    } else {
        $new_states[$ARG] = 'E';
    }
} ( 0, 1, 2, 3 );

if ( $dev->{'poller'}->can_write(0.1) ) {
    $dev->{'sock'}->send( chr(0x11) );
    $dev->{'sock'}->close();
}

<power.last_states> = \@new_states;

return @new_states;

# ______________________________________________________________________________
#\\SK5MAQBIVKWQLGKP33UOS5J64ASHKCJT2HCK2AWRV4JJOFYAI3MYSLTZAFTPUTTZHG7RIDHSTDLPQ
# \\ O4H76G72YP77JATZS2LYSXFX6DGKPVE63P2CGZRCOWL2RBXB2MMW \\// C25519-BASE-32 //
#  \\// LYBDT45XUA762CODX3VBXB4EEYTV47FBEAQYF22GJ6DUBAAC6DQ \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
