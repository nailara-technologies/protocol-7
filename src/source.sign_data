# >:]

# name  = source.sign_data

my $src_data_ref = shift;
die "expected source data scalar reference"
    if not defined $src_data_ref
    or ref($src_data_ref) ne 'SCALAR';

my $bit_size   = <source.chksum_bitsize>;
my $chksum_b32 = shift // <[chk-sum.bmw.strsum]>->( $bit_size, $$src_data_ref );
my $data_len   = length($$src_data_ref);

<[base.log]>->(
    2,
    sprintf "::. signing %5s data bits .., [%03d]",
    $data_len * 8, $data_len
);

return encode_b32r(
    <[crypt.C25519.sign_data]>->(
        \join( "\n",
            $chksum_b32,
            utf8::is_utf8($$src_data_ref)
            ? Encode::encode_utf8($$src_data_ref)
            : $$src_data_ref )
    )
);

# ______________________________________________________________________________
#\\XRP5VSDQL5SCEKPY3I5WYWJEGFI4XORDV7HKQDTXFTEA6WPRJCUVPU4JKK7PL4Q5SB3HEE6YWWAUO
# \\ LVIRU4JSBDQNI5CAUTXGXIA7OLDVB4TO7PACJAXNY2FUKRZJO7V5 \\// C25519-BASE-32 //
#  \\// 4IB57YT2GIQ57C6RMMVDXGGFWFWAJMCFHQGLKUHWIW2RLJRKMDI \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
