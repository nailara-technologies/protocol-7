# >:]

# name  = source.sign_data

my $src_data_ref = shift;
die "expected source data scalar reference"
    if not defined $src_data_ref
    or ref($src_data_ref) ne 'SCALAR';

my $bit_size   = <source.chksum_bitsize>;
my $chksum_b32 = shift // <[digest.bmw.strsum]>->( $bit_size, $$src_data_ref );
my $data_len   = length($$src_data_ref);

<[base.log]>->( 2, "signing $data_len bytes of data..," );

return encode_b32r(
    <[crypt.C25519.sign_data]>->(
        \join( "\n",
            $chksum_b32,
            utf8::is_utf8($$src_data_ref)
            ? Encode::encode_utf8($$src_data_ref)
            : $$src_data_ref )
    )
);

# ______________________________________________________________________________
#\\FDTGFZVMKRANKSDHMF2MNPMFQNAOH7RUYOGM7UGOEZHUN7O5OIMA6L5J235K7ZYY3BF2DNPUKUPDS
# \\ VKPIPGRW7X77UNRFM2TNI2NAZIVA37WLIHALENFILZG4K3HVG7WQ \\// C25519-BASE-32 //
#  \\// DOHDMNKMRNTKSHKLMP3PZS7UQ3RIEHKHE5CK6FVBZGLWSNFWYAQ \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
