# >:]

# name = browser.init_view

my $id = shift;

my $bg_color = <browser.bg_color> // '#FFFFFF';

my $filter_events = 1;

################################################################################
##  following signals/events need to be managed if usr interaction is desired ##
################################################################################

%{<browser.blocked_signal_types>} = map { $_ => 1 } qw(
    close
    print
    run-as-modal
    context-menu
    authenticate
    decide-policy
    script-dialog
    enter-fullscreen
    leave-fullscreen
    show-option-menu
    run-file-chooser
    show-notification
    run-color-chooser
    permission-request
);

##
#

%{<browser.blocked_event_types>} = map { $_ => 1 } qw(
    scroll
    key-press
    key-release
    button-press
    2button-press
    3button-press
    motion-notify
    button-release
    run-file-chooser
);

#
##

delete @{<browser.blocked_event_types>}{'scroll'}
    if <browser.cfg.user_can_scroll>;

delete @{<browser.blocked_event_types>}{qw(key-press key-release)}
    if <browser.cfg.allow_text_edit>;

delete @{<browser.blocked_event_types>}{qw(button-press button-release)}
    if <browser.cfg.links_clickable>;

my $overlay = <browser.gtk_obj.overlay>;

my $scrolled_window = Browser::ScrolledWindow->new;

#my $scrolled_window = Gtk3::ScrolledWindow->new;
#$scrolled_window->set_policy( 'always', 'always' );

my $style_context = $scrolled_window->get_style_context();
$style_context->add_provider( <browser.gtk_obj.css_prov>, -1 );

my $view = Browser::WebView->new_with_context(<browser.gtk_obj.web_context>);

<browser.scr_win>->{$view} = $scrolled_window;

$view->load_alternate_html( "<html><body bgcolor=\"$bg_color\"></body><html>",
    '[init:blank]' );

<browser.view_index>->{$view} = $id;

map {    # filtering blocked signal types
    $view->signal_connect( $_, sub { return 1 } )
} keys %{<browser.blocked_signal_types>};

$view->signal_connect( # filtering all events according to blocklist setup above
    'event',
    sub {
        my $v    = shift;
        my $evt  = shift;
        my $type = $evt->type();

        return 1 if exists <browser.blocked_event_types>->{$type};    # block
            # print "\n [ event : $type ]\n\n";
        if ( index( $type, 'key' ) == 0 )
        {    # block key presses outside input fields
            return 1               if !$v->can_paste_clipboard();
            $v->delete_selection() if $v->can_copy_clipboard();
        }
        return 0;    # allow the rest
    }
) if $filter_events;

$view->signal_connect(    ### LLL: <- check if ever called, remove...
    'size_allocate',
    sub {
        my $view          = shift;
        my $view_index    = <browser.view_index>->{$view};
        my $scrw          = <browser.gtk_obj.scrolled_window>->{$view_index};
        my $hadj          = $scrw->get_hadjustment();
        my $vadj          = $scrw->get_vadjustment();
        my $page_width    = $hadj->get_upper();
        my $page_height   = $vadj->get_upper();
        my $window_height = <browser.window.size.y>;
        return 0;
    }
);

my $user_scrolling = <browser.cfg.user_can_scroll>;
$scrolled_window->set_kinetic_scrolling($user_scrolling);

if ( $user_scrolling and <browser.cfg.allow_scrollbars> ) {
    $scrolled_window->set_policy( 'automatic', 'automatic' );
} else {
    $scrolled_window->set_policy( 'external', 'external' );
}

# blocking website from overriding scrollbar policy
# $view->get_main_resource->signal_connect('scrollbars-policy-changed',
#                                                    => sub { return 1 } );

$view->set_zoom_level( <browser.zoom_level> * <browser.zoom_factor> );

my $settings = $view->get_settings;
$settings->set_zoom_text_only( <browser.zoom_text_only> ? 1 : 0 );
$view->set_settings($settings);

$view->set_editable(0);

# $view->can_go_back_or_forward(0);

# $view->set_maintains_back_forward_list(0);

<[browser.set_properties]>->($view);

$view->set_property( 'editable', 0 );

# my $viewport = Gtk3::Viewport->new();
# $viewport->set_hexpand(1);
# $viewport->set_vexpand(1);

$scrolled_window->set_hexpand(1);
$scrolled_window->set_vexpand(1);

$scrolled_window->set_size_request( -1, -1 );

# $viewport->add($view);
# $scrolled_window->add($viewport);
$scrolled_window->add($view);

$overlay->add_overlay($scrolled_window);

# <browser.gtk_obj.viewport>->{$id}        = $viewport;
<browser.gtk_obj.scrolled_window>->{$id} = $scrolled_window;
<browser.gtk_obj.view>->{$id}            = $view;

# ______________________________________________________________________________
#\\MX5ANEH65EB7XEYCAVCFAUJRS74CGXTWOGMAVYNAWHT6B7X63FBVKHCTKD6LU46XUW4S6EAJBDDWY
# \\ ASNP6FCHLXFIAFT37YNOLIO35DIU3BK4GSJT2E3PTJAP3B27W2MX \\// C25519-BASE-32 //
#  \\// MKKB7ZKBV7PA7UP7BDH3EMIXPCM3VUFAZBZ5PTM2FU6MDIQTIAA \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
