# >:]

# name = io.unix.socket.out.open

my $socket_file = $_[0];

if ( !-S $socket_file ) {
    <[base.log]>
        ->( 0, "[!] unix domain socket '$socket_file' does not exist.," );
    return undef;
}

my $return_socket = IO::Socket::UNIX->new(
    Type => SOCK_STREAM(),
    Peer => $socket_file,
) or <[base.log]>->( 0, "io.unix.socket.out.open: $!! ('$socket_file')" );

if (    defined $return_socket
    and -S $return_socket
    and $return_socket->connected ) {
    <[base.log]>->( 1, "connected to unix socket [$socket_file]" );

    $data{'handle'}{$return_socket}{'link'} = 'unix';
    $data{'handle'}{$return_socket}{'mode'} = 'output';

    return $return_socket;
} else {
    <[base.log]>->( 0, "[!] can't connect to unix socket [$socket_file]: $!" );
    return 0;
}

# ______________________________________________________________________________
#\\G4C3FEPVTRHHWJUVBOZBCRA2T6LVW5BNEKWFTCOBFL37J7F5UXE3CW6I5CNUXSZGDO3SG3X4NRSCK
# \\ A4TVXQ4OOWPCNELDVTXMM7KGF4FVMKBY4KG6MX6PWO7HPYUG33TN \\// C25519-BASE-32 //
#  \\// HBKFH5DEPWKHCKBOFNO5YPZV2WUYQTL75TY3ZFWO2GW7B57FKAA \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
