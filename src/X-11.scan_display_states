# >:]

# name = X-11.scan_display_states

my $connected = 0;
<X-11.path.display_status> //= {};
<X-11.display_connected>   //= {};

my $first_name;
my @disp_names;
foreach my $disp_name ( keys %{<X-11.path.display_status>} ) {
    my $file_path = <X-11.path.display_status>->{$disp_name};
    chomp( my $status = ${ <[file.slurp]>->($file_path) } );
    my $connected_state = $status eq 'connected' ? 1 : 0;
    <X-11.display_connected>->{$disp_name} //= $connected_state;
    if ( <X-11.display_connected>->{$disp_name} != $connected_state ) {

        <[base.log]>->( 1, "display '$disp_name' is now $status" );
        <X-11.display_connected>->{$disp_name} = $connected_state;
        $first_name //= $disp_name if $connected_state;
        push( @disp_names, $disp_name );
    }
    $connected++ if $status eq 'connected';
}

<X-11.display_connected>->{'any'} = $connected ? 1 : 0;

if ( @disp_names and defined <X-11.display_status.handler> ) {
    my $handler_name = <X-11.display_status.handler>;
    <[base.log]>->( 2, "calling display_status handler '$handler_name'.." );
    map { $code{$handler_name}->($_) if defined $code{$handler_name}; }
        @disp_names;
}

if ( $connected and defined <X-11.wait_for_display.callback> ) {
    my $callback_name = delete <X-11.wait_for_display.callback>;
    delete <X-11.wait_for_display> if !keys %{<X-11.wait_for_display>};
    <[base.log]>->( 2, "calling wait_for_display callback '$callback_name'.." );
    $code{$callback_name}->($first_name) if defined $code{$callback_name};
}

# ______________________________________________________________________________
#\\7B6XIRSUBUKENISCYGCHXTG76UGNG222S4GAHITLEIGIIDFVBH4DPR3ZZNV2OKDSE5E34PFFLYZD2
# \\ SZWOG76VO2XKRA4CXEYQ2WBDCWMVCUCAWQAUWSSSKFWP7XCPFUOI \\// C25519-BASE-32 //
#  \\// GOZDJUIJZ74A5QDJXHUC5RC7Y75C7BEQYDNZXSB6DTGJNGODYDI \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
