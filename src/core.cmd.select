# >:]

# name  = core.cmd.select
# param = <user|sid>
# descr = append user/sid to base [command] path

my $usr_sid = $_[0]->{'session_id'};
my $param = $_[0]->{'args'} // '';

return {
    'mode' => 'nack',
    'data' => 'expected user name or session id [for prepending]'
    }
    if $param !~ <regex.base.usr> and $param !~ <regex.base.sid>;

my $found = 0;
if ( $param =~ /^\d+$/ ) {
    $found = 1 if exists $data{'session'}{$param};
} else {
    map { $found++ if $data{'session'}{$_}{'user'} eq $param }
        keys %{ $data{'session'} };
}

my $source_usr = $data{'session'}{$usr_sid}{'user'};

my $target_usr = $param;
$target_usr = $data{'session'}{$param}{'user'}
    if $param =~ /^\d+$/
    and exists $data{'session'}{$param};

return {
    'mode' => 'nack',
    'data' => $param =~ /^\d+$/
    ? "there is no active session $param"
    : "user '$param' not online"
    }
    if !$found
    or $target_usr !~ <access.cmd.regex.usr>->{$source_usr};

my @base_path
    = ( defined $data{'session'}{$usr_sid}{'base_path'}
        and length $data{'session'}{$usr_sid}{'base_path'} )
    ? ( $data{'session'}{$usr_sid}{'base_path'}, $param )
    : ($param);

$data{'session'}{$usr_sid}{'base_path'} = join( '.', @base_path );

my $bp_str = $data{'session'}{$usr_sid}{'base_path'};
<[base.log]>->( 1, "[$usr_sid] <- session base_path -> \"$bp_str\"" );

return {
    'mode' => 'ack',
    'data' => "base_path = '$bp_str', 'unselect' & '../' = reset,"
        . " '..<cmd>' accesses parent"
    }
