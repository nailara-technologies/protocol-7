# >:]

# name = net.connect_to_cube

my $cube_sock;
my $cube_name = 'cube';
my $cube_port = <protocol-7.network.internal.port>;
my $cube_addr = <protocol-7.network.internal.addr>;

my @connection_types;
my $custom_addr = 0;
foreach my $param (@_) {
    if ( $param =~ m|^\d+$| ) {
        $cube_port = $param;
    } elsif ( -S $param ) {    ##  <--  implement   ##    [LLL]
        $cube_sock = $param;
    } elsif ( $param =~ m,^(ip\.|unix), ) {
        push( @connection_types, $param );
    } elsif ( !$custom_addr ) {
        $custom_addr = 1;
        $cube_addr   = $param;
    } else {
        $cube_name = $param;
    }
}

@connection_types = ('unix') if !@connection_types and defined <unix.path>;

my $unix_path     = defined <unix.path> ? <unix.path> : undef;
my $agent_name    = <system.agent.name>;
my $agent_subname = <system.agent.subname>;

foreach my $c_type (@connection_types) {
    <[base.log]>->( 1, "initiating cube connection [$c_type].," );
    if ( $c_type eq 'unix' ) {
        if ( not defined $unix_path ) {
            if ( not defined $cube_addr and defined $cube_port ) {
                <[base.log]>->(
                    0,
                    'connect_to_cube[unix]: neither unix.path nor '
                        . 'net.local.{addr,port} are defined, aborting.,'
                );
                exit(2);
            } else {
                my $socket_name
                    = <[base.calc_unix_path]>->( $cube_addr, $cube_port );
                <[base.log]>->(
                    0, '<< unix socket name calculation not successful >>'
                    )
                    and next
                    if not defined $socket_name;
                <unix.path> = $unix_path
                    = join( '', '/var/tmp/.7/UNIX/', $socket_name );
            }
        }
        if ( !-e $unix_path or !-S $unix_path and @connection_types ) {
            <[base.log]>->( 2, "unix path '$unix_path' not found, skipping.," );
            next;
        }
        $cube_sock = <[base.open]>->( 'unix', 'output', $unix_path );
        if (    defined $cube_sock
            and -S $cube_sock
            and $cube_sock->connected ) {
            $cube_sock = <[net.unix.authme]>->( $cube_sock, $agent_name );
        } else {
            $cube_sock = undef;
        }
    } elsif ( $c_type eq 'ip.tcp' ) {
        $cube_sock
            = <[base.open]>->( 'ip.tcp', 'output', $cube_addr, $cube_port );
        if (    defined $cube_sock
            and -S $cube_sock
            and $cube_sock->connected ) {
            my $auth_name = $agent_name;
            $auth_name .= "[$agent_subname]" if defined $agent_subname;
            $cube_sock = <[auth.agent.client]>->( $cube_sock, $auth_name );
        } else {
            $cube_sock = undef;
        }
    } elsif ( $c_type eq 'pipe' ) {
        die "<<< connection type 'pipe' not implemented yet >>>";
    } else {
        die "<<< unknown connection type '$c_type' requested >>>";
    }

    if ( defined $cube_sock ) {
        <[base.session.init]>->(
            $cube_sock, qw| protocol-7 client |, $cube_name
        );

        <system.timer>->{'send_reports'} = <[event.add_timer]>->(
            {   'repeat'  => 0,
                'after'   => 0.777,
                'handler' => 'base.session.send_init_reports'
            }
        );
        return $cube_sock;
    }
}

if ( not defined $cube_sock ) {
    map { <[base.log]>->( 0, $ARG ) } (
        '<< not able to connect to local cube., >>',
        ' :. aborting agent start-up ..,'
    );
    exit(4);
}

# ______________________________________________________________________________
#\\LS5FMXQ5KKOXLIQAHAYUAD4UXBDZNX7WKMXE2Z2JBVS6Q2554H4ECZBM6JIXWERTFPQBRSBRCUZWQ
# \\ DFO6Z4KL5HYKCK2YW4XRFVFK4QPB6G2XPSRVS2K7EIWUTNDMM5DT \\// C25519-BASE-32 //
#  \\// CWBPKF3ETEGKXIUMPAX7FXNCGL4ZYAPB2QY52JGYDAN2ZPZ6EBA \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
