# >:]

# name = pdf.html.base.init_code

<[base.perlmod.autoload]>->('Poppler');
<[base.perlmod.autoload]>->('File::Copy');
<[base.perlmod.autoload]>->('LWPx::ParanoidAgent');
<[base.perlmod.autoload]>->( 'File::Path', qw| make_path remove_tree | );

<pdf.html.converting> //= {};
<pdf.html.cache_dir>  //= '/var/cache/pdf2html';

<pdf.html.fail_template>
    = <system.root_path> . '/data/html/failed_to_load.html';

my $cache_dir = <pdf.html.cache_dir>;

my $perms = <pdf.html.cache_perm> // '0750';
if ( !-d $cache_dir ) {
    <[base.log]>->( 1, "creating cache directory '$cache_dir'.. [$perms]" );
    my ( undef, undef, $uid, $gid ) = getpwnam(<system.privs.user>)
        or die "user '" . <system.privs.user> . "' not in passwd file";
    make_path( $cache_dir,
        { mode => oct($perms), 'uid' => $uid, 'group' => $gid } )
        or die "make_path: $OS_ERROR";
} else {
    my $old_perms = <[base.file_perm]>->($cache_dir);
    if ( $old_perms ne $perms ) {
        <[base.log]>->(
            0, "<!> fixing cache dir permissions [ $old_perms -> $perms ]"
        );
        chmod( oct($perms), $cache_dir )
            or warn("chmod($cache_dir): $OS_ERROR");
    }
}

chdir($cache_dir) or die "chdir($cache_dir): $OS_ERROR";

0;

# ______________________________________________________________________________
#\\YS7SL2LK3PUKQWIRFJRAJBTXHQE2BWF6BM4R3V4KIMM6PYDBLMQIEKOU6PZZ7WJQYSJT7UJ65R7DU
# \\ Y5ILXYEOKGBRXNCGHSNMT3YF3WFKWHXJVRP5ZW2EC5DD4Z3TSMCY \\// C25519-BASE-32 //
#  \\// 32ROGWEARHFGQGZLXI4UM2CH4Y36ICFPN6JI6M4JDVUAJ76LQCA \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
