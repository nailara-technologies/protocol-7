# >:]

# name = mpv.handler.event.property-change.height
# note = video will be reencoded even when sizes identical to reduce the bitrate

my $params = shift;

<mpv.current.video_height> = $params->{'data'};

my $current_path = <mpv.current.path>;
my $video_width  = <mpv.current.video_width>;
my $video_height = <mpv.current.video_height>;

return if not defined $video_width and not defined $video_height;    # stopped ?
return warn("current_path is undefined") if not defined $current_path;

<mpv.converting>     //= {};
<mpv.rescale_failed> //= {};

if ( <mpv.autorescale> and !-f $current_path ) {
    <[base.log]>->( 1, "[!local] skipped autorescale [$current_path]" );
} elsif ( <mpv.autorescale>
    and defined $video_width
    and defined $video_height
    and defined $current_path
    and not exists <mpv.file_map.rescaled.source>->{$current_path} ) {
    my $target_path;
    my $window_width  = <mpv.current.window_width>;
    my $window_height = <mpv.current.window_height>;
    my $box_width     = <mpv.current.box_width>;
    my $box_height    = <mpv.current.box_height>;
    my $box_size      = "${box_width}x$box_height";
    $target_path = <mpv.file_map.rescaled.target>->{$current_path}
        if defined <mpv.file_map.rescaled.target>->{$current_path};

    if ( not defined $target_path or !-f $target_path ) {

        my $target_width
            = $window_width > $video_width ? $video_width : $window_width;
        $target_width = <mpv.rescale_max_width>
            if defined <mpv.rescale_max_width>
            and $target_width > <mpv.rescale_max_width>;

        my $target_height
            = sprintf( "%.0f", $video_height / $video_width * $target_width );

        my %check_size;
        foreach my $step ( -1, 1 ) {    # test both directions (smaller, larger)
            $check_size{$step}
                = { 'width' => $target_width, 'height' => $target_height };

            while ($check_size{$step}{'height'} % 2
                or $check_size{$step}{'width'} % 16 ) {
                last
                    if $video_width == 0
                    or $check_size{$step}{'width'} == 0
                    or $check_size{$step}{'height'} == 0;

                $check_size{$step}{'width'} += $step;
                $check_size{$step}{'height'} = sprintf( "%.0f",
                    $video_height / $video_width * $check_size{$step}{'width'}
                );
            }
        }

        # pick size closest to box size
        ( $target_width, $target_height )
            = ( $check_size{-1}{'width'}, $check_size{-1}{'height'} );
        ( $target_width, $target_height )
            = ( $check_size{1}{'width'}, $check_size{1}{'height'} )
            if $target_width == 0
            or $target_height == 0
            or abs( $box_width - $check_size{1}{'width'} )
            < abs( $box_width - $check_size{-1}{'width'} );

        my $cmd_args = join( ' ',
            $current_path, "${target_width}x$target_height",
            "${box_width}x$box_height" );
        <[mpv.check_rescale_path]> if defined <mpv.rescale_path>; # LLL: cleanup
        $cmd_args .= ' ' . <mpv.rescale_path> if defined <mpv.rescale_path>;
        my $chk_hash = <[digest.md5.hex]>->($cmd_args);

        if (    not exists <mpv.converting>->{$chk_hash}
            and not exists <mpv.rescale_failed>->{$chk_hash} ) {
            <mpv.converting>->{$chk_hash} = $current_path;
            my $rmsg
                = (     $video_width == $target_width
                    and $video_height == $target_height )
                ? ' ( reducing bitrate )'
                : '';
            <[base.log]>->(
                1,
                "[autorescale]--< reencoding video >--"
                    . "[ ${video_width}x$video_height =>"
                    . " ${target_width}x$target_height ]"
                    . $rmsg
            );
            <[mpv.callback.start_reenc_msg]> if !<mpv.disable_reenc_msg>;
            <[base.proto.nailara.command.send.local]>->(
                {   'command'   => 'core.ffmpeg.rescale_video',
                    'call_args' => { 'args' => $cmd_args },
                    'reply'     => {
                        'handler' => 'mpv.handler.rescale_video_reply',
                        'params'  => {
                            'orig_path' => $current_path,
                            'chk_hash'  => $chk_hash
                        }
                    }
                }
            );
        }
    }
}
