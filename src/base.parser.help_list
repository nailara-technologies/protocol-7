# >:]

# name     = base.parser.help_list
# args     = <cmd_aref>, [section_name]
# return   = plain(formatted client list)
# descr    = format command list with descriptions (help text)

my $cmd_aref  = shift;
my $section   = shift || 'cmd';    # [cmd|cli]
my $reply_str = '';
my $max_len   = 0;
my @commands;
my %param;

map {
    if ( not exists $data{'base'}{$section}{$_} ) {
        my $cli = " $section";
        $cli = '' if $section eq 'cmd';
        <[base.log]>->(
            0, "base.parser.help_list:" . $cli . " command '$_' does not exist!"
        );
    } else {
        my $cmd_str = $_;
        if ( exists $data{'base'}{'help'}{$section}{$_}{'param'} ) {
            my $param_str = $data{'base'}{'help'}{$section}{$_}{'param'};
            $cmd_str .= ' ' . $param_str;
            $param{$_} = $param_str;
        }
        $max_len = length($cmd_str) if length($cmd_str) > $max_len;
        push( @commands, $_ );
    }
} @$cmd_aref;
$max_len += 2;

foreach my $cmd (@commands) {
    my $cmd_descr;
    my $call_cmd = $data{'base'}{$section}{$cmd};
    if ( exists $code{$call_cmd} and defined &{ $code{$call_cmd} } ) {
        if ( defined $data{'base'}{'help'}{$section}{$cmd} ) {
            $cmd_descr = $data{'base'}{'help'}{$section}{$cmd}{'descr'};
        }
        $cmd_descr = 'n/a' if not defined $cmd_descr or $cmd_descr eq '';
    } else {
        $cmd_descr = "WARNING: this command is broken!!";
    }
    $cmd .= ' ' . $param{$cmd} if exists $param{$cmd};
    my $dots = $max_len - length($cmd);
    $reply_str .= "$cmd " . '_' x $dots . " $cmd_descr\n";
}

return $reply_str;
