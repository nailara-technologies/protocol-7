# >:]

# name  = base.reload_config
# descr = reload configuration files

my $success = 1;
<base.parser.config.errors> = 0;
if ( exists <config.reload.cleanup_keys>
    and defined <config.reload.cleanup_keys> ) {
    foreach my $key ( split / +/, <config.reload.cleanup_keys> ) {
        if ( $key =~ /^[^\.][\w\.]*$/ ) {
            ( my $_key = $key ) =~ s|\.|'}{'|g;
            my $count = eval "delete \$data{'$_key'}";
            if ($@) {
                <[base.log]>->(
                    0, "cleanup_keys: error during cleanup of '$key' [$@]"
                );
            } elsif ($count) {
                <[base.log]>->( 2, ": cleaned up config key '$key'" );
            }
        } else {
            <[base.log]>->( 0, "cleanup_keys: invalid key syntax '$key'" );
        }
    }
    delete <config.reload.cleanup_keys>;
}
if ( exists <system.config.reload_order> ) {
    my @reload_order = @{<system.config.reload_order>};
    <system.config.reload_order> = [];
    foreach my $config_name (@reload_order) {
        my $already_loaded = 0;
        map { $already_loaded = 1 if "$_" eq $config_name }
            @{<system.config.reload_order>};
        next if $already_loaded;    # ( nested load_config_file )
             # resetting password hashes for auth.setup.usr.* files
        <auth.setup.usr> = {} if $config_name =~ /^auth\.setup\.usr\..+/;
        $success = 0 if !<[base.load_config_file]>->($config_name);
    }
}
$success = 0
    if !<[base.reload_values]>->( '', <system.path.rel.cur_agent_cfg> )
    or <base.parser.config.errors>;

return $success;
