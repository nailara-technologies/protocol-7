# >:]

# name       = base.parser.access_conf
# return     = 0 (no errors), 1 (syntax errors found)
# descr      = compile and store command regex masks

<[base.log]>->( 2, ': compiling command permission masks..' );

my $error = 0;

foreach my $user ( sort keys( %{ $data{'access'}{'cmd'}{'usr'} } ) ) {

    my $regex_mask = '';
    my $pos        = 0;

    if ( $user !~ /^\w[\w\d\-_]*$|^\*$/ ) {
        <[base.log]>->(
            0,
            'invalid character in user name \''
                . $user
                . '\'. access mask dropped!'
        );
        $error = 1;
    } else {
        foreach
            my $cmd ( split( /[\ \t]+/, $data{'access'}{'cmd'}{'usr'}{$user} ) )
        {

            # compile command regex mask
            if ( $cmd =~ /[^\w\-_\\\[\]\.\^\*]/ ) {
                <[base.log]>->(
                    0,
                    'invalid character in command regex mask (user \''
                        . $user
                        . '\' pos '
                        . $pos . ')'
                );
                $error = 1;
            } else {
                $cmd =~ s|([\[\]])|\\$1|g;
                $cmd =~ s,\.,\\\.,g;
                $cmd =~ s,\^,\\^,g;
                $cmd =~ s,^\.\*\*,[^\.\\^].%,;
                $cmd =~ s,\*\*,.+,g;
                $cmd =~ s,^\.\*,[^\\\.\\^][^\\.]%,;
                $cmd =~ s,\*,[^\\.]+,g;
                $cmd =~ s,\%,*,g;
                $cmd = '^' . $cmd . '$';

                no warnings;
                if ( eval("qr/$cmd/") ) { $regex_mask .= $cmd . '|' }
                else {
                    <[base.log]>->(
                        0,
                        'syntax error in command regex mask (user \''
                            . $user
                            . '\' pos '
                            . $pos . ')'
                    );
                    $error = 1;
                }
                use warnings;
                $pos++;
            }

        }

        chop $regex_mask;

        # print "\nREGEX[$user]: $regex_mask\n\n";

        no warnings;
        if ( not $data{'access'}{'cmd'}{'regex'}{'usr'}{$user}
            = eval("qr/$regex_mask/") ) {
            <[base.log]>->(
                0,
                'error in command regex mask (user \''
                    . $user
                    . '\'). access mask dropped!'
            );
            $error = 1;
        }
        use warnings;
    }
}

return $error;

# ______________________________________________________________________________
#\\6NGLL7NFAV3GULIVMMKJ7GZUBUMC62FME2UG3JMS2GPCV6IFIJJ7D6XTQ3TFF6UCOU6HI2IZJYQOO
# \\ GEVGZV5NBJKU77DDXQ6QLNIABZL5T2E5K2KS4AAYUMZCQT77MQ47 \\// C25519-BASE-32 //
#  \\// BQWUO6PCSUVKJINXZT5CX2C3Q5GNQS34H5IWIOZQU3TKMRQPOBI \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
