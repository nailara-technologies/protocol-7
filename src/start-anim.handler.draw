# >:]

# name = start-anim.handler.draw

my $window = shift;

if ( <start-anim.composited> and !$window->is_composited ) {  ## comp changed ##
    $window->set_visual( $window->get_screen->get_system_visual() );
    <start-anim.composited> = 0;
} elsif ( <start-anim.comp_at_startup>
    and !<start-anim.composited>
    and $window->is_composited ) {
    $window->set_visual( $window->get_screen->get_rgba_visual() );
    <start-anim.composited> = 1;
}

<start-anim.fade_mode> //= 'in';

if ( <start-anim.fade_mode> eq 'in'
    and ( !<start-anim.composited> or !<start-anim.do_fade_in> ) ) {
    $window->move( <x11.coordinates>->{'left'}, <x11.coordinates>->{'top'} );
    $window->set_size_request( <start-anim.width>, <start-anim.height> );
    my $min_delay = sprintf( "%.4f",
        <start-anim.min_startup_delay>
            - ( <[base.time]>->(4) - <start-anim.min_startup_time> ) );
    $min_delay = 0 if $min_delay < 0;
    <[event.add_timer]>->(
        {   'after'   => $min_delay,
            'handler' => 'start-anim.callback.report_online'
        }
    );
    <start-anim.fade_mode> = 'idle';
    return;
} elsif ( !<start-anim.composited> and <start-anim.fade_mode> eq 'out' ) {
    $window->hide;
    <start-anim.fade_mode> = 'quit';
}

if ( <start-anim.fade_mode> eq 'out' ) {    ## fade out ##

    <start-anim.fade_out.start_time> //= <[base.time]>->(4);
    my $delta_t = <[base.time]>->(4) - <start-anim.fade_out.start_time>;

    my $opacity = sprintf( "%.4f", 1 - $delta_t );
    $opacity = 0 if $opacity < 0;

    if ( $opacity > 0 ) {
        $window->set_opacity($opacity);
    } else {
        $window->hide;
        <start-anim.fade_mode> = 'quit';
    }

} elsif ( <start-anim.fade_mode> eq 'in' ) {    ## fade in ##

    <start-anim.fade_in.start_time> //= <[base.time]>->(6);
    my $delta_t = <[base.time]>->(6) - <start-anim.fade_in.start_time>;

    if ( delete <start-anim.init_mode> ) {
        $window->move( <x11.coordinates>->{'left'},
            <x11.coordinates>->{'top'} );
        $window->set_size_request( <start-anim.width>, <start-anim.height> );
    }

    my $opacity = sprintf( "%.6f", $delta_t / 0.8 );
    $opacity = 1 if $opacity > 1;

    $window->set_opacity($opacity);

    if ( $opacity >= 1 ) {
        delete <start-anim.fade_in.start_time>;
        my $min_delay = sprintf( "%.4f",
            <start-anim.min_startup_delay>
                - ( <[base.time]>->(4) - <start-anim.min_startup_time> ) );
        $min_delay = 0 if $min_delay < 0;
        <[event.add_timer]>->(
            {   'after'   => $min_delay,
                'handler' => 'start-anim.callback.report_online'
            }
        );
        <start-anim.fade_mode> = 'idle';
    }

    $window->queue_draw();
} elsif ( <start-anim.fade_mode> eq 'quit' ) {
    Gtk3->main_quit;
    exit(0);
}

# ______________________________________________________________________________
#\\4KCFT2QBUG2FVKCYSARSXV4XYROVNBKPZDFIKCIZGSEAMMHMHQD5KWZILYAC2NHO2EZISCVVRN7TM
# \\ 42VVKE7JTCHMRLZUV5LYLD5OGTCAU4SNYGLXZV3RPRR2XCU7FZBJ \\// C25519-BASE-32 //
#  \\// LOFGFJ2QSAAZK5ENHXPGSGUOQUZM23E6LPUNTJYIQNVOHZ7LMCI \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
