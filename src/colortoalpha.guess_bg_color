# >:]

# name = colortoalpha.guess_bg_color

my $image = shift;
die "expected image object" if not defined $image;

$image->Set( 'colorspace', 'RGB' );
my $img_depth = $image->Get('depth');

my ( $img_w, $img_h ) = $image->get( 'width', 'height' );

my %border_colors;

my $frame_width = 3; # scan 3 pixel wide strip and return highest occurred color

for my $y ( 0 .. $img_h - 1 ) {
    for my $x ( 0 .. $img_w - 1 ) {
        next
            if $x > 0 + $frame_width
            and $x < ( $img_w - 1 - $frame_width )
            and $y > 0 + $frame_width
            and $y < ( $img_h - 1 - $frame_width );

        my @RGBA    # [0..255]
            = map { $ARG /= 257 }
            split( ',', $image->Get("pixelcolor[$x,$y]") );

        my @hex_cols
            = $img_depth > 8
            ? map { sprintf( "%x", sprintf( "%.0f", $ARG * 257 ) ) } @RGBA
            : map { unpack( "H*", chr( sprintf( "%.0f", $ARG ) ) ) } @RGBA;

        $border_colors{ join( '', @hex_cols[ 0 .. 2 ] ) }++;
    }
}

my %col_stats = reverse %border_colors;

my ($top_count) = ( reverse sort keys %col_stats );
my $top_color = $col_stats{$top_count};

return '#' . uc($top_color);

# ______________________________________________________________________________
#\\SRJGBC4FNWNHVFCDCYBAJWPKNFPRZ7KJZ5TJW72NWG3OW6ODBZWCTCN77NWSDGPVMQDTFZ3CCOKIC
# \\ O23ZEOPAJA2LMFMAPYAMWAZWJK5CEDNNOCULHZS66ZFRF7F4YV2B \\// C25519-BASE-32 //
#  \\// MD3BP2D25JTTG6TY4OHM4FMYWU6ZL4I3CF2SHZTXHW3JNQ6G4DI \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
