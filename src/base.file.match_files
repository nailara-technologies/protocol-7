# >:]

# name = base.file.match_files
# args = [result_array_ref,] <search_path>, <file_name_pattern(s)>

my $result_aref;
$result_aref = shift(@_) if ref( $_[0] ) eq 'ARRAY';    # (append mode)
my ( $search_path, @wildcard_filenames ) = @_;

# supported wildcard patterns are: '*' ([^\.]*) and '**' (.*)

if ( not defined $search_path or !length($search_path) ) {
    <[base.log]>->( 0, "file.match_files: missing expected path argument!" );
    return undef;
}
$search_path = abs_path($search_path);
if ( !-d $search_path ) {
    <[base.log]>->( 0, "file.match_files: no such directory '$search_path'!" );
    return undef;
} elsif ( !@wildcard_filenames ) {
    <[base.log]>->( 0, "file.match_files: no filenames/patterns provided!" );
    return undef;
}

my $results = [];
$results = $result_aref if defined $result_aref;    # (append mode)
my @file_table = map {
    my $key = $_ // '';
    $key =~ s/\./\\./g;
    $key =~ s/(\*\*|\*)/$1 eq '*' ? '[^\.]*' : '.*'/ge;
    qr/$key$/
} @wildcard_filenames;

foreach my $file ( @{ <[file.all_files]>->($search_path) } ) {
    foreach my $pattern (@file_table) {
        if ( $file =~ $pattern ) {
            push( @{$results}, $file );
            next;
        }
    }
}
return scalar @{$results} if defined $result_aref;    # (append mode)
return @{$results};

# ______________________________________________________________________________
#\\O7L5KPPVBXWPYUNRO3NSNTNQ7DIBJXEE33OBBDMWYQYGEFNWZGH7N6EF66HNQ6DZLFPC2PANLUYO4
# \\ PL6XWA2ZQQRCDONDFK4LILXRE7BH66VXLEJIRRONZ7K5Q5JUZ4Y4 \\// C25519-BASE-32 //
#  \\// LT4SA4S2LLEQPTV5IMK4G4CHF5IXJHWU6G5F7QFK2DQC6MCB4DY \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
