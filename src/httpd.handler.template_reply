# >:]

# name = httpd.handler.template_reply

my $reply    = shift;
my $sid      = $reply->{'params'}->{'client_sid'};
my $session  = $data{'session'}{$sid};
my $args_str = $reply->{'call_args'}->{'args'};

if ( $reply->{'cmd'} eq 'NAK' ) {

    if ( $args_str =~ /^\d\d\d$/ ) {
        $session->{'buffer'}->{'output'}
            .= <[httpd.send_error_page]>->( $sid, $args_str )
            if $args_str > 0;    # 000 == drop connection, no reply
        delete $session->{'content'};
        $session->{'flush_shutdown'} = 1;
        return;

    } elsif ( defined $session->{'content'}->{'type'}
        and $session->{'content'}->{'type'} =~ /html/ ) {
        $args_str = '<b style="color:#A01">' . $args_str . '</b>';
    }
}

my $content_part = $reply->{'params'}->{'part'};

if ( $reply->{'cmd'} eq 'NAK' ) {
    <[httpd.send_error_page]>->( $sid, 500 );
    delete $session->{'content'};
    $session->{'flush_shutdown'} = 1;
    return;

} elsif ( $reply->{'cmd'} eq 'DATA' ) {
    $content_part->{'data'} = \$reply->{'data'};
} else {
    $content_part->{'data'} = \$args_str;
}

my $done_cmd = delete $content_part->{'command'};
delete $content_part->{'params'};

my $cmd_count = 0;
map { $cmd_count++ if defined $ARG->{'command'} }
    @{ $session->{'content'}->{'sequence'} };

if ($cmd_count) {
    <[base.log]>->( 1, "['$done_cmd'] segment complete, $cmd_count to go..," );
} else {

    my $content_length = 0;
    map { $content_length += length( ${ $ARG->{'data'} } ) }
        @{ $session->{'content'}->{'sequence'} };

    my $s = $cmd_count > 1 ? 's' : '';
    <[base.log]>->(
        1, "content segments complete, returning page [${content_length} bytes]"
    );

    $session->{'buffer'}->{'output'} .= <[httpd.new_header]>->(
        200,
        {   'Content-Length' => $content_length,
            'Content-Type'   => $session->{'content'}->{'type'},
            'Last-Modified'  => $session->{'content'}->{'date'},
            'Connection'     => $session->{'http'}->{'close'}
            ? 'close'
            : 'keep-alive'
        }
        )
        . join( '',
        map { ${ $ARG->{'data'} } } @{ $session->{'content'}->{'sequence'} } );
    delete $session->{'content'};
    $session->{'flush_shutdown'} = 1;
}

# ______________________________________________________________________________
#\\Q4AKOLI3HDPXFJZ6MXXDRNBP6ORMLVFJXZYHO2A4YSMSOTZJFGE5MF4Z7BJK7D7XSUFO5NFVD2WOE
# \\ ITN4PWIFK7QC5DKE45NA7P52JANXDPDBTP4JD6Z6FFA6PDTWEGKB \\// C25519-BASE-32 //
#  \\// QLLK7WZ34VWUGRRWPNVHFE5YIV4OXBUYWVL4QAGENEX3MRQV4AI \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
