# >:]

# name = httpd.handler.template_reply

my $reply   = shift;
my $sid     = $reply->{'params'}->{'client_sid'};
my $session = $data{'session'}{$sid};

if ( $reply->{'cmd'} eq 'NACK' ) {
    $reply->{'call_args'}->{'args'}
        = '<b style="color:#A01">' . $reply->{'call_args'}->{'args'} . '</b>'
        if $session->{'content'}->{'type'} =~ /html/;
}    # else {

# print Dumper $reply;

my $content_part = $reply->{'params'}->{'part'};

if ( $reply->{'cmd'} eq 'RAW' ) {
    $content_part->{'data'} = \$reply->{'data'};
} else {
    $content_part->{'data'} = \$reply->{'call_args'}->{'args'};
}

my $done_cmd = delete $content_part->{'command'};
delete $content_part->{'params'};

my $cmd_count = 0;
map { $cmd_count++ if defined $_->{'command'} }
    @{ $session->{'content'}->{'sequence'} };

if ($cmd_count) {
    <[base.log]>->( 1, "['$done_cmd'] segment complete, $cmd_count to go..." );
} else {

    my $content_length = 0;
    map { $content_length += length( ${ $_->{'data'} } ) }
        @{ $session->{'content'}->{'sequence'} };

    my $s = $cmd_count > 1 ? 's' : '';
    <[base.log]>->(
        1, "content segments complete, returning page [${content_length} bytes]"
    );

    $session->{'buffer'}->{'output'} .= <[httpd.new_header]>->(
        200,
        {   'Content-Length' => $content_length,
            'Content-Type'   => $session->{'content'}->{'type'},
            'Last-Modified'  => $session->{'content'}->{'date'},
            'Connection'     => $session->{'http'}->{'close'}
            ? 'close'
            : 'keep-alive'
        }
        )
        . join( '',
        map { ${ $_->{'data'} } } @{ $session->{'content'}->{'sequence'} } );

    $session->{'flush_shutdown'} = 1;
}

