# >:]

# name = base.file.all_dirs

my ( $path, $result_aref ) = @_;
die "expected'path' parameter!" if not defined $path;
my $old_path;
my $recursive         = 0;
my $recursion_entered = 0;
if ( not defined $result_aref ) {
    $result_aref = [];
} elsif ( $result_aref eq 'recursive' ) {
    $result_aref = [];
    $recursive   = 1;
} else {
    $recursion_entered = 1;
}

if ( -d $path ) {
    my $dir_fh;
    $path =~ s/\/+$//;
    if ( !opendir( $dir_fh, $path ) ) {
        <[base.log]>->( 0, "can not open directory '$path' [$!]" );
        return undef;
    }
    foreach my $entry ( sort( readdir($dir_fh) ) ) {
        next if $entry =~ /^\.{1,2}$/;
        push( @{$result_aref}, abs_path("$path/$entry") ) if -d "$path/$entry";
        <[file.all_dirs]>->( abs_path("$path/$entry"), $result_aref )
            if -d "$path/$entry" and $recursive;
    }
}

return $result_aref if !$recursion_entered;

# ______________________________________________________________________________
#\\4H2ZTOU4CYTSLHODR76FDH2UTO23RVQ53K2G6YVWJTPHBZBCWGGCIJJYPFLIZVHPKILKIAAPZWARC
# \\ ELKESE46B5OAQR6KDOR5NXEU67I23QUMBL2YT667MCAI4AK6LLCW \\// C25519-BASE-32 //
#  \\// QLDFE4SGZZCVAG7XCDGLD6S2YLDUAUKYBEJZ6IBIF6LELXU2MBI \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
