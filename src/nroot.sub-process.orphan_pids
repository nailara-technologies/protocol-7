# >:]

# name  = nroot.sub-process.orphan_pids
# descr = returns PIDs of orphaned children of deceased agents
# todo  = sort pids by process start time

my $proc_table = <nroot.process.pt>
    //= new Proc::ProcessTable( 'enable_ttys' => 0 );

my %own_children;
foreach my $i_id ( keys %{<nroot.agent.instance>} ) {
    next if not defined <nroot.agent.instance>->{$i_id}->{'process'}->{'id'};
    my $pid = <nroot.agent.instance>->{$i_id}->{'process'}->{'id'};
    $own_children{$pid} //= <nroot.agent.instance>->{$i_id}->{'agent_name'};
}

my %orphans;
map {
    $orphans{ $ARG->pid } = $ARG->exec // $ARG->cmndline // ''
        if $ARG->pid > 2
    }
    grep {
    $ARG->ppid == 1               # parent is 'init'
        and $ARG->pgrp == $GID    # process group was 'nroot' agent
        and $ARG->pid != $PID     # and is not this process ['nroot']
        and not exists $own_children{ $ARG->pid }
        and ( not defined $ARG->exec
        or $ARG->exec ne
        '/usr/bin/dbus-launch' )    # <-- whitelist :. config [LLL]
    } @{ $proc_table->table };

map {
    my $name_str = '';
    if ( length( $orphans{$ARG} ) ) {
        $orphans{$ARG} =~ s|^.+/||;
        $name_str = " '$orphans{$ARG}'";
    }
    <[base.log]>->( 1, ": found orphan process [$ARG]" . $name_str )
    }
    sort keys %orphans;

return sort keys %orphans;

# ______________________________________________________________________________
#\\GOSZJL6S7MVAZPRBR4GMZKQ55435XXSGWSWKC3OE7M2WHSNOBPKRBLDE5H7TDXYGXIME7VQL2VKWC
# \\ 7TZF3LUHJYJ6ZXTKPGQB6MVHCRX6PCIGU4KUXQYGPP56LKMDLH7U \\// C25519-BASE-32 //
#  \\// PJ4B3YVB75ZXDZBMAFCIPHKCDHFC3FDMXAYERFFJEZAORPJI4CA \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
