# >:]

# name  = keys.console.create
# param = [name]
# descr = create either a named or 'base' user key

my $key_name = $$call{'args'} // 'base';

<[base.log]>->( 0, " << ! >> '$key_name' is not a valid key name << ! >>" )
    and exit(1)
    if $key_name !~ <keys.regex.key_name>;

print "\n::\n";

my $key_vars = <[crypt.C25519.key_vars]>->($key_name);
my $key_dir  = $key_vars->{'key_dir'};
my $key_usr  = $key_vars->{'usr_name'};
my $u_str    = $key_name =~ m|^$key_usr| ? ' files' : " for '$key_usr'";
my $success  = 0;
print " : << generating '$key_name' key$u_str >>\n";

$success = 1
    if <[crypt.C25519.gen_keys]>->($key_name)
    and <[crypt.C25519.write_keys]>->($key_name);

printf( " :\n :: [ created key '%s' in '%s' ]\n\n", $key_name, $key_dir )
    and return 1
    if $success;

print " :\n :: [ no keys created ]\n\n";
exit(1);

# ______________________________________________________________________________
#\\FVDILC3HOFSFMCWBGWHGNQY32IPX63KLKLZXAKVQDSRVGRRUELSULNXQOYDKO5CB63TEMVFHIE3BQ
# \\ GBGGF4747DJME2JT2OUJEHNJPFYGMJAZLJIFIAKBA7VB3HRMGIXG \\// C25519-BASE-32 //
#  \\// A4QQ5QHTIBWVHYY434LKL7NVFWTRB56X64TL4BPWSOAUMP5DIBY \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
