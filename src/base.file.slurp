# >:]

# name  = base.file.slurp
# args  = <filename>[, <target_reference> (SCALAR|ARRAY)][, <encoding>]
# descr = loads a file into memory and return a reference to it

my $filename   = abs_path(shift);
my $target_ref = shift;              # optional scalar or array reference
my @encoding   = ( shift // '' );    # optional encoding type [ i.e. ':raw' ]
if ( defined $target_ref and !length( ref($target_ref) ) ) {
    @encoding = ($target_ref);
    undef $target_ref;
}

if ( not defined $target_ref ) {
    my $buffer = '';
    $target_ref = \$buffer;
}
if ( !-f $filename ) {
    <[base.log]>->( 0, "file.slurp: file '$filename' not found." );
    return undef;
}
my $file_fh;
if ( !open( $file_fh, join( ' ', '<', @encoding ), $filename ) ) {
    <[base.log]>->(
        0, "file.slurp: unable to open '$filename' [ \l$OS_ERROR ]"
    );
    return undef;
}
my $ref_type = ref($target_ref);
if ( $ref_type eq 'SCALAR' ) {
    local $RS = undef;
    $$target_ref = <$file_fh>;

} elsif ( $ref_type eq 'ARRAY' ) {

    push( @$target_ref, <$file_fh> );
    chomp(@$target_ref);

} else {
    warn "file.slurp: unsupported reference type '$ref_type'. <{C1}>";
    return undef;
}

return $target_ref;

# ______________________________________________________________________________
#\\GP5CHBGFCM5MO3BEPXH3PMUVQDLLRWMB3KIO7GEWQWLNJTC7DTWDWENBOHBW3ZGPLD2NEFGXJQTWW
# \\ YKMLXNZDSTK2I4RKYUSXZ4V7VSGLEUVVONLI52L2PKFAXP6UA636 \\// C25519-BASE-32 //
#  \\// CXTYQMJHEKZS5NSDANXA3H6FW3T2ZEVMQS3ZSC6GP7LVKULKKAA \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
