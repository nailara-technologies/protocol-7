# >:]

# name  = base.file.temp

my $tmpl = shift // 'X' x 13;
die "invalid template syntax [ no paths ]" if $tmpl =~ m|/|; # allow paths later

my $first_dir;
my $agent_name = <system.agent.name>;
my @check_dirs
    = qw| /var/run/protocol-7 /var/cache/protocol-7 /var/tmp/protocol-7 |;

<[base.perlmod.load]>->( 'File::Path', qw| make_path | )
    if not exists &{'make_path'};

foreach my $chk_dir (@check_dirs) {
    my $subdir_path = "$chk_dir/$agent_name";
    <[base.log]>->( 2, ":. tmp-dir-chck :. $subdir_path" );
    if ( -d $subdir_path and -w $subdir_path
        or make_path( $subdir_path, { 'mode' => 0750 } ) ) {
        $first_dir = $subdir_path;
        last;
    }
}
die "no success creating temp dir [ $OS_ERROR ]" if not defined $first_dir;

my $retries = 47;
my $tmp_file_path;
while ( not defined $tmp_file_path or -e $tmp_file_path and $retries-- ) {
    $retries = 0 if $tmpl !~ m|X|;    # <-- no rnd char range in template
    ( my $fname = $tmpl )
        =~ s|(X+)|uc( <[base.prng.chars-anum]>->( length $1 ) )|ge;
    $tmp_file_path = catfile( $first_dir, $fname );
}

die "can not find suitable temp file name [ exists ]" if -e $tmp_file_path;

<[base.log]>->( 1, " : tmp-file-path : $tmp_file_path" );

return $tmp_file_path if !wantarray; # <-- scalar context does not open the file

<[base.log]>->( 1, " :. opening file : $tmp_file_path .," );

open( my $tmp_fh, '>', $tmp_file_path ) or die "> $tmp_file_path : $OS_ERROR";

# LLL: implement optional file locking and unlink mechanism here, see File::Temp

return ( $tmp_fh, $tmp_file_path );

#.............................................................................
#SKK23HMYW3LSQ4WHMFAAKRN44PERXGVU6BSJIWTN5VO6ECSA6NSBVAYWBOFMZODUNF6TNUC5SPVDI
#::: TXXQRZBMSCWZCRHQTKJBOQJVQIWXWZVF7J2C73C6CSTWUJU6MHC :::: NAILARA AMOS :::
# :: JF7YO5FDHL2DORLQ7DQWI5XLUGIPJ5IRWHDSMYDTO42PDGU7HUCQ :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
