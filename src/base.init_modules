# >:]

# name  = base.init_modules
# descr = executes 'pre_init', 'init_code' and 'post_init' routines
# todo  = track moved namespaces for agument list as well

my @module_names = map { split m| +|, $_ } @_;

my %skip_list;
my $success = 1;
delete <base.modules.moved_to>;
<base.init_modules.sub_list> = [];
foreach my $init_mode ( 'pre_init', 'init_code', 'post_init' ) {
    if (@module_names) {
        @{<base.init_modules.sub_list>} = ();
        foreach my $name_pattern (@module_names) {
            push(
                @{<base.init_modules.sub_list>},
                sort     { length($a) <=> length($b) }
                    grep {m|^\Q$name_pattern\E(\..+)?$|} sort( keys(%code) )
            );
        }
    } else {
        @{<base.init_modules.sub_list>} = sort { length($a) <=> length($b) }
            grep {m|^base\.|} sort( keys(%code) );
        push(
            @{<base.init_modules.sub_list>},
            sort     { length($a) <=> length($b) }
                grep { !m|^base\.| } sort( keys(%code) )
        );
    }
    foreach my $sub_name ( @{<base.init_modules.sub_list>} ) {
        next if not defined $sub_name or exists $skip_list{$sub_name};
        if ( $sub_name =~ m|^(.+)\.$init_mode$| ) {
            my $module_name = $1;
            my $real_m_name = $module_name;
            $real_m_name = <base.modules.internal_name>->{$module_name}
                if exists <base.modules.internal_name>
                and exists <base.modules.internal_name>->{$module_name};
            ( my $init_txt = $init_mode ) =~ s|_|-|g;
            $init_txt =~ s|-code||;
            <[base.log]>->( 2, "running '$module_name' $init_txt code.," );
            my $reinit = 0;

            if (not exists
                <base.modules.initialized>->{$real_m_name}->{$init_mode} ) {
                <base.modules.initialized>->{$real_m_name}->{$init_mode} = 0;
            } else {
                $reinit = 1;
            }
            if ( exists $code{$sub_name} ) {
                my $moved_already = 0;
                $moved_already = 1
                    if exists <base.modules.moved_to>
                    and exists <base.modules.moved_to>->{$module_name};

                # LLL: later also include module version[s] in argument list..,
                my $return_code = $code{$sub_name}->( $reinit, $real_m_name );

                if ( not defined $return_code or $return_code ne '0' ) {
                    $success = 0;
                    <[base.log]>->(
                        0,
                        ": module '$module_name' init not successful"
                            . " ( $init_mode != 0 )"
                    );
                } else {
                    <base.modules.initialized>->{$real_m_name}->{$init_mode}++;
                    if (    !$moved_already
                        and exists <base.modules.moved_to>
                        and exists <base.modules.moved_to>->{$module_name} ) {
                        my $new_module
                            = <base.modules.moved_to>->{$module_name};
                        ( my $new_sub_name = $sub_name )
                            =~ s|^$module_name|$new_module|;
                        $skip_list{$new_sub_name} = 1;
                    }
                }
            } else {
                $success = 0;
                <[base.log]>->(
                    0,
                    ": module '$module_name' init not successful"
                        . " [ $sub_name vanished or broken ]"
                );
            }
        }
    }
}
undef <base.init_modules>;
return $success;

# ______________________________________________________________________________
#\\VVNSYZCVRXOBUL3E5EKCG42AEVQWNX2ARY7DNCZZXWBTFFJFJKD6G7TVI2WOUZTEVYYOXHVXHQSJC
# \\ 3RMQ6FSM3FY2SYH2VINJ2B3SQZN3SNE25LV2AS66E4MP6VWGN4YV \\// C25519-BASE-32 //
#  \\// TDCHCZJT2ZVVPSIMSAHB7LNXGUUILILWZMBPPPWLCQSVSHEGADY \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
