# >:]

# name = universal.switch_child

my $agent_name = shift;

<universal.cfg.fade_on_switch>     //= 0;
<universal.cfg.fade_step_interval> //= 0.01;

<universal.sequence.startup> //= 1;
<universal.sequence.position>++;
<universal.sequence.position> = 0
    if <universal.sequence.position>
    >= scalar @{<universal.sequence.switch_order>};

my $window_id = <universal.child>->{$agent_name}->{'window_id'};

if ( $agent_name ne 'mpv' and exists <universal.timer.mpv_idle_timer> ) {
    <universal.timer.mpv_idle_timer>->cancel;
    delete <universal.timer.mpv_idle_timer>;
}

<universal.timer.switch_timeout> = <[event.add_timer]>->(
    {   'after'   => <universal.switch_timeout>,
        'handler' => 'universal.handler.switch_timeout',
        'data'    => { 'agent' => $agent_name }
    }
);

if ( not defined $window_id ) {
    <[base.log]>->(
        0, "[!] window_id not known, can't switch to $agent_name-child!"
    );
    return;
}

<[base.log]>->( 2, "switching to '$agent_name'-child.." );

<[base.log]>->( 2, ": unhiding '$agent_name' ($window_id)" );

if (    <universal.cfg.fade_on_switch>
    and !<universal.sequence.startup>
    and $agent_name ne 'browser' ) {

    <universal.timer.switch>->{$window_id}->{'fade'}->cancel
        if defined <universal.timer.switch>->{$window_id}->{'fade'}
        and <universal.timer.switch>->{$window_id}->{'fade'}->is_active;

    <[base.proto.nailara.command.send.local]>->(
        {   'command'   => "core.xserver.set_opacity",
            'call_args' => { 'args' => join( ' ', $window_id, 0 ) }
        }
    );

    <universal.timer.switch>->{$window_id}->{'fade'} = <[event.add_timer]>->(
        {   'after'    => <universal.cfg.fade_step_interval>,
            'interval' => <universal.cfg.fade_step_interval>,
            'handler'  => 'universal.handler.switch_fade',
            'data' => { 'agent_name' => $agent_name, 'window_id' => $window_id }
        }
    );
}

<[base.sleep]>->( 2.1 + rand(1.2) ) if <universal.sequence.startup>;

<[base.sleep]>->(0.37);

<[base.proto.nailara.command.send.local]>->(
    {   'command'   => "core.xserver.unhide_window",
        'call_args' => { 'args' => $window_id }
    }
);

<[universal.lower_except]>->($agent_name) if !<universal.sequence.startup>;

if (<universal.loadsplash_running>) {
    <[base.sleep]>->(0.777);
    <[universal.stop_loadsplash]>;
}

<[base.sleep]>->(0.17);

<universal.child>->{$agent_name}->{'visible'} = 1;

<[universal.hide_except]>->($agent_name)
    if <universal.sequence.startup>
    or ( !<universal.cfg.fade_on_switch>
    and $agent_name ne 'browser' );

<[base.proto.nailara.command.send.local]>
    ->( { 'command' => 'browser.clear_views' } )
    if !<universal.sequence.startup>
    and !<universal.cfg.fade_on_switch>
    and $agent_name ne 'browser';

<universal.sequence.startup> = 0;

<[base.proto.nailara.command.send.local]>->(
    {   'command' => "$agent_name.resume",
        'reply'   => {
            'handler' => 'universal.handler.resume_reply',
            'params'  => { 'agent' => $agent_name }
        }
    }
);

if ( $agent_name eq 'mpv' ) {    # check if mpv actually resumed playing
    <universal.timer.mpv_idle_timer> = <[event.add_timer]>->(
        {   'after'   => 0.42,
            'handler' => 'universal.callback.mpv_idle_check'
        }
    );

}

# ______________________________________________________________________________
#\\26ZDMDGIDBTHMAPX4TQH5OUN4CZT5CEY2CHXHPOVA2XZRFXNPZ7VRQS6S4BEEZD5ARJLNGNEDFERS
# \\ CCYZONOOENE3QTCCTENXMV5ATPDO72G3D5WIU7WCVMODUVZKQVR5 \\// C25519-BASE-32 //
#  \\// WTVS34RYZ3E6B62MSNRMVLPUMIJFL22YQL5V57SNOMY36574MAQ \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
