# >:]

# name = crypt.C25519.sign_data

my $data_ref = shift // \'';

my $key_vars = <[crypt.C25519.key_vars]>->(shift);   # <-- <key_name> [optional]
my $key_name = $key_vars->{'key_name'};

die "expected scalar reference to payload data" if ref($data_ref) ne 'SCALAR';
die "a C25519 key with name '$key_name' does not exist [cannot sign without]"
    if not exists $KEYS{'C25519'}{$key_name}
    or ref( $KEYS{'C25519'}{$key_name} ) ne 'HASH'
    or ( keys( %{ $KEYS{'C25519'}{$key_name} } ) < 2
    and exists $KEYS{'C25519'}{$key_name}{'root'} );

die "no C25519 private key loaded for key name '$key_name'"
    if not defined $KEYS{'C25519'}{$key_name}{'secret'};

return Crypt::Ed25519::sign(
    ${$data_ref},
    $KEYS{'C25519'}{$key_name}{'public'},
    $KEYS{'C25519'}{$key_name}{'secret'}
);

# ______________________________________________________________________________
#\\OB527XR2AZJXGNVC5L7JDKHLJIXWVC6ZQZVVJCRVT4TPCCRMHCGNPBQH7QGF3OTUVF4UCHEGNJUIC
# \\ GISCVBX46G2MLLBV3OUJT5NNAW5ZGRB3A4Q45Y3J56ZYVVAMQ4TT \\// C25519-BASE-32 //
#  \\// 4AUFJ4M6GUFIATZMXAGHJUOY5AT7SXCQ4UIG3GGQTMXI5ICO2AY \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
