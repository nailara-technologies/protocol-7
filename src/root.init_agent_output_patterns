# >:]

# name = root.init_agent_output_patterns

if ( not defined <root.pattern_config>
    or ref(<root.pattern_config>) ne 'ARRAY' ) {
    <[base.log]>->( 1, "no agent output patterns to initialize, skipping.." );
    return;
}

my $agent_pattern_data = <root.pattern_config>;

foreach my $p_ref (@$agent_pattern_data) {
    foreach my $pattern ( keys %$p_ref ) {
        my $p_key = $pattern;
        if ( $pattern =~ s/^([!\w\d_\-, \t\*]+):\/([^\/]+)\/(i?)/$2/g ) {
            my ( $agent_string, $pattern_string, $i ) = ( $1, $2, $3 || '' );
            $agent_string =~ s/[ \t]+//g;
            foreach my $agent_match ( split( /,/, $agent_string ) ) {
                my $pattern_code_aref = $p_ref->{$p_key};
                my $pattern_re
                    = length($i)
                    ? qr/$pattern_string/i
                    : qr/$pattern_string/;
                my $sub_code
                    = 'sub { my $instance_id = shift;'
                    . ' my $agent_name = shift;'
                    . ' my @matches = @_; '
                    . join( '; ', <[base.parser.config]>->($pattern_code_aref) )
                    . ' }';
                $sub_code =~ s/<instance_id>/\$instance_id/g;
                $sub_code =~ s/<agent_name>/\$agent_name/g;
                $sub_code =~ s/<match_([1-9])>/\$matches[$1-1]/g;
                <root.patterns.agent_output>->{$agent_string}->{$pattern_re}
                    = eval $sub_code;
            }
        } else {
            <[base.log]>->(
                0, "<!> syntax error in agent output pattern <!> ['$pattern']"
            );
        }
    }
}
