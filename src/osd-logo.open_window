# >:]

# name = osd-logo.open_window

use Gtk3;
use Time::HiRes qw(sleep time);

my $logo_path = <osd-logo.logo_path>;

if ( !-f $logo_path ) {
    <[base.log]>->( 0, "logo file '$logo_path' not found!" );
    exit(2);
}

<[base.log]>->( 2, "going to display '$logo_path'..." );

$ENV{'DISPLAY'} = <x11.display>;
Gtk3->init;

my $window = Gtk3::Window->new('popup');

<osd-logo.obj.window> = $window;

$window->signal_connect( delete_event => sub { Gtk3->main_quit } );
my $use_transparency = $window->is_composited ? 1 : 0;
$window->set_opacity(0) if $use_transparency;
$window->set_position('center');
$window->set_border_width(0);
$window->set_decorated(0);
$window->set_keep_above(1);
$window->set_app_paintable(1);
my $screen = $window->get_screen();

if ($use_transparency) {
    my $rgba = $screen->get_rgba_visual();
    $window->set_visual($rgba);
} else {
    my $css_prov = Gtk3::CssProvider->new();
    my $screen   = Gtk3::Gdk::Screen::get_default();
    $css_prov->load_from_data('*{background-color:#ffffff}');
    Gtk3::StyleContext::add_provider_for_screen( $screen, $css_prov, -1 );
}

my $scr_w = $screen->get_width();
my $scr_h = $screen->get_height();

if ( !$scr_w or !$scr_h ) {    # <- on xephyr [NEW GTK3 BUG]
    my $root_window = $screen->get_root_window();
    $scr_w = $root_window->get_width();
    $scr_h = $root_window->get_height();
}

die "failed to determine screen size" if !$scr_w or !$scr_h;

##
<osd-logo.logo_size> = delete <osd-logo.cfg.height>
    if defined <osd-logo.cfg.height>;

my $position
    = defined <osd-logo.cfg.position>
    ? delete <osd-logo.cfg.position>
    : 'top-right';

##

my $height_percent = <osd-logo.logo_size>;

my $pbuf  = Gtk3::Gdk::Pixbuf->new_from_file($logo_path);
my $img_w = $pbuf->get_width();
my $img_h = $pbuf->get_height();

die "failed to determine image size" if !$img_w or !$img_h;

my $scale_x = sprintf( "%.0f",
    $img_w * ( ( $scr_h / $img_h ) * ( $height_percent / 100 ) ) );
my $scale_y = sprintf( "%.0f", $scr_h * ( $height_percent / 100 ) );

my $pos_y = 0;                    # top-right
my $pos_x = $scr_w - $scale_x;    # top-right
$pos_x = 0                 if $position =~ /-left$/;
$pos_y = $scr_h - $scale_y if $position =~ /^bottom-/;
$pos_y = 0                 if $position =~ /^top-/;

if ( defined <osd-logo.cfg>->{'offset.x'} ) {
    my $x_offset_percent = delete <osd-logo.cfg>->{'offset.x'};
    <osd-logo.offset.x>
        = sprintf( "%.0f", $scr_h * ( ( $x_offset_percent * 1.168 ) / 100 ) );
}
if ( defined <osd-logo.cfg>->{'offset.y'} ) {
    my $y_offset_percent = delete <osd-logo.cfg>->{'offset.y'};
    <osd-logo.offset.y>
        = sprintf( "%.0f", ( $scr_h * ( $y_offset_percent / 100 ) ) );
}

<osd-logo.offset.y> //= $scale_y;
<osd-logo.offset.x> //= sprintf( "%.0f", $scr_w * ( $height_percent / 100 ) )
    * ( $scr_h / $scr_w );

my $x_offset = <osd-logo.offset.x>;
my $y_offset = <osd-logo.offset.y>;

$pos_x += abs($x_offset) if $position =~ /-left$/;
$pos_x -= abs($x_offset) if $position =~ /-right$/;
$pos_y += abs($y_offset) if $position =~ /^top-/;
$pos_y -= abs($y_offset) if $position =~ /^bottom-/;

$window->move( $pos_x, $pos_y );

my $image = Gtk3::Image->new_from_pixbuf(
    $pbuf->scale_simple( $scale_x, $scale_y, 'hyper' ) );

$window->add($image);
$window->show_all;

<osd-logo.fade_signal> = 0;
<osd-logo.fade_start>  = <[base.time]>->(4);

<osd-logo.fade_signal> = $window->signal_connect(
    'draw' => sub {
        my $window      = shift;
        my $old_opavity = $window->get_opacity;
        my $new_opacity = sprintf( "%.8f",
                  ( time - <osd-logo.fade_start> ) * 2.1
                - ( 0.365 * ( time - <osd-logo.fade_start> ) ) );
        my $ret = 1;
        $new_opacity = 1 if $new_opacity > 1;

        if ( $new_opacity != $old_opavity ) {
            $window->set_opacity($new_opacity);
            $window->queue_draw;
        } else {
            sleep 0.001;
        }

        $window->signal_handler_disconnect( delete <osd-logo.fade_signal> )
            if $new_opacity == 1 and defined <osd-logo.fade_signal>;

        return 0;
    }
);

Gtk3->main;
