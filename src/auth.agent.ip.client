# >:]

# name  = auth.agent.ip.client
# descr = authenticate to cube in agent mode
# note  : agent name can now contain subnames

my ( $filehandle, $agent, $key_str ) = @_;

if ( defined $key_str
    or %KEYS
    and exists $KEYS{'agent'}{'session_key'}
    and $KEYS{'agent'}{'session_key'} ne '' ) {
    $key_str //= $KEYS{'agent'}{'session_key'};
    my $banner_string;
    my $bytes_read = <[base.s_read]>->( $filehandle, \$banner_string, 4 ) // 0;
    if ( $bytes_read > 0 ) {
        if ( $banner_string eq ">:]\n" ) {
            <[base.log]>->( 2, '[*] protocol banner detected.,' );
        } else {
            <[base.log]>->(
                0, '[#] protocol mismatch [ no valid connection banner ]'
            ) and return undef;
        }
    } else {
        <[base.log]>->(
            0, 'auth.agent.ip.client: [#] network error [ nothing read ]'
        ) and return undef;
    }

    <[net.out]>->( $filehandle, "select agent\n" );
    chomp( my $answer = readline($filehandle) );
    if ( not defined $answer ) {
        <[base.log]>->( 0, '[X] connection lost `:|' ) and return undef;
    } elsif ( $answer ne 'ACK continue' ) {
        <[base.log]>->( 0, '[#] protocol mismatch >:[' )
            and return undef;
    }

    <[base.log]>->( 2, "[<] authenticating as '$agent'.," );
    <[net.out]>->( $filehandle, "$agent $key_str\n" );

    if ( exists $KEYS{'agent'}{'session_key'} ) {    ## secure key erasure ##
        my $rand_len = length( $KEYS{'agent'}{'session_key'} );
        substr( $KEYS{'agent'}{'session_key'},
            0, $rand_len, <[base.prng.characters]>->($rand_len) );
        $KEYS{'agent'}{'session_key'}
            .= <[base.prng.characters]>->( 8 + int( rand(9) ) );
        delete $KEYS{'agent'}{'session_key'};
    }

    chomp( $answer = readline($filehandle) );

    if ( not defined $answer ) {
        <[base.log]>->( 0, '[X] connection lost `:|' ) and return undef;
    } elsif ( $answer =~ m|^YEAH | ) {
        <[base.log]>->( 1, '[*] success., =), cube authorized session.' );
        return $filehandle;
    } elsif ( $answer =~ m|^NOPE | ) {
        <[base.log]>->( 0, '[#] access denied >:|' ) and return undef;
    } elsif ( $answer eq '>:|' ) {
        <[base.log]>->( 0, '[#] authentication timeout :|' ) and return undef;
    } else {    ##  >:[ .., ##
        <[base.log]>->( 0, '[#] protocol mismatch >:[' )
            and return undef;
    }

} else {
    <[base.log]>->( 0, 'session_key not set, authentication not possible..,' );
    return undef;
}

# ______________________________________________________________________________
#\\WKZ6BE5XVFV6A2AKLIMMACDWJQC5VDJ3NO56BLXVNLWU6T654YRN7NQVMGRMHDLVWHIHV4C4XKJYU
# \\ ADVFKX3PWOQ5EIQZDIKGVPCSGZSAXYAHUOPJVUEFYWOGEA56QQCY \\// C25519-BASE-32 //
#  \\// SCOBKF2C5MCBPVGLFS6KAB3QBUQKGSLPLCYEBWDRJIII2KTIKDI \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
