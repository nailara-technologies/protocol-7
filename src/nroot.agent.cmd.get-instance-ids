# >:]

# name  = nroot.agent.cmd.get-instance-ids
# param = <name[s]>
# descr = return instance ids for matching agent names

my $params = $$call{'args'} // '';
return { 'mode' => 'nak', 'data' => 'expected agent name[s]' }
    if !length($params);

my @instance_ids;
my $not_found   = 0;
my $setup_found = 0;
my $not_found_name;
foreach my $param_str ( split / +/, $params ) {
    my $agent_name = $param_str;
    my $agent_subname;
    $agent_subname = $1 if $agent_name =~ s|\[([^\]]+)\]$||;
    my $agent_id = <[agent.get_id]>->($agent_name);
    if ( defined $agent_id ) { $setup_found++ }
    else { $not_found++; $not_found_name //= $agent_name; next }
    foreach my $iid ( keys %{<nroot.agent.instance>} ) {
        next
            if defined $agent_subname
            and not exists <nroot.agent.instance>->{$iid}->{'subname'}
            or defined $agent_subname
            and exists <nroot.agent.instance>->{$iid}->{'subname'}
            and <nroot.agent.instance>->{$iid}->{'subname'} ne $agent_subname;

        push( @instance_ids, $iid )
            if <nroot.agent.instance>->{$iid}->{'agent_id'} == $agent_id;
    }
}

return {
    'mode' => 'nak',
    'data' => "no agent '$not_found_name' found in setup [ see 'list agents' ]"
    }
    if !$setup_found and $not_found;

if (@instance_ids) {
    return { 'mode' => 'ack', 'data' => join( ' ', @instance_ids ) };
} else {
    return { 'mode' => 'nak', 'data' => 'no matches found' };
}

#.............................................................................
#PBLT3KURXPAZVAKMXKQZ4SPZMIDEXNYBK76EZ2WP6QUHDVYUBJETIFSZIE4H42VWBMLUY5WYEE4X4
#::: CYRVGE5CBWI2P5ERD52OH6TVFPFZ3BYOF2KJB5YAEC3QYKWU2H7 :::: NAILARA AMOS :::
# :: RL7ZHRKI2KP4GIPRQVASHJXWHHSLTE6YA4VHME327ZV6JYRRP4CQ :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
