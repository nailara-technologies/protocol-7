# >:]

# name = pong-game.open_window

my $bin_path = <pong-game.cfg.bin_path>;

my $top    = <x11.coordinates>->{'top'}    // 0;
my $left   = <x11.coordinates>->{'left'}   // 0;
my $right  = <x11.coordinates>->{'right'}  // 0;
my $bottom = <x11.coordinates>->{'bottom'} // 0;

my $width  = $right - $left;
my $height = $bottom - $top;

$width  = 400 if $width < 400;
$height = 300 if $width < 300;

my @exec_params = ( $left, $top, $width, $height );

$ENV{'DISPLAY'} = <x11.display>;

chdir(<pong-game.cfg.res_path>) or die $!;

<pong-game.pid> = open3(
    <pong-game.in_fh>,  <pong-game.out_fh>,
    <pong-game.err_fh>, $bin_path,
    @exec_params
);

<[base.agents.report_child_pid]>->(<pong-game.pid>) if <pong-game.pid>;

if ( not defined <[base.X-11.wait_for_window]>->('pong-game')
    or !<pong-game.pid> ) {
    <[base.log]>->( 0, "[!] unable to start pong-game [$!]" );
    <[base.log]>->( 1, " : aborting agent startup .." );
    exit(1);
} else {

    <[base.log]>->( 1, ": pong-game process started [PID=<pong-game.pid>]" );

    <pong-game.exec_params> = join( ' ', @exec_params );

    <pong-game.watcher.output> = <[event.add_io]>->(
        {   'fd'      => <pong-game.out_fh>,
            'handler' => 'base.handler.child_output.simple',
            'data'    => {
                'bin'               => 'pong-game',
                'pid'               => <pong-game.pid>,
                'log_whitelist'     => [],
                'callback_patterns' => {}
            }
        }
    );

    <[base.X-11.assign_window]>->(<x11.id>);
}

<[base.log]>->( 1, "startup complete." );

# ______________________________________________________________________________
#\\ZTQGUMBHD6J42XLEAZYINHPS3ZLDAC3ZVLF7TPEWWFOFOGOTTGCBHUJCPNMPSPMGDG75FBF3PSKKQ
# \\ JT27YBFGSPQURF3YTGNAISFRT32UT45DL5Z6TOOY46YFH5JGGWP6 \\// C25519-BASE-32 //
#  \\// EH4C26ENXX7KGODQH66FMMFRUG6ZTHDZOL4ZGO4WY4HWRXG2UAI \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
