# >:]

# name  = io.ip.tcp.in.open

my $l_addr = shift;
my $l_port = shift;

my $lsock = new IO::Socket::IP(
    LocalAddr => $l_addr,
    LocalPort => $l_port,
    Proto     => 'tcp',
    Listen    => 23,
    ReusePort => 1,
    ReuseAddr => 1,
    TimeOut   => 1,
    Blocking  => 0
) or <[base.log]>->( 0, "unable to allocate $l_addr:$l_port [$!]" );
if ( not defined $lsock ) { return undef }
else {
    $l_addr //= '<undefined>';
    $lsock->listen()
        or <[base.log]>->( 0, "tcp.server: listen: $!" );
    <[base.log]>->( 1, "TCP server launched [$l_addr:$l_port]" );

    if ( defined $data{'handle'}{$lsock} ) {
        <[base.log]>->(
            0,
            "io.ip.tcp.in.open: handle '$lsock' "
                . "was not cleaned up. cleaning now.,"
        );
        delete $data{'handle'}{$lsock};
    }

    $data{'handle'}{$lsock}{'mode'} = 'input';
    $data{'handle'}{$lsock}{'link'} = 'ip.tcp';

    return $lsock;
}

# ______________________________________________________________________________
#\\RVNWD7NMYJMKRJSCRTVU2VRVV4HZ2GR24UMFZGAVJ57HCBEBUWC4GSQGTY476U5AQKEXCG5J6HQAI
# \\ TXO6ZJS3PCU4QHTHO2QSQKT6NJJTYWXMBA7WKI6QUY6IWQKULCZX \\// C25519-BASE-32 //
#  \\// UR7DOZGGN2CCBIKZ6TUYGZ6ELYAUJBN5544KS2LETV7THY5OEDI \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
