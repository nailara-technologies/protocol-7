# >:]

# name  = image2html.parent.cmd.get_url
# param = <location> [width] [height]
# descr = returns file:// url to image html page

my ( $image_location, $target_width, $target_height )
    = split( / +/, $$call{'args'} );

return { 'mode' => 'nak', 'data' => 'expected path to image file!' }
    if not defined $image_location or !length($image_location);
return { 'mode' => 'nak', 'data' => 'file does not exist!' }
    if $image_location =~ m|^(file://)?(/.+)$| and !-f $2;
return { 'mode' => 'nak', 'data' => "image2html UID can't read image file" }
    if $image_location =~ m|^(file://)?(/.+)$| and !-r $2;
return { 'mode' => 'nak', 'data' => 'invalid target width parameter!' }
    if defined $target_width and $target_width !~ /^\d+$/
    or defined $target_width and !$target_width;
return { 'mode' => 'nak', 'data' => 'invalid target height parameter!' }
    if defined $target_height and $target_height !~ /^\d+$/
    or defined $target_height and !$target_height;

if ( not defined $target_width ) {
    <[base.log]>->( 2, "no target width supplied, using image width!" );
    if ( $image_location =~ m|^https?://| ) {
        <[base.log]>->( 2, "downloading '$image_location' first..." );
        $image_location = <[image2html.base.download_file]>->($image_location);
        return { 'mode' => 'nak', 'data' => 'download error' }
            if not defined $image_location;
    }
    ($target_width) = <[image2html.base.get_image_size]>->($image_location);
}

my $html_path = <[image2html.base.get_html_path]>->(
    $image_location, $target_width, $target_height
);
( my $html_dir = $html_path ) =~ s|^.*/||;

if (    -d $html_path
    and !-f $html_path . '/.complete'
    and not exists <image2html.converting>->{$html_dir} ) {
    my $errors;
    <[base.log]>->(
        1, "incomplete conversion found, removing html dir '$html_dir'.."
    );
    remove_tree( $html_path, { error => \$errors } );
    for my $err (@$errors) {
        my ( $file, $message ) = %$err;
        if ( $file eq '' ) {
            <[base.log]>->( 0, "remove_tree($html_path): $message" );
        } else {
            <[base.log]>->( 0, "remove_tree: $message [$file]" );
        }
    }
    die "unable to remove '$html_path'" if @$errors;
}

if ( !-d $html_path ) {
    <image2html.converting>->{$html_dir} = 1;
    <[base.log]>->( 2, "creating html dir '$html_dir'.." );
    make_path($html_path) or die "make_path($html_path): $!";

    <[base.log]>->( 2, "copying 'loading' icon to cache dir.." );
    my $loading_icon = <system.root_path> . '/data/gfx/anim/busy.2K.gif';
    die "can't find image '$loading_icon'" if !-f $loading_icon;
    copy( $loading_icon, "$html_path/busy.2K.gif" ) or die "copy: $!";

    <[image2html.base.write_stub_page]>->($html_path);

    my @conv_args = ( $image_location, $target_width );
    push( @conv_args, $target_height ) if defined $target_height;
    <[base.proto.nailara.command.send.local]>->(
        {   'command'   => "child.convert_image",
            'call_args' => { 'args' => join( ' ', @conv_args ) },
            'reply'     => {
                'handler' => 'image2html.parent.handler.convert_image_reply',
                'params'  => {
                    'image_path' => $image_location,
                    'html_path'  => $html_path
                }
            }
        }
    );
}

<[file.write_timestamp]>->("$html_path/.last_used");

return { 'mode' => 'ack', 'data' => "file://$html_path/image.html" }

# ______________________________________________________________________________
#\\3MIGPI4FHLBAYZ2PDFAOSFJM2JBAPJHVF225BYFZ7KXAAE36LTUL3RHI4OFEHOPGEBFGEBZTDPSU2
# \\ 24WKSSAJXLAXIE3IWFKCHXKRQEXQ7WWPHJVDQEIQSFOCUYCGQOJX \\// C25519-BASE-32 //
#  \\// JCOQVVT27CL637HB6HZX2EN6WVNM47PGKWUMODEQEINL4H74KBY \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
