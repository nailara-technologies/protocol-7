# >:]

# name = xserver.fade_in_bg_col

my $target_color = shift // <xserver.bg_color>;

return warn "invalid target color '$target_color'"
    if $target_color !~ /^\#?[0-9A-F]{6}$/i;

<[base.log]>->( 1, "fading background to '$target_color'" );
substr( $target_color, 0, 1, '' ) if length($target_color) == 7;

my @t_rgb = (
    hex( '0x' . substr( $target_color, 0, 2 ) ),
    hex( '0x' . substr( $target_color, 2, 2 ) ),
    hex( '0x' . substr( $target_color, 4, 2 ) )
);

my $fade_val   = 0;
my $last_hex   = '';
my $rgb_high   = [ sort { $b <=> $a } @t_rgb ]->[0];
my $time_start = <[base.time]>->(4);
my $fade_factor
    = 0.0005 + ( 0.0125 * sprintf( "%0.4f", ( 1 / 255 ) * $rgb_high ) );

while ( $fade_val < 1 ) {
    my $fade_inc
        = $fade_factor
        - sprintf( "%.6f",
        $fade_factor * ( <[base.time]>->(4) - $time_start ) );
    $fade_inc = 0.0005 if $fade_inc <= 0;
    $fade_inc = 0.042  if $fade_inc > 0.042;
    $fade_val += $fade_inc;
    $fade_val = 1 if $fade_val > 1;
    my $c_hex = sprintf( "#%02x%02x%02x",
        $t_rgb[0] * $fade_val,
        $t_rgb[1] * $fade_val,
        $t_rgb[2] * $fade_val );
    if ( $c_hex eq $last_hex ) {
        <[base.sleep]>->(0.0002);
        next;
    } else {
        <[base.sleep]>->(0.0042);
    }
    <[base.log]>->( 2, ": <fading> bg_color = $c_hex" );
    X11::Protocol::XSetRoot->set_background(
        'color'        => $c_hex,
        'use_esetroot' => $fade_val == 1
    );
    $last_hex = $c_hex;
}

<[base.log]>->( 2, ": <fading> complete" );

# ______________________________________________________________________________
#\\S5WXYZJ4I4TM2TZHTBFVP5APWLC6OINKMT7YR5KTMY3O4MMIK6JA2C6SW62ARCO4U5MBOVZRRDRZE
# \\ RC6NYDPA3MNNT6GSECMRCONLHC3MAZNM6DVEH7UJWI2RAED5NQUQ \\// C25519-BASE-32 //
#  \\// DL4QEZDK5ATQEI7XGOX3TLXTX4Y4NBNYPM5FFOAYOIMM5KTUWBI \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
