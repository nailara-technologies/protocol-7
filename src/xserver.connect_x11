# >:]

# name = xserver.connect_x11

my $ok               = 0;
my $attempts         = int( <xserver.connect_timeout> * 10 );
my $bin_name         = <xserver.x11_bin_name>;
my $retry_delay      = 0.1;
my $max_retry_delay  = 2;
my $host_mode_warned = 0;

my $mode = <xserver.mode>;

host_retry:
while ( !$ok and $attempts-- ) {
    eval '$data{xserver}{x11} = X11::Protocol->new(\''
        . <xserver.display>->{$mode}
        . '\'); $ENV{DISPLAY}="'
        . <xserver.display>->{$mode}
        . '"; $data{xserver}{x11_tops} = X11::Tops->new($data{xserver}{x11})';
    $ok = 1 if !$@;
    <[base.sleep]>->($retry_delay) if !$ok;
}
if ( !$ok and <xserver.mode> eq 'host' ) {
    if ( !$host_mode_warned ) {
        <[base.log]>->(
            0,
            ": : connection to display "
                . <xserver.display>->{$mode}
                . " failed, retrying indefinetly.."
        );
        $host_mode_warned = 1;
    }
    $retry_delay *= 2 if $retry_delay < $max_retry_delay;
    $retry_delay = $max_retry_delay if $retry_delay > $max_retry_delay;
    goto host_retry;    # wait for X-server indefinetly (in host mode)
}

if ( !$ok ) {
    ( my $err_msg = $@ ) =~ s| at .+\n?$||;
    <[base.log]>->( 0, ": unable to connect to $bin_name-server.. [$err_msg]" );
    if ( $mode ne 'host' ) {
        <[base.log]>->( 0, ": : terminating pid " . <xserver.pid> . ".." );
        kill( 9, <xserver.pid> );
    }
    <[base.log]>->( 1, "done." );
    exit(3);
}
