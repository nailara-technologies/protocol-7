# >:]

# name = rss.ticker.fetch.single

my $rss_url = shift;
if ( not defined $rss_url or !length($rss_url) ) {
    <[rss.ticker.warn_urls_undefined]>;
    return;
}
<rss.ticker.warned_undefined.urls> = 0;
( my $data_dir = <rss.data.tmp_path> . '/rssdata' ) =~ s,(/|\.\.)/,/,g;
my $output_file = <rss.ticker.txt_data_path>;

my $seperator = <rss.ticker.item_seperator>;

<[base.log]>->( 2, "checking RSS feed for new data..," );

my $response = <rss.browser>->get($rss_url);

if ( $response->code == 200 ) {
    <rss.ticker.fail_warned> = 0;
    <[base.log]>->( 2, ": received updated RSS content .," );

    my $response_content = $response->decoded_content( 'charset' => 'none' );

    my $err_str;
    my @txt_data;
    my $feed = XML::Feed->parse( \$response_content )
        or $err_str = XML::Feed->errstr;

    if ( defined $err_str ) {
        <[base.log]>->( 0, "<< feed parser error [ $err_str ] >>" );
        @txt_data = ("<< RSS feed parsing error >>");
    } else {
        eval {
            foreach my $entry ( $feed->entries ) {
                push( @txt_data, $entry->title );
            }
        };
    }

    if ( !-d $data_dir ) {
        mkdir($data_dir)
            or die "cannot create rss data dir '$data_dir'! [ $! ]";
        chmod( 0700, $data_dir );
    }

    open( my $txt_fh, '>', $output_file . '.NEW' )
        or die "cannot write to TXT data file [ $! ]";
    {
        print {$txt_fh} join( " $seperator ", @txt_data );
    }
    close($txt_fh);
    move( $output_file . '.NEW', $output_file )
        or die "cannot move '$output_file.NEW' to '$output_file' [ $! ]";
    <[base.log]>->( 2, ": : wrote txt data to '$output_file'" );
    <rss.browser>->commit;
    return 1;

} elsif ( $response->code == 304 ) {
    <rss.ticker.fail_warned> = 0;
    <[base.log]>->( 2, ": no new content since last request" );
    return 0;
} else {
    <rss.ticker.fail_warned> //= 0;
    <[base.log]>->(
        0,
        sprintf( "unable to access RSS url '$rss_url' [ %s ]",
            $response->status_line )
    ) if !<rss.ticker.fail_warned>;
    <rss.ticker.fail_warned> = 1;

    if ( !-f $output_file ) {
        <[base.log]>->( 0, "<< no cached data for not available RSS feed >>" );
        <rss.ticker.fail_retry_interval>
            //= <rss.ticker.fail_retry_min_interval>;
        <rss.ticker.update_timer>->cancel;
        <rss.ticker.update_timer> = <[event.add_timer]>->(
            {   'after'  => 4.2,    # error retry [ quickfix ]
                'repeat' => 1,
                'interval' => <rss.ticker.update_interval> || 120,
                'handler'  => 'rss.ticker.fetch_content',
                'data'     => <rss.ticker.update_commands>
            }
        );
        <rss.ticker.fail_retry_interval> *= 1.1;
        <rss.ticker.fail_retry_interval> = <rss.ticker.fail_retry_max_interval>
            if <rss.ticker.fail_retry_interval>
            > <rss.ticker.fail_retry_max_interval>;
        return -2;
    }

    my $file_stat = File::stat::stat($output_file);
    my $file_age  = sprintf( "%.2f", ( time() - $file_stat->ctime ) / 3600 );
    if ( $file_age >= <rss.ticker.cache_timeout> ) {
        <[base.log]>->( 0, "local feed data has expired [ $file_age hours ]" );
        open( my $txt_fh, '>' . $output_file )
            or die "can't open text data file for writing [ $! ]";
        close($txt_fh);
        return 1;    # update with empty file
    } else {
        <[base.log]>->( 1, "keeping cached feed data [ $file_age hours old ]" );
    }
    return -1;
}

# ______________________________________________________________________________
#\\XI7VEJJQEG655RDRPKZLX2KE6ZERUVF7UDM2TQAPSFQ6OZDWUVQUWO25PRSLLUM34IFTIHTXYW6DU
# \\ 7DS3I3YYFWPLLLH766ZLFB2RCBMBCNDH6BKGCJ65NDZ7ACSHXIOC \\// C25519-BASE-32 //
#  \\// KOXU4M2F4YIO6YFTCQWJDCRXIPUX3KDQDO43VLFICR6BJMEBUDQ \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
