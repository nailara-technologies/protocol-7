# >:]

# name = power-x11.open_window

Gtk3->init;

<power-x11.cfg.use_transparency> //= 1;

my $window = Gtk3::Window->new('toplevel');
<power-x11.obj.window> = $window;
$window->set_title('.: PMS-LAN - power control gui :.');

#$window->set_position("mouse");
$window->set_default_size( 0, 0 );
$window->set_border_width(0);
$window->set_resizable(0);
$window->set_keep_above(1);
$window->move( 100, 100 );
$window->set_decorated(0) if <power-x11.cfg.use_transparency>;
$window->signal_connect(
    delete_event => sub {
        Gtk3->main_quit;
        <[base.log]>->( 1, "shutting down..," );
        exit;
    }
);

my $use_transparency = <power-x11.cfg.use_transparency>;

$window->set_app_paintable(1);

#$window->set_opacity(0.8);

my $screen;

if ($use_transparency) {
    $screen = $window->get_screen();
    <power-x11.screen_rgba> = $screen->get_rgba_visual();
    $window->set_visual(<power-x11.screen_rgba>);

} else {
    my $css_prov = Gtk3::CssProvider->new();
    $screen = Gtk3::Gdk::Screen::get_default();
    $css_prov->load_from_data('*{background-color:#424242}');
    Gtk3::StyleContext::add_provider_for_screen( $screen, $css_prov, -1 );
}

my $grid = Gtk3::Grid->new();
$window->add($grid);

my $logo_png = <system.root_path> . '/data/gfx/logos/power-x11/pms-lan.png';
my $image    = Gtk3::Image->new_from_file($logo_png);
$grid->attach( $image, 1, 1, 1, 1 );

if ( !keys %{<power-x11.devices>} ) {
    my $label = Gtk3::Label->new();
    $label->set_markup(
        "<span size=\"large\"><b>no devices configured</b></span>");
    my $hbox = Gtk3::Box->new( 'horizontal', 0 );
    $hbox->pack_end( $label, 1, 1, 8 );
    $grid->attach( $hbox, 2, 1, 1, 1 );
    $window->show_all;
    Gtk3->main;
    return;
}

foreach my $s_num ( 1 .. 4 ) {
    my $box   = Gtk3::Box->new( 'vertical', 0 );
    my $label = Gtk3::Label->new();
    $label->set_markup("<span size=\"large\">Socket <b>$s_num</b></span>");
    $box->pack_end( $label, 1, 1, 3 );
    $grid->attach( $box, $s_num + 1, 1, 1, 1 );
}

my $d_num = 0;
foreach my $d_id (
    sort {
        <power-x11.devices>->{$a}->{'mac'} cmp
            <power-x11.devices>->{$b}->{'mac'}
    } keys %{<power-x11.devices>}
) {
    my $device = <power-x11.devices>->{$d_id};
    $d_num++;

    my $box      = Gtk3::Box->new( 'vertical', 0 );
    my $label_1  = Gtk3::Label->new();
    my $label_2  = Gtk3::Label->new();
    my $label_3  = Gtk3::Label->new();
    my $mac_name = uc("$1$2")
        if <power-x11.devices>->{$d_id}->{'mac'}
        =~ /:([0-9a-f]{2}):([0-9a-f]{2})$/;
    $label_1->set_markup(
        "<span size=\"large\"> <b>Device $mac_name</b> </span>");
    $label_2->set_markup(
        "<span size=\"small\">" . $device->{'ip'} . "</span>" );
    $label_3->set_markup(
        "<span size=\"small\">" . $device->{'mac'} . "</span>" );
    $box->pack_start( $label_1, 1, 1, 0 );
    $box->pack_end( $label_3, 1, 1, 1 );
    $box->pack_end( $label_2, 1, 1, 0 );
    $grid->attach( $box, 1, $d_num + 1, 1, 1 );

    foreach my $s_num ( 1 .. 4 ) {

        my $switch = Gtk3::Switch->new;
        <power-x11.switch>->{$d_id}->{$s_num} = $switch;
        ###

        my $sc = $switch->get_style_context;

        #        print STDERR "<sc> " . $sc->get_background_color . "\n";

        #<power-x11.switch>
        #    ->{$d_id}->{$s_num}->set_visual(<power-x11.screen_rgba>);
        <power-x11.switch>->{$d_id}->{$s_num}->set_opacity(0.5);
        ###
        $switch->set_active( $device->{'state'}->{$s_num} );
        my $hbox = Gtk3::Box->new( 'horizontal', 0 );
        my $vbox = Gtk3::Box->new( 'vertical',   0 );
        $hbox->pack_end( $switch, 1, 1, 4 );
        $vbox->pack_end( $hbox,   1, 1, 2 );
        $grid->attach( $vbox, $s_num + 1, $d_num + 1, 1, 1 );

        $switch->signal_connect(
            'notify::active' => sub {
                my ( $widget, $switch_data ) = @_;
                my ( $id, $sn, $found ) = ( 0, 0, 0 );
                my @device_ids = sort keys %{<power-x11.switch>};
                my $new_state  = $widget->get_active;

                foreach my $_id (@device_ids) {
                    foreach my $_sn ( keys %{ <power-x11.switch>->{$_id} } ) {
                        if ( $widget == <power-x11.switch>->{$_id}->{$_sn} ) {
                            $id = $_id;
                            $sn = $_sn;
                            last;
                        }
                    }
                    last if $id;
                }
                my $command = $new_state ? 'on' : 'off';
                if ( not defined $id ) {
                    my $reset_state = $new_state ? 0 : 1;
                    $widget->set_active($reset_state);
                    return 1;
                } elsif (
                    $new_state ne <power-x11.devices>->{$id}->{'state'}->{$sn} )
                {
                    <[base.protocol-7.command.send.local]>->(
                        {   'command'   => "core.power.$command",
                            'call_args' => { 'args' => "$id $sn" }
                        }
                    );
                    <power-x11.devices>->{$id}->{'state'}->{$sn} = $new_state;
                }
                return 0;
            }
        );
    }
}

$window->show_all;

my ( $w_x, $w_y ) = ( $window->get_size() );

<power-x11.cfg.pos_x> //= $screen->get_width() - $w_x - 10;
<power-x11.cfg.pos_y> //= $screen->get_height() - $w_y - 9;

( my $pos_x, my $pos_y ) = ( <power-x11.cfg.pos_x>, <power-x11.cfg.pos_y> );

$window->move( $pos_x, $pos_y );

Gtk3->main;

# ______________________________________________________________________________
#\\DRON3UVP25W6TRV3JMGITCZDLEJNRN4TMRQ6NRIYW4WSSDM3K5ROPQ2WEPACJUXSYGJKZJB2DL5IM
# \\ CQXJBJWP7VEQBGE5PQ3R6K2VM6LEDZ5UFBNUNGOJD5JXQUVJO6D6 \\// C25519-BASE-32 //
#  \\// CYUD45NXFZBHSMQTRMA3GGL7FJ7T2J3WR5T4MPDPICMPCG4NECY \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
