#! >:]

# name  = mpv.cmd.fade
# param = <vol_%>
# descr = fade audio volume to given level

my $id = $$call{'session_id'};
( my $volume = $$call{'args'} ) =~ s|%$||;
( my $vol_str = sprintf( "%.2f", $volume ) ) =~ s|\.?0+$||;

return { 'mode' => 'nack', 'data' => 'expected numerical percent value' }
    if $volume !~ /^\d+(\.\d+)?$/;

return { 'mode' => 'ack', 'data' => "audio volume already at $vol_str%" }
    if sprintf( "%.2f", <mpv.current.volume> ) == $vol_str;

my $id_str = defined $id ? "[$id] " : '';

my $l = length($id_str) ? 1 : 2;
<[base.log]>->( $l, "${id_str}fading volume to ${vol_str}%" );

my $min_delay = 0.0064;
<mpv.current.volume_target> = <mpv.audio_fade.target> = $volume;

<mpv.audio_fade.reply_ids> //= [];
push( @{<mpv.audio_fade.reply_ids>}, $$call{'reply_id'} );

<mpv.timer.audio_fade>->cancel
    if defined <mpv.timer.audio_fade>
    and <mpv.timer.audio_fade>->is_active;

<mpv.audio_fade.start_vol> = <mpv.current.volume>;
<mpv.audio_fade.delta_vol> = sprintf( "%.4f", $volume - <mpv.current.volume> );
<mpv.audio.fade_speed> //= 42;    # agent default

my $interval_delay = sprintf( "%.3f",
    ( 1 / <mpv.audio.fade_speed> )
        * 0.42 * ( abs(<mpv.audio_fade.delta_vol>) / 100 ) );

$interval_delay = $min_delay if $interval_delay < $min_delay;

<mpv.timer.audio_fade> = <[event.add_timer]>->(
    {   'after'    => 0,
        'interval' => $interval_delay,
        'handler'  => 'mpv.handler.audio_fade',
        'data'     => $volume
    }
);

return { 'mode' => 'later' }
