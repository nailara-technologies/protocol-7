# >:]

# name   = base.gen_id
# args   = hashref <id_var>, integer <max_ids> [, string <number_range> ]
# return = integer <id> [harmonic]

my $verbose = 0;    ## <-- report harmony requests to console., [debug] ##

my $href = shift;   ## <-- where elements are to be placed .., ##

die '< base.gen_id > expected hash reference' if ref($href) ne 'HASH';

my $max_ids       = shift || 13747;
my $num_range     = shift || '01234577790';
my $want_harmony  = shift // 1;
my $element_count = scalar keys %{$href};
my $id_length     = length($max_ids) + 2;
$id_length += int( $element_count / ( $max_ids / 5 ) ); # expand towards limit.,

my $retries     = 0;
my $new_id      = 0;
my $max_retries = 32 + int( $max_ids / 1000 );
$max_retries = 4096 if $max_retries > 4096;

while (exists $href->{$new_id}
    or index( $new_id, '0' ) == 0
    or ( $want_harmony and <[base.assert.harmony]>->($new_id) == 0 ) ) {

    $new_id = <base.prng.fortuna>->string_from( $num_range, $id_length );

    say "<   > $new_id" if $verbose and $want_harmony;

    if ( $retries > $max_retries ) {
        <[base.log]>->( 0, "< gen_id > max_retries [ $max_retries ] reached." );
        $new_id = undef;
        goto abort;
    } else {
        $retries++;
    }
}

say "< $retries > $new_id " . [caller]->[1] . ' \\ ' . [ caller(1) ]->[1]
    if $verbose and $want_harmony;

abort:

warn "max_ids [$max_ids] reached" if $element_count == $max_ids;
warn "max_ids [$max_ids] exceeded [$element_count]"
    if $element_count > $max_ids;

return $new_id;

#.............................................................................
#PRP5J5OAQMEUQNED4TARSUCOWCKKLZ2MYRED4KIRCOKCPCAHTGPC3BUDFOPME5V4ELWXG4EHTJ6PS
#::: ANVKEIGEJRYL2Y7MRCUEFFYWNM6GANCY3S4RENLKX7WESA7DKMQ :::: NAILARA AMOS :::
# :: 4XJKC6VQJIUYCTB7ICPQFOPQLYWR7IZXDCGKTAP6XPLM7WMNUICI :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
