# >:]

# name = browser.process_crash_mitigation

my $flag_map = {
    ''                    => 'adblock',
    'adblock'             => 'nojs_scroll',
    'nojs_scroll'         => 'adblock,nojs_scroll',
    'adblock,nojs_scroll' => 'nojs',
    'nojs'                => 'adblock,nojs',
    'adblock,nojs'        => 'blkext',
    'blkext'              => 'blkext,nojs_scroll',
    'blkext,nojs_scroll'  => 'blkext,nojs'
};

my $subname_b32
    = ( defined <system.agent.subname> and length(<system.agent.subname>) )
    ? '.' . encode_b32r(<system.agent.subname>)
    : '';
my $file_name = "/tmp/.nailara.browser.crash_pid$subname_b32";
return if !-f $file_name;
chomp( my $crash_pid = ${ <[file.slurp]>->($file_name) } );
unlink($file_name) or warn("$file_name: $!");
return if $crash_pid !~ /^\d+$/;
$file_name = "/tmp/.nailara.browser.$crash_pid";
return if !-f $file_name;
my $file_content = ${ <[file.slurp]>->($file_name) };
unlink($file_name) or warn("$file_name: $!");

my $crash_url = $1 if $file_content =~ s|^current_url : ([^\n]+)\n||;
my $url_flags = $1 if $file_content =~ s|^url_flags   : ([^\n]*)\n||;

return
       if length($file_content)
    or not defined $crash_url
    or not defined $url_flags;

$url_flags =~ s| ||g;

$url_flags = ''
    if length($url_flags)
    and not exists $flag_map->{$url_flags}
    and $url_flags ne 'blkext,nojs';    # weird / unrecognized flag combination!

<[base.log]>->(
    0, "processing crash mitigation for previous instance [PID $crash_pid]"
);

if ( not exists $flag_map->{$url_flags} ) {
    <[base.log]>->(
        0, ": maximum mitigation level reached! unable to prevent segfault `:|"
    );
    return;
}

my $next_flags = $flag_map->{$url_flags};

my $s = $next_flags =~ /,/ ? 's' : '';
<[base.log]>->( 1, ": setting flag$s '$next_flags' for '$crash_url'.." );

<[base.proto.nailara.command.send.local]>->(
    {   'command'   => "core.mlist.set_flags",
        'call_args' => { 'args' => join( ' ', $next_flags, $crash_url ) }
    }
);
