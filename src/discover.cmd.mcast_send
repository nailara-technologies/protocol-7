# >:]

# name  = discover.cmd.mcast_send
# descr = send (signed) message to mcast group

my $key_name = 'default';
my $ann_msg = shift->{'args'} // '';
return { 'mode' => 'nak', 'data' => 'no announce message string given' }
    if not defined !length($ann_msg);

if ( not defined <discover.announce_msg_header> ) {

    <discover.announce_msg_header>
        = "[:<|ANNOUNCE|"
        . encode_base64url( $KEYS{'C25519'}{$key_name}{'pub'} ) . "\n";

    map {
        <discover.announce_msg_header>
            .= join( ':', $_, $KEYS{'C25519'}{$key_name}{'root'}{$_}{'sig'} )
            . "\n"
        }
        keys %{ $KEYS{'C25519'}{$key_name}{'root'} };
}

$ann_msg =~ s/\n*$/\n/;

( my $t_stmp = <[base.time]>->( length(time) ) ) =~ s|\.||;
my $packet_str = <discover.announce_msg_header> . "\n$ann_msg\n$t_stmp:";

$packet_str .= encode_base64url( <[crypt.C25519.sign_data]>->( \$packet_str ) );

# print "---<sent>---\n$packet_str--</sent---\n";

return { 'mode' => 'nak', 'data' => "failed to send: $!" }
    unless <discover.mcast.obj.sock>->mcast_send( $packet_str . "\n",
    join( ':', <discover.mcast.ip4_addr>, <discover.mcast.ip4_port> ) );

return { 'mode' => 'ack', 'data' => 'message sent' };
