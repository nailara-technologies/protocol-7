# >:]

# name   = plugin.auth.enc
# return = str(user name) (success), undef [error]

my $id = $_[0]->w->data;
my $re = <regex.base>;

my $input  = \$data{'session'}{$id}{'buffer'}{'input'};
my $output = \$data{'session'}{$id}{'buffer'}{'output'};

my $auth_versn = '0000000';    ### <-- AUTH VERSION ####
my $auth_state = $data{'session'}{$id}{'c25519'} //= {};
my $key_name   = <system.agent.name>;

if ( $$input =~ s|^get-version\n|| ) { ## get authentication protocol version ##
    $$output .= sprintf( "ACK %s\n", $auth_versn );
    return 1;                          # <- keep state
}
if ( $$input =~ s{^get-(srv-(key)|key-(sig|ver))\n}{} ) {
    my $cmd_type = $1;
    my $rep_type = $2 // $3;
    $rep_type = 'sig' if $cmd_type eq 'key-ver';
    if ( not defined $KEYS{'C25519'}{'session'}{$key_name}{"$rep_type-reply"} )
    {
        $$output .= "NAK not available `:|\a\n";
        return 2;                      # <- terminate [ error state ]

    } elsif ( $cmd_type eq 'srv-key' ) {    ## returns current session p.key ##
        $$output .= sprintf( "ACK %s\n",
            $KEYS{'C25519'}{'session'}{$key_name}{'key-reply'} );
    } elsif ( $cmd_type eq 'key-sig' ) {    ## returns session key signature ##
        $$output .= sprintf( "ACK %s\n",
            $KEYS{'C25519'}{'session'}{$key_name}{'sig-reply'} );
    } elsif ( $cmd_type eq 'key-ver' ) {    ## return key and version digest ##
        $$output .= sprintf(
            "ACK %s\n",
            <[digest.bmw.L13_str]>->(
                sprintf( "%s.[%d]",
                    $KEYS{'C25519'}{'session'}{$key_name}{'sig-reply'},
                    $auth_versn )
            )
        );
    }
    return 1;                               # <- keeping connection state

} elsif ( $$input =~ s|^set-key ($re->{usr}) (\S+)( (\S+))?\n|| ) {
    $auth_state->{'peer_name'}          = $1;
    $auth_state->{'peer_pubkey'}        = $2;
    $auth_state->{'peer_net_signature'} = $3;    # optional in 'anon-usr' case

    ## search and check signature [if given]
    my $has_net_sig = defined $auth_state->{'peer_net_signature'} ? 1 : 0;

    return 1;                                    # <- keep state

} elsif ( $$input =~ m|\n| ) {
    $$output .= ">:[\a\n";
    <[base.log]>->( 0, "[$id] authentication protocol mismatch [ enc ]" );
    return 2;                                    # <- terminate
} else {
    return 1;                                    # <- keep state
}

# ______________________________________________________________________________
#\\RXQ2DRENQPWQOY2ZJMB5SHSNSO6XC5WERTUECOQHHIR4RLFQ3OI7WQUWKILC3VCZAESK3GVF7ILX6
# \\ HEQCD52J2BYHPFCG6QGS3FRLIDBXT3NRWV36SOXXRCCR22V3LADK \\// C25519-BASE-32 //
#  \\// T6ZRZ3A55MFGKLT57MTG2XB6VWVUBVXJE6EYJXDLMOQ5JP5WYBQ \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
