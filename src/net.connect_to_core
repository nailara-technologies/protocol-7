# >:]

# name = net.connect_to_core

my @connection_types = @_;
@connection_types = ('unix') if defined <unix.path>; # overriding [in -sic mode]

my $core_sock;
my $core_addr     = <protocol-7.network.internal.addr>;
my $core_port     = <protocol-7.network.internal.port>;
my $unix_path     = defined <unix.path> ? <unix.path> : undef;
my $agent_name    = <system.agent.name>;
my $agent_subname = <system.agent.subname>;

foreach my $c_type (@connection_types) {
    <[base.log]>->( 1, "initiating core connection [$c_type].," );
    if ( $c_type eq 'unix' ) {
        if ( not defined $unix_path ) {
            if ( not defined $core_addr and defined $core_port ) {
                <[base.log]>->(
                    0,
                    'connect_to_core[unix]: neither unix.path nor '
                        . 'net.local.{addr,port} are defined, aborting.,'
                );
                exit(2);
            } else {
                <unix.path> = $unix_path
                    = '/tmp/.n/s/'
                    . <[digest.elf.b32]>
                    ->( join( ':', $core_addr, $core_port ) );
            }
        }
        if ( !-e $unix_path or !-S $unix_path and @connection_types ) {
            <[base.log]>->( 2, "unix path '$unix_path' not found, skipping.," );
            next;
        }
        $core_sock = <[base.open]>->( 'unix', 'output', $unix_path );
        if (    defined $core_sock
            and -S $core_sock
            and $core_sock->connected ) {
            $core_sock = <[net.unix.authme]>->( $core_sock, $agent_name );
        } else {
            $core_sock = undef;
        }
    } elsif ( $c_type eq 'ip.tcp' ) {
        $core_sock
            = <[base.open]>->( 'ip.tcp', 'output', $core_addr, $core_port );
        if (    defined $core_sock
            and -S $core_sock
            and $core_sock->connected ) {
            my $auth_name = $agent_name;
            $auth_name .= "[$agent_subname]" if defined $agent_subname;
            $core_sock = <[auth.agent.client]>->( $core_sock, $auth_name );
        } else {
            $core_sock = undef;
        }
    } elsif ( $c_type eq 'pipe' ) {
        die "<<< connection type 'pipe' not implemented yet >>>";
    } else {
        die "[!] unknown connection type '$c_type' requested [!]";
    }

    if ( defined $core_sock ) {
        <[base.session.init]>->( $core_sock, qw| nailara client core | );

        <system.timer>->{'send_reports'} = <[event.add_timer]>->(
            {   'repeat'  => 0,
                'after'   => 0.777,
                'handler' => 'base.session.send_init_reports'
            }
        );
        return $core_sock;
    }
}

if ( not defined $core_sock ) {
    <[base.log]>->(
        0, "<!> unable to connect to local core, aborting agent startup <!>"
    );
    exit(1);
}

# ______________________________________________________________________________
#\\UJJMHDQAWNCONO74CKHBXHHYV5QBLVJPVJOS2VVKYYUXYHUKD7XYQXN5ACYVNEMMJXT7F3FPA7DMG
# \\ REDHPBG2ZFJMSSPAWKACJR7R4DZX6UKCBII2S37DILKC3WXJYY2J \\// C25519-BASE-32 //
#  \\// 2QA2Z7TO6NPN7JLJZ27OBNGVUOLVK76BAYKKQOALRX2IBZ3Z2AQ \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
