# >:]

# name  = base.cmd.source-age
# param = ['date']
# descr = installed nailara 'protocol-7' code age
# additional param = [year_float]
# todo = create and process ntime time-stamp for abolute precision

my $param_str = shift->{'args'} // '';
my $date_mode = $param_str =~ s|^date *|| ? 1 : 0;

my $current_time = time;
my $c_year_float = <[base.time.year_utc_float]>->($current_time);
my $s_year_float = $1 if <protocol-7.source-version> =~ m|^(\d+(\.\d+)?)\-|;

if ( ( not exists <system.agent.type> or <system.agent.type> ne 'cube' )
    and length($param_str) ) {   # <-- no second param for non-cube type agents.
    return {
        'mode' => 'nak',
        'data' => "ask a 'cube'-type agent for custom values"
    };
} elsif ( $param_str =~ m|^(\d{1,5}+(\.\d{1,5})?)\-?| ) {
    $s_year_float = $1;
} elsif ( length($param_str) ) {
    return {
        'mode' => 'nak',
        'data' => "invalid version time-stamp syntax [ see 'source-version' ]"
    };
}

my $year_delta  = sprintf( "%.4f", $c_year_float - $s_year_float );
my $year_int    = int( 2000 + $s_year_float );
my $ydays       = <[base.time.is_leap_year]>->($year_int) ? 366 : 365;
my $source_yday = 1 + ( $s_year_float * $ydays - int($s_year_float) * $ydays );
my $delta_secs  = $ydays * $year_delta * 86400;

my $src_unix = timegm_nocheck( 0, 0, 0, $source_yday, 0, $year_int ) + 3600;

$src_unix += $delta_secs / 2;
my $e_str = ' [ estimated ]';

( my $date_stamp   = <[base.parser.timestamp]>->($src_unix) ) =~ s|:\d\d$||;
( my $duration_str = <[base.parser.duration]>->($src_unix) )  =~ s|^0s$|0m|;

return { 'mode' => 'ack', 'data' => $date_stamp . $e_str } if $date_mode;

return { 'mode' => 'ack', 'data' => $duration_str . $e_str }

# ______________________________________________________________________________
#\\5XDADLRAOJG6YTOFT2PXLL4B24X7X4M3JT2OR4PZ7IFBQS5U3IBJ47UOO63MEWWE4XK7BB5IT7YUG
# \\ K7BV4NHHIAY2BSZTABIQJ2VOSEAY7ZUKWQMWTSMTUKW6GXL7EM6C \\// C25519-BASE-32 //
#  \\// 4MDQYI4P3J4ELNMXXNZ4JL2C37QCJ6D65J5OMQA7PZYYXEIIAAQ \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
