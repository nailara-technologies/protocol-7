# >:]

# name  = filter.compile_chain
# descr = compile filter chains

my ( $chain_name, @chain_list ) = @_;
my $warps = scalar(@chain_list);
<[base.log]>->( 1, "compiling chain '$chain_name'" );
my $id = <[base.gen_id]>->( \%data, $data{'system'}{'max'}{'chains'} || 777 );
my $chain_code = 'sub {';
$data{$id}{'name'} = $chain_name;
$data{$id} = join( ".", @chain_list );
my $closure = '}';

foreach my $filter_id ( reverse(@chain_list) ) {
    if ( $filter_id !~ /^\d+$/ ) {
        <[base.log]>->( 0, "invalid filter '$filter_id' specified" );
        <[filter.del_chain]>->($id);
        return undef;
    }
    if ( defined &{ $code{ $data{'filter'}{$filter_id}{'handler'} } } ) {
        $chain_code
            .= "&{\$code{'" . $data{'filter'}{$filter_id}{'handler'} . "'}}(";
        my $options = '';
        if ( length( $data{'filter'}{$filter_id}{'options'} ) ) {
            $options = "," . $data{'filter'}{$filter_id}{'options'};
        }
        $closure = $options . ")" . $closure;
    } else {
        <[base.log]>->( 0, "error in filter $filter_id: handler not defined" );
        <[filter.del_chain]>->($id);
        return undef;
    }
}
$chain_code .= '$_[0]' if length($chain_code) == 5;
$chain_code .= $closure;
<[base.log]>->( 2, "chain[$id]code: '$chain_code'" );
undef $OS_ERROR;
$code{ 'filter.chain.' . $id } = eval($chain_code);
if ( !$EVAL_ERROR ) {
    $data{'code'}{'filter'}{$id}{'status'} = 'no-error';
    return $id;
}
else {
    <[base.log]>->( 0, "broken chain code [$id:$EVAL_ERROR]" );
    <[filter.del_chain]>->($id);
    return undef;
}

# ______________________________________________________________________________
#\\TRWXVE5C5SBVGGDDBM5FJMDKDTOMPU2MQDADWDVBG4MZ625NG7G5YJNJOAR2UCFKJPLR2Q2IKZSOG
# \\ NOOV6TRS6TPFI4QCIEG24VQVPO4WIIURFQUQX2GFXSEPOVKRPIGE \\// C25519-BASE-32 //
#  \\// WNINK6OBOIHAC2U5JUP7N7HDHZL2POEOE3VYXJ37HG4LDTB4KBA \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
