# >:]

# name  = mpv.handler.pipe_output
# descr = reads and processes output from mpv control pipe

my $bytes;
my $event   = shift->w;
my $read_fh = $event->fd;
my $process = $event->data;
my $pid     = $process->{'pid'};

<mpv.pipe.buffer> //= '';
if ( defined $read_fh ) {
    $bytes
        = sysread( $read_fh, <mpv.pipe.buffer>, 16 * 1024,
        length(<mpv.pipe.buffer>) ) // 0; # XXX: needs 'safer' read method (len)
}

if ( not defined $read_fh or $bytes == 0 or not defined <mpv.pipe.buffer> ) {
    $event->cancel;
    close($read_fh);
    my $exit_code = 2;
    my $log_level = 0;
    if ( !<agent.shutdown> ) {
        <[base.log]>->( 0, "mpv control pipe closed unexpectedly!" );
        <[base.log]>->( 1, "killed mpv-process [PID:$pid].." )
            if kill( 9, $pid );
    } else {
        kill( 9, $pid );
        $exit_code = 0;
        $log_level = 1;
    }
    <[base.log]>->(
        $log_level, "shutting down " . <system.agent.name> . "-agent..."
    );
    exit($exit_code);
}

while ( <mpv.pipe.buffer> =~ s|^([^\n]*)\n||s ) {
    my $reply_id;
    my $output_line = $1;
    my $decoded     = <mpv.json.parser>->decode($output_line);

    if (    defined $decoded
        and ref($decoded) eq 'HASH'
        and exists $decoded->{'event'} ) {
        <[mpv.handler.event]>->($decoded);
    }

    if (    exists $decoded->{'error'}
        and $decoded->{'error'} ne 'success'
        and $reply_id = shift @{<mpv.reply_ids>} ) {

        <[base.log]>->(
            0, "[$reply_id] pipe-NACK [" . $decoded->{'error'} . "]"
        );
        <[base.callback.cmd_reply]>->(
            $reply_id,
            {   'mode' => 'nack',
                'data' => 'player child replied "' . $decoded->{'error'} . '"!'
            }
        );
        next;
    } elsif ( exists $decoded->{'error'}
        and exists <mpv.command.reply>
        and ref(<mpv.command.reply>) eq 'ARRAY'
        and @{<mpv.command.reply>} ) {
        my $reply_setup = shift @{<mpv.command.reply>};

        my $command_handler  = $reply_setup->{'handler'}  || '';
        my $command_callback = $reply_setup->{'callback'} || '';

        $code{$command_handler}->( $decoded->{'data'} )
            if $decoded->{'error'} eq 'success'
            and exists $code{$command_handler};

        $code{$command_callback}->( $decoded->{'error'} )
            if exists $code{$command_callback};

        next;
    } elsif ( exists $decoded->{'error'}
        and $decoded->{'error'} eq 'success'
        and exists <mpv.success_reply_str>
        and $reply_id = shift @{<mpv.reply_ids>} ) {

        <[base.log]>->(
            2, "[$reply_id] pipe-ACK [" . <mpv.success_reply_str> . "]"
        );
        <[base.callback.cmd_reply]>->(
            $reply_id, { 'mode' => 'ack', 'data' => <mpv.success_reply_str> }
        );
        delete <mpv.success_reply_str>;
        next;
    }

    # log output [ no reply_id case ]
    my $log_level
        = ( exists $decoded->{'error'} and $decoded->{'error'} ne 'success' )
        ? 0
        : 2;
    $output_line =~ s/[\r\n]+//sg;
    <[base.log]>->( $log_level, "< mpv > " . $output_line );
}
