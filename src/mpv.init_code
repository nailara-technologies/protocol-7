# >:]

# name = mpv.init_code

<[base.perlmod.autoload]>->('JSON::XS');
<[base.perlmod.autoload]>->('IPC::Open3');
<[base.perlmod.load]>->( 'File::Path', qw/make_path/ );

<mpv.json.parser> = JSON::XS->new->pretty(0);

<mpv.bin_path> //= '/usr/bin/mpv';
chomp( <mpv.bin_path> = qx(which mpv) ) if !-f <mpv.bin_path>;

die "[!] mpv binary not found, aborting startup..."
    if not defined <mpv.bin_path> or !length(<mpv.bin_path>);

<[mpv.init_settings_map]>;

<list.settings> = {
    'var'      => 'data',
    'key'      => 'mpv.map.settings',
    'mask'     => '<key>:key_name key:mpv_setting_name',
    'defaults' => { 'key' => '<key>' },
    'align'    => { 'key' => 'center' },
    'descr'    => 'adjustable mpv settings'
};

<mpv.current.volume>    //= 100;
<mpv.start_volume>      //= 100;             # <- ./cfg/agents/mpv
<mpv.fade_in>           //= 0;               # <- video fade (in)
<mpv.fade_idle_volume>  //= 1;               # <- audio zero-vol/fade-in on idle
<mpv.reply_ids>         //= [];
<mpv.pause_next>        //= 0;
<mpv.autorescale>       //= 0;
<mpv.disable_reenc_msg> //= 0;
<mpv.file_map.rescaled> //= {};
<mpv.cfg.xephyr.vo>     //= 'sdl';
<mpv.cfg.xephyr.hwdec>  //= 'auto';
<mpv.fade_start_geom>   //= '1x1--0--0';
<system.agent.mode>     //= 'stand-alone';
<mpv.agent_title>
    = <system.agent.mode> eq 'media-child' ? 'media.mpv' : <system.agent.name>;
<mpv.current.load_iteration> //= 0;
<mpv.cleanup_rescaled_after> //= 0;    # <- 0 [days] means no cleanup (disabled)
<mpv.cleanup_check_delay>    //= 42 + int( rand(237) );       # first file check
<mpv.cleanup_check_interval> //= 3600 + int( rand(7200) );    # 1-3 hrs (repeat)
<mpv.reenc_refresh_interval> //= 3.3;                         # seconds
<mpv.rescaled_extension>     //= 'mp4';
<mpv.current.volume>         //= 100;                         # will be set to 0

<mpv.playlist_type> //= 'video'; # eventually changed to audio ['audio' subname]

if ( <mpv.autorescale> and defined <mpv.rescale_path> ) {
    <[mpv.check_rescale_path]>;
    if ( defined <mpv.rescale_path>
        and <mpv.cleanup_rescaled_after> ) {    # <- 0 == cleanup disabled
        <[base.log]>->( 2, ": rescale path ok [exists]" );
        <mpv.timer.rescaled_check> = <[event.add_timer]>->(
            {   'after'    => <mpv.cleanup_check_delay>,
                'interval' => <mpv.cleanup_check_interval>,
                'handler'  => 'mpv.handler.scan_encoded_timer'
            }
        );
    }
}

0;
