# >:]

# name  = source.extract_sig_body

my $src_ref     = shift;
my $strip       = shift // '';
my $footer_data = {
    'was_present'     => 0,
    'structure_valid' => 0,
    'data-reference'  => $src_ref
};
$strip = $strip eq 'strip' ? 1 : 0;
my $bit_size = <source.chksum_bitsize>;
die "invalid keyword '$strip' for 'strip' parameter" if $strip !~ m,^[0|1]$,;
die "expected source_str scalar reference" if ref($src_ref) ne 'SCALAR';

### extract [ optionally strip ] code signature footer ##########################
my $footer_body;
my $footer_start = '# ';
$footer_start .= '_' x 78;
if ($strip) {
    $footer_body = $1
        if $$src_ref =~ s|\n?\n$footer_start\n((#[^\n]+\n){4})$|\n|sg;
} else {
    $footer_body = $1 if $$src_ref =~ m|$footer_start\n((#[^\n]+\n){4})$|;
}

$footer_data->{'data-chksum'} = <[digest.bmw.strsum]>->( $bit_size, $$src_ref );

return $footer_data if not defined $footer_body;  ## keeping current checksum ##

$footer_data->{'was_present'} = 1;

my $footer_length = 1 + length($footer_start) + length($footer_body);
warn sprintf( "invalid code signature footer length [ %d != %d ]",
    $footer_length, length(<source.sign_template>) )
    and return $footer_data
    if $footer_length != length(<source.sign_template>);

my $sig_checksum;
my $signature_b32;

### comparing footer structure with signature template #########################
my $emptied_footer = join( "\n", $footer_start, $footer_body );
my @subst_params   = ( ( 84, 77 ), ( 167, 52 ), ( 251, 51 ) );
my $line_num       = 0;
while (@subst_params) {
    my $pos = shift @subst_params;
    my $len = shift @subst_params;
    $signature_b32 .= substr( $emptied_footer, $pos, $len, '_' x $len );
    $sig_checksum = $signature_b32 and $signature_b32 = '' if !$line_num++;
}
warn 'invalid signature footer structure [ template mismatch ]'
    and return $footer_data
    if $emptied_footer ne <source.sign_template>;
################################################################################

my @err_loc;
push( @err_loc, 'bmw-chksum' ) if $sig_checksum  !~ m|^[0-9A-Z]+$|;
push( @err_loc, 'c25519-b32' ) if $signature_b32 !~ m|^[0-9A-Z]+$|;

warn sprintf( "invalid characters in signature data [ %s ]",
    join( ' and ', @err_loc ) )
    and return $footer_data
    if @err_loc;

$footer_data->{'structure_valid'} = 1;

$footer_data->{'checksum-type'}  = 'BMW-384-B32'; # only ones implemented so far
$footer_data->{'signature-type'} = 'C25519-B32';  # <-- ########################

$footer_data->{'data-type'} = 'CODE';   # [ other types soon : DATA, NCFG, .., ]

$footer_data->{'signature'}      = $sig_checksum;
$footer_data->{'data-signature'} = $signature_b32;

return $footer_data;
