# >:]

# name = browser.load_uri

return if defined <browser.shutdown> and <browser.shutdown>;

my $load_uri = shift;

if ( not defined $load_uri or !length($load_uri) ) {
    <[base.log]>->( 0, "load_uri: uri parameter required." );
    return;
}

if (<window.scrolling>) {
    <window.scroll.stop>          = 1;
    <browser.slideshow.running>   = 0;
    <browser.load_at_scroll_stop> = $load_uri;
    return;
}

$load_uri = "file://$load_uri" if $load_uri =~ m|^/|;
$load_uri = "http://$load_uri" if $load_uri !~ m|^\w+:|;

##[loading on to bg view]###
my $bg_index = <browser.overlay.index.bg>;
my $bg_view  = <browser.gtk_obj.view>->{$bg_index};
##[progress bar on fg view]###
my $fg_index = <browser.overlay.index.fg>;
my $fg_view  = <browser.gtk_obj.view>->{$fg_index};

my $bg_resource = $bg_view->get_main_resource;
my $fg_resource = $fg_view->get_main_resource;

<browser.current_view> = $bg_view;
<browser.url_flags>    = {};

if ( $load_uri =~ s|#\[([A-Z0-9_\.\|=]+)\]#$|| ) {
    map {
        my ( $flag_name, $flag_param ) = split( m|=|, $_ );
        $flag_param //= 1;
        <browser.url_flags>->{ lc($flag_name) } = $flag_param
    } split( m{\|}, $1 );
}

<browser.slideshow.temp_delay> = <browser.url_flags.delay>
    if defined <browser.url_flags.delay>
    and <browser.url_flags.delay> =~ m|^\d+(\.\d+)?$|;

<[base.log]>->(
    2,
    "(i) slideshow delay is " . <browser.slideshow.temp_delay> . " seconds.,"
) if defined <browser.slideshow.temp_delay>;

<browser.load_uri> = $load_uri;

<[browser.process_url_flags]>;

<[base.log]>->( 2, ":. loading uri '$load_uri'.," );

<browser.time.load_start> = <[base.time]>->(3);

if ( defined <browser.keep_text_zoom_path> ) {
    my $settings     = $bg_view->get_settings;
    my $skip_pattern = qr{^file://<browser.keep_text_zoom_path>};
    if ( $load_uri =~ $skip_pattern ) {
        $settings->set_zoom_text_only(1);
    } else {
        $settings->set_zoom_text_only( <browser.zoom_text_only> ? 1 : 0 );
    }
    $bg_view->set_settings($settings);
}

<[browser.disconnect_signal.received_data]>;

<browser.signal_id.received_data>
    = $fg_resource->signal_connect( 'received-data',
    $code{'browser.handler.progress_changed'} )
    if <browser.cfg.show_progress_bar>
    and defined $fg_resource
    and not defined <browser.signal_id.received_data>;

<browser.signal_id.load_changed> = $bg_view->signal_connect(
    'load-changed' => sub { $code{'browser.handler.load_changed'}->(@_) } );

<browser.signal_id.load_failed> = $bg_view->signal_connect(
    'load-failed' => sub {
        $code{'browser.handler.signal.load_failed'}->(@_) # <-- reloadable code.
    }
);

# <browser.signal_id.load_timeout>
#    = Glib::Timeout->add_seconds( 1, $code{'browser.handler.load_timeout'},
#    undef, 10 );

# store current url in /tmp in case browser engine segfaults
my $url_file     = '/tmp/.nailara.browser.' . $$;
my $file_content = "current_url : $load_uri\nurl_flags   : "
    . join( ', ', sort keys %{<browser.url_flags>} ) . "\n";
<[file.put]>->( $url_file, $file_content ) or warn "$url_file: $!";
#

$bg_view->load_uri($load_uri);

return 0;

# ______________________________________________________________________________
#\\6QRA32VUDI5S57O445JXT5GDCKMEIUJLCJB4C642M7EFXSI5W36YQXEWQNE3AABLVYLJ3VXYOCFT4
# \\ ZVCZVNPRYSHTH346XXNEUZG6T7IY6RWSORN7ZH5CVXHH6QQAUQBR \\// C25519-BASE-32 //
#  \\// DLFRY4TPY4WK5XGCL7QQX2YHCNCS7E4PHAY36LX52UWR7UG2KAY \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
