# >:]
# name = httpd.request_handler
# note : return 2 to close connection!

my $id          = $_[0]->w->data;
my $session     = $data{'session'}{$id};
my $max_uri_len = 1 + ( <httpd.cfg.max_uri_length> || 1024 * 8 );
my $max_req_len = 1 + ( <httpd.cfg.max_request_length> || 1024 * 12 );

if ( $session->{'buffer'}{'input'} =~ /^[^\r\n]{$max_uri_len}/ ) {
    <[base.log]>->( 0, "[$id] maximum URI length ($max_uri_len) exceeded!" );
    $session->{'buffer'}->{'output'} .= <[httpd.error_page]>->( $id, 414 );
    return 2;    # Request-URI Too Long
} elsif ( length( $session->{'buffer'}{'input'} ) >= $max_req_len ) {
    <[base.log]>    # Request Entity Too Large
        ->( 0, "[$id] maximum Request length ($max_req_len) exceeded!" );
    $session->{'buffer'}->{'output'} .= <[httpd.error_page]>->( $id, 413 );
    return 2;       # XXX: fix false positives!
}

$session->{'http'} //= { 'request' => { 'headers' => {} } };
my $request = $session->{'http'}->{'request'};

return 0 if $session->{'buffer'}{'input'} !~ s|^(.+\r?\n\r?\n)||s;

$session->{'http'}->{'request'}->{'raw'} = $1;

my $req = HTTP::Request->parse( $session->{'http'}->{'request'}->{'raw'} );

$req->decode;

my $r_key;
$r_key = 'METHOD' if not defined $req->method;
$r_key = 'URI' if not defined $r_key and not defined $req->uri;
if ( defined $r_key ) {
    <[base.log]>->( 0, "[$id] malfomed request (request $r_key undefined)" );
    $session->{'buffer'}->{'output'} .= <[httpd.error_page]>->( $id, 400 );
    return 2;    # Bad Request
}

$request->{'method'} = $req->method;
$request->{'host'} = lc( $req->header('host') ) if defined $req->header('host');

( $request->{'uri'} = $req->uri ) =~ s|%([0-9a-f]{2})|chr(hex($1))|egi;
$session->{'http'}->{'close'}      = 1;
$session->{'response'}->{'params'} = {};

map { $request->{'headers'}->{ lc($_) } = $req->header($_) }
    $req->header_field_names;

$session->{'http'}->{'close'} = 0
    if defined $request->{'headers'}->{'connection'}
    and lc( $request->{'headers'}->{'connection'} ) eq 'keep-alive';

if ( exists <http.handler>->{ lc( $request->{'method'} ) } ) {
    my $handler_name = <http.handler>->{ lc( $request->{'method'} ) };
    if ( exists $code{$handler_name} ) {
        return $code{$handler_name}->($id);
    } else {
        <[base.log]>->(
            0,
            "[$id] http [$request->{method}] handler defined,"
                . " but callback missing!"
        );
        $session->{'buffer'}->{'output'} .= <[httpd.error_page]>->( $id, 500 );
        return 2;    # Internal Server Error
    }

} else {
    <[base.log]>->( 0, "[$id] http handler not defined [$request->{method}]" );
    $session->{'buffer'}->{'output'} .= <[httpd.error_page]>->( $id, 405 );
    return 2;        # Method Not Allowed
}

return 2;
