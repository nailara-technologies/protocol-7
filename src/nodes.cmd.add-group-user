# >:]

# name  = nodes.cmd.add-group-user
# descr = add a group user to associate accounts with
# param = <grp-name> [regex]

my $groups = <nodes.group.names> //= {};
my $gregex = <nodes.group.regex> //= {};
my $by_id  = <nodes.group.by-id> //= {};

( my $grp_name, my $regex_str ) = split( / +/, $$call{'args'} // '', 2 );

$regex_str //= "^$grp_name-";

return { 'mode' => 'nak', 'data' => 'group name required' }
    if not defined $grp_name;
return { 'mode' => 'nak', 'data' => 'group account already exists' }
    if exists $groups->{$grp_name};
return {
    'mode' => 'nak',
    'data' => sprintf( "regex already in use ['%s']", $gregex->{$regex_str} )
    }
    if exists $gregex->{$regex_str};

my $regex_qr;
eval { $regex_qr = qr|^$regex_str| };

return { 'mode' => 'nak', 'data' => "regex invalid [ $@ ]" }
    if $@ and $@ =~ s| at .+$||;

my $grp_id = <[base.list.element.add]>->(
    {   'key_ref' => \$data{'nodes'}{'group'}{'by-id'},
        'val_ref' => \{
            'name'  => $grp_name,
            'regex' => $regex_str,
        }
    }
);

return { 'mode' => 'nak', 'data' => "no success adding group user `>:|" }
    if not defined $grp_id;

$groups->{$grp_name}  = $grp_id;
$gregex->{$regex_str} = $grp_name;

return {
    'mode' => 'ack',
    'data' => "'$grp_name' group added, matches m'$regex_str'"
        . " [ grp-id : $grp_id ]"
    }

# ______________________________________________________________________________
#\\MY26UMZVJ6I2AZDA25QOE5KTETICRX6UXCVG5OAXFX5CR55DQI5RVFPIG36KB3JK74AGI5RZFWJFM
# \\ 6NGWBLPNSGDRRVA4PNEB7JQYLZVNLVUHK46WPBOBG53EDGUWW74G \\// C25519-BASE-32 //
#  \\// M6KED72L77Z452ZP74GTJFXNIEFO2LYUEK66BTBJ2PZLS4WXWBY \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
