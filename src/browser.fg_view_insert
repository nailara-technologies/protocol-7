# >:]

# name  = browser.fg_view_insert
# descr = insert page on foreground view

return if defined <browser.shutdown> and <browser.shutdown>;

my $load_uri = shift;

die 'uri parameter expected.' if not defined $load_uri or !length($load_uri);

<window.scroll.stop> = 1 if <window.scrolling>;

$load_uri = "file://$load_uri" if $load_uri =~ m|^/|;
$load_uri = "http://$load_uri" if $load_uri !~ m|^\w+:|;

my $fg_index = <browser.overlay.index.fg>;
my $view     = <browser.gtk_obj.view>->{$fg_index};

<browser.current_view> = $view;
<browser.url_flags>    = {};

if ( $load_uri =~ s|#\[([\w+\_\|]+)\]#$|| ) {
    map { <browser.url_flags>->{ lc($ARG) } = 1 } split( m{\|}, $1 );
}

<[browser.process_url_flags]>;

<[base.log]>->( 2, "loading uri '$load_uri' to front view.." );

if ( not <browser.zoom_text_only> and defined <browser.keep_text_zoom_path> ) {
    my $keep_pattern = qr{^file://<browser.keep_text_zoom_path>};
    my $settings     = $view->get_settings;
    if ( $load_uri =~ $keep_pattern ) {
        $settings->set_zoom_text_only(1);
    } else {
        $settings->set_zoom_text_only( <browser.zoom_text_only> ? 1 : 0 );
    }
    $view->set_settings($settings);
}

# store current url in /tmp in case browser engine segfaults
my $url_file     = '/tmp/.nailara.browser.' . $$;
my $file_content = "current_url : $load_uri\nurl_flags   : "
    . join( ', ', sort keys %{<browser.url_flags>} ) . "\n";
<[file.put]>->( $url_file, $file_content ) or warn "$url_file: $OS_ERROR";

$view->load_uri($load_uri);

# ______________________________________________________________________________
#\\RBPEOK6VEWLLKMLGAD4ZJW7ADIQSS7NYWBWF7FVXTLRPNBOUZ6EOOVRF2ICV5MF256N5MP4EHUO7Q
# \\ 4IKEPRFBD6NPACBH2HH4R2ILKC7C5KX4CWDD7R7FU2FAXYG7NVOK \\// C25519-BASE-32 //
#  \\// O45RFTNXUUJCH5ETHRCT6F3YUIPW4JYGIEZBGHWXZF3SDIJQ4CI \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
