# >:]

# name  = browser.fg_view_insert
# descr = insert page on foreground view

return if defined <browser.shutdown> and <browser.shutdown>;

my $load_uri = shift;

die 'uri parameter expected!' if not defined $load_uri or !length($load_uri);

<window.scroll.stop> = 1 if <window.scrolling>;

$load_uri = "file://$load_uri" if $load_uri =~ m|^/|;
$load_uri = "http://$load_uri" if $load_uri !~ m|^\w+:|;

my $fg_index = <browser.overlay.index.fg>;
my $view     = <browser.gtk_obj.view>->{$fg_index};

<browser.current_view> = $view;
<browser.url_flags>    = {};

if ( $load_uri =~ s|#\[([\w+\_\|]+)\]#$|| ) {
    map { <browser.url_flags>->{ lc($_) } = 1 } split( /\|/, $1 );
}

<[browser.process_url_flags]>;

<[base.log]>->( 2, "loading uri '$load_uri' to front view.." );

if ( not <browser.zoom_text_only> and defined <browser.skip_content_zoom_path> )
{
    my $skip_pattern = qr{^file://<browser.skip_content_zoom_path>};
    if ( $load_uri =~ $skip_pattern ) {

        # $view->set_full_content_zoom(0);

    } else {

        # $view->set_full_content_zoom(1);

    }
}

# store current url in /tmp in case browser engine segfaults
my $url_file     = '/tmp/.nailara.browser.' . $$;
my $file_content = "current_url : $load_uri\nurl_flags   : "
    . join( ', ', sort keys %{<browser.url_flags>} ) . "\n";
<[file.put]>->( $url_file, $file_content ) or warn "$url_file: $!";

$view->load_uri($load_uri);

# ______________________________________________________________________________
#\\WVIACB4MVDAXFL6IV4S7SS53XOHILFWQASWEKVUJOTI7CIRCP3ELKPSQBCPZJAF3JTSRGXDZRSMXK
# \\ FUM7GJF5PLMKIEK5GHBDRBZME3EXRQ5GWX7M3O7LBRLKJXD7O25M \\// C25519-BASE-32 //
#  \\// MFX5FTVBCHFGAF37H5YZRLZLTA2B2AW7CLRMAMQN2QQ46SJEQAA \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
