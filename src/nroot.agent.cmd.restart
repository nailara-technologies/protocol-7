# >:]

# name  = nroot.agent.cmd.restart
# param = <agent-name|instance>
# descr = restart one or more agent instances

my $params = $$call{'args'} // '';
return { 'mode' => 'nak', 'data' => 'expected agent name or instance id' }
    if !length($params);

my $restart_mode;
my @instance_ids;
my $unknown_name;
my $not_found   = 0;
my $setup_found = 0;
foreach my $param_str ( split m| +|, $params ) {
    if ( $param_str =~ m|^\d+$| ) {    ## <-- [ instance-id ]
        return {
            'mode' => 'nak',
            'data' => "unknown agent instance '$param_str'"
                . " [ see 'list agents' ]"
            }
            if not exists <nroot.agent.instance>->{$param_str};
        push( @instance_ids, $param_str );
    } else {                           # agent name [ LLL: validate syntax., ]
        my $agent_subname;
        $agent_subname = $1 if $param_str =~ s|\[([^\]]+)\]$||;
        my $agent_id = <[agent.get_id]>->($param_str);
        if ( defined $agent_id ) { $setup_found++ }
        else { $not_found++; $unknown_name //= $param_str; next }
        map {
            push( @instance_ids, $_ )
                if <nroot.agent.instance>->{$_}->{'agent_id'} == $agent_id
                and ( not defined $agent_subname
                or defined <nroot.agent.instance>->{$_}->{'subname'}
                and $agent_subname eq <nroot.agent.instance>->{$_}->{'subname'}
                )
        } keys %{<nroot.agent.instance>};
    }
}

map {
    my $agent_id           = <nroot.agent.instance>->{$_}->{'agent_id'};
    my $agent_name         = <nroot.agent.setup>->{$agent_id}->{'name'};
    my $agent_dependencies = <[agent.get_dependencies]>->($agent_name);
    goto skip_dependencies if not defined $agent_dependencies;
    foreach my $dep_name ( split( m| +|, $agent_dependencies ) ) {

        delete <nroot.agent.manually_stopped>->{$dep_name}
            and <[base.log]>->(
            0, "[restart] cleared manually stopped status ['$dep_name']"
            ) if exists <nroot.agent.manually_stopped>->{$dep_name};
        #
        #     ^-- forced dependency startup, or....,
        next if exists <nroot.agent.manually_stopped>->{$dep_name}; # skipped ##

        if ( !<[agent.is_enabled]>->($dep_name) ) {
            <[base.log]>->( 1, "agent enabled by dependency ['$dep_name']" );
            <[agent.cmd.start_once]>
                ->( { 'args' => $dep_name, 'mode' => 'implicit' } );
        }
        <nroot.agent.dependency>->{$dep_name}->{$agent_name} = 1
            if not exists <nroot.agent.autostart>->{$dep_name};
    }
skip_dependencies:
} @instance_ids;

map { <[agent.instance.restart]>->($_) } @instance_ids;

my $count   = scalar @instance_ids;
my $s       = $count > 1 ? 's' : '';
my $msg_str = "restarting of $count agent instance$s initiated.,";

return {
    'mode' => 'nak',
    'data' => "no agent '$unknown_name' found in setup [ see 'list agents' ]"
    }
    if !$setup_found and $not_found;

if ($count) {
    return { 'mode' => 'ack', 'data' => $msg_str };
} else {
    return {
        'mode' => 'nak',
        'data' => 'there is no matching agent running'
    };
}

# ______________________________________________________________________________
#\\FTOTFJ6GKOAT3G4IEGJUN7IPBUNMZSEWRELCAYWVF33NV7UWQKBJDGB6FL6YFSRL65LOHTSYSGIU6
# \\ BPJ4BCC6HXSTOT72WSNMKNJYMSFDDRDHRTQEY2P5JNUOUSOVTZEJ \\// C25519-BASE-32 //
#  \\// 6TGYNFKKFBMNXA3DLKRTRITSSLXE7NYHLBIKQUVYYL3O6BWKOBA \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
