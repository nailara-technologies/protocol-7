# >:]

# name = browser.handler.fade_in_view

my $fg_index = <browser.overlay.index.fg>;
my $bg_index = <browser.overlay.index.bg>;
my $view     = <browser.gtk_obj.view>->{$bg_index};
my $delta_t  = sprintf( "%.3f", <[base.time]>->(3) - <browser.time.fade_view> );
my $opacity  = <browser.fg_opacity>;

if ( !<browser.cfg.use_transparency> ) {
    <browser.fg_opacity> = 1;
} else {
    <browser.fg_opacity> += incr($delta_t);
}

if ( <browser.fg_opacity> >= 1 ) {    # fade in complete
    <browser.fg_opacity>       = 1;
    <browser.status.fade_view> = 0;

    <[browser.clear_bg_view]>;
    delete <browser.time.fade_view>;
    while ( my $reply_id = shift @{<browser.fade.reply_ids>} ) {
        <[base.callback.cmd_reply]>->(
            $reply_id,
            {   'mode' => <browser.fade.reply_mode>,
                'data' => <browser.fade.reply_msg>
            }
        );
        if ( !@{<browser.fade.reply_ids>} ) {
            delete <browser.fade.reply_mode>;
            delete <browser.fade.reply_msg>;
        }
    }

    <[base.log]>->( 2, "[#$fg_index] fade-in completed." );

    <browser.time.fade_complete> = <[base.time]>->(3);

    <[browser.callback.load_finished]>;
}

<browser.gtk_obj.scrolled_window>
    ->{$fg_index}->set_opacity(<browser.fg_opacity>);

sub incr {
    my $dt   = shift;
    my $dt_2 = $dt - 4;
    $dt_2 = 0 if $dt_2 > 0;
    my $t_inc    = $dt - 2;
    my $increase = ( 1.1 - <browser.fg_opacity> ) * 0.22 * gauss($t_inc);
    $increase += ( ( 1.1 - <browser.fg_opacity> ) * gauss($dt_2) ) / 4;
    return sprintf( "%.5f", $increase );
}

sub gauss {    # Gaussian probability density function
    my $x   = shift;
    my $m   = 0;
    my $s   = 1;
    my $tau = 6.283185307179586;
    return exp( -0.5 * ( ( $x - $m ) / $s )**2 ) / sqrt( $tau * $s**2 );
}
