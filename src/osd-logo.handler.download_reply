# >:]

# name = osd-logo.handler.download_reply

my $params   = shift // {};
my $new_path = $params->{'call_args'}->{'args'};
my $warn_img = <system.root_path> . '/data/gfx/patterns/warning.svg';

if ( $params->{'cmd'} eq 'NAK' or !-f $new_path ) {
    my $reason = $params->{'cmd'} eq 'ACK' ? 'file not found' : $new_path;
    <[base.log]>->( 0, "unable to obtain valid logo image path [ $reason ]" );
}

<osd-logo.logo_path> = $new_path;
<[base.log]>->( 1, ":. $new_path .:" );

if ( defined <osd-logo.cfg.bg_alpha> ) {
    my $mode = <osd-logo.cfg.bg_alpha>;
    <[base.log]>->( 1, "<color_to_alpha> [$mode] $new_path ..," );

    <[base.protocol-7.command.send.local]>->(
        {   'command'   => 'core.colortoalpha.filter',
            'call_args' => { 'args' => join( ' ', $mode, $new_path ) },
            'reply' => { 'handler' => 'osd-logo.handler.colortoalpha_reply' }
        }
    );

} else {
    <[base.log]>->( 2, ":  : .. skipping color-to-alpha processing .," );

    <[osd-logo.open_window]>;

}

# ______________________________________________________________________________
#\\A73E2NAZETMVL734765EMTJ2B6ZQ7PWGECCCWTB6BMECHKZN3FV3PSMUY23J3RMF2U623IILOFT3G
# \\ IF76T3UHUYZ5NTTWUFQELVWSLH6EOKMRIRIL66GNHOSI5X43VOFH \\// C25519-BASE-32 //
#  \\// 27IXPU2SD47DNYU4LGJOPAL73ZGMD2Z7M26CXXYHMYLIOHOHADQ \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
