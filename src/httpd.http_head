# >:]

# name = httpd.http_head

my $id        = shift;
my $session   = $data{'session'}{$id};
my $req_host  = $session->{'http'}{'request'}{'host'};
my $http_host = <[httpd.determine_host]>->($id);

return <[httpd.error_page]>->( $id, 400 ) if not defined $http_host;  # bad req.

my $http_uri    = $session->{'http'}{'request'}{'uri'};
my $link_target = <httpd.cfg.hostnames>->{$http_host}
    if exists <httpd.cfg.hostnames>->{$http_host};

if (    $link_target =~ /^\d{3}$/
    and -l <httpd.site_dir> . '/' . $http_host
    and !-e <httpd.site_dir> . '/' . $link_target ) {    # special codes

    $session->{'watcher'}->{'input_handler'}->cancel;
    if ( $link_target ne '000' ) {    # n > 000 == HTTP error codes
        <[base.log]>->(
            1, "[$id] status '$link_target' for requested host '$req_host'"
        );
        $session->{'buffer'}->{'output'}
            .= <[httpd.error_page]>->( $id, $link_target );
        $session->{'flush_close'} = 1;
    } else {
        <[base.log]>->( 1, "[$id] (000) dropping host request '$req_host'" );
        $session->{'close'} = 1;
    }
    return 2;
}

my $file_path;

# ...

if ( defined $http_host and defined $link_target ) {
    <[base.log]>->(
        1,
        sprintf( "[$id] matched Host '%s' -> '$http_host'",
            $session->{'http'}{'request'}{'host'} )
    ) if $http_host ne $session->{'http'}{'request'}{'host'};

    my $base_dir = <httpd.cfg.hostnames>->{$http_host};
    $file_path = "$base_dir$http_uri";
    $file_path =~ s|/$||;
    if ( -d $file_path ) {    # XXX: support !html index
        $file_path .= '/index.html' if -f $file_path . '/index.html';
    }
    if ( -f $file_path ) {
        my @stat         = stat($file_path);
        my $content_size = $stat[7];
        my $content_date = time2str( $stat[9] );
        my $server_date  = time2str(time);

        my $content_type;
        if ( $file_path =~ /\.htm(l)?$/ ) {
            $content_type = 'text/html';
        } else {
            $content_type = mimetype($file_path);
        }

        $session->{'buffer'}->{'output'} .= <[httpd.new_header]>->(    # OK
            200,
            {   'Content-Type'   => $content_type,
                'Last-Modified'  => $content_date,
                'Content-Length' => $content_size,
                'Connection'     => $session->{'http'}->{'close'}
                ? 'close'
                : 'keep-alive',
                'Accept-Ranges' => 'bytes'
            }
        );

        return $session->{'http'}->{'close'} ? 2 : 0;
    }
} else {
    return <[httpd.error_page]>->( $id, 400 );    # Bad Request
}

return <[httpd.error_page]>->( $id, 404 )         # Not Found
    if not defined $file_path or !-f $file_path;
