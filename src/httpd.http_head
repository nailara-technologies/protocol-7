# >:]

# name = httpd.http_head

my $id         = shift;
my $reply_code = shift // 200;    # [204|200]

my $session   = $data{'session'}{$id};
my $request   = $session->{'http'}->{'request'};
my $response  = $session->{'response'};
my $headers   = $request->{'headers'};
my $req_host  = $session->{'http'}{'request'}{'host'};
my $http_host = <[httpd.determine_host]>->($id);

if ( not defined $http_host ) {    ##   bad request
    map { delete $response->{'params'}->{$ARG} } qw | Allow |;  # <-- expand ..,
    return <[httpd.send_error_page]>->( $id, 400 );
}

my $http_uri    = $session->{'http'}{'request'}{'uri'};
my $link_target = <httpd.cfg.hostnames>->{$http_host}
    if exists <httpd.cfg.hostnames>->{$http_host};

if (    $link_target =~ /^\d{3}$/
    and -l <httpd.site_dir> . '/' . $http_host
    and !-e <httpd.site_dir> . '/' . $link_target ) {    ## special codes ###

    $session->{'watcher'}->{'input_handler'}->cancel;
    if ( $link_target ne '000' ) {    # n > 000 == HTTP error codes
        <[base.log]>->(
            1, "[$id] status '$link_target' for requested host '$req_host'"
        );
        $session->{'buffer'}->{'output'}
            .= <[httpd.send_error_page]>->( $id, $link_target );
        $session->{'flush_shutdown'} = 1;
    } else {
        <[base.log]>->( 1, "[$id] <000> dropping host request '$req_host'" );
        $session->{'close'} = 1;
    }
    return 2;
}

my $file_path;

if ( defined $http_host and defined $link_target ) {
    <[base.log]>->(
        1,
        sprintf( "[$id] matched Host: '%s' -> '$http_host'",
            $session->{'http'}{'request'}{'host'} )
    ) if $http_host ne $session->{'http'}{'request'}{'host'};

    my $base_dir = <httpd.cfg.hostnames>->{$http_host};
    $file_path = "$base_dir$http_uri";
    $file_path =~ s|/$||;
    if ( -d $file_path ) {    # LLL: support !html index
        $file_path .= '/index.html' if -f $file_path . '/index.html';
    }

    if ( -f $file_path ) {

        ## 204 ## [ OPTIONS, .., ] ##

        if ( $reply_code == 204 ) {

            my $method = $request->{'method'};

            <[base.log]>->( 1, "[$method] returning 204 \\ no content" );

            $session->{'buffer'}->{'output'} .= <[httpd.new_header]>->(
                $reply_code,
                {     'Connection' => $session->{'http'}->{'close'}
                    ? 'close'
                    : 'keep-alive',
                    %{ $response->{'params'} }
                }
            );

            return $session->{'http'}->{'close'} ? 2 : 0;

        }

        ## 200 ## [ HEAD ] ##

        $file_path = readlink($file_path) if -l $file_path and -f $file_path; ##

        my $file_stat     = File::stat::stat($file_path);
        my $content_inode = $file_stat->ino;
        my $content_size  = $file_stat->size;
        my $content_date  = time2str( $file_stat->mtime );
        my $server_date   = time2str(time);

        my $path_etag = <[digest.elf.b32]>
            ->("$content_inode.$content_size.$content_date.$file_path");
        $response->{'params'}->{'ETag'} = $path_etag;

        ## caching meta data ..,
        my $meta = <http.meta_cache> //= {};

        foreach my $check_etag ( keys %{$meta} ) { # use timer once too many ..,
            delete $meta->{$check_etag}
                if <[base.time]>->(4) - $meta->{$check_etag}->{'cached_since'}
                > 777;
        }

        $meta->{$path_etag} //= {
            'cached_since' => <[base.time]>->(4),
            'content_type' => mimetype($file_path)
        };

        my $content_type = $meta->{$path_etag}->{'content_type'};

        if ( defined $request->{'headers'}->{'if-none-match'}
            and $request->{'headers'}->{'if-none-match'} eq
            $response->{'params'}->{'ETag'} ) {
            <[base.log]>->( 1, "[if-none-match] returning 304 [$path_etag]" );
            $reply_code = 304;    # Not Modified

        } elsif ( defined $request->{'headers'}->{'if-modified-since'}
            and $request->{'headers'}->{'if-modified-since'} eq $content_date )
        {
            <[base.log]>->(
                1, "[if-modified-since] returning 304 [$path_etag]"
            );
            $reply_code = 304;    # Not Modified
        }
        $session->{'buffer'}->{'output'} .= <[httpd.new_header]>->(
            $reply_code,
            {   'Content-Type'   => $content_type,
                'Last-Modified'  => $content_date,
                'Content-Length' => $content_size,
                'Connection'     => $session->{'http'}->{'close'}
                ? 'close'
                : 'keep-alive',
                'Accept-Ranges' => 'bytes',
                %{ $response->{'params'} }
            }
        );

        return $session->{'http'}->{'close'} ? 2 : 0;
    }
} else {
    return <[httpd.send_error_page]>->( $id, 400 );    # Bad Request
}

return <[httpd.send_error_page]>->( $id, 404 )         # Not Found
    if not defined $file_path or !-f $file_path;

# ______________________________________________________________________________
#\\BWHKYBTLQW7ZNIOXVAE5AT6NZQFXZNYYELRFW7HIIP4QT4CKU5KFXSJCEI72Z44Q27TC4RH4745DG
# \\ OV4WOKUBPQ2KB3TFK27FXT7B6D7AYKHBD5UA5GBSPEO4BKZKE6ML \\// C25519-BASE-32 //
#  \\// AX3TQDXYIFALQUHVGO2TZ36Z4JLH5SNOZ7P5GLSOQUUT6HH4CAA \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
