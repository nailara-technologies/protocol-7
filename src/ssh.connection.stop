# >:]

# name = ssh.connection.stop

my $con_id = shift // '';

return <[base.log]>->( 0, "there is no active connection with id '$con_id'" )
    if not exists <ssh.connections>->{$con_id};
my $connection   = <ssh.connections>->{$con_id};
my $profile_name = $connection->{'profile'};
my $link_name    = $connection->{'name'};

<[base.log]>->( 1, ": terminating connection '$link_name' [$con_id] .." )
    if <ssh.status.connections>->{$con_id} eq 'online';

foreach my $type ( keys %{ $connection->{'io'} } ) {
    $connection->{'io'}->{$type}->cancel;
}
if ( defined $connection->{'local_fh'}
    and $connection->{'local_fh'}->connected ) {
    print { $connection->{'local_fh'} } "exit\n";
    $connection->{'local_fh'}->shutdown('NOW');
}
$connection->{'nch'}->close      if defined $connection->{'nch'};
$connection->{'obj'}->disconnect if defined $connection->{'obj'};

if ( defined $connection->{'sock'} and $connection->{'sock'}->connected ) {
    print { $connection->{'sock'} } "exit\n";
    $connection->{'sock'}->shutdown('NOW');
}

map {
    $connection->{'timer'}->{$_}->cancel;
    delete $connection->{'timer'}->{$_};
    }
    keys %{ $connection->{'timer'} }
    if exists $connection->{'timer'};

if ( exists <ssh.heartbeat_request>->{$con_id} ) {
    map { delete <ssh.heartbeat_request>->{$con_id}->{$_} }
        keys %{ <ssh.heartbeat_request>->{$con_id} };
    delete <ssh.heartbeat_request>->{$con_id}
        if !keys %{ <ssh.heartbeat_request>->{$con_id} };
    delete <ssh.heartbeat_request> if !keys %{<ssh.heartbeat_request>};
}

if (    <ssh.cfg.globals>->{'connections.reconnect'}
    and <ssh.status.profiles>->{$profile_name} eq 'enabled' ) {

    <ssh.status.connections>->{$con_id} = 'offline';
    $connection->{'retry_delay'} *= 2 if exists $connection->{'retry_delay'};
    $connection->{'retry_delay'} //= 0.5;    # LLL: -> config!
    $connection->{'retry_delay'} = 30 if $connection->{'retry_delay'} > 30;

    <[base.log]>->(
        1, ": : reconnection attempt in $connection->{retry_delay} seconds ..."
    );

    $connection->{'timer'}->{'reconnect'} = <[event.add_timer]>->(
        {   'after'   => $connection->{'retry_delay'},
            'handler' => 'ssh.handler.connection_retry',
            'data'    => $con_id
        }
    );

} else {
    undef $connection;
    delete <ssh.connections>->{$con_id};
    delete <ssh.status.connections>->{$con_id};
}

# ______________________________________________________________________________
#\\LNU7IDB2AEPHTHTBCQF566ELTG4UPX2II4NOU4PBKDEDWYNVQ5C7NHJLEDLJY73AIFHBLUO3H7IIC
# \\ ZNBSRP5B5VCX2E4STMYFNXPWPSZRDXI5NFA2XD7D5UPA5JVCPXKP \\// C25519-BASE-32 //
#  \\// 6HKWKDZGW4JNP7YAJY6CUJFMIEPPI7UYTQSP2DQHXUZMHVRM4CI \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
