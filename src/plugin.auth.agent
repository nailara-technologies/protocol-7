# >:]

# name  = plugin.auth.agent
# descr = perform 'agent' auth. initiated / enabled by root agent

my $id     = $_[0]->w->data;
my $re     = <regex.base>;
my $input  = \$data{'session'}{$id}{'buffer'}{'input'};
my $output = \$data{'session'}{$id}{'buffer'}{'output'};

if (   not %KEYS
    or not exists $KEYS{'auth'}
    or not exists $KEYS{'auth'}{'agent'}
    or ref( $KEYS{'auth'}{'agent'} ) ne 'HASH'
    or !keys( %{ $KEYS{'auth'}{'agent'} } ) ) {
    <[base.log]>->( 0, "[$id] no agent auth. keys set up - access denied" );
    $$output .= "FAIL >:|\n";    # LLL: move down?
    return 2;
}

if ( $$input =~ s/^($re->{usr}|$re->{usr_sub}) (\S+)\n// ) {
    my ( $usr, $key_hash ) = ( my $auth_name = $1, blake2b_384_b64($2) );

    my $subname = $usr =~ s|\[($re->{subname})\]$|| ? $1 : '';

    if ( exists $KEYS{'auth'}{'agent'}->{$usr} ) {

        if ( $key_hash eq $KEYS{'auth'}{'agent'}{$usr} ) {

            if ( length($subname) ) {
                $data{'session'}{$id}{'subname'} = $subname;
                $data{'user'}{$usr}{'subname'}{$subname}++;
            }

            delete $KEYS{'auth'}{'agent'}{$usr};
            $$output .= "YEAH >:P\n";

            #            <[net.update.client_conf]>->($id);

            <[base.log]>->(
                1, "[$id] auth ok, access granted < agent '$auth_name' >"
            );
            return ( 0, $usr );
        }
    } else {
        <[base.log]>
            ->( 0, "[$id] [agent] access denied to agent '$auth_name'" );
        $$output .= "FAIL >:|\n";
        return 1;
    }
} else {
    <[base.log]>->( 0, "[$id] (agent) auth. protocol error!" );
    $$output .= ">:[\n";
    return 1;
}
