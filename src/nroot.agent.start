# >:]

# name = nroot.agent.start
# descr = start nailara agent and add it to process maintenance table

my $job_id     = $_[0]->{'job_id'};
my $agent_name = $_[0]->{'params'};
my $stdin_mode = 0;
my @exec_args  = qw| -nb |;
my $agent_subname;
$agent_subname = $1 if $agent_name =~ s|\[([^\]]+)\]$||;

my $perl_bin            = <system.path.perl_bin>;
my $bin_protocol_7_path = <system.start.exec_name>;

die 'no agent name supplied' if not defined $agent_name;
my $globals   = <nroot.start_setup.globals> // {};
my $init_code = <nroot.start_setup.agents.startup.init_code>->{$agent_name};
my $instances = <nroot.agent.instance>;
my $agent_id  = <[agent.get_id]>->($agent_name);

# reuse instance id or create new one if none exists
my $instance_id = <jobqueue.joblist.by_id>->{$job_id}->{'instance_id'};
$instance_id //= <[agent.instance.add]>->($agent_id);

my $instance = $instances->{$instance_id};

<jobqueue.joblist.by_id>->{$job_id}->{'instance_id'} //= $instance_id;
$instance->{'job_id'} = $job_id;

my $starting = 0;    # check status of agents with same name ..,
map { $starting++ if $instances->{$ARG}->{'status'} eq 'starting' }
    @{ <[agent.instance.get_ids]>->($agent_id) };

if ($starting) {    # delay agent startup until previous one is online ..,
    <[base.log]>->( 1, "delaying next '$agent_name' agent instance ..," );
    <[agent.change_status]>->( $instance_id, 'delayed' );
    return;
}

# initialize agent instance startup ..,
<[agent.change_status]>->( $instance_id, 'starting' );

### [ startup timeout ]
my $startup_timeout = <nroot.start_setup.agents.startup.timeout>->{$agent_name}
    // $globals->{'startup'}->{'timeout'} // 47;
<[base.log]>->(
    2,
    sprintf(
        "instance %d ['%s'] start timeout = %.1fs",
        $instance_id, $agent_name, $startup_timeout
    )
);
if ( defined $instance->{'timer'}->{'startup-timeout'} ) {
    $instance->{'timer'}->{'startup-timeout'}->cancel
        if $instance->{'timer'}->{'startup-timeout'}->is_active();
}
$instance->{'timer'}->{'startup-timeout'} = <[event.add_timer]>->(
    {   'after'   => $startup_timeout,
        'handler' => 'nroot.handler.startup-timeout',
        'data'    =>
            { 'instance_id' => $instance_id, 'timeout' => $startup_timeout }
    }
);
###

# execute nroot-init code
my $init_result_data = {};
my $namespace_str
    = "\$data{'nroot'}{'agent'}{'instance'}{$instance_id}{'init_data'}";
if ( exists $init_code->{'nroot-init'} ) {
    <[base.log]>->(
        2, "executing start init-code for instance $instance_id [$agent_name]"
    );
    my @root_init_code = <[base.parser.config]>
        ->( $init_code->{'nroot-init'}, $namespace_str );
    map {
        $ARG =~ s|<instance_id>|$instance_id|g;
        $ARG =~ s|<agent_name>|$agent_name|g
    } @root_init_code;
    my $success = <[base.execute_agent_code]>->(@root_init_code);
    $init_result_data = $instance->{'init_data'};

    if ( !$success ) {
        <[base.log]>->(
            0, "errors in agent '$agent_name' init-code, aborting start << ! >>"
        );
        <[agent.change_status]>->( $instance_id, 'error' );
        return undef;
    }
}

my $agent_sn_str
    = defined $agent_subname ? "$agent_name\[$agent_subname]" : $agent_name;

my ( $pid, $out_fh, $in_fh );

$instance->{'external'} = 0;

if ( exists $init_result_data->{'start_mode'}
    and $init_result_data->{'start_mode'} eq 'exec-external' ) {

    $instance->{'external'} = 1;

    my $exec_bin = $init_result_data->{'exec_bin'};
    my $prog_usr = $init_result_data->{'exec_usr'};

    if ( defined $prog_usr and $prog_usr eq '<x11-user>' ) {
        if ( defined <x11.user> ) {
            $prog_usr = <x11.user>;
        } else {
            <[base.log]>->(
                0,
                "exec_usr for '$agent_name' [\<x11.user>] is "
                    . "not defined - ERROR"
            );
            <[agent.change_status]>->( $instance_id, 'error' );
            return undef;
        }
    }

    ## local ./bin/ path ## [ no /-es in exec_bin param ]
    map {
        $exec_bin = <system.root_path> . $ARG . $exec_bin
            if $exec_bin !~ m|/| and -x <system.root_path> . $ARG . $exec_bin;
    } qw| /bin/ /bin/dependencies/ |;

    if ( not defined $exec_bin or not defined $prog_usr ) {
        my $reason = "expected program name [exec_bin] in '$agent_name' setup";
        $reason = "expected 'exec_usr' for '$agent_name' to be defined"
            if defined $exec_bin and not defined $prog_usr;
        <[base.log]>->( 0, "$reason - ABORTED.," );
        <[agent.change_status]>->( $instance_id, 'error' );
        <[agent.cmd.stop]>
            ->( { 'args' => $instance_id, 'mode' => 'implicit' } );
        return undef;
    } elsif ( $exec_bin =~ m|\s| or !-x $exec_bin ) {
        <[base.log]>->(
            0,
            "'$agent_name' exec_bin '$exec_bin' not a valid executable - ERROR"
        );
        <[agent.change_status]>->( $instance_id, 'error' );
        return undef;
    } else {
        my $privs = <[base.set_privs]>->( $prog_usr, 'noop' );
        if ( not defined $privs or ref($privs) ne 'HASH' ) {
            <[base.log]>
                ->( 0, "exec_usr for '$agent_name' is invalid - ERROR" );
            <[agent.change_status]>->( $instance_id, 'error' );
            return undef;
        }
        map { $privs->{$ARG} =~ s|'||g } keys %{$privs};  # LLL: abort on match?

        # LLL: implement exec_args..,
        my $prepare_code = '%ENV=(); ';
        my $display      = <x11.display>;
        $prepare_code .= "\$ENV{'DISPLAY'}='$display'; "
            if defined $display;
        $prepare_code
            .= "\$)='$privs->{all_gids}'; \$GID='$privs->{gid}'; "
            . "\$EUID='$privs->{uid}'; \$UID='$privs->{uid}'; "
            . "\$ENV{'USER'}='$prog_usr'; "
            . "\$ENV{'HOME'}='$privs->{home}'; "
            . "\$ENV{'XDG_RUNTIME_DIR'}='$privs->{home}'; "
            . "\$ENV{'NO_AT_BRIDGE'}=1; "
            . "chdir('$privs->{home}'); ";
        <[base.log]>->(
            1, "starting external '$agent_sn_str' program as '$prog_usr' ..,"
        );
        eval {
            $pid
                = open2( $out_fh, $in_fh, '/usr/bin/perl', '-e',
                "$prepare_code exec \"$exec_bin\"" );
        };
        goto exec_skip;
    }
}

$stdin_mode = 1 && push( @exec_args, '-stdin' )
    if exists $init_result_data->{'start_mode'}
    and $init_result_data->{'start_mode'} eq 'stdin-agent'
    and exists $init_code->{'agent-init'};

my $apw_href = <nroot.agent.prefix_width> //= {};
push( @exec_args, '-lpw=' . $apw_href->{$agent_name} )
    if defined $apw_href->{$agent_name};

my $agent_verbosity
    = <system.verbosity.console> || 1;    # -v is min. [ agent output patterns ]
push( @exec_args, '-' . 'v' x $agent_verbosity );

<[base.log]>->( 1, "starting of agent '$agent_sn_str' initiated .," );
<[base.log]>->( 2, ": exec args : ' " . join( ' ', @exec_args ) . " '" );

my @cmd_line_mods
    = defined $init_result_data->{'command_line_modules'}
    ? map {"-M$ARG"}
    split( m| +|, $init_result_data->{'command_line_modules'} )
    : ();

if (@cmd_line_mods) {
    my $_C = <system.perl_unicode>;
    push( @cmd_line_mods, "-C$_C" ) if defined $_C;
    eval {
        $pid
            = open2( $out_fh, $in_fh, $perl_bin, @cmd_line_mods,
            $bin_protocol_7_path, $agent_sn_str, @exec_args );
    };
} else {
    eval {
        $pid
            = open2( $out_fh, $in_fh, $bin_protocol_7_path, $agent_sn_str,
            @exec_args );
    };
}

exec_skip:

if ( not defined $pid or $EVAL_ERROR ) {
    ( my $err_msg = $EVAL_ERROR ) =~ s,^open2: |\.?\n$,,g;
    my $err_reason
        = ( defined $OS_ERROR and length($OS_ERROR) ) ? " ['$OS_ERROR']" : '';
    <[base.log]>->(
        0,
        join( '',
            "unable to start agent '$agent_name'",
            $err_reason, " [ $err_msg ]" )
    );
    <[agent.change_status]>->( $instance_id, 'error' );
    return undef;
}

<[event.add_io]>->(
    {   'fd'      => $out_fh,
        'handler' => 'nroot.handler.agent_output',
        'data'    => $instance_id
    }
);

<[nroot.child.add]>->(
    $pid, { 'instance_id' => $instance_id, 'start_time' => <[base.time]>->(4) }
);

$instance->{'process'} = { 'id' => $pid, };                          # ..,
$instance->{'subname'} = $agent_subname if defined $agent_subname;

<[agent.change_status]>->( $instance_id, "extbin" )
    if defined $init_result_data->{'start_mode'}
    and $init_result_data->{'start_mode'} eq 'exec-external';

# push init code to agent <stdin> if in 'stdin' mode.,
if ($stdin_mode) {
    <[base.log]>->( 1, ": pushing startup init-code < agent '$agent_name' >" );
    foreach my $_line ( @{ $init_code->{'agent-init'} } ) {
        my $code_line = $_line;    # <- keeping copy
            # <{foo.bar}> [agent instance namespace] variable fetching syntax
        while ( $code_line =~ m|<\{([^\}]+)\}>| ) {
            ( my $var_str = "{'$1'}" ) =~ s|\.|'}{'|g;
            my $var_value;
            eval "\$var_value = $namespace_str$var_str";
            if ($EVAL_ERROR) {
                $EVAL_ERROR =~ s|\n| |g;
                <[base.log]>
                    ->( 0, "[!] error in agent init-code: $EVAL_ERROR" );
                last;
            } else {
                $code_line =~ s|<\{([^\}]+)\}>|$var_value|;
            }
        }
        print {$in_fh} "$code_line\n";
    }
}
close($in_fh);    # <-- no further use for agent stdin handle [ for now ]

<[base.log]>->( 1, "agent '$agent_sn_str' started [ pid : $pid ]" );

# ______________________________________________________________________________
#\\PBWM5AY5LORGZ7ZNAC5OWETMF4GAHDDJK57NFR7USKWY4C4MANIFW2ZSAIL6BECHXTSWZBNOFIGEG
# \\ XVOSOCFT7XF3PZXZVJPMHGJVMGDPADPAMIHZZWEYOEBI5FB4B4SV \\// C25519-BASE-32 //
#  \\// Y3MGTOOJPDIZTWC5AW7ICUTYAZIZL7LDN5JLOYKUZSVLO6MI6AQ \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
