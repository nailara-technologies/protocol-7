# >:]

# param = <id> <current|hrs|days>
# descr = return weather data for num. station id

my ( $station_id, $type ) = split( / +/, $$call{'args'}, 2 );
my $units    = <weather.cfg.units>    || 'metric';
my $language = <weather.cfg.language> || 'de';

#my $count_hours = 10;    # <weather.forecast.count.hours>;
my $count_hours   = 6;
my $count_days    = <weather.forecast.count.days>;
my $next_midnight = <[weather.base.tomorrow_unix]>;

#return {
#    'mode' => 'nak',
#    'data' => "500 test fail"
#    };

return { 'mode' => 'nak', 'data' => "station_id parameter required" }
    if not defined $station_id or !length($station_id);

return {
    'mode' => 'nak',
    'data' => "type parameter required [current|hours|days]"
    }
    if not defined $type or !length($type);
return {
    'mode' => 'nak',
    'data' => "invalid type parameter [current|hours|days]"
    }
    if $type !~ /^(current|hours|days)$/;

my $count;
my $q_str = $type eq 'hours' ? 'forecast' : 'forecast/daily';
$q_str = 'weather'       if $type eq 'current';
$count = $count_hours    if $type eq 'hours';
$count = $count_days + 2 if $type eq 'days';
my $count_str = defined $count ? '&cnt=' . $count : '';
my $params    = "id=$station_id&units=$units&lang=$language" . $count_str;
$count -= 2 if $type eq 'days';

my ( $status_code, $json_data )
    = <[weather.child.query_api]>->("$q_str?$params");

my $status_str = length( $status_code // '' ) ? " ($status_code)" : '';
$status_str = " (city not found)" if $status_code eq '404';

return {
    'mode' => 'nak',
    'data' => "query failed" . $status_str
    }
    if not defined $json_data;

if (    exists $json_data->{'list'}
    and exists $json_data->{'cnt'} ) {

    if ( $type eq 'days' ) {

        while ( defined $json_data->{'list'}->[0]->{'dt'}
            and defined $next_midnight
            and $json_data->{'list'}->[0]->{'dt'} < $next_midnight ) {
            if ( not exists $json_data->{'today'} ) {
                $json_data->{'today'} = shift( @{ $json_data->{'list'} } );
            } else {
                shift( @{ $json_data->{'list'} } );
            }
            $json_data->{'cnt'}--;
        }

    } elsif ( $type eq 'hours' ) {

        while ( defined $json_data->{'list'}->[0]->{'dt'}
            and $json_data->{'list'}->[0]->{'dt'} < time ) {
            shift( @{ $json_data->{'list'} } );
            $json_data->{'cnt'}--;
        }

  #        while ( $json_data->{'list'}->[ $json_data->{'cnt'} - 1 ]->{'dt'}
  #            > $next_midnight ) {
  #        pop_another:
  #            pop( @{ $json_data->{'list'} } );
  #            $json_data->{'cnt'}--;
  #            goto pop_another if $json_data->{'cnt'} % 2;    # make count even
  #        }
    }
}

# overriding broken cnt parameter:
if (    exists $json_data->{'list'}
    and exists $json_data->{'cnt'}
    and $json_data->{'cnt'} > $count ) {
    <[base.log]>->(
        2, "trimming down '$type'-response element count to $count.."
    );
    while ( defined $json_data->{'cnt'} and $json_data->{'cnt'}-- > $count ) {
        pop( @{ $json_data->{'list'} } );
    }
}

return {
    'mode' => 'raw',
    'data' => freeze($json_data) . "\n"
};
