# >:]

# name = weather.parent.handler.update_current_reply

<weather.update_fail_count.current> //= 0;
<weather.update_interval.current>   //= 15;    # minutes
my $retry_delay_cached = 13;                   # seconds
my $retry_delay_nodata = 7;                    # seconds

my $reply      = shift;
my $station_id = $reply->{'params'}->{'station_id'};

#my $city     = $reply->{'params'}->{'city'};
my $log_level = 0;

my $data_str;
my $status_code;
my $current_data;

<weather.timer.current>->cancel if exists <weather.timer.current>;

my $interval_seconds = <weather.update_interval.current> * 60;

if ( $reply->{'cmd'} eq 'NACK' ) {
    my $err_reason = $reply->{'call_args'}->{'args'};
    if ( $err_reason eq 'query failed (city not found)' ) { # evtl. API overload
        $log_level++;
        $interval_seconds += 128 + int( rand(242) );
    }
    <[base.log]>->(
        $log_level, "failed to retrieve current weather data [$err_reason]"
    );
    $status_code = $1 if $err_reason =~ /^(\d+)/;
} else {
    $data_str = $reply->{'data'};
    $data_str =~ s|\n$||;
    ($current_data) = thaw($data_str);
}

#print Dumper($reply);
#print Dumper($current_data);

my $update_interval
    = $interval_seconds + sprintf( "%.0f", rand($interval_seconds) );

if (    defined $current_data
    and exists $current_data->{'cod'}
    and $current_data->{'cod'} eq '200' ) {
    <weather.update_fail_count.current> = 0;
    <[weather.parent.cache.write_data]>->( 'current', $station_id, $data_str );
    <[weather.parent.extract_current]>->( $station_id, $current_data );
    my $update_minutes = sprintf( "%0.1f minutes", $update_interval / 60 );
    <[base.log]>->(
        2, "next 'current' data update in $update_minutes minutes.."
    );
} else {
    my $status_str = defined $status_code ? " ($status_code)" : '';
    $status_str = " (city not found)"
        if defined $status_code and $status_code eq '404';
    if (    exists <weather.data>->{$station_id}
        and exists <weather.data>->{$station_id}->{'current'}
        and defined <weather.data>->{$station_id}->{'current'}->{'data_time'} )
    {
        my $data_age
            = time - <weather.data>->{$station_id}->{'current'}->{'data_time'};

        $log_level = 0 if $data_age >= 3600 * <weather.cache_timeout> * 0.8;

        <[base.log]>->(
            $log_level, "failed to obtain current weather data.." . $status_str
        );

        my $age_str
            = $data_age > 3600
            ? sprintf( "%0.1f hours",   $data_age / 3600 )
            : sprintf( "%0.1f minutes", $data_age / 60 );
        $age_str =~ s|\.0 | |;
        $age_str =~ s| (1 \w+)s | $1 |;
        <[base.log]>->( $log_level, "keeping cached data ( $age_str old )" );
        $update_interval
            = $retry_delay_cached
            + sprintf( "%.1f", rand( $retry_delay_cached / 2 ) );
        <[base.log]>->(
            1, "next 'current' attempt in $update_interval seconds.."
        );
    } else {

        # XXX: write n/a pages!

        my $log_level = <weather.update_fail_count.current> ? 1 : 0;

        <[base.log]>->(
            $log_level, "failed to obtain current weather data.." . $status_str
        );

        <weather.update_fail_count.current>++;

        $update_interval
            = $retry_delay_nodata
            + sprintf( "%.1f", rand( $retry_delay_nodata / 2 ) );
        <[base.log]>->(
            1, "retrying 'current' query in $update_interval seconds.."
        );
    }
}

my $midnight = <[weather.base.tomorrow_unix]>;
if ( time + $update_interval > $midnight ) {
    $update_interval = ( $midnight - time );
    my $update_minutes = sprintf( "%0.1f", $update_interval / 60 );
    <[base.log]>->(
        1,
        "..shortened 'current' delay "
            . "to $update_minutes minutes! (midnight)"
    );
}

<weather.timer.current> = <[event.add_timer]>->(
    {   'after'   => $update_interval,
        'handler' => 'weather.parent.handler.update_timer',
        'data'    => { 'type' => 'current', 'station_id' => $station_id }
    }
);
