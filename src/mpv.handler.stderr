# >:]

# name  = mpv.handler.stderr
# descr = reads and processes stdout output from mpv process

my $event     = shift->w;
my $read_fh   = $event->fd;
my $process   = $event->data;
my $pid       = $process->{'pid'};
my $whitelist = $process->{'log_whitelist'} || [];

<mpv.output.err_buffer>     //= '';
<mpv.output.parse_mode> //= '';
<mpv.output.reply_data> //= [];

my $read_bytes = <[base.s_read]>->(
    $read_fh, \$data{'mpv'}{'output.buffer'},
    4096,     length(<mpv.output.err_buffer>)
);
if ( not defined $read_bytes or $read_bytes == 0 ) {  # [ filehandle exception ]
    $event->cancel;
    close($read_fh);
    <[base.log]>->( 1, "mpv-process [PID:$pid] output filehandle closed." );
    kill( 9, $pid );    # making sure it's really gone
    <[base.log]>->( 0, "mpv-process has been terminated." )
        if !<agent.shutdown>;
    <[base.log]>->( 1, "shutting down " . <system.agent.name> . "-agent!" );
    exit(2);
}

while ( <mpv.output.err_buffer> =~ s|^([^\n]*)\n||s ) {
    my $output_line = $1;
    $output_line =~ s/\r//sg;
    next if !length($output_line);
    <[base.log]>->( 0, "< mpv-err > " . $output_line );
}
