# >:]

# name = weather.parent.cache.read_cache_data

my $type       = shift;
my $station_id = shift;
my $cache_dir  = <weather.cache_dir> . '/data';
my $max_age    = <weather.cache_timeout> * 3600;

return {
    'mode' => 'nak',
    'data' => "type parameter required [current|hours|days]"
    }
    if not defined $type or !length($type);
return {
    'mode' => 'nak',
    'data' => "invalid type parameter [current|hours|days]"
    }
    if $type !~ /^(current|hours|days)$/;

die "expected (valid) station_id parameter"
    if not defined $station_id
    or !length($station_id)
    or $station_id !~ /^([\w\d]+)$/;

<[base.log]>->( 2, "checking '$type'-cache for '$station_id'.." );

my $file_path = "$cache_dir/$station_id.$type";

if ( !-f $file_path ) {
    <[base.log]>->( 2, "no cached weather data found for '$station_id'" );
    return undef;
}

my $content_ref = <[file.slurp]>->($file_path);

my ( $timestamp, $data_str );
if ( $$content_ref =~ /^(\d+)\n(.+)\n$/ ) {
    ( $timestamp, $data_str ) = ( $1, $2 );
} else {
    <[base.log]>->( 0, "syntax error in cache file '$file_path'" );
    return undef;
}

my ($cached_data) = thaw($data_str);

my $data_age = time - $timestamp;
my $age_str
    = $data_age > 3600
    ? sprintf( "%0.1f hours",   $data_age / 3600 )
    : sprintf( "%0.1f minutes", $data_age / 60 );
$age_str =~ s|\.0 | |;
$age_str =~ s| (1 \w+)s | $1 |;

if ( $data_age >= $max_age ) {
    <[base.log]>->(
        1, "'$type' data cache timed out ($age_str old), removing.."
    );
    unlink($file_path) or die "unlink($file_path): $!";
    delete <weather.data>->{$station_id};

    # LLL: write loading pages...
    return undef;
} else {
    <[base.log]>->( 2, "found '$type' weather data in cache ($age_str old)" );
    return $cached_data;
}
