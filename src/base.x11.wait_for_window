# >:]

# name = base.x11.wait_for_window

my $timeout  = <x11.window_timeout> || 7;
my $name     = shift;
my $user     = shift // 'core';
my $cmd_path = shift // '';
$cmd_path .= '.' if length($cmd_path);
if ( not defined $name ) {
    $name = <system.agent.name>;
    $name .= '[' . <system.agent.subname> . ']'
        if defined <system.agent.subname>;
    $name =~ s|([\(\)\[\]\{\}\\])|\\$1|g;
}
die "expected window name parameter" if not defined $name or !length($name);
my ($local_sid) = keys( %{ $data{'user'}{$user}{'session'} } );

<[base.log]>->( 2, "waiting for window '$name'.," );

my $cmd_id = <[base.gen_id]>->( $data{'route'} );

my $core_fh = $data{'session'}{$local_sid}{'handle'};

<[net.out]>->(
    $core_fh, "($cmd_id)${cmd_path}xserver.wait_visible $timeout $name\n"
);

my $reply_string;
my $matched_reply = 0;
while ( !$matched_reply ) {
    $reply_string = <$core_fh>;
    die "<<<!>>> core handle exception <<<!>>>"
        if not defined $reply_string or !length($reply_string);

    $matched_reply = 1 if $reply_string =~ m{^\($cmd_id\)(ACK|NAK) };
    if ( !$matched_reply ) {
        $data{'session'}{$local_sid}{'buffer'}{'input'} .= $reply_string;
    }
}

if ( $reply_string =~ m{^\($cmd_id\)ACK (\d+)\n$} and <x11.id> = $1 ) {
    <[base.log]>->( 1, ": received X window id '" . <x11.id> . "'.." );
    return <x11.id>;
} elsif ( $reply_string =~ m|^\($cmd_id\)NAK window startup timed out| ) {
    <[base.log]>->( 0, ": window startup timed out after $timeout seconds..," );
    return undef;
} else {
    <[base.log]>->( 0, "not expected xserver reply ['$reply_string' ] " );
    return undef;
}

# ______________________________________________________________________________
#\\OJU5ZT45TDHKTJQ2RZQEHX2F5VVQGZPHKCMTHUILUKSYZEXLB37YF3NPLFEBLZIM32AGDUNUNMPO2
# \\ 3QFB4ZAII7HIWSATDI3XAWJCJE4SA6WOP4FZY2UV3EG57UJSTXCE \\// C25519-BASE-32 //
#  \\// CIXEOP62TTTCID5DRFMY6XSFGWJW6QVAGXI3CRH3INTH4ZYUUBI \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
