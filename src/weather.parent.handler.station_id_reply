# >:]

# name = weather.parent.handler.station_id_reply

my $reply = shift;

my $city;
my $station_id;
my $shutdown = 0;

if ( $reply->{'cmd'} eq 'NAK' ) {
    <[base.log]>->(
        0,
        "failed to retrieve station id ["
            . $reply->{'call_args'}->{'args'}
            . "], shutting down!"
    );
    foreach my $reply_id ( @{<weather.get_urls.reply_ids>} ) {
        <[base.callback.cmd_reply]>->(
            $reply_id,
            {   'mode' => 'nak',
                'data' => 'failed to get station id'
            }
        );
        delete <weather.get_urls.reply_ids>;
    }
    $shutdown = 1;
} else {
    $city       = $reply->{'params'}->{'city'};
    $station_id = $reply->{'call_args'}->{'args'};
    if ( not defined $station_id or !$station_id ) {
        <[base.log]>->( 0, "no valid station id found!" );
        $shutdown = 1;
    }
}
if ($shutdown) {    # XXX: write failure html page!
    exit(1);
}

<weather.station_id> = $station_id;

<[weather.parent.cache.write_station_id]>->( $city, $station_id );

<[base.log]>->( 1, "received station id ( $city ) = $station_id" );

<[weather.parent.populate_html_dir]>->(<weather.station_id>);
<[weather.parent.update_current]>->(<weather.station_id>);
<[weather.parent.update_forecast]>->(<weather.station_id>);

if ( !<weather.agent.initialized> ) {
    <[base.async.get_session_id]>;    # change agent status to 'online'
    <weather.agent.initialized> = 1;
}

if (    defined <weather.get_urls.reply_ids>
    and ref(<weather.get_urls.reply_ids>) eq 'ARRAY'
    and @{<weather.get_urls.reply_ids>} ) {
    my $url_list_str;
    map { $url_list_str .= "$_\n" }
        <[weather.parent.get_url_list]>->($station_id);
    foreach my $reply_id ( @{<weather.get_urls.reply_ids>} ) {
        <[base.callback.cmd_reply]>->(
            $reply_id,
            {   'mode' => 'raw',
                'data' => $url_list_str
            }
        );
        delete <weather.get_urls.reply_ids>;
    }
}
