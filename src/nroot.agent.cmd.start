# >:]

# name  = nroot.agent.cmd.start
# param = <agent_id|name>
# descr = spawn a new agent instance

my $agent_id;
my $agent_name;
my $agent_subname;
my $recursion
    = (     ref( $_[0] ) eq 'HASH'
        and exists $_[0]->{'recursion'}
        and defined $_[0]->{'recursion'} ) ? $_[0]->{'recursion'} : 0;

my $once
    = (     ref( $_[0] ) eq 'HASH'
        and exists $_[0]->{'once'}
        and defined $_[0]->{'once'} ) ? $_[0]->{'once'} : 0;

return { 'mode' => 'nak', 'data' => 'agent name or id expected' }
    if not defined $$call{'args'}
    or !length( $$call{'args'} );

my $start_mode
    = ( $recursion or defined $$call{'mode'} and $$call{'mode'} eq 'implicit' )
    ? 'implicit'
    : 'manual';

if ( $$call{'args'} =~ /^\d+$/ ) {
    $agent_id   = $$call{'args'};
    $agent_name = <nroot.agent.setup>->{$agent_id}->{'name'}
        if exists <nroot.agent.setup>->{$agent_id};
    return {
        'mode' => 'nak',
        'data' => "found no agent with id $agent_id"
        }
        if not defined $agent_name;
} else {
    $agent_name = $$call{'args'};
    $agent_subname = $1 if $agent_name =~ s|\[([^\]]+)\]$||;
}

my $agent_config = <nroot.spawn_config.agents.config>->{$agent_name};
return {
    'mode' => 'nak',
    'data' => "spawn config contains no agent named '$agent_name'!"
    }
    if not defined $agent_config;

return {
    'mode' => 'nak',
    'data' => 'agent is explicitly disabled in config!'
    }
    if <[agent.is_disabled]>->($agent_name);

return {
    'mode' => 'ack',
    'data' => "agent '$agent_name' already running [start 'once' mode]"
    }
    if $once
    and ( defined $agent_subname
    and <[nroot.spawn_count]>->( $agent_name . "[$agent_subname]" )
    or not defined $agent_subname and <[nroot.spawn_count]>->($agent_name) );

return {
    'mode' => 'nak',
    'data' => "reached configured maximum concurrency for agent '$agent_name'"
    }
    if exists $agent_config->{'max_concurrency'}
    and <[nroot.spawn_count]>->($agent_name)
    >= $agent_config->{'max_concurrency'};

if ( defined $agent_subname
    and exists $agent_config->{'max_subname_concurrency'} ) {
    return {
        'mode' => 'nak',
        'data' => "maximum concurrency reached for $agent_name\[$agent_subname]"
        }
        if <[nroot.spawn_count]>->( $agent_name . "[$agent_subname]" )
        >= $agent_config->{'max_subname_concurrency'};
}

return {
    'mode' => 'nak',
    'data' => "agent '$agent_name' has 'manually stopped' status"
    }
    if $start_mode eq 'implicit'
    and exists <nroot.agent.manually_stopped>->{$agent_name};

delete <nroot.agent.manually_stopped>->{$agent_name} if $start_mode eq 'manual';

<[base.log]>->( 1, "spawning agent '$agent_name'..." ) if !$recursion;

my $dep_str = <[agent.get_dependencies]>->($agent_name);
my @dependencies = defined $dep_str ? split( / +/, $dep_str ) : ();
foreach my $dep_name (@dependencies) {
    delete <nroot.agent.manually_stopped>->{$dep_name}
        and
        <[base.log]>->( 0, "cleared manually stopped status for '$dep_name'!" )
        if exists <nroot.agent.manually_stopped>->{$dep_name}
        and $start_mode eq 'manual';    # <- forced dependency startup..

    next if exists <nroot.agent.manually_stopped>->{$dep_name}; # <- ..or skipped

    if ( !<[agent.is_enabled]>->($dep_name) ) {
        <[base.log]>->( 1, "agent enabled: '$dep_name' (dependency)" );

        my $start_name_str = $dep_name;

        $start_name_str .= "[$agent_subname]"
            if defined $agent_subname
            and defined
            <nroot.spawn_config.agents.config>->{$dep_name}->{'inherit_subname'}
            and
            <nroot.spawn_config.agents.config>->{$dep_name}->{'inherit_subname'};

        my $reply = <[agent.cmd.start_once]>
            ->( { 'args' => $start_name_str, 'recursion' => $recursion + 1 } );

        <nroot.agent.auto_cleanup>->{$dep_name} = $1
            if $reply->{'data'} =~ / id (\d+)$/;
    }
    <nroot.agent.dependency>->{$dep_name}->{$agent_name} = 1
        if not exists <nroot.agent.autostart>->{$dep_name};
}

<nroot.spawn_config.globals.agents.enabled> .= ' ' . $agent_name
    if !<[agent.is_enabled]>->($agent_name);

if ( not defined $agent_id ) {
    foreach my $id ( keys %{<nroot.agent.setup>} ) {
        $agent_id = $id if <nroot.agent.setup>->{$id}->{'name'} eq $agent_name;
    }
}

my $obj_id = <[agent.get_object_id]>->($agent_id);

my $target_queue = <[dependency.ok]>->($obj_id) ? 'queued' : 'depending';

my $sn_str = defined $agent_subname ? "[$agent_subname]" : '';

my $job_id = <[jobqueue.add_job]>->(
    {   'object_id'       => $obj_id,
        'job_callback'    => 'agent.spawn',
        'callback_params' => $agent_name . $sn_str,
        'target_queue'    => $target_queue
    }
);

return {
    'mode' => 'ack',
    'data' => "job queued [ID=$job_id]"
    }
