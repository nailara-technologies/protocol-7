# >:]

# name = crypt.C25519.write_keys

my $key_vars = <[crypt.C25519.key_vars]>->(shift);   # <-- <key_name> [optional]

my $uid          = $key_vars->{'uid'};
my $gid          = $key_vars->{'gid'};
my $key_usr      = $key_vars->{'usr_name'};
my $usr_hdir     = $key_vars->{'usr_home'};
my $key_name     = $key_vars->{'key_name'};
my $key_basepath = $key_vars->{'key_basepath'};

foreach my $type ( 'secret', 'public' ) {
    my $file_name = join( '.', $key_basepath, $type );
    next if not -f $file_name;
    $file_name =~ s|^.*\/||;
    <[base.log]>->( 0, "<<!>> key file '$file_name' exists .," );
    <[base.log]>->( 0, "  :.  not overwriting .," );
    return 0;
}
foreach my $type ( 'secret', 'public' ) {
    my $file_name = join( '.', $key_basepath, $type );

    open( my $key_fh, '>>', "$file_name.$$" ) or die "$file_name.$$: $!";
    if ( $type eq 'public' ) {
        chmod( 0640, "$file_name.$$" ) or die "chmod: $!";
    } else {
        chmod( 0600, "$file_name.$$" ) or die "chmod: $!";
    }
    my $key_str_b32 = encode_b32r( $KEYS{'C25519'}{$key_name}{$type} );
    printf( {$key_fh} "%s\n", $key_str_b32 );
    close($key_fh);
    rename( "$file_name.$$", $file_name ) or die "$file_name: $!";
    chown( $uid, $gid, $file_name )       or warn "$file_name: $!";

    <[base.log]>->( 1, ": $file_name" );
}
return 1;

# ______________________________________________________________________________
#\\X75RRGVJABCCWSKYHQSKXNFMQSEMFHSHAXEYNKNKZMN4DPIU5GXZQXB5LAVK66UT4PLXMYJLGVUCS
# \\ WACHEPXYX44MWDYHZ634YNEPYSRZ6Q4NLY3Y2XM6TWKBK5PMQT4P \\// C25519-BASE-32 //
#  \\// HDAOJGZZGTEGELIWP6AHTLZTEWKIJ4IIBEYZXAIRHJCLGZYO2AA \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
