# >:]

# name = base.X-11.get_subconfig

my ($local_sid) = keys( %{<user.core.session>} );

my $agent_name
    = ( defined <system.agent.mode>
        and <system.agent.mode> eq 'universal-child' )
    ? 'universal'
    : <system.agent.name>;
my $subname  = <system.agent.subname>;
my $name_str = defined $subname ? "$agent_name\[$subname]" : $agent_name;

<[base.log]>->( 1, "requesting $name_str composition tile subcfg" );

my $cmd_id  = <[base.gen_id]>->( $data{'route'} );
my $core_fh = $data{'session'}{$local_sid}{'handle'};
<[net.out]>->( $core_fh, "($cmd_id)composition.get_subconfig $name_str\n" );

my $reply_string;
my $matched_reply = 0;
while ( !$matched_reply ) {
    $reply_string  = <$core_fh>;
    $matched_reply = 1 if $reply_string =~ m{^\($cmd_id\)(NAK|DATA) };
    if ( !$matched_reply ) {
        $data{'session'}{$local_sid}{'buffer'}{'input'} .= $reply_string;
    }
}

my $subcfg_data  = {};
my $read_timeout = 2;
if ( $reply_string =~ m|^\($cmd_id\)DATA (\d+)\n$| ) {
    my $bytes_to_go = $1;
    my $bytes_total = $bytes_to_go;
    if ( !$bytes_to_go ) {
        <[base.log]>->(
            2, "composition subconfig for '$name_str' was empty [ 0 bytes ]"
        );
        return {};
    }
    my $buffer = '';
    while ($bytes_to_go) {
        my $bytes = read( $core_fh, $buffer, $bytes_to_go, length($buffer) );
        $bytes_to_go -= $bytes if defined $bytes;
    }
    chop($buffer);
    foreach my $cfg_line ( split( m|\n|, $buffer ) ) {
        my ( $c_key, $c_val ) = split( m| +\= |, $cfg_line, 2 );
        $subcfg_data->{$c_key} = $c_val;
    }
    <[base.log]>->(
        1, "received tile group subconfig for '$name_str' [$bytes_total bytes]"
    );
    return $subcfg_data;
} elsif ( $reply_string =~ m|^\($cmd_id\)NAK no set-up for agent '([^ ]+)'| ) {
    <[base.log]>->( 1, ": <!> composition agent has no set-up for \"$1\" <!>" );
    return undef;
} elsif ( $reply_string =~ m|^\($cmd_id\)NAK command unknown\n$| ) {
    <[base.log]>->( 1, ": << get_subconfig [ NAK ] >> for '$name_str'" );
    return undef;
} else {
    <[base.log]>->(
        0,
        "[ protocol mismatch ] unexpected reply from composition agent"
            . " ['$reply_string']"
    );
    return undef;
}

# ______________________________________________________________________________
#\\3IT3HG4JZHLXMM6V4K45C3TRIUTILV6VSN3NCYGZ6Q5ELNLROTH6QF3VDWFF2KNIURSDM3MMQFZ5E
# \\ JPOZU5WEHODFIQLDONJDFMGJOYCCQDLKNUXFREK3CJTZGXQG3QAL \\// C25519-BASE-32 //
#  \\// TTXJP3V2VCQZYCXCYVVELDNANILDU2AAJ7NLFOSFBRYGOPUXWAI \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
