# >:]

# name = playlist.handler.mimetype_reply

my $reply       = shift;
my $url         = $reply->{'params'}->{'check_url'};
my $retry_delay = $reply->{'params'}->{'retry_delay'};
my $reply_str   = $reply->{'call_args'}->{'args'};

if ( $reply->{'cmd'} eq 'NAK' ) {
    <playlist.types_retry_count>->{$url} //= 0;

    if (    <playlist.http.url_types_max_retry>
        and $url =~ m{^https?://}
        and $url =~ m{/(\?.+)?$|\.(cgi|asp|php|html?)(\?.+)?$|/[^\.]+$}
        and ++<playlist.types_retry_count>->{$url}
        >= <playlist.http.url_types_max_retry> ) {

        # gave up and guessed as 'likely html' (let the browser deal with it...)
        <[base.log]>->(
            0,
            sprintf( "giving up mime type check for '$url' after %d retries!",
                <playlist.types_retry_count>->{$url} - 1 )
        );
        $reply_str = 'html';
        goto giving_up;
    }

    my $log_level = <playlist.types_retry_count>->{$url} == 1 ? 0 : 2;
    <[base.log]>->(
        $log_level,
        "<!> failed to resolve mimetype for '$url' [$reply_str]"
            . ' ...retrying automatically...'
    );
    if ( not defined <playlist.file_types>->{$url}
        or <playlist.file_types>->{$url} ne 'network_error' ) {
        <playlist.had_network_errors>++;
        <playlist.network_errors>++;
    }
    <playlist.file_types>->{$url} = 'network_error';

    my $next_delay = sprintf( "%.2f", ( $retry_delay * 1.2 ) + rand(2) );
    $next_delay = <playlist.mime_retry.max_delay>
        if $next_delay > <playlist.mime_retry.max_delay>;

    <playlist.mime_type.retry_timer>->{$url} = <[event.add_timer]>->(
        {   'after'   => $retry_delay,
            'handler' => 'playlist.callback.check_mimetype',
            'data'    => {
                'check_url'   => $url,
                'retry_delay' => $next_delay
            }
        }
    );
    return;
giving_up:
    <playlist.mime_type.retry_timer>->{$url}->cancel
        if exists <playlist.mime_type.retry_timer>->{$url};
    delete <playlist.mime_type.retry_timer>->{$url};
}

delete <playlist.types_retry_count>->{$url};

my $type = $reply_str;

$type =~ s|^video/.*$|video|;
$type =~ s|^audio/.*$|audio|;
$type =~ s|^image/.*$|image|;
$type =~ s|^.*application.*/||;
$type =~ s|^text/||;
$type =~ s|;.*$||g;
$type =~ s| +|_|g;

if ( $type eq 'unknown' ) {
    <[base.log]>->( 0, ": <!> unknown file type for '$url'" );
} else {
    <[base.log]>->( 2, "updating file type [$type] $url" );
}

<playlist.file_types>->{$url} = $type;
<playlist.type_cache>->{$url} = $type if <playlist.cfg.cache_content_types>;

<[playlist.update.send_notifications]>;
