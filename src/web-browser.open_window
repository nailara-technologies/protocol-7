# >:]

# name = web-browser.open_window

$ENV{'DISPLAY'} = <x11.display>;

my ( $size_x, $size_y, $pos_x, $pos_y )
    = ( $1, $2, sprintf( "%.0f", $4 ), sprintf( "%.0f", $5 ) )
    if defined <web-browser.geometry>
    and <web-browser.geometry> =~ m|^(\d+)x(\d+)(([\-\+]\d+)([\-\+]\d+))?$|;

<web-browser.window.pos>  = { 'x' => $pos_x,  'y' => $pos_y };
<web-browser.window.size> = { 'x' => $size_x, 'y' => $size_y };

Gtk3->init;

<[base.log]>->( 1, "window initializaion .," );

my $window = Gtk3::Window->new('toplevel');

$window->set_icon_from_file(<web-browser.path.icon-file>);
$window->set_title( <web-browser.window.title_str> );

<web-browser.gtk_obj.window> = $window;
if ( defined <web-browser.cfg.change_cursor> ) {
    my $cursor = Gtk3::Gdk::Cursor->new(<web-browser.cfg.change_cursor>);
    $window->get_root_window->set_cursor($cursor);
}

$window->signal_connect( destroy => sub { Gtk3->main_quit() } );

# my $atom_id = Gtk3::Gdk->atom_intern_static_string('WM_CLASS'); # <--set [LLL]

$window->move( $pos_x, $pos_y );
$window->set_default_size( $size_x, $size_y );

my $overlay = Gtk3::Overlay->new();
<web-browser.gtk_obj.overlay> = $overlay;

<web-browser.gtk_obj.css_prov> = Gtk3::CssProvider->new();
<web-browser.gtk_obj.css_prov>->load_from_data(<<'EOT');
*undershoot.top, *undershoot.right, *undershoot.bottom, *undershoot.left {
    background-image: none;
}
EOT

# web context setup #

my $web_context = Gtk3::WebKit2::WebContext->new();

my $proc_model = 'WEBKIT_PROCESS_MODEL_MULTIPLE_SECONDARY_PROCESSES';
$web_context->set_process_model($proc_model);

if (<web-browser.cfg.no_memory_cache>) {

    $web_context->set_cache_model('WEBKIT_CACHE_MODEL_DOCUMENT_VIEWER');
    <[base.log]>->( 1, ": deactivating in-memory cache.," );
} else {

    <[base.log]>->( 1, ": moderate caching enabled.," );
    $web_context->set_cache_model('WEBKIT_CACHE_MODEL_DOCUMENT_BROWSER');

    # LLL: deal with cache size / auto-clear...
    # $web_context->set_cache_model('WEBKIT_CACHE_MODEL_WEB_BROWSER');

}

<web-browser.gtk_obj.web_context> = $web_context;

map { <[web-browser.init_view]>->($ARG) }
    ( 1, 2 );    # will use initialized web context

<web-browser.gtk_obj.overlay>
    ->reorder_overlay( <web-browser.gtk_obj.scrolled_window>->{2}, 0 );

<web-browser.overlay.index> = { 'fg' => 1, 'bg' => 2 };

$window->signal_connect( 'size_allocate',
    $code{'web-browser.handler.size_allocate'} );

$window->add($overlay);

if ( <system.agent.mode> eq 'universal-child' ) {
    <[base.log]>->(
        1, "<<< setting slideshow.autostart = 1 [ 'universal-child' mode ] >>>"
    ) if !( <web-browser.slideshow.autostart> //= 0 );
    <web-browser.slideshow.autostart> = 1;  ## <-- auto-enable slideshow mode ##
    $window->iconify();
} else {
    $window->iconify(); ## [LLL] create exception? wait for bg-color being set.,

    ## raise window when ready ##  .. background color properly set .,  ##
    <web-browser.start-up.raise_delay> //= 0.13747;
    <[web-browser.js_call]>->(
        ' do { sleep(64); } while ( document.readyState != "complete" ); ',
        sub {
            <[event.add_timer]>->(
                {   'after'   => <web-browser.start-up.raise_delay>,
                    'handler' => 'web-browser.start-up.raise_window'
                }
            );
        }
    );
}

$window->show_all;

Glib::Idle->add(
    sub {
        <[web-browser.wait_for_window]>;

        # handle previous segfaults [ should there have been any ]
        <[web-browser.process_crash_mitigation]>;

        if (<web-browser.slideshow.autostart>) {
            <[base.log]>->( 1, ':: slideshow autostart is enabled ::' );
            <[web-browser.get_url_list]>;
        }
        return 0;
    }
);

map { <base.watcher.signal>->{$ARG}->cancel }
    grep ( !m|hup|, keys %{<base.watcher.signal>} );

undef %SIG;
$SIG{'INT'} = $SIG{'TERM'} = sub {
    undef %SIG;
    <web-browser.shutting_down> //= 0;
    return if <web-browser.shutting_down>;
    <web-browser.shutting_down> = 1;

    my $url_file = '/var/tmp/.protocol-7.web-browser.' . $PID;
    unlink($url_file) if -f $url_file;    # clean shutdown

    map { <web-browser.timer>->{$ARG}->cancel } keys %{<web-browser.timer>};

    <[base.log]>->( 1, "< SIGTERM > terminating .," );

    <web-browser.slideshow.no_switch> = 1;
    <web-browser.slideshow.paused>    = 1;

    <[web-browser.disable_javascript]>;

    delete <web-browser.quit_fade.start_time>;
    <web-browser.signal_id> //= {};
    {
        local $SIG{'__WARN__'} = sub { };
        map {
            <web-browser.gtk_obj.window>->signal_handler_disconnect(
                delete <web-browser.signal_id>->{$ARG} )
            }
            keys %{<web-browser.signal_id>};
    }

    if ( !<web-browser.cfg.use_transparency> ) {
        Gtk3->main_quit();
        exit(0);
    } else {
        Glib::Timeout->add(
            300,
            sub {
                <web-browser.gtk_obj.window>->signal_connect(
                    draw => $code{'web-browser.handler.quit_fade_out'} );
                <web-browser.gtk_obj.window>->queue_draw;
                return 0;
            }
        );
        return 0;
    }
};

#.............................................................................
#POVQZ5F2UY4PZFH2OSU23IRR3ZDE5FFESICCPZN6HRHF4HVR24PJLC5KE2YYL47JHWWFT3ITVDP5U
#::: X4WNQKWVGPYR4EBIXPBJAWMYDKCJBLOWYWCU6OLQHKRIULJYSMT :::: NAILARA AMOS :::
# :: WHZCQQDFWADIEF45LANJ3V6WSJ2HTQRWZWRGEMLAWBTGKHZPIABI :: CODE SIGNATURE ::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
