# >:]

# name  = nroot.init_code
# descr = initializes root module

<[base.perlmod.load]>->('IO::Handle');
<[base.perlmod.autoload]>->('Proc::ProcessTable');
<[base.perlmod.autoload]>->( 'Fcntl', qw| S_IWUSR S_IWGRP | );
<[base.perlmod.load]>->( 'IPC::Open3',          qw| open3 | );
<[base.perlmod.load]>->( 'Crypt::Misc',         qw| encode_b32r | );
<[base.perlmod.load]>->( 'Hash::Merge::Simple', qw| merge | );

<system.agent.type> = 'nroot';

<nroot.timeout.kill_list>       //= 2;
<nroot.timeout.verify_instance> //= 13;

<nroot.agent.notify_online>    //= {};
<nroot.agent.manually_stopped> //= {};
<nroot.cfg_data.start_setup>   //= [];

<nroot.host-reboot.enabled>        //= 1;
<nroot.host-reboot.term_delay>     //= 1.3787;
<nroot.system-poweroff.enabled>    //= 1;
<nroot.system-poweroff.term_delay> //= 1.3787;

<system.acfg_path> = <system.conf_path> . '/agents';

map { <[base.disable_command]>->($_) } qw(
    verify-instance
    switch-user
    subname
);

<nroot.gcc_bin> = '/usr/bin/gcc';
<nroot.cfg.install_bin_nlr> //= 'yes';                  # LLL: only when root..,
<nroot.cfg.nlr_bin_path>    //= '/usr/local/bin/nlr';

## gcc \ nlr ##
<nroot.gcc_bin> = <[base.required_bin_path]>->('gcc');
if ( !-x <nroot.gcc_bin> ) {
    <nroot.gcc_bin> = undef;
    <[base.log]>->( 0, "<!> 'gcc' binary not found <!>" )
        if defined <nroot.cfg.install_bin_nlr>
        and <nroot.cfg.install_bin_nlr> =~ m{^(1|yes)$};
} elsif ( defined <nroot.cfg.install_bin_nlr>
    and <nroot.cfg.install_bin_nlr> =~ m{^(1|yes)$}
    and not <[nroot.bin_nlr_is_current]> ) {
    <[nroot.compile_bin_nlr]>;
}
## modprobe ##
<nroot.modprobe_bin> = <[base.required_bin_path]>->('modprobe');
if ( !-x <nroot.modprobe_bin> ) {
    <nroot.modprobe_bin> = undef;
    <[base.log]>->( 0, "<!> 'modprobe' binary not found <!>" );
}
## rmmod ##
<nroot.rmmod_bin> = <[base.required_bin_path]>->('rmmod');
if ( !-x <nroot.rmmod_bin> ) {
    <nroot.rmmod_bin> = undef;
    <[base.log]>->( 0, "<!> 'rmmod' binary not found <!>" );
}

# single named file based startup configuration ##
<[nroot.load_start_setup]>->(<load.start_setup>)
    if defined <load.start_setup>;

## agent dir based startup configs #
<[nroot.load_agent_startup_cfgs]>;

# json based configuration import ##
<[settings.json.import_file]>->('nroot.start_setup.json');

map { <[nroot.init_start_setup]>->($_) }
    @{ clone(<nroot.cfg_data.start_setup>) };

if (    exists <system.subs_loaded.debug>
    and <system.subs_loaded.debug> > 1
    and <system.verbosity.console> > 1 ) {

    <[base.perlmod.autoload]>->('Data::Dumper');
    $Data::Dumper::Sortkeys = 1;

    ( my $debug_str = Dumper(<nroot.start_setup.globals>) ) =~ s,^.{7}|;$,  ,mg;
    print "\n < nroot.start_setup.globals >\n\n$debug_str\n";
}

<[event.add_signal]>
    ->( { 'signal' => 'CHLD', 'handler' => 'nroot.handler.sig_chld' } );

<[nroot.load_agent_output_patterns]>;
<[nroot.init_agent_output_patterns]>;

delete <list.users>;

<list.agents> = {
    'var'   => 'data',
    'key'   => 'nroot.agent.instance',
    'descr' => 'currently running / managed agent instances',
    'mask'  => '<key>:instance job_id agent_name:name agent_id status',
    'align' => {
        'agent_id'   => 'right-5',
        'agent_name' => 'left+1',
        'instance'   => 'left+1',
        'job_id'     => 'right-4',
        'status'     => 'center-1'
    }
};

<list.available> = {
    'var'   => 'data',
    'key'   => 'nroot.agents.available',
    'descr' => 'available agents / descriptions',
    'mask'  => '<key>:agent_name short_desc:agent_short_decription',
    'align' => {
        'agent_name'  => 'right-3',
        'description' => 'left'
    }
};

<list.children> = {
    'var'   => 'data',
    'key'   => 'nroot.agent.instance',
    'descr' => 'PIDs of agents and their children',
    'mask' =>
        '<key>:instance agent_name:agent <key>:process <key>:process_children',
    'align' => {
        'instance'         => 'left+1',
        'agent_name'       => 'left+1',
        'process'          => 'left',
        'process_children' => 'left',
    },
    'filters' => {
        'process'          => 'nroot.parser.process_id',
        'process_children' => 'nroot.parser.children'
    }
};

<list.subnames> = {
    'var'   => 'data',
    'key'   => 'nroot.agent.instance',
    'descr' => "'subnames' of registered agents [if available]",
    'mask'  => '<key>:instance status agent_name:agent subname',
    'align' => {
        'instance'   => 'left+1',
        'status'     => 'center-2',
        'agent_name' => 'right-2',
        'subname'    => 'left+1',
    }
};

<list.manual> = {
    'var'   => 'data',
    'key'   => 'nroot.agent.manually_stopped',
    'descr' => "agents marked as 'manually stopped'",
    'mask'  => '<key>:agent_name <key>:stopped_at',
    'align' => {
        'agent_name' => 'left+1',
        'stopped_at' => 'left'
    },
    'filters' => { 'stopped_at' => 'nroot.parser.manually_stopped_tstamp' }
};

<list.dependency> = {
    'var'      => 'data',
    'key'      => 'dependency.object',
    'sort_key' => 'agent_name',
    'descr'    => 'current agent dependency status',
    'mask'     => 'agent_name <key>:depends_on_agents <key>:status',
    'align'    => {
        'agent_name'        => 'center',
        'depends_on_agents' => 'center-5',
        'status'            => 'left'
    },
    'filters' => {
        'depends_on_agents' => 'nroot.parser.dependency_chain',
        'status'            => 'nroot.parser.dependency_status'
    }
};

return 0;

# ______________________________________________________________________________
#\\3XAF5U5X4LECEL5CN3MJA7T7MGVUSHMOSFWTHBN5SP2EWKWHYJ6VNR6EUV2WUM2633ZUQCC4S6PZY
# \\ HW4SYBHTPS5BKSSCUJCKFZUR5BAQBZIEUIWQLN4YVITDXKCRFP6D \\// C25519-BASE-32 //
#  \\// PGAII2HXAHNAV3HJP5O3W4XZN43ZXUE55WAFAAMYHN6YWHKQGDI \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
