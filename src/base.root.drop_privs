# >:]

# name = base.root.drop_privs
# todo = more cleanup.,

my $noop = ( defined $_[1] and $_[1] eq 'noop' ) ? 1 : 0;

my $user = shift;

<[base.root.check_system_user]>->($user);

<[base.check_dependency_dirs]>->($user);

if ( !length( $user // '' ) ) {
    <[base.log]>->(
        0, '<< cannot drop priviledges [ no user name supplied ] >>'
    );
    <[base.exit]>->(110) if !$noop;
    return -1;
} else {

    my ( $name, $pwd, $uid, $gid, $quota, $comment, $gcos, $home_dir, $shell )
        = getpwnam($user);

    my %_gid = map { $ARG => 1 } split( m| |, $GID );
    my %egid = map { $ARG => 1 } split( m| |, $EGID );

    if (    !$noop
        and defined $name
        and exists $_gid{$gid}
        and exists $egid{$gid}    # [LLL] complete secondary group[s] setup .,
        and $EUID == $uid and $UID == $uid
    ) {
        <[base.log]>->( 1, "set_privs: already am '$user', doing nothing." );
        return -2;
    } elsif ($UID) {
        <[base.log]>->(
            0, "<< cannot change privs to user '$user' [ not root ] >>"
        );
        <[base.exit]>->(110) if !$noop;
        return -1;
    } else {
        if ( not defined $name or $name ne $user ) {
            <[base.log]>->(
                0, "<< cannot change privs to '$user' [ no such user ] >>"
            );
            <[base.exit]>->(110) if !$noop;
            return -1;
        } else {
            my @rgids;
            while ( my ( $_name, $_pw, $_gid, $_members ) = getgrent ) {
                push( @rgids, $_gid )
                    if ( grep( $ARG eq $user, split( m|\s+|, $_members ) ) );
            }

            if ( !length( $home_dir // '' ) ) {
                <[base.log]>->(
                    0, sprintf( "<< undefined homedir [ user '%s' ] >>", $user )
                );
                <[base.log]>->( 2, " :. setting to '/'.," );
                $home_dir = '/';
            } elsif ( !-d $home_dir and $home_dir ne '/nonexistent' ) {
                <[base.log]>->(
                    0,
                    sprintf(
                        "<< user '%s' has no home dir [ creating %s ] >>",
                        $user, $home_dir
                    )
                );
                make_path(
                    $home_dir,
                    {   'mode'  => 0700,
                        'uid'   => $uid,
                        'group' => $gid
                    }
                );
            } elsif ( !-d $home_dir or $user eq 'nobody' ) {    # /nonexistent
                <[base.log]>->(
                    0, "<< unable to create home directory '$home_dir' >>"
                ) if $home_dir ne '/nonexistent';
                ### temporary home directory ###
                <system.privs.create_temp_home> //= 0;

                if ( !<system.privs.create_temp_home> ) {
                    $home_dir = '/';
                    <[base.log]>->(
                        1, "[unix:'nobody'] changing home path to '$home_dir'"
                    );
                } else { # creating temporary home directory for user 'nobody':.
                    my $tdir_template
                        = <system.agent.name> ne 'nroot'
                        ? sprintf "T.h.%s.%s.%d", <system.agent.name>, $user, $PID
                        : sprintf "T.h.%s.XXXXXXXXXX", $user;
                    $home_dir
                        = <[base.temp_dir]>->( '/var/tmp/', $tdir_template );
                    if ( -d $home_dir ) {
                        chown( $uid, $gid, $home_dir )
                            or warn "chown[$uid,$gid,$home_dir]: $OS_ERROR";
                        <[base.log]>->(
                            1, ":: created temporary home directory"
                        );
                        <[base.log]>->( 1, " : $home_dir" );
                        push(
                            @{<system.init_reports>},
                            {   'target_command' => 'nroot.report-temp-path',
                                'param'          => $home_dir,
                                'descr' => 'registering temporary directory'
                            }
                        );
                    }
                }
            }

            return {
                'uid'      => $uid,
                'gid'      => $gid,
                'all_gids' => join( ' ', $gid, @rgids ),
                'home'     => $home_dir
                }
                if $noop;

            $EGID = join( ' ', $gid, @rgids );
            $GID  = $gid;
            $EUID = $uid;
            $UID  = $uid;

            $ENV{'USER'}            = $name;
            $ENV{'HOME'}            = $home_dir;
            $ENV{'XDG_RUNTIME_DIR'} = $home_dir;
            $ENV{'NO_AT_BRIDGE'}    = 1;
            chdir($home_dir) or warn "chdir( $home_dir ): $OS_ERROR\n";

            <[base.log]>->( 1, "changed priviledges to user '$user'" );
        }
    }
}

# ______________________________________________________________________________
#\\ELZ26HBOHT3LBUROA3I3VAMPBSHEVBMN6UEI22P57BX3H7EZY6GSJW7C6H3AC6RLYO6NMBJ52G5AG
# \\ ZW6B2MLC3HYQR3LEKXOZJAXLOUGLQXV6UTSKZBDSWAPEOS34IZAI \\// C25519-BASE-32 //
#  \\// V3NUVSZHYHHJM3B2OZKTE3RDISHXQCUJG5VSNAKU2X6DYT4FEAQ \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
