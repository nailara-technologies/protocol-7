# >:]

# name = pdf.html.child.check_cache_timeout

my $remove_count = 0;
<pdf.html.cache_timeout> //= 30;    # days
my $cache_dir     = <pdf.html.cache_dir>;
my $cache_timeout = <pdf.html.cache_timeout> * 3600 * 24;

<[base.log]>->( 1, "checking cache directory timestamps..," );

opendir( my $dir_fh, $cache_dir ) or die "$cache_dir: $!";
foreach my $subdir ( readdir($dir_fh) ) {
    next if $subdir =~ /^\./;
    next if !-f "$cache_dir/$subdir/.last_used";
    my $timestamp = <[file.read_timestamp]>->("$cache_dir/$subdir/.last_used");
    my $remove_cache = not defined $timestamp ? 1 : 0;

    if ( !$remove_cache ) {
        my $cache_age = time() - $timestamp;
        $remove_cache = 1 if $cache_age >= $cache_timeout;
    }

    if ($remove_cache) {
        my $errors = [];
        <[base.log]>->( 1, "cache directory '$subdir' expired, removing.." );
        remove_tree( "$cache_dir/$subdir", { error => \$errors } );
        for my $err (@$errors) {
            my ( $file, $message ) = %$err;
            if ( $file eq '' ) {
                <[base.log]>->( 0, "remove_tree($subdir): $message" );
            } else {
                <[base.log]>->( 0, "remove_tree: $message [$file]" );
            }
        }
        $remove_count++ if !@$errors;
    }
}
my $y = $remove_count == 1 ? 'y' : 'ies';
<[base.log]>->( 1, ": $remove_count director$y removed." );

# ______________________________________________________________________________
#\\WG2S3H57N6RIY76W3PARBRLHYFWHAL3TA6ZHMFQFJUDMSOEZDEWOMBPDVEGPSDPHPMHM4KDUY7WVK
# \\ 6Z67BSAKCHOZUQH7D5NTXN77X3V5SAL2BAHZGEJPTKOVQONLEUWH \\// C25519-BASE-32 //
#  \\// QOEM5K2RI5K5URR7WTZQSXTCKEKAZGAI3KAVVMZGDOW44J3AWDQ \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
