# >:]

# name = crypt.C25519.key_vars

my $key_name = shift;

return <crypt.C25519.key_vars>
    if defined <crypt.C25519.key_vars>
    and (
    not defined $key_name
    or ( defined <crypt.C25519.base_key_name>
        and $key_name eq <crypt.C25519.base_key_name> )
    );

my $cur_usr = $ENV{'USER'} // getpwuid($>);
my $key_usr = <crypt.C25519.key_usr> // <system.privs.user> // $cur_usr;

$key_usr = $cur_usr if $cur_usr ne 'root' and $cur_usr ne $ENV{'USER'};

( my $uid, my $gid ) = ( getpwnam($key_usr) )[ 2, 3 ];

if ( defined $key_name ) {
    <crypt.C25519.base_key_name> = $key_name;
} else {
    $key_name //= <crypt.C25519.base_key_name> // join( '.', $key_usr, 'base' );
}
my $home_dir = <crypt.C25519.key_usr_home> //= <[base.get_homedir]>->($key_usr);
my $key_dir  = <crypt.C25519.key_dir>      //= "$home_dir/.n/user-keys";

my $key_file_ext;
my $key_filename;
my $C25519_keyid = 'C25519.B32';
my $key_basepath = "$key_dir/$key_name.";

map { $key_file_ext->{$_} = "$C25519_keyid.$_" } qw| secret public |;
map { $key_filename->{$_} = $key_basepath . $key_file_ext->{$_} }
    keys %{$key_file_ext};

$key_basepath .= $C25519_keyid;

return <crypt.C25519.key_vars> = {
    'uid'          => $uid,
    'gid'          => $gid,
    'usr_name'     => $key_usr,
    'usr_home'     => $home_dir,
    'key_dir'      => $key_dir,
    'key_name'     => $key_name,
    'key_basepath' => $key_basepath,
    'key_file_ext' => $key_file_ext,
    'key_filename' => $key_filename
};

# ______________________________________________________________________________
#\\TOYEIZWPGQ5MHAUUXMHGISSUX5ZHL3KHW4YFI5X6SYHDFSGESH73AZ2YR4HECJYTS5KL5KQO4CD5O
# \\ 4SNI75W2IK2LTFILQ22DAN4ENQ432TMCWSBC462PJ5QLOCFREADZ \\// C25519-BASE-32 //
#  \\// DH2FPDOYYYUEWQVKYTABLVJUCMVM3N5IBH5UJRGT4BXGCOL34DY \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
