# >:]

# name = nroot.handler.status_timer_response

my $response    = shift;
my $instance_id = $response->{'params'}->{'instance_id'};
if ( not exists <nroot.agent.instance>->{$instance_id} ) {
    <[base.log]>->( 1, "instance $instance_id gone, skipping response timer" );
    return;
}
my $instance      = <nroot.agent.instance>->{$instance_id};
my $is_core_agent = $instance->{'is_core'};
my $agent_name    = $instance->{'agent_name'};
my $fail_count    = $instance->{'ping'}->{'errors'}++;
my $ping_retry    = $fail_count ? 0 : 1;                     # retry once

$instance->{'timeout_timer'}->cancel
    if defined $instance->{'timeout_timer'}
    and !$instance->{'timeout_timer'}->is_cancelled;

if (    $response->{'cmd'} eq 'ACK'
    and $response->{'call_args'}->{'args'} eq 'pong' ) {     # all fine
    delete $instance->{'ping'}->{'errors'};
    <[base.log]>->(
        2, "instance $instance_id [$agent_name] ping response ( success )"
    ) if !<debug.skip_nroot_ping>;

} elsif ( !$ping_retry ) {

    return if $instance->{'status'} eq 'error';

    <[base.log]>->(
        0, "instance $instance_id [$agent_name] ping response ( error )"
    );
    delete <callback.session.closing_last> if $is_core_agent; # for safe restart

    <[nroot.cancel_status_timer]>->($instance_id);
    $instance->{'ping'}->{'errors'} = 0;    # <- resetting fail counter
    <[agent.change_status]>->( $instance_id, 'error' );

} else {
    <[base.log]>->(
        0,
        "instance $instance_id [$agent_name]"
            . " ping response ( error ) [..retrying..]"
    );

    # setting shorter ping timeout..
    $instance->{'timeout_timer'}->cancel
        if defined $instance->{'timeout_timer'}
        and $instance->{'timeout_timer'}->is_active;
    $instance->{'timeout_timer'} = <[event.add_timer]>->(
        {   'after'   => $instance->{'ping'}->{'retry_timeout'} // 2,
            'handler' => 'nroot.handler.status_response_timeout',
            'data'    => $instance_id
        }
    );
}
