# >:]

# name = httpd.handler.download_transfer

my $watcher  = $_[0]->w;
my $id       = $watcher->data->{'id'};
my $session  = $data{'session'}{$id};
my $download = $session->{'download'};
my $clients  = <httpd.downloads.in_progress> ||= 1;

my $min_buf_size = 4096;
my $max_buf_size
    = sprintf( "%.0f", <httpd.downloads.total_bufsize_max> / $clients );
$max_buf_size = $min_buf_size if $max_buf_size < $min_buf_size;
$max_buf_size = <httpd.downloads.max_buffer_size>
    if $max_buf_size > <httpd.downloads.max_buffer_size>;

my $read_size = $max_buf_size - length( $session->{'buffer'}->{'output'} );

return 1 if !$read_size;    ## <-- output buffer full ##

my $content_fh = $download->{'content_fh'};
my $part_count = $download->{'part_count'};
my $part_id    = $download->{'part_id'};
my $ranges     = $download->{'ranges'};

warn "[$id] content filehandle already closed" and goto ABORT_DOWNLOAD
    if !fileno( $content_fh // '' );

if ($part_count) {    ## one or more byteranges ##
    my $part_size_remaining
        = $ranges->[$part_id]->{'part_size'} - $download->{'part_pos'};
    $read_size = $part_size_remaining if $part_size_remaining < $read_size;
} else {
    $read_size = $download->{'total_bytes_remaining'}
        if $download->{'total_bytes_remaining'} < $read_size;
}

my $multipart_footer;
if ( $read_size <= 0 ) {
    if ( $part_id < $part_count - 1 ) {    ## more parts are queued..,
        $download->{'part_id'} = ++$part_id;
        <[base.log]>->( 1, "[$id] part $part_id of $part_count transferred.," );
        sysseek( $download->{'content_fh'}, $ranges->[$part_id]->{'start'}, 0 );
        $read_size = $ranges->[$part_id]->{'part_size'}
            if $ranges->[$part_id]->{'part_size'} < $read_size;
        my $part_header = $ranges->[$part_id]->{'part_header'};
        $download->{'total_bytes_remaining'} -= length($part_header);
        $session->{'buffer'}->{'output'} .= $part_header;
        $download->{'part_pos'} = 0;

        $multipart_footer = sprintf( "\n--%s--\n", $download->{'boundary'} )
            if 1 + $part_id == $part_count;    # <-- last multipart segment

    } else {    ## transfer was complete ##
        $watcher->stop;
        return 1;
    }
}
warn "[$id] content read size was zero" and goto ABORT_DOWNLOAD if !$read_size;

my $bytes_read = <[base.s_read]>->(
    $content_fh, \$session->{'buffer'}->{'output'},
    $read_size,  length( $session->{'buffer'}->{'output'} )
) if $read_size;

warn "[$id] unsuccessful read from content filehandle" and goto ABORT_DOWNLOAD
    if not defined $bytes_read or !$bytes_read;

$download->{'total_bytes_remaining'} -= $bytes_read;

if ( defined $multipart_footer
    and $download->{'total_bytes_remaining'} == length($multipart_footer) ) {
    $session->{'buffer'}->{'output'} .= $multipart_footer;
    $download->{'total_bytes_remaining'} = 0;
}

if ( $download->{'total_bytes_remaining'} == 0 ) {
    <[base.log]>->( 1, "[$id] download complete." );
    $watcher->cancel;
    close( $download->{'content_fh'} );
    delete $session->{'watcher'}->{'download_handler'};
    delete $session->{'download'};

    <[httpd.update_download_count]>;

    if ( $session->{'http'}->{'close'} ) {
        $session->{'flush_shutdown'} = 1;
    } else {
        $session->{'watcher'}->{'input_handler'}->timeout(<httpd.timeout>);
    }
    return 0;

} else {
    $download->{'part_pos'} += $bytes_read if $part_count > 1;
    return 1;
}

ABORT_DOWNLOAD:
$session->{'flush_shutdown'} = 1;
$watcher->stop;
return 0;

# ______________________________________________________________________________
#\\NTVZ6G5B3ZDOVPPWVIWE2SZEJCYPMVRPAXXTBWH6NC3XBGPKX4SEVYPNCZ2566QPPHB7I64YCZN6W
# \\ 6D44KFAUXJXBMX4X3XUYNTLALRGXZS5HMGAH3AYBU2274WEOS63Z \\// C25519-BASE-32 //
#  \\// 6O4CRMNCPTHME3P5BGIZIBEEEBJZC7JJWFXWKVYGP4NY6WTEKDA \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
