# >:]

# name   = plugin.auth.C25519-TF
# return = str(user name) (success), undef [error]

my $id = $_[0]->w->data;
my $re = <regex.base>;

my $input  = \$data{'session'}{$id}{'buffer'}{'input'};
my $output = \$data{'session'}{$id}{'buffer'}{'output'};

my $auth_state = $data{'session'}{$id}{'c25519'} //= {};

if ( $$input =~ s|^get-key ($re->{usr})\n|| ) {

    ## creates and returns signed temp key ##

} elsif ( $$input =~ s|^set-key ($re->{usr}) (\S+)( (\S+))?\n|| ) {
    $auth_state->{'peer_name'}          = $1;
    $auth_state->{'peer_pubkey'}        = $2;
    $auth_state->{'peer_net_signature'} = $3;    # optional in 'anon-usr' case

    ## search and check signature [if given]
    my $has_net_sig = defined $auth_state->{'peer_net_signature'} ? 1 : 0;

    return 1;                                    # <- keep state

} elsif ( $$input =~ m|\n| ) {
    $$output .= ">:[\a\n";
    <[base.log]>->( 0, "[$id] authentication protocol mismatch [ C25519-TF ]" );
    return 2;                                    # <- terminate
} else {
    return 1;                                    # <- keep state
}

# ______________________________________________________________________________
#\\6WGTAMJTM36Y76S252W7M72WCEBEOLSRRUVPGRLG774D5DZQTTLGGXOJFGUY4DUJHHVETHZMFW7OO
# \\ ILQC5LMQYFWZBQ5CG472SSKFBR3A3UQCHDQBGAXCROT2ZP24AKVQ \\// C25519-BASE-32 //
#  \\// W2KGSMSE6V342YRKHNLRZNJ53F5Q42KFXLE5CXKLGS6OWPRCMBY \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
