# >:]

# name  = base.cmd.localtime
# param = [unix|ntime[-b32]]
# descr = return local date string [in host's timezone]

my $unix_time = $$call{'args'} // time();

my $utime_decoded;
my $utime_copy = $unix_time;
eval { $utime_decoded = decode_b32r($unix_time) }
    if $unix_time =~ m|[A-Z]|
    and length($unix_time) == 10;
$unix_time = unpack( 'w', $utime_decoded )
    if defined $utime_decoded;
$unix_time = $utime_copy    # <<[?]>> deal with rare false positives <<[?]>>
    if $$call{'args'} =~ m|[A-Z]| and ( not defined $unix_time or $@ );

return {
    'mode' => 'nak',
    'data' => "submitted parameter string is not valid"
    }
    if $@
    or not defined $unix_time
    or $unix_time !~ /^\d{1,17}(\.\d{1,20})?$/;
$unix_time = int($unix_time) if $unix_time =~ /\./;

$unix_time = <[base.n2u_time]>->($unix_time) if length($unix_time) >= 13; # <-nt

return {
    'mode' => 'nak',
    'data' => "queried value is out of range"
    }
    if $unix_time > 67767976233316804;

my $ltime_str = scalar localtime $unix_time;

return {
    'mode' => 'nak',
    'data' => "unix_time value is too high"
    }
    if not defined $ltime_str or !length($ltime_str);

return {
    'mode' => 'ack',
    'data' => $ltime_str
    }

# ______________________________________________________________________________
#\\ATTJKMN6WBKNOUWZWTRPE6DP7YGXXRNJZKBUUBJFFOTBKS66W6OR6ZV3JYHBW7TQRC3OJ57ZXL2HY
# \\ RIQMJ74RJAHXEIC467JSRB3WDCBG6N7K3MMO4QIM27LPF3PCDMQB \\// C25519-BASE-32 //
#  \\// QGY6YVDGWY7EBUR25LZOLPYSA65IQRINRD4TTELVVDFWNGH3UBY \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
