# >:]

# name  = source.cmd.get-code-signed
# descr = return specified source code subroutine

my $code_name      = $$call{'args'};             ## [ LLL ] implement multiple ?
my $skip_unchanged = $call->{'skip-valid'} // 0;

return { 'mode' => 'ack', 'data' => 'still valid. =)' }
    if $skip_unchanged and $code_name eq 'source.init_code';

my $code_dir = <source.code_path>;
$code_dir = <source.path.work_tree> if $code_name =~ m|/|;
my $src_path = File::Spec->catfile( $code_dir, $code_name );

# <<< ! >>> compare abs path here ..,
my $bit_size = <source.chksum_bitsize>;

return { 'mode' => 'nak', 'data' => 'requested code name is not valid' }
    if !<[source.valid_src_name]>->($code_name);
return { 'mode' => 'nak', 'data' => 'code file not found' } if !-f $src_path;

<[file.slurp]>->( $src_path, \my $src_str );
return { 'mode' => 'nak', 'data' => 'failed to read code file' }
    if not defined $src_path;
## checking source header ##
return { 'mode' => 'nak', 'data' => 'requested code file has no valid header' }
    if $code_dir =~ m|/src$| and substr( $src_str, 0, 7 ) ne "# >:]\n\n";

my $footer_data       = <[source.extract_sig_body]>->( \$src_str, 'strip' );
my $present_checksum  = delete $footer_data->{'bmw-chksum'};
my $present_signature = delete $footer_data->{'signature'};

## checksum and signature verification ##

my $recalc_data = <[source.fill_source_template]>->($footer_data);

if (   not defined $present_checksum
    or not defined $present_signature
    or $present_signature ne $recalc_data->{'signature'} ) {
    if ( not defined $present_signature ) {

        <[base.log]>->( 2, ':*: was not signed yet ..,' );
        <[base.log]>->( 2, ': :' );
    } else {

        <[base.log]>->( 2, ':*: body data checksum has changed ..,' );
        <[base.log]>->( 2, ': :' );
        <[base.log]>->( 2, ':-: [ BMW data checksum ] < ..found >' );
        <[base.log]>->( 2, sprintf( ": %s .,", $present_checksum ) );

    }
    $src_str .= $recalc_data->{'source-footer'};
    <[base.log]>->( 2, ':\\: [ BMW data checksum ] < current. >' );
    <[base.log]>->( 2, sprintf( ": %s .,", $recalc_data->{'data-chksum'} ) );
    <[base.log]>->( 2, ': :' );

    if ( defined $present_signature ) {
        <[base.log]>->( 2, ':+: [ previous signature ]' );
        <[base.log]>->( 2, sprintf( ":.%s .,", $present_signature ) );
    }
    <[base.log]>->( 2, ':+: [ current checksum signature ]' );
    <[base.log]>->( 2, sprintf( ":.%s .,", $recalc_data->{'signature'} ) );

} else {
    <[base.log]>->( 2, ':.: blue midnight wish C25519 signature valid. =)' );

    ## [ SKIP UNCHANGED MODE ] ##
    return { 'mode' => 'ack', 'data' => 'still valid. =)' } if $skip_unchanged;
    ##
}

return { 'mode' => 'data', 'data' => $src_str } ## <-- current \ updated source.

# ______________________________________________________________________________
#\\W3L6B7UNTBCQOYP5J7SBRWNWMAF3KRV7C6QOQYBQANF3XMVHNDD7PTRZAHJHURJP3L5N3ALGRAJ24
# \\ ARKV7UATVVP5YYJQ2UPBFDYWI3SVZODM5NWT6NEGMUXM26KPAGWE \\// C25519-BASE-32 //
#  \\// HABC3QU3K6I7W4K3PU4U55GTCHQBIECLVXSSNFLBFZOERYTNMAI \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
