# >:]

# name  = source.cmd.get-code-signed
# descr = return specified source code subroutine

my $code_name = $$call{'args'};
my $src_path  = File::Spec->catfile( <source.code_path>, $code_name );
my $bit_size  = <source.chksum_bitsize>;

return { 'mode' => 'nak', 'data' => 'requested code name is not valid' }
    if !<[source.valid_src_name]>->($code_name);
return { 'mode' => 'nak', 'data' => 'code file not found' } if !-f $src_path;

<[file.slurp]>->( $src_path, \my $src_str );
return { 'mode' => 'nak', 'data' => 'failed to read code file' }
    if not defined $src_path;
return { 'mode' => 'nak', 'data' => 'requested code file is not valid' }
    if substr( $src_str, 0, 7 ) ne "# >:]\n\n";

## strip footer ________
my $footer_start = '# ';
$footer_start = '_' x 78;

my $footer_data = <[source.extract_sig_body]>->( \$src_str );

## verification // ammense ## ( no data optional ]

my $packet_data = <[source.fill_source_template]>->($footer_data);

if ( $packet_data->{'data-chksum'} eq $packet_data->{'signed-chksum'} ) {
    <[base.log]>->( 1, ':*: blue midnight wish signature is still valid.' );
} else {
    <[base.log]>->( 1, ':*: body data checksum has changed ..,' );
    <[base.log]>->( 2, ': :' );
    <[base.log]>->( 2, ':*: [ signed BMW checksum ]' );
    <[base.log]>->( 2, sprintf( ": %s .,", $packet_data->{'signed-chksum'} ) );
    <[base.log]>->( 2, ': :' );
    <[base.log]>->( 2, ':*: [ BMW data checksum ] < now >' );
    <[base.log]>->( 2, sprintf( ": %s .,", $packet_data->{'data-chksum'} ) );
}

return {
    'mode' => 'data',
    'data' => Dumper($footer_data)
};
return {
    'mode' => 'data',
    'data' => $src_str
    }
