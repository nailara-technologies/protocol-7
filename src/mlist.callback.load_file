# >:]

# name = mlist.callback.load_file

my $file_path    = shift // <mlist.load_file.path>;
my $check_types  = <mlist.http.check_content_types>;
my $check_logged = 0;

die "expected playlist file path"
    if not defined $file_path or !length($file_path);
( my $file_name = $file_path ) =~ s|^.*/||;

<[base.log]>->( 1, ": <<< playlist '$file_path' not found >>>" )
    and return -1
    if !-f $file_path;

<[base.log]>->( 1, "loading playlist file '$file_name'" );

if ( exists <mlist.mime_type.retry_timer> ) {
    map {
        <mlist.mime_type.retry_timer>->{$_}->cancel
            if <mlist.mime_type.retry_timer>->{$_}->is_active
    } keys %{<mlist.mime_type.retry_timer>};
    delete <mlist.mime_type.retry_timer>;
}

my @lines;
my @file_names;
<[file.slurp]>->( $file_path, \@lines, ':raw' ); ## reads encoded utf8 content #

map {
    $_ =~ s/^\s+|\s+$//g;
    $_ =~ s|^ *#[^\n]*$||mg;
    $_ =~ s| +#[^\n]*$||mg;
    $_ =~ s|\n\n|\n|sg;
    $_ =~ s/^\n|\n$//mg;
    push( @file_names, $_ ) if length($_);
} @lines;

my $tiles_visible_file = "$file_path.tiles_visible";
if ( -f $tiles_visible_file ) {
    if ( open( my $tilesv_fh, $tiles_visible_file ) ) {
        $tiles_visible_file =~ s|^.+/||;
        <[base.log]>->( 1, ": applying filter file '$tiles_visible_file'!" );
        my @filtered_list;
        my %visible_tiles;
        map { chomp($_); $visible_tiles{$_} = 1 } split / *, */, <$tilesv_fh>;
        map {
            push( @filtered_list, $_ )
                if $_ =~ /^([^:]+):/
                and exists $visible_tiles{$1}
        } @file_names;
        my $skipped = @file_names - @filtered_list;
        $skipped = 'no' if $skipped == 0;
        <[base.log]>->( 1, ": : $skipped entries skipped" );
        @file_names = @filtered_list;
        close($tilesv_fh) or warn $!;
    }
} else {
    <[base.log]>->( 2, ": no filter file ('$tiles_visible_file') present .." );
}

<mlist.file_list>     = [];
<mlist.b32id_src_str> = {};
<mlist.file_types>    = {};
<mlist.type_cache> //= {};
<mlist.file_types>     = {};
<mlist.agent_subnames> = {};
<mlist.items_queued>   = 0;
<mlist.network_errors> = 0;
<mlist.had_network_errors>      //= 0;
<mlist.cfg.cache_content_types> //= 0;

if ( !@file_names ) {
    <mlist.type_cache> = {};
    <[base.log]>->( 0, "no files in playlist!" );
    <[base.proto.nailara.command.send.local]>->(
        {   'command'   => "core.nroot.restart",
            'call_args' => { 'args' => <update.restart_on_empty> }
        }
    ) if defined <update.restart_on_empty>;
    <[mlist.update.send_notifications]>;
    return 0;
} else {

    # LLL: need file type cache auto cleanup + delay and combine update requests
}

my %b32_index;
my $file_index = -1;
foreach my $file (@file_names) {
    $file_index++;
    my $agent_subname;
    my $type = 'unknown';

    ( my $parsed_line = $file ) =~ s/^([^:]+:) /$1/;
    $parsed_line =~ s/ \([^\)]+\)$//;

    my $b32id
        = <[digest.crc.b32]>->( ++$b32_index{$parsed_line}, $parsed_line );

    <mlist.b32id_src_str>->{$b32id} = $parsed_line;  # LLL: cleanup + collisions

    $agent_subname = $1 if $file =~ s|^([^\:]+): +||;
    $type          = $1 if $file =~ s| +\(([^\)]+)\)$||;
    $type = 'unknown' if $type eq 'url';
    <mlist.agent_subnames>->{$file_index}->{$agent_subname} = 1
        if defined $agent_subname;

    ### URL flags ###
    <mlist.cfg.allow_url_flag_syntax> //= 0;
    my $flag_str;
    if ( <mlist.cfg.allow_url_flag_syntax>
        and $file =~ s/#\[([A-Z0-9_\.\|=]+)\]#$// ) {
        $flag_str = lc($1);
    }
    $file =~ s|#\[[^\]]+\]#||g;    # cleanup

    ### LLL: weather agent test hack ###
    if ( $file =~ /^\[weather:(.+)\]$/ ) {

        if ( not exists <mlist.agent_online> or !<mlist.agent_online> ) {
            <mlist.items_queued>++;
            $type = ':queued:';
        } else {
            ( my $city_str = $1 ) =~ s|\[.*$||g;
            my $city = $city_str;
            $city_str .= " [$agent_subname]" if defined $agent_subname;
            <[base.proto.nailara.command.send.local]>->(
                {   'command'   => "core.weather.get-urls",
                    'call_args' => { 'args' => $city_str },
                    'reply'     => {
                        'handler' => 'mlist.handler.weather_urls_reply',
                        'params'  => {
                            'city'    => $city,
                            'subname' => $agent_subname
                        }
                    }
                }
            );
            $type = ':waiting:';
        }
    }

    ####################################

    if ( $type eq 'unknown' and -f $file ) {
        $type = mimetype($file);
    } elsif ( $type eq 'unknown' and $file =~ m|^https?://| ) {
        if (    $check_types
            and <mlist.cfg.cache_content_types>
            and defined <mlist.type_cache>->{$file} ) {
            $type = <mlist.type_cache>->{$file};
            <[base.log]>->(
                2, "using cached file type '$type' [entry #$file_index]"
            );
        } elsif ($check_types) {

            if ( !$check_logged ) {
                <[base.log]>->( 1, ': checking http content types ...' );
                $check_logged = 1;
            }
            <mlist.mime_type.retry_timer>->{$file} = <[event.add_timer]>->(
                {   'after'   => 0,
                    'handler' => 'mlist.callback.check_mimetype',
                    'data'    => {
                        'check_url'   => $file,
                        'retry_delay' => <mlist.mime_retry.start_delay>
                    }
                }
            ) if not exists <mlist.mime_type.retry_timer>->{$file};
            $type = ':waiting:';
        } else {
            $type = 'html';
        }
    } elsif ( $file =~ m|^udp://| ) { # LLL: temporary hack for mcast live video
        $type = 'video';
    } elsif ( $file =~ m|^rt[sm]p://| ) {    # video
        $type = 'video';
    } elsif ( $type eq 'unknown' and -f $file ) {
        <[base.log]>->( 0, "unable to determine type of local file '$file'!" );
        next;
    }

    $type =~ s|^video/.*$|video|;
    $type =~ s|^audio/.*$|audio|;
    $type =~ s|^image/.*$|image|;
    $type =~ s|^.*application.*/||;
    $type =~ s|^text/||;
    $type =~ s|;.*$||g;
    $type =~ s| +|_|g;

    if (    $file !~ /^\w+:\/\//
        and $file !~ /^\[.+\]$/
        and ( !-e $file or !-r $file ) ) {
        delete <mlist.agent_subnames>->{ $file_index-- };
        my $reason_str = !-r $file ? "denied access" : "not found";
        $reason_str .= " ($type)" if $type ne 'unknown';
        <[base.log]>->( 0, ": $reason_str : '$file'" )
            if not exists <mlist.file_error_logged>->{$file};
        <mlist.file_error_logged>->{$file} //= 1;
        next;
    }

    push( @{<mlist.file_list>}, $file );

    delete <mlist.file_error_logged>->{$file}
        if exists <mlist.file_error_logged>->{$file};

    <mlist.file_types>->{$file} //= $type;
    <mlist.type_cache>->{$file} = $type
        if !<mlist.cfg.cache_content_types> or $type !~ /^:[^:]+:$/;

    ### URL flags ###
    if ( defined $flag_str ) {
        foreach my $flag_sub_str ( split /\|/, $flag_str ) {
            my ( $flag_name, $flag_param ) = split( /=/, $flag_sub_str );
            if ( not exists <mlist.url_flags>->{$flag_name} ) {
                <[base.log]>->(
                    1, "<::> invalid flag '$flag_name' requested! [$file]"
                );
                next;
            }
        }
        my $s = $flag_str =~ s/\|/,/g ? 's' : '';
        <[base.log]>->( 1, "<::> setting url flag$s for '$file'.." );
        my $flag_reply
            = <[mlist.cmd.set_flags]>
            ->( { 'args' => join( ' ', $flag_str, $file ) } );
        <[base.log]>->( 0, "<!> flag error on '$file' [$flag_reply->{data}]" )
            if $flag_reply->{'mode'} ne 'ack';
    }
}

if ( <mlist.had_network_errors> and !<mlist.network_errors> ) {
    <mlist.had_network_errors> = 0;
    delete <mlist.retry_delay>;
    <[base.log]>->( 1, ": all network errors resolved! =)" );
}

# ______________________________________________________________________________
#\\SH4U6LTYUXYJCUXSV25R2GNFLLGU3273HJ7BSBXOW5S7KSUV4PH53V7RGASFOIFHCJ26LT4LPUBHS
# \\ HWDILXC2EJ7YRA7XV32WVZ4BP2AJDXT7CPRP4CY2OQGLOJJ5OOSQ \\// C25519-BASE-32 //
#  \\// RDQUYZUJL242CJLWNUWWLIYAFQSFQRIJ3FOJPLILTUU72NTASCA \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
