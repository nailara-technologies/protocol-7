# >:]

# name = layout.handler.transition

my $core_reply = shift // {};

die "[!] no layout transition data defined"
    if not defined <layout.transition.status>
    or !keys %{<layout.transition.status>};
<layout.transition.status>->{'start_time'} //= <[base.time]>->(4);

my $fade_out_duration = 0.8;    # -> config

### removing agents not present in new layout / present before agent restart ###

if ( not defined <layout.transition.status.waiting.stop>
    and defined <layout.transition.status.agents.stop> ) {
    my @stop_agents = keys %{<layout.transition.status.agents.stop>};
    <layout.transition.status.waiting.stop> = scalar @stop_agents;
    <layout.transition.status.waiting.i_id> = 0;
    <layout.transition.status.agents.fade_out> //= {};
    my @stop_now_agents;
    foreach my $agent (@stop_agents) {
        my $layout_name = <layout.transition.status.agents.stop>->{$agent};
        my $layout_data = <layout.config.layouts>->{$layout_name}->{$agent};
        my $fade        = 0;
        if ( defined $layout_data->{'fade'} and $layout_data->{'fade'} eq '1' )
        {
            <layout.transition.status.agents.fade_out>->{$agent} = $fade = 1;
        }
        if ( !$fade ) {    ## instance_id (no_fade) ##
            <[base.proto.nailara.command.send.local]>->(
                {   'command'   => "core.nroot.get_instance_ids",
                    'call_args' => { 'args' => $agent },
                    'reply'     => {
                        'handler' => 'layout.handler.transition',
                        'params'  => {
                            'event_type' => 'instance_id',
                            'agent_name' => $agent
                        }
                    }
                }
            );
        } else {    ## window_id(s) (fade) ##
            <[base.proto.nailara.command.send.local]>->(
                {   'command'   => "core.xserver.get_window_ids",
                    'call_args' => { 'args' => $agent },
                    'reply'     => {
                        'handler' => 'layout.handler.transition',
                        'params'  => {
                            'event_type' => 'window_id',
                            'agent_name' => $agent
                        }
                    }
                }
            );
            <layout.transition.status.waiting.fade_out>++;
        }
        <layout.transition.status.waiting.i_id>++;
    }
}

my $event_type
    = defined $core_reply->{'params'}->{'event_type'}
    ? $core_reply->{'params'}->{'event_type'}
    : 'init';

if ( $event_type eq 'instance_id' ) {    # instance ids of agents to be stopped

    # print STDERR Dumper($core_reply);

    <layout.transition.status.waiting.i_id>--;
    my $agent = $core_reply->{'params'}->{'agent_name'};
    if (    $core_reply->{'cmd'} eq 'ACK'
        and $core_reply->{'call_args'}->{'args'} =~ /^\d+/ ) {
        my $instance_id = $core_reply->{'call_args'}->{'args'};
        ## notify_offline ##
        <[base.proto.nailara.command.send.local]>->(
            {   'command'   => "core.nroot.notify_offline",
                'call_args' => { 'args' => $instance_id },
                'reply'     => {
                    'handler' => 'layout.handler.transition',
                    'params'  => {
                        'event_type'  => 'is_offline',
                        'agent_name'  => $agent,
                        'instance_id' => $instance_id
                    }
                }
            }
        );
        if ( not defined <layout.transition.status.agents.fade_out>->{$agent}
            or <layout.transition.status.agents.fade_out>->{$agent} ne '1' ) {
            <[base.proto.nailara.command.send.local]>->(    ## stop (no fade) ##
                {   'command'   => "core.nroot.stop_implicit",
                    'call_args' => { 'args' => $instance_id }
                }
            );
        } else {
            my $window_ids = $core_reply->{'params'}->{'window_ids'};
            <[base.proto.nailara.command.send.local]>->(
                {   'command'   => "core.xserver.fade_out",
                    'call_args' => {
                        'args' => join( ' ', $fade_out_duration, $window_ids )
                    },
                    'reply' => {
                        'handler' => 'layout.handler.transition',
                        'params'  => {
                            'event_type'  => 'fade_out',
                            'agent_name'  => $agent,
                            'instance_id' => $instance_id
                        }
                    }
                }
            );

        }
    } else {    ## no such agent online ##
        if ( exists <layout.transition.status.agents.fade_out>->{$agent} ) {
            delete <layout.transition.status.agents.fade_out>->{$agent};
            <layout.transition.status.waiting.fade_out>--;
        }
        delete <layout.transition.status.agents.stop>->{$agent};
        <layout.transition.status.waiting.stop>--;
    }
} elsif ( $event_type eq 'window_id' ) {    ### window id(s) reply ###
    my $agent       = $core_reply->{'params'}->{'agent_name'};
    my $instance_id = $core_reply->{'params'}->{'instance_id'};
    my $window_ids
        = (     $core_reply->{'cmd'} eq 'ACK'
            and $core_reply->{'call_args'}->{'args'} =~ /^\d+/ )
        ? $core_reply->{'call_args'}->{'args'}
        : 0;    # <- 0 == failed, fade will be skipped!

    <[base.proto.nailara.command.send.local]>->(
        {   'command'   => "core.nroot.get_instance_ids",
            'call_args' => { 'args' => $agent },
            'reply'     => {
                'handler' => 'layout.handler.transition',
                'params'  => {
                    'event_type' => 'instance_id',
                    'agent_name' => $agent,
                    'window_ids' => $window_ids
                }
            }
        }
    );
} elsif ( $event_type eq 'fade_out' ) {
    my $agent       = $core_reply->{'params'}->{'agent_name'};
    my $instance_id = $core_reply->{'params'}->{'instance_id'};
    <[base.proto.nailara.command.send.local]>->(    ## stop (fading complete) ##
        {   'command'   => "core.nroot.stop_implicit",
            'call_args' => { 'args' => $instance_id }
        }
    );
} elsif (
    $event_type eq 'is_offline'    ## agent stopped or not running ##
    and defined $core_reply->{'params'}->{'agent_name'}
) {
    my $agent = $core_reply->{'params'}->{'agent_name'};
    if ( exists <layout.transition.status.agents.fade_out>->{$agent} ) {
        delete <layout.transition.status.agents.fade_out>->{$agent};
        <layout.transition.status.waiting.fade_out>--;
    }
    delete <layout.transition.status.agents.stop>->{$agent};
    <layout.transition.status.waiting.stop>--;
    ( my $agent_stripped = $agent ) =~ s/\[.+$//;
    map {
        if ( exists <layout.transition.status.agents.concurrency>->{$_} ) {
            <[base.proto.nailara.command.send.local]>->(
                {   'command'   => "core.nroot.start",
                    'call_args' => { 'args' => $_ },
                    'reply'     => {
                        'handler' => 'layout.handler.transition',
                        'params'  => {
                            'event_type' => 'start',
                            'agent_name' => $_
                        }
                    }
                }
            );
        }
    } ( $agent, $agent_stripped );

} elsif ( $event_type eq 'is_online' ) {    # new agent started successfully
    my $agent = $core_reply->{'params'}->{'agent_name'};
    delete <layout.transition.status.agents.start>->{$agent};
    <layout.transition.status.waiting.start>--;
} elsif ( $event_type eq 'start' ) {
    my $agent = $core_reply->{'params'}->{'agent_name'};
    if ( $core_reply->{'cmd'} eq 'NAK' ) {
        my $reason = $core_reply->{'call_args'}->{'args'};
        if ( $reason =~ /concurrency/ ) {
            $agent =~ s/\[.+$// if $reason !~ /subname/;
            <layout.transition.status.agents.concurrency>->{$agent} = 1;
        } else {

            # failed - log! retry?
        }
    } else {
        ( my $job_id = $core_reply->{'call_args'}->{'args'} ) =~ s|^\D+||;
        ## notify_online ##
        <[base.proto.nailara.command.send.local]>->(
            {   'command'   => "core.nroot.notify_online",
                'call_args' => { 'args' => "job:$job_id" },
                'reply'     => {
                    'handler' => 'layout.handler.transition',
                    'params'  => {
                        'event_type' => 'is_online',
                        'agent_name' => $agent
                    }
                }
            }
        );
    }
}

if (    ( $event_type eq 'instance_id' or $event_type eq 'init' )
    and !<layout.transition.status.waiting.i_id>
    and defined <layout.transition.status.agents.start> ) {
    my @start_agents = keys %{<layout.transition.status.agents.start>};
    <layout.transition.status.waiting.start> = scalar @start_agents;

    foreach my $agent (@start_agents) {
        ## start ##
        <[base.proto.nailara.command.send.local]>->(
            {   'command'   => "core.nroot.start",
                'call_args' => { 'args' => $agent },
                'reply'     => {
                    'handler' => 'layout.handler.transition',
                    'params'  => {
                        'event_type' => 'start',
                        'agent_name' => $agent
                    }
                }
            }
        );
    }

}

if ( defined <layout.transition.status.waiting> ) {    ## in progress? ##
    my $still_waiting = 0;
    map { $still_waiting += <layout.transition.status.waiting>->{$_} }
        keys %{<layout.transition.status.waiting>};
    if ( !$still_waiting ) {                           ## all done! ##
        delete <layout.transition.status.waiting>;
        <layout.transition_in_progress> = 0;
        <[base.log]>->( 1, "transition complete." );

        # cleaning up merged layouts [see overlays]
        my $prev_layout = <layout.previous_layout>;
        delete <layout.config.layouts>->{$prev_layout}
            if defined $prev_layout and $prev_layout =~ /\+/;

        if ( defined <layout.transition_queue>
            and @{<layout.transition_queue>} ) {
            my $trans_count = scalar @{<layout.transition_queue>};
            my $s           = $trans_count > 1 ? 's' : '';
            <[base.log]>->( 1, "found $trans_count queued transition$s.." );
            <[layout.cmd.switch_to]>
                ->( { 'args' => shift @{<layout.transition_queue>} } );
        } elsif ( defined <layout.restore.overlays>
            and @{<layout.restore.overlays>} ) {
            my $count = scalar @{<layout.restore.overlays>};
            my $s     = $count > 1 ? 's' : '';
            <[base.log]>->( 1, "restoring $count layout overlay$s.." );
            <[layout.cmd.add_overlay]>
                ->( { 'args' => join( ' ', @{<layout.restore.overlays>} ) } );
            delete <layout.restore.overlays>;
        }
    }
}

#print STDERR ">---\n" . Dumper( $core_reply, <layout.transition> ) . "<---\n";
#     if $event_type eq 'fade_out';

