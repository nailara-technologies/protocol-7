# >:]

# name = weather.base.calc_zoom_level

my ($local_sid) = keys( %{<user.core.session>} );
<weather.zoom_level> //= 1;

my $cache_dir      = <weather.cache_dir>;
my $zoom_file      = "$cache_dir/weather.zoom";
my $tile_zoom_file = "$cache_dir/weather.tile_zoom";
if ( -f $zoom_file ) {
    <[file.slurp]>->( $zoom_file, \$data{'weather'}{'zoom_level'} );
    chomp(<weather.zoom_level>);
}
if ( -f $tile_zoom_file ) {
    <[file.slurp]>->( $tile_zoom_file, \$data{'weather'}{'tile_zoom'} );
    chomp(<weather.tile_zoom>);
}

<weather.base_zoom> = <weather.zoom_level>;

if ( not defined <weather.browser_zoom> or !<weather.browser_zoom> ) {
    <[base.log]>->(
        1,
        sprintf( "auto zoom is disabled., using default value [%.2f]",
            <weather.zoom_level> )
    );
    return;
} else {
    <[base.log]>->( 1, "auto zoom is enabled.," );
}

my $cmd_id = <[base.gen_id]>->( $data{'route'} );

my $core_fh = $data{'session'}{$local_sid}{'handle'};
<[net.out]>->( $core_fh, "($cmd_id)X-11.get_screen_size\n" );

my $reply_string;
my $matched_reply = 0;
while ( !$matched_reply ) {
    $reply_string  = <$core_fh>;
    $matched_reply = 1 if $reply_string =~ m{^\($cmd_id\)(ACK|NAK) };
    if ( !$matched_reply ) {
        $data{'session'}{$local_sid}{'buffer'}{'input'} .= $reply_string;
    }
}

if ( $reply_string =~ m{^\($cmd_id\)ACK (\d+) (\d+)\n$} ) {
    <x11.screen_width>  = $1;
    <x11.screen_height> = $2;
    <[base.log]>->(
        1,
        sprintf(
            ": received X-11 screen size (%sx%s)",
            <x11.screen_width>, <x11.screen_height>
        )
    );
    my $base_width = 1920;
    my $calc_width
        = <x11.screen_width> > <x11.screen_height>
        ? <x11.screen_width>
        : <x11.screen_height>;
    <weather.zoom_level> = sprintf( "%.3f",
        ( <weather.zoom_level> / $base_width ) * $calc_width );
    <weather.screen_zoom_factor>
        = sprintf( "%.3f", ( 1 / $base_width ) * $calc_width );
    my $m_str = '';

    if ( defined <weather.min_zoom> ) {
        <weather.zoom_level> = <weather.min_zoom>
            if <weather.zoom_level> < <weather.min_zoom>;
        $m_str = ' [ configured minimum ]'
            if <weather.zoom_level> == <weather.min_zoom>;
    }
    <[base.log]>->(
        1, ": recalulated zoom level = " . <weather.zoom_level> . $m_str
    );
    return <weather.zoom_level>;
} elsif ( $reply_string =~ /NAK command unknown$/ ) {
    <[base.log]>->( 1, 'X-11 agent unreachable [running?]' );
} else {
    <[base.log]>->( 0, "not expected X-11 reply ['$reply_string']" );
    return undef;
}

# ______________________________________________________________________________
#\\NMESMUGHDFK67RLSSLGLEPQFAPWGT7LSKU7WY4SFFH67MRVD5PB7EHGCN5NSSO5SLUGHLS3OBWE5M
# \\ MZN3IW7TUTJJNWHJ42G2LEZKWFLF47LHCTUPFWFTTNUKZXYXIASY \\// C25519-BASE-32 //
#  \\// 3FD647OVREJJRRUOKCGLYTCPOYVRDPM7QHKC42Q4TFZCH3EOOAQ \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
