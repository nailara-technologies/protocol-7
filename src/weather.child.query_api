# >:]

# name  = weather.child.query_api

my $query = shift;
die "expected query string" if not defined $query or !length($query);

my $max_retries = 7;
my $language    = <weather.cfg.language>;
my $units       = <weather.cfg.units>;
my $api_key     = <weather.api.key>;
my $base_url    = <weather.api.base_url>;

my $ua = LWPx::ParanoidAgent->new( 'agent' => '' );

my $query_url = "$base_url$query";

$query_url .= "&units=$units&lang=$language";

<[base.log]>->( 2, "requesting '$query_url'" );

my $response;
my $status_code;
my $retry_delay = 0.2;
my $retries     = $max_retries;
my @headers     = ( 'Connection' => 'Close' );
while ( not defined $response or !$response->is_success and --$retries ) {
    push( @headers, 'x-api-key' => $api_key )
        if defined $api_key
        and length($api_key);
    $response = $ua->get( $query_url, @headers );
    $status_code = $response->{'_rc'};

    if ( !$response->is_success and $retries ) {
        my $status_str = defined $status_code ? " ($status_code)" : '';
        <[base.log]>->( 1, "query failed" . $status_str . ", retrying.." );
        <[base.sleep]>->( $retry_delay *= 2 );
    }
}

if ( not defined $response or !$response->is_success ) {
    $max_retries++;
    <[base.log]>->( 0, "query failed $max_retries times [$query_url]" );
    return ( $status_code, undef );
}

#print Dumper($response);

my $content = $response->{'_content'};    # XXX: check...

$content =~ s|failed to set keepalive: unread data in buffer\n$||s;

my $json_decoded;
eval { $json_decoded = <weather.child.json>->decode($content) };

if (   $@
    or not exists $json_decoded->{'cod'}
    or $json_decoded->{'cod'} ne '200' ) {
    my $reason_str = '';
    if (    exists $json_decoded->{'cod'}
        and exists $json_decoded->{'message'} ) {
        $reason_str = " ($json_decoded->{'cod'} $json_decoded->{'message'})";
    } elsif ( exists $json_decoded->{'cod'} ) {
        $reason_str = " ($json_decoded->{'cod'})";
    }
    <[base.log]>->( 1, "query failed$reason_str [$query_url]" );
    return ( $json_decoded->{'cod'}, undef );
}

<[base.log]>->( 2, "query successful" );

return ( 200, $json_decoded );

