# >:]

# name  = base.handler.child_output.simple
# descr = reads output from child process, terminates agent if it dies

<nroot.patterns.agent_output> //= {};

my $event     = shift->w;
my $read_fh   = $event->fd;
my $child     = $event->data;
my $bin       = $child->{'bin'};
my $pid       = $child->{'pid'};
my $whitelist = $child->{'log_whitelist'} || [];
my $xpatterns = $child->{'callback_patterns'} || {};

<child.output_buffer> //= '';
my $read_bytes = <[base.s_read]>->(
    $read_fh, \$data{'child'}{'output_buffer'},
    4096,     length(<child.output_buffer>)
);
if ( not defined $read_bytes or $read_bytes == 0 ) {  # [ filehandle exception ]
    $event->cancel;
    close($read_fh);
    <[base.log]>->( 2, "$bin-child [PID:$pid] output filehandle closed." );
    kill( 9, $pid );                                  # making sure.,
    <[base.log]>->( 0, ": $bin-child terminated." );
    <[base.log]>->( 2, ": : shutting down " . <system.agent.name> . "-agent." );
    $code{<base.child_exit.callback>}->($pid)
        if defined <base.child_exit.callback>
        and defined $code{<base.child_exit.callback>};
    exit(2);
}

while ( <child.output_buffer> =~ s|^([^\n]*)\n||s ) {
    my $output_line = $1;
    $output_line =~ s|\r||sg;
    next if !length($output_line);
    my $log_level = 0;
    for my $pattern ( keys %{$xpatterns} ) {
        if ( $output_line =~ m|($pattern)| ) {
            my $c_name = $xpatterns->{$pattern};
            next if not defined $code{$c_name};
            <[base.log]>->( 2, "calling opc '$c_name'" );
            $code{$c_name}->($1);
        }
    }
    for my $pattern ( @{$whitelist} ) {
        if ( $output_line =~ m|$pattern| ) {
            $log_level = 2;
            last;
        }
    }
    ## [ translating common messages ] ###
    $output_line =~ s{^XIO:.+(unavailable|reset).+server."(\S+)".+}
                     {x-server connection lost [ display $2 ]}xo;
    $output_line =~ s{^.+after.\d+.requests.+remaining\.$}{}xo;
    $output_line =~ s{Gdk-Message:[\s\d\.:]+(.+?):.+
                      (unavailable|reset).+server.(\S+)\.}
                     {'$1' x-server connection lost [ display $3 ]}xo;
    $output_line =~ s{^X .+to.(\S+).broken.+$}
                     {x-server connection lost [ display $1 ]}xo;
    ##
    <[base.log]>->( $log_level, "< $bin > " . $output_line )
        if length $output_line;
}

# ______________________________________________________________________________
#\\HIJMCMPJ6PS32N7SYUZNRD7TGVTYJZVV27WVUBDLSZG2Z43N5OAI2PJFLE3WGMTNXTF37DNOQWIE2
# \\ 3C44QY5DFHO6D7EIU74IKJ4JOXBK3ZTJTK4NACULDOON6MX5YYT2 \\// C25519-BASE-32 //
#  \\// BELQOE5IWCKVKAK3RDYFIRFDUOYHF2IQJWBIEPKTOSKV3DIIQAI \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
