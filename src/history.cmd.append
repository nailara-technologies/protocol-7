# >:]

# name  = history.cmd.append
# param = <log-data>
# descr = write a log message to the addressed log file
# todo  = implement buffered write [ instead of line by line ]

my ($node_agent, $instance_id, $buffer_name,
    $log_time,   $log_level,   $log_message
) = split( / /, shift->{'args'}, 6 );

return {
    'mode' => 'nak',
    'data' =>
        "insufficent parameters in log line [ <buffer> <time> <level> <mesg> ]"
    }
    if not defined $log_message;
return {
    'mode' => 'nak',
    'data' => 'expected <buffer-name> parameter'
    }
    if not defined $buffer_name;
return {
    'mode' => 'nak',
    'data' => 'expected <log-time> param'
    }
    if not defined $log_time;
return {
    'mode' => 'nak',
    'data' => 'expected numeric <log-level> param'
    }
    if $log_level !~ m|^\d+$|;

# note : log_time is accepted in unix or nailara network time, default: ntime!!!

my $default_mode = 'ntime';
<log.timestamp_mode> //= $default_mode;

my $log_file = "$node_agent.$buffer_name";

## input ##

if ( <log.timestamp_mode> !~ /^localtime|ntime|unix/ ) {
    <[base.log]>->(
        0, "invalid timestamp mode '" . <log.timestamp_mode> . "' configured"
    );
    <[base.log]>->( 1, "setting timestamp mode '$default_mode' [fallback]" );
    <log.timestamp_mode> = $default_mode;
} elsif ( $log_time !~ /^(\d{1,17})(\.\d+)?/ ) { # invalid time value -> current
    $log_time = <[base.ntime]>;                  # TODO: deliver warning _once_!
} elsif ( length($1) < 13 ) {                    # unix time input value
    $log_time = <[base.ntime]>->($log_time);
}

## output ##

if ( <log.timestamp_mode> eq 'unix' ) {          # output in unix time

    $log_time = <[base.n2u_time]>->( $log_time, 5 );

} elsif ( <log.timestamp_mode> eq 'localtime' ) {   # human readable time string
    my ( $unix, $secs_fp ) = split( /\./, <[base.n2u_time]>->( $log_time, 5 ) );
    (   $log_time = join( '.',
            <[base.parser.timestamp]>->( 'timestamp', $unix ),
            $secs_fp // 0 )
    ) =~ s' '|';
}

my $write_line = sprintf( "%s %7s %d %s\n",
    $log_time, $instance_id, $log_level, $log_message );

my $msg_len = length($write_line);
my ( $success, $err_msg ) = <[history.add_line]>->( $log_file, \$write_line );

# success
return { 'mode' => 'ack', 'data' => "wrote $msg_len bytes" } if $success;

# error case
<[base.log]>->( 0, $err_msg );
return { 'mode' => 'nak', 'data' => $err_msg };
