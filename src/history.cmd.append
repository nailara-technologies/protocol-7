# >:]

# name  = history.cmd.append
# param = <log-data>
# descr = write a log message to the addressed log file
# todo  = buffered write [ instead of line by line ], cleanup log time handling

my ($node_agent, $instance_id, $buffer_name,
    $log_time,   $log_level,   $log_message
) = split( m| |, $_[0]->{'args'}, 6 );

$log_level //= 0;

my $err_msg;
if ( not defined $log_message ) {
    ( my $line_str = $_[0]->{'args'} ) =~ s|^$node_agent $instance_id ||;
    $err_msg = sprintf( "insufficent parameters [ %s ]", $line_str );
}
$err_msg = 'expected <buffer-name> parameter'
    if not defined $err_msg and not defined $buffer_name;
$err_msg = 'expected <log-time> parameter'
    if not defined $err_msg and not defined $log_time;
$err_msg = 'numerical <log-level> expected'
    if not defined $err_msg and $log_level !~ m|^\-?\d+$|;

if ( defined $err_msg ) {
    my $node_name = <system.node.name>;
    $node_agent =~ s|^$node_name\.||;
    <history.disable_err_log_dump> //= 0; ## <-- suppress err log data on demand
    <[base.log]>->( 0, "\<$instance_id> ['$node_agent'] $err_msg" );
    ## log offending line for debugging ###
    <[base.log]>->(
        1, " < usage >  [ <buffer> <timestamp> <log-level> <mesg> ]"
    );
    <[base.log]>->( 1, "< request > [ '$_[0]->{'args'}' ]" );

    if ( $data{'system'}{'verbosity'}{'console'}
        and !<history.disable_err_log_dump> ) {
        my $show_line = $$call{'args'};
        <[base.parser.ellipse_center]>->( \$show_line, 74 );
        my $s = ' ' x 76;
        printf( " /$s\\ \n > %s < \n \\$s/ \n", $show_line );
        return { 'mode' => 'nak', 'data' => $err_msg };
    }
}

# note : log_time is accepted in unix or nailara network time : ntime == default

my $default_mode = 'ntime-b32';
<log.timestamp_mode> //= $default_mode;

my $log_file = "$node_agent.$buffer_name";

## input ##

if ( <log.timestamp_mode> !~ /^localtime|ntime-b32|ntime-num|unix/ ) {
    <[base.log]>->(
        0, "invalid timestamp mode '" . <log.timestamp_mode> . "' configured"
    );
    <[base.log]>->( 1, "setting timestamp mode '$default_mode' [ fallback ]" );
    <log.timestamp_mode> = $default_mode;
} elsif ( $log_time !~ m|^[A-Z0-9]+$| and $log_time !~ m|^(\d{1,17})(\.\d+)?| )
{    # invalid time value -> setting to current
    $log_time = <[base.ntime]>;    # TODO: deliver warning _once_!
} elsif ( defined $1 and length($1) < 13 ) {    # unix time input value
    $log_time = <[base.ntime]>->($log_time);
}

## output ##

if ( <log.timestamp_mode> eq 'ntime-b32' ) {    # alphanumeric network time

    $log_time = <[base.ntime.b32]>->($log_time) if $log_time !~ m|[A-Z]|;

} elsif ( <log.timestamp_mode> eq 'unix' ) {    # output in unix time

    $log_time = <[base.n2u_time]>->( $log_time, 5 );

} elsif ( <log.timestamp_mode> eq 'localtime' ) {   # human readable time string
    my ( $unix, $secs_fp ) = split( /\./, <[base.n2u_time]>->( $log_time, 5 ) );
    (   $log_time = join( '.',
            <[base.parser.timestamp]>->( 'timestamp', $unix ),
            $secs_fp // 0 )
    ) =~ s' '|';
}

my $write_line = sprintf( "%s %07d %d %s\n",
    $log_time, $instance_id, $log_level, $log_message );

my $msg_len = length($write_line);
my ( $success, $err_msg ) = <[history.add_line]>->( $log_file, \$write_line );

# success
return { 'mode' => 'ack', 'data' => "wrote $msg_len bytes" } if $success;

# error case
<[base.log]>->( 0, $err_msg );
return { 'mode' => 'nak', 'data' => $err_msg };

# ______________________________________________________________________________
#\\HGWP7V4OVQEMSZ22C4ODGM76SOFKQNHOXVJSZTIP3TOFALKBX2UHC6XMR37UECIFGQLJIRWJT5DGA
# \\ SYUGPS6F3CGB2YQIDUHHSI3XY5EL7LYBPR36N7SN22LVWAO2DT2E \\// C25519-BASE-32 //
#  \\// DSIT3LKRI33ESV2GBG7MFFIGDA4CXIZTZ26VVKWTWYT5ED7HODY \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
