# >:]

# name  = mlist.cmd.get_list_types
# param = [type]
# descr = return current playlist items (with types)

my $subname;
my %file_types;
my $reply_string   = '';
my $type_list      = <mlist.file_types>;
my $file_types_str = $$call{'args'} // '';

<[base.log]>->( 2, "* processing playlist request for '$file_types_str'" );

$subname = $1 if $file_types_str =~ s| *\[([^\]]+)\]$||;

map { $file_types{$_} = 1 } split / +/, $file_types_str;

my %b32_index;
my $index = -1;
foreach my $file ( @{<mlist.file_list>} ) {
    $index++;
    next
        if defined $subname
        and exists <mlist.agent_subnames>->{$index}
        and not exists <mlist.agent_subnames>->{$index}->{$subname};

    my $sn_line_str
        = ( exists <mlist.agent_subnames>->{$index}
            and keys %{ <mlist.agent_subnames>->{$index} } )
        ? join( ':',
        [ keys %{ <mlist.agent_subnames>->{$index} } ]->[0], $file )
        : $file;

    my $b32id_str
        = <[digest.crc.b32]>->( ++$b32_index{$sn_line_str}, $sn_line_str );

    if ( defined <mlist.exclusive_b32id> ) {    # 'EXCLUSIVE' playlist event
        ( my $entry_tile ) = ( keys %{ <mlist.agent_subnames>->{$index} } );
        map {
            next
                if $_ eq $entry_tile
                and not grep {/^$b32id_str$/}
                @{ <mlist.exclusive_b32id>->{$_} }
        } keys %{<mlist.exclusive_b32id>};
    }

    next
        if grep {/^$b32id_str$/}
        @{<mlist.hidden_b32id>};                # <- SHOW/HIDE event

    my @url_flags;
    map {
        if ( exists <mlist.url_flags>->{$_}->{$file} ) {
            my $flag_str = $_;
            $flag_str .= '=' . <mlist.url_flags>->{$_}->{$file}
                if $_ eq 'delay';
            push( @url_flags, $flag_str );
        }
        }
        keys %{<mlist.url_flags>};
    my $url_flags_str
        = @url_flags ? '#[' . uc( join( '|', sort @url_flags ) ) . ']#' : '';

    my $type_str = $type_list->{$file};
    foreach my $req_type ( keys %file_types ) {
        $reply_string .= "$type_str $file$url_flags_str\n"
            if !length($req_type)
            or index( $type_str, $req_type ) != -1;
    }

    $reply_string .= "$type_str $file$url_flags_str\n" if !keys(%file_types);
}

return { 'mode' => 'data', 'data' => $reply_string }

# ______________________________________________________________________________
#\\LPQIQWDSYXDV327KHYHYMBOWZFEQQBLRWLQGUTXRVZPTEK76FJRPHR434XUVV4YLSXEWYVQXANJZO
# \\ LTEA7WVVPD73AIMEV57AV4C6Z6FCZNVUAZGURMH6NWYP3N35BJV7 \\// C25519-BASE-32 //
#  \\// DFKUYY23X5PL6ZNQ57UR7RYCWMYDU6LI2HEOLWANOW2VIEQCUCQ \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
