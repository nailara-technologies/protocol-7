# >:]

# name  = calc.cmd.val
# param = ['plain'] <..math-expr..>
# descr = calculate a generic mathematical expression

my $plain_value = 0;
my $expr_str = $$call{'args'} // '';
$plain_value = 1 if $expr_str =~ s|^plain ||;

return { 'mode' => 'nak', 'data' => 'expected mathematical expression' }
    if !length($expr_str);

$expr_str =~ s,([^\d\w\s]+|)?(\-?[\w\d\.]+)([^\d\w\s]+|)?,$1 $2 $3,g;
$expr_str = " $expr_str ";
$expr_str =~ s|  +| |g;

my $formula = Math::Symbolic::parse_from_string($expr_str)
    or return
    return { 'mode' => 'nak', 'data' => "expression not valid [$expr_str]" };

my $value_str = $formula->value;
return { 'mode' => 'nak', 'data' => "calculation not successful [$expr_str]" }
    if not defined $value_str;

### plain value mode ###
return { 'mode' => 'ack', 'data' => $value_str } if $plain_value;

### formatted mode ###
$expr_str =~ s,^ +| +$,,g;
my $result_str = "____ $value_str ___ [ $expr_str ]";
<[base.buffer.add_line]>->( 'history', 0, $result_str );

return { 'mode' => 'data', 'data' => "        $result_str\n\n" };
