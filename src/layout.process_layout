# >:]

# name = layout.process_layout

my $layout_name = shift;
die "expected valid layout name"
    if not defined $layout_name or !length($layout_name);
die "layout $layout_name not found"
    if not exists <layout.config.layouts>->{$layout_name};

<[base.log]>->( 1, "processing layout '$layout_name'.." );

if ( defined <layout.config.ticker_agent_type> ) {
    my $ticker_type = <layout.config.ticker_agent_type>;
    foreach my $layout ( keys %{<layout.config.layouts>} ) {
        my $_layout_data = <layout.config.layouts>->{$layout};
        map {    # ticker-sdl probably won't work anymore until it was updated..
            if ( $_ =~ /^ticker(-sdl|-gtk)?(\[[^\]]+\])?$/ ) {
                my $tile_name = $2 // '';

                my $new_name = "ticker-$ticker_type$tile_name";
                $_layout_data->{$new_name} = delete $_layout_data->{$_}
                    if $new_name ne $_;

                $_layout_data->{$new_name}->{'layer'} //= 100;    # <- on top!
            }
        } keys %{ <layout.config.layouts>->{$layout} };
    }
}

my @remove_agents;
my $previous_data;
my $previous_layout = <layout.previous_layout>;
my $layout_data     = <layout.config.layouts>->{$layout_name};
if ( defined $previous_layout ) {
    if ( $previous_layout eq $layout_name ) {
        <[base.log]>->(
            0,
            "current and previous layout are identical, aborting processing.."
        );
        return 0;
    }
    $previous_data = <layout.config.layouts>->{$previous_layout};
    map { push( @remove_agents, $_ ) if not exists $layout_data->{$_} }
        keys( %{$previous_data} );
}

<layout.transition.status> //= {};

if (<layout.startup.initializing>) {
    my $kill_count = 0;
    foreach my $layout ( keys %{<layout.config.layouts>} ) {
        my $_layout_data = <layout.config.layouts>->{$layout};
        ###
        foreach my $stop_agent ( keys %{ <layout.config.layouts>->{$layout} } )
        {
            <layout.transition.status.agents.stop>->{$stop_agent}
                = $previous_layout // $layout_name;
        }
        ###
        map {
            my $stop_agents
                = exists $_layout_data->{$_}->{'stop_agents'}
                ? join( ' ', $_layout_data->{$_}->{'stop_agents'}, $_ )
                : $_;
            <[base.proto.nailara.command.send.local]>->(
                {   'command'   => 'core.root.stop_implicit',
                    'call_args' => { 'args' => $stop_agents }
                }
            );
            $kill_count++;
        } keys %{ <layout.config.layouts>->{$layout} };
    }
} else {
    map {
        <layout.transition.status.agents.stop>->{$_} = $previous_layout
            // $layout_name;
    } @remove_agents;
}

<layout.coordinates> = {};
<layout.window_ids>  = {};
<layout.subconfig>   = {};
<layout.layers>      = {};

foreach my $agent_name ( keys %{$layout_data} ) {

    <layout.coordinates>->{$agent_name}
        = <[layout.calculate_coordinates]>->( $layout_data->{$agent_name} );

    <layout.layers>->{$agent_name} = $layout_data->{$agent_name}->{'layer'}
        if defined $layout_data->{$agent_name}->{'layer'}
        and $layout_data->{$agent_name}->{'layer'} =~ /^\-?\d+$/;
    <layout.layers>->{$agent_name} //= 0;

    <layout.subconfig>->{$agent_name} = {};
    ( my $name_plain = $agent_name ) =~ s|\[.+$||;
    if ( defined <layout.mapped_subcfg>->{$name_plain} ) {
        my @scfg_keys = split( / +/, <layout.mapped_subcfg>->{$name_plain} );
        foreach my $sc_key (@scfg_keys) {
            <layout.subconfig>->{$agent_name}->{$sc_key}
                = $layout_data->{$agent_name}->{$sc_key}
                if defined $layout_data->{$agent_name}->{$sc_key};
        }
    }

    next
        if !<layout.startup.initializing>
        and defined $previous_layout
        and exists $previous_data->{$agent_name}
        and cmpStr( $previous_data->{$agent_name}, $layout_data->{$agent_name} )
        == 0;    # agent setup identical (not touching running agent)

    <layout.window_ids>->{$agent_name} //= undef;
    <layout.transition.status.agents.start>->{$agent_name} = $layout_name;
}

<layout.startup.initializing> = 0;

<[base.proto.nailara.command.send.local]>
    ->( { 'command' => 'core.playlist.update' } );

<[layout.handler.transition]>;
