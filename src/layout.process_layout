# >:]

# name = layout.process_layout

my $layout_name = shift;
die "expected valid layout name"
    if not defined $layout_name or !length($layout_name);
die "layout $layout_name not found"
    if not exists <layout.config.layouts>->{$layout_name};

<[base.log]>->( 1, "processing layout '$layout_name'.." );

if ( defined <layout.config.ticker_agent_type> ) {
    my $ticker_type = <layout.config.ticker_agent_type>;
    foreach my $layout ( keys %{<layout.config.layouts>} ) {
        my $_layout_data = <layout.config.layouts>->{$layout};
        map {    # ticker-sdl probably won't work anymore until it was updated..
            if ( $_ =~ /^ticker(-sdl|-gtk)?(\[[^\]]+\])?$/ ) {
                my $tile_name = $2 // '';

                my $new_name = "ticker-$ticker_type$tile_name";
                $_layout_data->{$new_name} = delete $_layout_data->{$_}
                    if $new_name ne $_;

                $_layout_data->{$new_name}->{'layer'} //= 100;    # <- on top!
            }
        } keys %{ <layout.config.layouts>->{$layout} };
    }
}

my @remove_agents;
my $previous_data;
my $previous_layout = <layout.previous_layout>;
my $layout_data     = <layout.config.layouts>->{$layout_name};
if ( defined $previous_layout ) {
    if ( $previous_layout eq $layout_name ) {
        <[base.log]>->(
            0,
            "current and previous layout are identical, aborting processing.."
        );
        return 0;
    }
    $previous_data = <layout.config.layouts>->{$previous_layout};
    map { push( @remove_agents, $_ ) if not exists $layout_data->{$_} }
        keys( %{$previous_data} );
}

<layout.transition.status> //= {};

if (<layout.startup.initializing>) {
    my $kill_count = 0;
    foreach my $layout ( keys %{<layout.config.layouts>} ) {
        my $_layout_data = <layout.config.layouts>->{$layout};
        ###
        foreach my $stop_agent ( keys %{ <layout.config.layouts>->{$layout} } )
        {
            <layout.transition.status.agents.stop>->{$stop_agent}
                = $previous_layout // $layout_name;
        }
        ###
        map {
            my $stop_agents
                = exists $_layout_data->{$_}->{'stop_agents'}
                ? join( ' ', $_layout_data->{$_}->{'stop_agents'}, $_ )
                : $_;
            <[base.proto.nailara.command.send.local]>->(
                {   'command'   => 'core.root.stop_implicit',
                    'call_args' => { 'args' => $stop_agents }
                }
            );
            $kill_count++;
        } keys %{ <layout.config.layouts>->{$layout} };
    }
} else {
    map {
        <layout.transition.status.agents.stop>->{$_} = $previous_layout
            // $layout_name;
    } @remove_agents;
}

<layout.window_ids> //= {};
<layout.coordinates> = {};
<layout.subconfig>   = {};
<layout.layers>      = {};
<layout.tiles>       = {};

foreach my $agent_name ( keys %{$layout_data} ) {

    <layout.coordinates>->{$agent_name}
        = <[layout.calculate_coordinates]>->( $layout_data->{$agent_name} );

    <layout.layers>->{$agent_name} = $layout_data->{$agent_name}->{'layer'}
        if defined $layout_data->{$agent_name}->{'layer'}
        and $layout_data->{$agent_name}->{'layer'} =~ /^\-?\d+$/;
    <layout.layers>->{$agent_name} //= 0;

    <layout.subconfig>->{$agent_name} = {};
    ( my $name_plain = $agent_name ) =~ s|\[.+$||;
    if ( defined <layout.mapped_subcfg>->{$name_plain} ) {
        my @scfg_keys = split( / +/, <layout.mapped_subcfg>->{$name_plain} );
        foreach my $sc_key (@scfg_keys) {
            <layout.subconfig>->{$agent_name}->{$sc_key}
                = $layout_data->{$agent_name}->{$sc_key}
                if defined $layout_data->{$agent_name}->{$sc_key};
        }
    }

    next
        if !<layout.startup.initializing>
        and defined $previous_layout
        and exists $previous_data->{$agent_name}
        and cmpStr( $previous_data->{$agent_name}, $layout_data->{$agent_name} )
        == 0;    # agent setup identical (not touching running agent)

    <layout.window_ids>->{$agent_name} //= undef;
    <layout.transition.status.agents.start>->{$agent_name} = $layout_name;
}

map {
    my $tile_name = '';
    my $name_copy = my $agent_name = $_;
    $tile_name = $1 if $agent_name =~ s|\[([^\]]+)\]$||;
    if ( length($tile_name) ) {
        <layout.tiles>->{$tile_name}->{'agent'} = $agent_name;
        my %pos_match;
        my $pos_hint_str     = '';
        my $coords           = <layout.coordinates>->{$name_copy};
        my $border_tolerance = 2;
        if (    $coords->{'left'} <= $border_tolerance
            and $coords->{'top'} <= $border_tolerance
            and $coords->{'right'} >= <x11.screen.width> - $border_tolerance
            and $coords->{'bottom'} >= <x11.screen.height> - $border_tolerance )
        {
            $pos_hint_str = 'fullscreen';
        } else {
            foreach my $border_name ( keys %{$coords} ) {
                my $coord_val = $coords->{$border_name};
                my $h_w       = sprintf( "%.0f", <x11.screen.width> / 2 );
                my $h_h       = sprintf( "%.0f", <x11.screen.height> / 2 );
                $pos_match{$border_name} = 1
                    if ( $border_name eq 'top' and $coord_val < $h_h * 0.8 )
                    or ( $border_name eq 'left'   and $coord_val < $h_w * 0.8 )
                    or ( $border_name eq 'right'  and $coord_val > $h_w * 1.2 )
                    or ( $border_name eq 'bottom' and $coord_val > $h_h * 1.2 );
            }
            if ( scalar keys(%pos_match) == 4 ) {
                %pos_match = ( 'center' => 1 );
            } elsif ( defined $pos_match{'top'}
                and defined $pos_match{'bottom'} ) {
                delete $pos_match{'top'};
                delete $pos_match{'bottom'};
            } elsif ( defined $pos_match{'left'}
                and defined $pos_match{'right'} ) {
                delete $pos_match{'left'};
                delete $pos_match{'right'};
            }
            $pos_hint_str = join( '-', sort( keys(%pos_match) ) );
        }
        <layout.tiles>->{$tile_name}->{'pos_hint'} = $pos_hint_str;
    }
} keys %{ <layout.config.layouts>->{$layout_name} };
<list.tiles> = {
    'var'      => 'data',
    'key'      => 'layout.tiles',
    'mask'     => '<key>:tile_name agent pos_hint',
    'sort_key' => 'pos_hint',
    'descr'    => sprintf( 'configured tiles in layout "%s"', $layout_name )
};

if ( defined <layout.tiles_visible_file> ) {
    <[base.log]>->(
        1, sprintf( ":. writing to '%s'..", <layout.tiles_visible_file> )
    );
    <[file.put]>->(
        <layout.tiles_visible_file>,
        join( ', ', sort keys %{<layout.tiles>} ) . "\n"
    );
}

<layout.startup.initializing> = 0;

<[base.proto.nailara.command.send.local]>
    ->( { 'command' => 'core.playlist.update' } );

<[layout.handler.transition]>;
