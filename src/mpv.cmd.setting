# >:]

# name  = mpv.cmd.setting
# param = <key> [val]
# descr = return or change specified mpv setting
# todo  = understand / deal with quoted strings (containing spaces)

my ( $setting_key, @target_values ) = split( / +/, $$call{'args'} );

my $settings_map = <mpv.map.settings> // {};

return { 'mode' => 'nak', 'data' => "expected <key> [value] parameter" }
    if not defined $setting_key or !length($setting_key);

return { 'mode' => 'nak', 'data' => "unknown setting '$setting_key'" }
    if not defined( my $map_entry = $settings_map->{$setting_key} );

return {
    'mode' => 'nak',
    'data' => "not implemented yet!"
    }
    if !@target_values;

my $mpv_key = $map_entry->{'key'} // $setting_key;
my $val_str = join( ' ', @target_values );

return {
    'mode' => 'nak',
    'data' => "not implemented yet!"
    }
    if not defined $mpv_key;

if ( defined $map_entry->{'int'} ) {
    ( my $int_min, my $int_max, my @options ) = @{ $map_entry->{'int'} };

    my $opt_match = 0;
    map { $opt_match++ if $_ eq $val_str } @options;

    if ( !$opt_match ) {
        my $opt_str
            = @options ? " or " . join( ', ', map {"'$_'"} @options ) : '';
        return {
            'mode' => 'nak',
            'data' => 'expected integer value' . $opt_str
            }
            if @target_values > 1
            or $val_str !~ /^-?\d+$/;
        return {
            'mode' => 'nak',
            'data' => "out of range ( \"$setting_key\" ["
                . join( ',', sort @{ $map_entry->{'int'} } ) . '] )'
            }
            if $val_str < $map_entry->{'int'}->[0]
            or $val_str > $map_entry->{'int'}->[1];
    }

} elsif ( defined $map_entry->{'float'} ) {
    ( my $float_min, my $float_max, my @options ) = @{ $map_entry->{'float'} };

    my $opt_match = 0;
    map { $opt_match++ if $_ eq $val_str } @options;

    if ( !$opt_match ) {
        my $opt_str
            = @options ? " or " . join( ', ', map { "'$_'", @options } ) : '';
        return { 'mode' => 'nak', 'data' => 'expected float value' }
            if @target_values > 1
            or $val_str !~ /^-?\d+(\.\d+)?$/;
        return {
            'mode' => 'nak',
            'data' => "out of range ( \"$setting_key\" ["
                . join( ',', sort @{ $map_entry->{'float'} } ) . '] )'
            }
            if $val_str < $map_entry->{'float'}->[0]
            or $val_str > $map_entry->{'float'}->[1];
    }
}

push( @{<mpv.reply_ids>}, $$call{'reply_id'} );

my $value_str = join( ' ', @target_values );
<mpv.success_reply_str> = "$setting_key = $value_str";

<[base.log]>->( 2, "setting : '$setting_key' = '$value_str'" );

<[mpv.send_command]>->( 'set_property_string', $mpv_key, $value_str );

return { 'mode' => 'later' };
