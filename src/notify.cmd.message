# >:]

# name    = notify.cmd.message
# param   = <message_text>
# args    = $call { args }
# return  = $reply { mode data }
# descr   = displays on-screen notification message

my $txt_param = $$call{'args'} // '';
my $id        = $$call{'session_id'};

return { 'mode' => 'nak', 'data' => 'no message text submitted' }
    if !length($txt_param);

my $title = 'nailara message';

if ( !utf8::is_utf8($txt_param) or !utf8::valid($txt_param) ) {
    utf8::decode($txt_param);
    utf8::downgrade($txt_param);
}

$ENV{'DISPLAY'} = <x11.display>;

$title = $1 if $txt_param =~ s/^(\S+)\s+//;

map { $_ =~ s|\\0||go } ( $title, $txt_param );  # <- prevents msg being cut off

if ( defined $txt_param and $txt_param ne '' ) {
    my $msg_str = <system.verbosity.console> >= 3 ? " ['$txt_param']" : ' ...';
    <[base.log]>->( 2, "[$id] sending notification" . $msg_str );
    if (!system(
            <notify.path.notify_send>,  '-i',
            <notify.path.nailara_icon>, " < $title >",
            "\n$txt_param\n"
        )
    ) {
        return { 'mode' => 'ack', 'data' => 'message sent' };
    } elsif ( $? == -1 ) {
        return { 'mode' => 'nak', 'data' => 'unable to execute: ' . $! };
    } else {
        return {
            'mode' => 'nak',
            'data' => sprintf(
                "notify-send exited with code %d%s",
                ( $? >> 8 ),
                defined $! && length($!) ? " [$!]" : ''
            )
        };
    }
} else {
    return { 'mode' => 'nak', 'data' => 'no message text submitted' };
}

# ______________________________________________________________________________
#\\NBCTUN5HRWW2DQDFB74IRXTYJRTDUPTYZATC724A22KVF3V7CEIRJD3BTDW2EPOB3RHTECPLJMJDA
# \\ W77ARSN7R3CM3TVJYLNK22V3JVYUCTPUW5M6G7AKY2VPIE2MCBMC \\// C25519-BASE-32 //
#  \\// ZDDC6ZNSHIVYSRAICALZTQZRLC6XFA26T5WLFZCOPKMO4JQKGCQ \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
