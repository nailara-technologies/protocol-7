# >:]

# name = mpv.callback.check_parent_dirs

my $check_path = shift;

if ( !-d $check_path ) {
    <[base.log]>->( 0, "check_parent_dirs: path '$check_path' does not exist" );
    return;
}

my @dir_tree;
my @cleanup_dirs;
my $cleaned_total = 0;
check_again:

@dir_tree = reverse sort { length($a) <=> length($b) }
    @{ <[file.all_dirs]>->( $check_path, 'recursive' ) };

@cleanup_dirs = ();
foreach my $check_dir (@dir_tree) {
    opendir( my $dir_fh, $check_dir ) or die "$check_dir: $OS_ERROR";
    my @dir_content = readdir($dir_fh);
    push( @cleanup_dirs, $check_dir ) if scalar(@dir_content) == 2;
    closedir($dir_fh);
}

my $cleanup_count = 0;
map {
    if   ( rmdir($ARG) ) { $cleanup_count++ }
    else                 { warn "rmdir($ARG): $OS_ERROR" }
} @cleanup_dirs;
$cleaned_total += $cleanup_count;
goto check_again if $cleanup_count;

my $ies = $cleaned_total == 1 ? 'y' : 'ies';
<[base.log]>->( 1, "removed $cleaned_total empty director$ies.." )
    if $cleaned_total;

return $cleaned_total;

# ______________________________________________________________________________
#\\R3PMHY6GIZBWHCA3CAX34GBCUSMHJF5QOQ3HDXW5NYF3YYK2N4WU4C5P6ME46J5Z3XLY44AAZ3R2O
# \\ ZMHNWEOFRH63UGTR6CYEJVX7OR6Y2D36QQFZS2QZQDDXLWUGVQ2W \\// C25519-BASE-32 //
#  \\// HFUHH4GE7N54OUE2U7DLULU34WPL53C6VJB5JKC7UU6QOXOVYBY \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
