# >:]

# name  = base.init
# descr = initialize (execute) agent

if ( $_[0] =~ /~$/ ) {
    <[base.log]>->( 0, "<- invalid agent name (backup file!) - aborting." );
    exit(1);
}

$0 = $_[0];

if ( $_[0] =~ /([^\.]+)\.([\w|\.]+)$/ ) {
    ( <system.node.name>, <system.agent.name> ) = ( $1, $2 );
}

<[base.daemonize]> if <system.daemon_mode>;

my $success = 1;
if ( <system.startup_initcode> and @{<startup.init_code>} ) {
    $success = <[base.execute_agent_code]>
        ->( <[base.parser.config]>->(<startup.init_code>) );
    delete <startup.init_code>;    # clean up! (could contain auth key strings)
    delete $data{'startup'} if !keys( %{ $data{'startup'} } );
}

if ( !$success or $@ ) {
    <[base.log]>->( 0, "WARNING: startup init code contained errors!" );
    undef $@;
}

my $agent_cfg_path = <[base.get_path.agent_cfg]>->(<system.agent.name>);

if ( !-e "<system.conf_path>/$agent_cfg_path" ) {
    my $agent_name = <system.agent.name>;
    local <system.agent.name> = 'error';    # <- changed agent name to 'error'
    return <[log.error]>->("<<!>> no such agent ('$agent_name') <<!>>");
}

<system.path.rel.cur_agent_cfg> = $agent_cfg_path;

<base.config_parser.cfg_type> = 'start_cfg';
<base.config_parser.cfg_name> = 'agent';

# note: 'load_config_file' will not return for agents invoking the event loop!!!
<[base.load_config_file]>->($agent_cfg_path)
    or <[log.error]>->("startup of agent '<system.agent.name>' not successful");
