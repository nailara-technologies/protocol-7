# >:]

# name  = mpv.handler.stdout
# descr = reads and processes stdout output from mpv process

my $event     = shift->w;
my $read_fh   = $event->fd;
my $process   = $event->data;
my $pid       = $process->{'pid'};
my $whitelist = $process->{'log_whitelist'} || [];

<mpv.output.buffer>     //= '';
<mpv.output.parse_mode> //= '';
<mpv.output.reply_data> //= [];

my $read_bytes = <[base.s_read]>->(
    $read_fh, \$data{'mpv'}{'output.buffer'},
    4096,     length(<mpv.output.buffer>)
);
if ( not defined $read_bytes or $read_bytes == 0 ) {  # ( filehandle exception )
    $event->cancel;
    close($read_fh);
    <[base.log]>->( 1, "mpv-process [PID:$pid] output filehandle closed." );
    kill( 9, $pid );    # making sure it's really gone
    <[base.log]>->( 0, "mpv-process terminated." )
        if !<agent.shutdown>;
    <[base.log]>->( 1, "shutting down " . <system.agent.name> . "-agent..," );
    exit(2);
}

while ( <mpv.output.buffer> =~ s|^([^\n]*)\n||s ) {
    my $log_level   = 0;
    my $output_line = $1;
    $output_line =~ s/\r//sg;
    next if !length($output_line);
    for my $pattern ( @{$whitelist} ) {
        if ( $output_line =~ /$pattern/ ) {
            $log_level = 2;
            last;
        }
    }
    <[base.log]>->( $log_level, "< mpv > " . $output_line );
}

# ______________________________________________________________________________
#\\YKSFSFUNCNTIGAQYEOUMN5MIFYD32P242ZPJFULR5Z4FE5RXCEK7IKTBKO5TNRJTHOOYHPZJ2E7AO
# \\ 27S2OUKRIWWYM5ZM6MD3MA3XB2SUISDVIFWQXVMXXQ67H3SPNGW6 \\// C25519-BASE-32 //
#  \\// HSCT6N2R5FVN3KXU2BYKHV733LC2HRDGQL3QO2KGUZR6RIVJKCI \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
