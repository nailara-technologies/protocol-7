# >:]

# name  = composition.cmd.get_subconfig
# param = <agent[+tile]_name>
# descr = return 'subconfig' for agent or tile name

return { 'mode' => 'nak', 'data' => "expected syntax is 'agent[subname]'" }
    if not defined $$call{'args'}
    or $$call{'args'} !~ /^(\S+)( +(\S+))?$/;

my ( $source_agent, $agent_name ) = ( $1, $3 );
$source_agent =~ s|^.+\.||g;
$agent_name = $source_agent if not defined $agent_name;

if ( not exists <composition.subconfig>->{$agent_name} ) {
    my $last_match;
    my $match   = 0;
    my $msg_str = "no set-up for agent '$agent_name'";
    if ( $agent_name !~ /[\[\]]+/ ) {
        map {
            if ( $_ =~ /^([^\[]+)\[/ and $1 eq $agent_name ) {
                $last_match = $_;
                $match++;
            }
        } keys %{<composition.subconfig>};
    }
    $msg_str
        = "multiple '$agent_name' instances defined, agent subname required."
        if $match > 1;
    return {
        'mode' => 'nak',
        'data' => $msg_str
        }
        if $match != 1;
    $agent_name = $last_match;
}

my $max_len = 0;
map { $max_len = length($_) if length($_) > $max_len }
    keys %{ <composition.subconfig>->{$agent_name} };

return {
    'mode' => 'data',
    'data' => join(
        '',
        map {
            sprintf( "%-${max_len}s = %s\n",
                $_, <composition.subconfig>->{$agent_name}->{$_} )
            }
            sort keys %{ <composition.subconfig>->{$agent_name} }
    )
    }

# ______________________________________________________________________________
#\\EHEWHE5ABOGPCLMDDAP5MSNS7C3UYLJJCRWII4ZVW7TYLRCD3SJCGUEQUIS3GNVCS5W6NJN3TAGOQ
# \\ QEARV3QBH66STHOVMHNGJC5N57QFJCSP7EDYXUSGBJCQMD5FTGGP \\// C25519-BASE-32 //
#  \\// G3F26WYYFF6SWCIEV7ODUJLCFHKZTPQI4K3HK3PRL5TJN5NHMAI \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
