# >:]

# name = httpd.download_init

my $id;
my $params;
my $file_path;
if ( ref( $_[0] ) eq 'HASH' ) {
    $params    = shift;
    $id        = $params->{'sid'};
    $file_path = $params->{'path'};
} else {
    $id        = shift;
    $file_path = shift;
}

my $session   = $data{'session'}{$id};
my $response  = $session->{'response'};
my $request   = $session->{'http'}->{'request'};
my $client_fh = $session->{'handle'};

my $header = $params->{'header'};

$file_path = readlink($file_path) if -l $file_path and -f $file_path;    ##

my $file_stat    = File::stat::stat($file_path);
my $content_size = $header->{'Content-Length'} // $file_stat->size;
my $content_type = $header->{'Content-Type'} // mimetype($file_path);

my $content_fh;
if ( not open( $content_fh, '< :raw', $file_path ) ) {
    warn "<!> $file_path: $!";    # LLL: improve error handling..,
    <[httpd.send_error_page]>->( $id, 500 );
    return 2;
}

my $status_code = 200;    ## <-- regular transfer [ full file as one ] ##

my @ranges;
my $boundary;
if ( exists $request->{'range'} ) {
    my $file_size = $content_size;
    $status_code  = 206;
    $content_size = 0;
    @ranges       = @{ $request->{'range'} };
    map {
        $content_size += $_->{'part_size'}
            = 1 + ( $_->{'end'} - $_->{'start'} );
    } @ranges;
    my $end   = $ranges[0]->{'end'};
    my $start = $ranges[0]->{'start'};
    sysseek( $content_fh, $ranges[0]->{'start'}, 0 ) if $start > 0;

    if ( @ranges == 1 ) {    ## byteranges ##
        $header->{'Content-Range'}  = "bytes $start-$end/$file_size";
        $header->{'Content-Length'} = $content_size = $ranges[0]->{'part_size'};

    } else {                 ## multipart byteranges ##

        my $h_str = join( '|', map { $_, $header->{$_} } sort keys %{$header} );
        $boundary = <[digest.bmw.L13_str]>->($h_str);
        $header->{'Content-Type'} = "multipart/byteranges; boundary=$boundary";

        my $part_id = 0;
        map {
            $end   = $ranges[$part_id]->{'end'};
            $start = $ranges[$part_id]->{'start'};
            my $part_header = $part_id++ ? "\n" : '';
            $part_header .= "--$boundary\nContent-Type: $content_type\n"
                . "Content-Range: bytes $start-$end/$file_size\n\n";
            $_->{'part_header'} = $part_header;
            $_->{'part_size'}   = 1 + ( $end - $start );
            $content_size += length($part_header);
        } @ranges;

        $header->{'Content-Length'} = $content_size += 6 + length($boundary);
    }
}

<[base.log]>->(
    1, "[$id] initializing transfer of $content_size bytes [$content_type]"
);

if ( $session->{'http'}->{'close'} ) {
    $session->{'watcher'}->{'input_handler'}->cancel; ## no more input expected.
} else {
    $session->{'watcher'}->{'input_handler'}->timeout(undef);
}

$session->{'buffer'}->{'output'}
    .= <[httpd.new_header]>->( $status_code, $header );

my $total_bytes_remaining = $content_size;

if ( @ranges > 1 ) {    ## <-- multipart byteranges ##
    my $first_part_header = $ranges[0]->{'part_header'};
    $session->{'buffer'}->{'output'} .= $first_part_header;
    $total_bytes_remaining -= length($first_part_header);
}

$session->{'download'} = {
    'ranges'                => \@ranges,
    'part_id'               => 0,
    'part_pos'              => 0,
    'part_count'            => scalar @ranges,
    'content_fh'            => $content_fh,
    'total_bytes_remaining' => $total_bytes_remaining,
};

if ( defined $boundary ) {    ## <-- byteranges request ##
    $session->{'download'}->{'c-type'}   = $content_type;
    $session->{'download'}->{'boundary'} = $boundary;
}

<[httpd.update_download_count]>;

$session->{'watcher'}->{'download_handler'} = <[event.add_io]>->(
    {   'fd'         => $client_fh,
        'handler'    => 'httpd.handler.download_transfer',
        'poll'       => 'w',
        'prio'       => 4,
        'timeout'    => <httpd.timeout> * 3,
        'timeout_cb' => sub {
            <[base.log]>->( 1, "[$id] file download timed out.," );
            $data{'session'}{$id}{'shutdown'} = 1;
        },
        'data' => { 'id' => $id }
    }
);

$session->{'watcher'}->{'download_handler'}->now;

return 0;

# ______________________________________________________________________________
#\\AF7J56KO6BGJQDE2DDKSAKNUAT3QDG6YQGRIANO5UBCSUTAKE3XQ7GXIALGYIOEUPV3DETKAMKLYQ
# \\ V54TGQLUGK77ROPZQIF5J7A2LTE6BLYAGPS22YV5RGOKVB4FM4DC \\// C25519-BASE-32 //
#  \\// MWB6N6WA52TZT2SG3VTBVNMMG62BMC66DPPHX5K26AVW7I34ODY \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
