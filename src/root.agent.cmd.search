# >:]

# name  = root.agent.cmd.search
# param = <pattern>
# descr = search agent names and short descriptions

my $search_pattern = $$call{'args'} // '';
my @matching_agents;

return { 'mode' => 'nack', 'data' => 'expected search pattern' }
    if !length($search_pattern);

foreach my $agent_name ( keys %{<root.agents.available>} ) {
    push( @matching_agents, $agent_name )
        if $agent_name =~ /\Q$search_pattern\E/i
        or <root.agents.available>->{$agent_name}->{'short_desc'}
        =~ /\Q$search_pattern\E/i;
}

return {
    'mode' => 'nack',
    'data' => 'no matches ( see \'root.list available\' for a complete list )'
    }
    if !@matching_agents;

my $reply_str;
my $max_cmd_len = 0;
map { $max_cmd_len = length($_) if length($_) > $max_cmd_len } @matching_agents;

foreach my $agent_name ( sort @matching_agents ) {
    $reply_str .= sprintf( "  %-${max_cmd_len}s   #  %s\n",
        $agent_name, <root.agents.available>->{$agent_name}->{'short_desc'} );
}

return { 'mode' => 'raw', 'data' => $reply_str }
