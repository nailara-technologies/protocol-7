# >:]

# name  = io.unix.socket.input.open

my $socket_path  = shift;
my $socket_umask = shift;

<[base.start.unlink_child]>;

undef <unix.socket_paths> if ref(<unix.socket_paths>) ne 'ARRAY';
<unix.socket_paths> //= [];

$socket_umask //= 0777;

my $uaddr = sockaddr_un($socket_path);
my $proto = getprotobyname('tcp');

unlink( my $tmp_spath = "$socket_path.NEW" );
my $unix_sock = IO::Socket::UNIX->new(
    Type   => SOCK_STREAM(),
    Local  => $tmp_spath,
    Listen => SOMAXCONN(),
) || die "io.unix.socket.input.open: socket: $!";

rename( $tmp_spath, $socket_path )
    or die "io.unix.socket.input.open: rename: $!";

push( @{<unix.socket_paths>}, $socket_path );
chmod( $socket_umask, $socket_path )
    or die "io.unix.socket.input.open: chmod: $!";

<[base.log]>->( 1, "UNX server launched [unix:$socket_path]" );

if ( defined $data{'handle'}{$unix_sock} ) {
    <[base.log]>->(
        0,
        "io.unix.socket.input.open: handle '$unix_sock' "
            . "was not cleaned up, doing now .."
    );
    delete $data{'handle'}{$unix_sock};
}

$data{'handle'}{$unix_sock}{'mode'} = 'input';
$data{'handle'}{$unix_sock}{'link'} = 'unix';

return $unix_sock;

# ______________________________________________________________________________
#\\SJWE43DWLE7MH7KFENNSNHUALGDW572OKFGYIRCA4ADHUUE5OTVWZQMEIQ4CJW6B5ZOT66XXKM3H2
# \\ PSTIZ27HFYB3HQ5UVAAO5E62VWY4KVTHXBY4FMRHY2PPTFPO6OQL \\// C25519-BASE-32 //
#  \\// CF7XXWAP3B3CDLWJKOVDLNMN7NA2H5JLA5YV5O6KKYVJ4B7YMCA \\ CODE SIGNATURE \\
#   ````````````````````````````````````````````````````````````````````````````
