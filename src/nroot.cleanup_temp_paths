# >:]

# name  = nroot.cleanup_temp_paths

( my $process_id, my $instance_id ) = @_;

return warn "process_id not defined <{C1}>" if not defined $process_id;

$instance_id //= <nroot.process.instance_cache>->{$process_id};   # <-- cached.,

return warn "instance_id not defined <{C1}>" if not defined $instance_id;
my $instance = <nroot.agent.instance>->{$instance_id};
return warn "instance $instance_id is gome" if not defined $instance;
return
    <[base.log]>->( 1, "no temp-paths to clean up for instance $instance_id" )
    if not defined $instance->{'temp-path'}
    or !@{ $instance->{'temp-path'} };

<[base.perlmod.autoload]>->( 'File::Path', qw|remove_tree| )
    if not defined &{'remove_tree'};

<[base.log]>->(
    1, "cleaning up temp paths for instance $instance_id [pid:$process_id]"
);

my $stat_uid = delete $instance->{'stat_uid'};
my $stat_gid = delete $instance->{'stat_gid'};

while ( my $clean_path = shift @{ $instance->{'temp-path'} } ) {
    if ( length($clean_path) > 1 and -e $clean_path ) {
        my $stat_ref = File::stat::stat($clean_path);
        if (   $stat_ref->cando( S_IWUSR(), $stat_uid )
            or $stat_ref->cando( S_IWGRP(), $stat_gid ) ) {
            my $d_str = -d $clean_path ? ' dir' : '';
            <[base.log]>->( 1, ": . removing$d_str path '$clean_path'.," );
            eval { remove_tree($clean_path) };
            $@ = 'still exists' if not $@ and -e $clean_path;
            warn "<remove_path> $clean_path [ $@ ]" if length( $@ // '' );
        }
    }
}

delete $instance->{'temp-path'};
